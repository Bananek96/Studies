
Lab01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007140  08007140  00008140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007268  08007268  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007268  08007268  00008268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007270  08007270  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007270  08007270  00008270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007274  08007274  00008274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007278  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c04  2000006c  080072e4  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c70  080072e4  00009c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d8d  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c7  00000000  00000000  00022e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  000267f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c8  00000000  00000000  00027d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000482c  00000000  00000000  00028e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187f4  00000000  00000000  0002d68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd7b0  00000000  00000000  00045e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c8  00000000  00000000  00123674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0012993c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007128 	.word	0x08007128

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007128 	.word	0x08007128

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	ITM_SendChar(chr);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffd1 	bl	80005dc <ITM_SendChar>
	return 1;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fc10 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f842 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 f8d8 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f8ac 	bl	80007b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("osKernelInitialize()\n");
 8000658:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <main+0x64>)
 800065a:	f005 fe97 	bl	800638c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800065e:	f002 fafd 	bl	8002c5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000662:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <main+0x68>)
 8000664:	2100      	movs	r1, #0
 8000666:	4812      	ldr	r0, [pc, #72]	@ (80006b0 <main+0x6c>)
 8000668:	f002 fb42 	bl	8002cf0 <osThreadNew>
 800066c:	4603      	mov	r3, r0
 800066e:	4a11      	ldr	r2, [pc, #68]	@ (80006b4 <main+0x70>)
 8000670:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000672:	4a11      	ldr	r2, [pc, #68]	@ (80006b8 <main+0x74>)
 8000674:	2100      	movs	r1, #0
 8000676:	4811      	ldr	r0, [pc, #68]	@ (80006bc <main+0x78>)
 8000678:	f002 fb3a 	bl	8002cf0 <osThreadNew>
 800067c:	4603      	mov	r3, r0
 800067e:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <main+0x7c>)
 8000680:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000682:	4a10      	ldr	r2, [pc, #64]	@ (80006c4 <main+0x80>)
 8000684:	2100      	movs	r1, #0
 8000686:	4810      	ldr	r0, [pc, #64]	@ (80006c8 <main+0x84>)
 8000688:	f002 fb32 	bl	8002cf0 <osThreadNew>
 800068c:	4603      	mov	r3, r0
 800068e:	4a0f      	ldr	r2, [pc, #60]	@ (80006cc <main+0x88>)
 8000690:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  myEventFlags = osEventFlagsNew(NULL);
 8000692:	2000      	movs	r0, #0
 8000694:	f002 fc4b 	bl	8002f2e <osEventFlagsNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <main+0x8c>)
 800069c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f002 fb01 	bl	8002ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0x5e>
 80006a6:	bf00      	nop
 80006a8:	08007158 	.word	0x08007158
 80006ac:	080071b0 	.word	0x080071b0
 80006b0:	08000959 	.word	0x08000959
 80006b4:	200000dc 	.word	0x200000dc
 80006b8:	080071d4 	.word	0x080071d4
 80006bc:	080009a9 	.word	0x080009a9
 80006c0:	200000e0 	.word	0x200000e0
 80006c4:	080071f8 	.word	0x080071f8
 80006c8:	080009e5 	.word	0x080009e5
 80006cc:	200000e4 	.word	0x200000e4
 80006d0:	200000e8 	.word	0x200000e8

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2234      	movs	r2, #52	@ 0x34
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 ff32 	bl	800654c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <SystemClock_Config+0xd4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a29      	ldr	r2, [pc, #164]	@ (80007a8 <SystemClock_Config+0xd4>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <SystemClock_Config+0xd4>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <SystemClock_Config+0xd8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000720:	4a22      	ldr	r2, [pc, #136]	@ (80007ac <SystemClock_Config+0xd8>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <SystemClock_Config+0xd8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000748:	2310      	movs	r3, #16
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800074c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000750:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000752:	2304      	movs	r3, #4
 8000754:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fa32 	bl	8001bcc <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800076e:	f000 f971 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fea0 	bl	80014d4 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800079a:	f000 f95b 	bl	8000a54 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f001 ff30 	bl	800264c <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f92f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000094 	.word	0x20000094
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a30      	ldr	r2, [pc, #192]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b2a      	ldr	r3, [pc, #168]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a29      	ldr	r2, [pc, #164]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a22      	ldr	r2, [pc, #136]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a1b      	ldr	r2, [pc, #108]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_GPIO_Init+0xe0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	4816      	ldr	r0, [pc, #88]	@ (80008e8 <MX_GPIO_Init+0xe4>)
 8000890:	f000 fdc8 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4810      	ldr	r0, [pc, #64]	@ (80008ec <MX_GPIO_Init+0xe8>)
 80008ac:	f000 fc26 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <MX_GPIO_Init+0xe4>)
 80008c8:	f000 fc18 	bl	80010fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2105      	movs	r1, #5
 80008d0:	2028      	movs	r0, #40	@ 0x28
 80008d2:	f000 fbe9 	bl	80010a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d6:	2028      	movs	r0, #40	@ 0x28
 80008d8:	f000 fc02 	bl	80010e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	@ 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800

080008f0 <reportStatus>:

/* USER CODE BEGIN 4 */
void reportStatus()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	Task01State = osThreadGetState(Task01Handle);
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <reportStatus+0x4c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fa97 	bl	8002e2c <osThreadGetState>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a0f      	ldr	r2, [pc, #60]	@ (8000940 <reportStatus+0x50>)
 8000902:	6013      	str	r3, [r2, #0]
	Task02State = osThreadGetState(Task02Handle);
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <reportStatus+0x54>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fa8f 	bl	8002e2c <osThreadGetState>
 800090e:	4603      	mov	r3, r0
 8000910:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <reportStatus+0x58>)
 8000912:	6013      	str	r3, [r2, #0]
	Task03State = osThreadGetState(Task03Handle);
 8000914:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <reportStatus+0x5c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fa87 	bl	8002e2c <osThreadGetState>
 800091e:	4603      	mov	r3, r0
 8000920:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <reportStatus+0x60>)
 8000922:	6013      	str	r3, [r2, #0]
	printf("Tasks states: 01->%d, 02->%d, 03->%d\n", Task01State, Task02State, Task03State);
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <reportStatus+0x50>)
 8000926:	6819      	ldr	r1, [r3, #0]
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <reportStatus+0x58>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <reportStatus+0x60>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4808      	ldr	r0, [pc, #32]	@ (8000954 <reportStatus+0x64>)
 8000932:	f005 fcc3 	bl	80062bc <iprintf>

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000dc 	.word	0x200000dc
 8000940:	20000088 	.word	0x20000088
 8000944:	200000e0 	.word	0x200000e0
 8000948:	2000008c 	.word	0x2000008c
 800094c:	200000e4 	.word	0x200000e4
 8000950:	20000090 	.word	0x20000090
 8000954:	08007170 	.word	0x08007170

08000958 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
	{
		reportStatus();
 8000960:	f7ff ffc6 	bl	80008f0 <reportStatus>
		osEventFlagsWait(myEventFlags, 0x1, osFlagsWaitAll, osWaitForever);
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <StartTask01+0x48>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	2201      	movs	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	f002 fb5e 	bl	8003030 <osEventFlagsWait>
		for(int i = 0; i<10; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e009      	b.n	800098e <StartTask01+0x36>
		{
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800097a:	2120      	movs	r1, #32
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <StartTask01+0x4c>)
 800097e:	f000 fd6a 	bl	8001456 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8000982:	2032      	movs	r0, #50	@ 0x32
 8000984:	f000 fab4 	bl	8000ef0 <HAL_Delay>
		for(int i = 0; i<10; i++)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3301      	adds	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b09      	cmp	r3, #9
 8000992:	ddf2      	ble.n	800097a <StartTask01+0x22>
		}
		osDelay(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000998:	f002 faae 	bl	8002ef8 <osDelay>
		reportStatus();
 800099c:	e7e0      	b.n	8000960 <StartTask01+0x8>
 800099e:	bf00      	nop
 80009a0:	200000e8 	.word	0x200000e8
 80009a4:	40020000 	.word	0x40020000

080009a8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
	{
	  reportStatus();
 80009b0:	f7ff ff9e 	bl	80008f0 <reportStatus>
	  for(int i = 0; i<5; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e009      	b.n	80009ce <StartTask02+0x26>
		{
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009ba:	2120      	movs	r1, #32
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <StartTask02+0x38>)
 80009be:	f000 fd4a 	bl	8001456 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 80009c2:	2032      	movs	r0, #50	@ 0x32
 80009c4:	f000 fa94 	bl	8000ef0 <HAL_Delay>
	  for(int i = 0; i<5; i++)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3301      	adds	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	ddf2      	ble.n	80009ba <StartTask02+0x12>
		}
		osDelay(300);
 80009d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80009d8:	f002 fa8e 	bl	8002ef8 <osDelay>
	  reportStatus();
 80009dc:	e7e8      	b.n	80009b0 <StartTask02+0x8>
 80009de:	bf00      	nop
 80009e0:	40020000 	.word	0x40020000

080009e4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  osThreadSetPriority(osThreadGetId(), osPriorityNormal);
 80009ec:	f002 fa12 	bl	8002e14 <osThreadGetId>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2118      	movs	r1, #24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fa55 	bl	8002ea4 <osThreadSetPriority>
  /* Infinite loop */
  for(;;)
  {
	  reportStatus();
 80009fa:	f7ff ff79 	bl	80008f0 <reportStatus>
	  for(int i = 0; i < 5; i++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e00a      	b.n	8000a1a <StartTask03+0x36>
	  {
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2120      	movs	r1, #32
 8000a08:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <StartTask03+0x48>)
 8000a0a:	f000 fd0b 	bl	8001424 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8000a0e:	20fa      	movs	r0, #250	@ 0xfa
 8000a10:	f000 fa6e 	bl	8000ef0 <HAL_Delay>
	  for(int i = 0; i < 5; i++)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	ddf1      	ble.n	8000a04 <StartTask03+0x20>
	  }
      osDelay(300);
 8000a20:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a24:	f002 fa68 	bl	8002ef8 <osDelay>
	  reportStatus();
 8000a28:	e7e7      	b.n	80009fa <StartTask03+0x16>
 8000a2a:	bf00      	nop
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a42:	f000 fa35 	bl	8000eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40000c00 	.word	0x40000c00

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x8>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	f06f 0001 	mvn.w	r0, #1
 8000aa6:	f000 faff 	bl	80010a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <HAL_UART_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12b      	bne.n	8000b32 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <HAL_UART_MspInit+0x8c>)
 8000b2e:	f000 fae5 	bl	80010fc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b68:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fdc2 	bl	8001708 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8e:	f000 fd93 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 8000b92:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b96:	f000 fd8f 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <HAL_InitTick+0xe8>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	0c9b      	lsrs	r3, r3, #18
 8000baa:	3b01      	subs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <HAL_InitTick+0xf0>)
 8000bb2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bba:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000bd4:	4817      	ldr	r0, [pc, #92]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bd6:	f001 fa97 	bl	8002108 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11b      	bne.n	8000c20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000be8:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bea:	f001 fae7 	bl	80021bc <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bfc:	2032      	movs	r0, #50	@ 0x32
 8000bfe:	f000 fa6f 	bl	80010e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d808      	bhi.n	8000c1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2032      	movs	r0, #50	@ 0x32
 8000c0e:	f000 fa4b 	bl	80010a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_InitTick+0xf4>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e002      	b.n	8000c20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3738      	adds	r7, #56	@ 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	200000ec 	.word	0x200000ec
 8000c38:	40000c00 	.word	0x40000c00
 8000c3c:	20000004 	.word	0x20000004

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  osEventFlagsSet(myEventFlags, 0x1);
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <EXTI15_10_IRQHandler+0x1c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2101      	movs	r1, #1
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f992 	bl	8002fac <osEventFlagsSet>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000c88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c8c:	f000 fbfe 	bl	800148c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000e8 	.word	0x200000e8

08000c98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <TIM5_IRQHandler+0x10>)
 8000c9e:	f001 fafd 	bl	800229c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000ec 	.word	0x200000ec

08000cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
  }

  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fc92 	bl	800062a <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
  }
  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f005 fc74 	bl	80066a4 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	20000134 	.word	0x20000134
 8000df0:	20004c70 	.word	0x20004c70

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e1c:	f7ff ffea 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f005 fc33 	bl	80066b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fbfb 	bl	8000644 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e5c:	08007278 	.word	0x08007278
  ldr r2, =_sbss
 8000e60:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e64:	20004c70 	.word	0x20004c70

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f8fc 	bl	8001092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f7ff fe54 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fdde 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000138 	.word	0x20000138

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	@ (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000138 	.word	0x20000138

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008

08000f38 <__NVIC_SetPriorityGrouping>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	@ (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	@ (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	@ 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	@ 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff4c 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ba:	f7ff ff61 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff ffb1 	bl	800102c <NVIC_EncodePriority>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff80 	bl	8000fd8 <__NVIC_SetPriority>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff54 	bl	8000f9c <__NVIC_EnableIRQ>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	@ 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e165      	b.n	80013e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8154 	bne.w	80013de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d005      	beq.n	800114e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	2b02      	cmp	r3, #2
 800114c:	d130      	bne.n	80011b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 0201 	and.w	r2, r3, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d017      	beq.n	80011ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80ae 	beq.w	80013de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b5d      	ldr	r3, [pc, #372]	@ (80013fc <HAL_GPIO_Init+0x300>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	4a5c      	ldr	r2, [pc, #368]	@ (80013fc <HAL_GPIO_Init+0x300>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001290:	6453      	str	r3, [r2, #68]	@ 0x44
 8001292:	4b5a      	ldr	r3, [pc, #360]	@ (80013fc <HAL_GPIO_Init+0x300>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129e:	4a58      	ldr	r2, [pc, #352]	@ (8001400 <HAL_GPIO_Init+0x304>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001404 <HAL_GPIO_Init+0x308>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x21a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001408 <HAL_GPIO_Init+0x30c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x216>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4d      	ldr	r2, [pc, #308]	@ (800140c <HAL_GPIO_Init+0x310>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x212>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001410 <HAL_GPIO_Init+0x314>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x20e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001414 <HAL_GPIO_Init+0x318>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x20a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001418 <HAL_GPIO_Init+0x31c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x206>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a49      	ldr	r2, [pc, #292]	@ (800141c <HAL_GPIO_Init+0x320>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x202>
 80012fa:	2306      	movs	r3, #6
 80012fc:	e00c      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 80012fe:	2307      	movs	r3, #7
 8001300:	e00a      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 8001302:	2305      	movs	r3, #5
 8001304:	e008      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 8001306:	2304      	movs	r3, #4
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 800130a:	2303      	movs	r3, #3
 800130c:	e004      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 800130e:	2302      	movs	r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 8001316:	2300      	movs	r3, #0
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	f002 0203 	and.w	r2, r2, #3
 800131e:	0092      	lsls	r2, r2, #2
 8001320:	4093      	lsls	r3, r2
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001328:	4935      	ldr	r1, [pc, #212]	@ (8001400 <HAL_GPIO_Init+0x304>)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001336:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <HAL_GPIO_Init+0x324>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <HAL_GPIO_Init+0x324>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001360:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <HAL_GPIO_Init+0x324>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001384:	4a26      	ldr	r2, [pc, #152]	@ (8001420 <HAL_GPIO_Init+0x324>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <HAL_GPIO_Init+0x324>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <HAL_GPIO_Init+0x324>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <HAL_GPIO_Init+0x324>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d8:	4a11      	ldr	r2, [pc, #68]	@ (8001420 <HAL_GPIO_Init+0x324>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	f67f ae96 	bls.w	8001118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3724      	adds	r7, #36	@ 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40013800 	.word	0x40013800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021000 	.word	0x40021000
 8001418:	40021400 	.word	0x40021400
 800141c:	40021800 	.word	0x40021800
 8001420:	40013c00 	.word	0x40013c00

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001440:	e003      	b.n	800144a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	041a      	lsls	r2, r3, #16
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001468:	887a      	ldrh	r2, [r7, #2]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	041a      	lsls	r2, r3, #16
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43d9      	mvns	r1, r3
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	400b      	ands	r3, r1
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f806 	bl	80014bc <HAL_GPIO_EXTI_Callback>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0cc      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e8:	4b68      	ldr	r3, [pc, #416]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d90c      	bls.n	8001510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b65      	ldr	r3, [pc, #404]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b63      	ldr	r3, [pc, #396]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0b8      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001528:	4b59      	ldr	r3, [pc, #356]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4a58      	ldr	r2, [pc, #352]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001540:	4b53      	ldr	r3, [pc, #332]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800154a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b50      	ldr	r3, [pc, #320]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	494d      	ldr	r1, [pc, #308]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d044      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d119      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e07f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d003      	beq.n	8001592 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	2b03      	cmp	r3, #3
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4b3f      	ldr	r3, [pc, #252]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e06f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e067      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b2:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 0203 	bic.w	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4934      	ldr	r1, [pc, #208]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c4:	f7ff fc88 	bl	8000ed8 <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015cc:	f7ff fc84 	bl	8000ed8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e04f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 020c 	and.w	r2, r3, #12
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1eb      	bne.n	80015cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f4:	4b25      	ldr	r3, [pc, #148]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d20c      	bcs.n	800161c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e032      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4916      	ldr	r1, [pc, #88]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	490e      	ldr	r1, [pc, #56]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800165a:	f000 f887 	bl	800176c <HAL_RCC_GetSysClockFreq>
 800165e:	4602      	mov	r2, r0
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	490a      	ldr	r1, [pc, #40]	@ (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	5ccb      	ldrb	r3, [r1, r3]
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fa64 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00
 8001690:	40023800 	.word	0x40023800
 8001694:	0800721c 	.word	0x0800721c
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000000 	.word	0x20000000

080016b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016bc:	f7ff fff0 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	0a9b      	lsrs	r3, r3, #10
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	4903      	ldr	r1, [pc, #12]	@ (80016dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	0800722c 	.word	0x0800722c

080016e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e4:	f7ff ffdc 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	0b5b      	lsrs	r3, r3, #13
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	4903      	ldr	r1, [pc, #12]	@ (8001704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	0800722c 	.word	0x0800722c

08001708 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	220f      	movs	r2, #15
 8001716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <HAL_RCC_GetClockConfig+0x5c>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <HAL_RCC_GetClockConfig+0x5c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <HAL_RCC_GetClockConfig+0x5c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_RCC_GetClockConfig+0x5c>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <HAL_RCC_GetClockConfig+0x60>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 020f 	and.w	r2, r3, #15
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	601a      	str	r2, [r3, #0]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40023c00 	.word	0x40023c00

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001770:	b0ae      	sub	sp, #184	@ 0xb8
 8001772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001792:	4bcb      	ldr	r3, [pc, #812]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b0c      	cmp	r3, #12
 800179c:	f200 8206 	bhi.w	8001bac <HAL_RCC_GetSysClockFreq+0x440>
 80017a0:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017dd 	.word	0x080017dd
 80017ac:	08001bad 	.word	0x08001bad
 80017b0:	08001bad 	.word	0x08001bad
 80017b4:	08001bad 	.word	0x08001bad
 80017b8:	080017e5 	.word	0x080017e5
 80017bc:	08001bad 	.word	0x08001bad
 80017c0:	08001bad 	.word	0x08001bad
 80017c4:	08001bad 	.word	0x08001bad
 80017c8:	080017ed 	.word	0x080017ed
 80017cc:	08001bad 	.word	0x08001bad
 80017d0:	08001bad 	.word	0x08001bad
 80017d4:	08001bad 	.word	0x08001bad
 80017d8:	080019dd 	.word	0x080019dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x358>)
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017e2:	e1e7      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4bb8      	ldr	r3, [pc, #736]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ea:	e1e3      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4bb4      	ldr	r3, [pc, #720]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f8:	4bb1      	ldr	r3, [pc, #708]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d071      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	4bae      	ldr	r3, [pc, #696]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001810:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800182a:	4622      	mov	r2, r4
 800182c:	462b      	mov	r3, r5
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4621      	mov	r1, r4
 8001844:	1a51      	subs	r1, r2, r1
 8001846:	6439      	str	r1, [r7, #64]	@ 0x40
 8001848:	4629      	mov	r1, r5
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800185c:	4649      	mov	r1, r9
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	4641      	mov	r1, r8
 8001862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001866:	4641      	mov	r1, r8
 8001868:	018a      	lsls	r2, r1, #6
 800186a:	4641      	mov	r1, r8
 800186c:	1a51      	subs	r1, r2, r1
 800186e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001870:	4649      	mov	r1, r9
 8001872:	eb63 0301 	sbc.w	r3, r3, r1
 8001876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001884:	4649      	mov	r1, r9
 8001886:	00cb      	lsls	r3, r1, #3
 8001888:	4641      	mov	r1, r8
 800188a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800188e:	4641      	mov	r1, r8
 8001890:	00ca      	lsls	r2, r1, #3
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	4603      	mov	r3, r0
 8001898:	4622      	mov	r2, r4
 800189a:	189b      	adds	r3, r3, r2
 800189c:	633b      	str	r3, [r7, #48]	@ 0x30
 800189e:	462b      	mov	r3, r5
 80018a0:	460a      	mov	r2, r1
 80018a2:	eb42 0303 	adc.w	r3, r2, r3
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018b4:	4629      	mov	r1, r5
 80018b6:	024b      	lsls	r3, r1, #9
 80018b8:	4621      	mov	r1, r4
 80018ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018be:	4621      	mov	r1, r4
 80018c0:	024a      	lsls	r2, r1, #9
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018d8:	f7fe fcea 	bl	80002b0 <__aeabi_uldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4613      	mov	r3, r2
 80018e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018e6:	e067      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e8:	4b75      	ldr	r3, [pc, #468]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001902:	2300      	movs	r3, #0
 8001904:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001906:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0159      	lsls	r1, r3, #5
 8001918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191c:	0150      	lsls	r0, r2, #5
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4621      	mov	r1, r4
 8001924:	1a51      	subs	r1, r2, r1
 8001926:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001928:	4629      	mov	r1, r5
 800192a:	eb63 0301 	sbc.w	r3, r3, r1
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800193c:	4649      	mov	r1, r9
 800193e:	018b      	lsls	r3, r1, #6
 8001940:	4641      	mov	r1, r8
 8001942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001946:	4641      	mov	r1, r8
 8001948:	018a      	lsls	r2, r1, #6
 800194a:	4641      	mov	r1, r8
 800194c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001950:	4649      	mov	r1, r9
 8001952:	eb63 0b01 	sbc.w	fp, r3, r1
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001962:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800196a:	4692      	mov	sl, r2
 800196c:	469b      	mov	fp, r3
 800196e:	4623      	mov	r3, r4
 8001970:	eb1a 0303 	adds.w	r3, sl, r3
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	462b      	mov	r3, r5
 8001978:	eb4b 0303 	adc.w	r3, fp, r3
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800198a:	4629      	mov	r1, r5
 800198c:	028b      	lsls	r3, r1, #10
 800198e:	4621      	mov	r1, r4
 8001990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001994:	4621      	mov	r1, r4
 8001996:	028a      	lsls	r2, r1, #10
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019a0:	2200      	movs	r2, #0
 80019a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80019a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80019a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80019aa:	f7fe fc81 	bl	80002b0 <__aeabi_uldivmod>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4613      	mov	r3, r2
 80019b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019b8:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	0c1b      	lsrs	r3, r3, #16
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80019ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019da:	e0eb      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019dc:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e8:	4b35      	ldr	r3, [pc, #212]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d06b      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	2200      	movs	r2, #0
 80019fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a06:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a08:	2300      	movs	r3, #0
 8001a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a10:	4622      	mov	r2, r4
 8001a12:	462b      	mov	r3, r5
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0159      	lsls	r1, r3, #5
 8001a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a22:	0150      	lsls	r0, r2, #5
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4621      	mov	r1, r4
 8001a2a:	1a51      	subs	r1, r2, r1
 8001a2c:	61b9      	str	r1, [r7, #24]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	eb63 0301 	sbc.w	r3, r3, r1
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a42:	4659      	mov	r1, fp
 8001a44:	018b      	lsls	r3, r1, #6
 8001a46:	4651      	mov	r1, sl
 8001a48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4c:	4651      	mov	r1, sl
 8001a4e:	018a      	lsls	r2, r1, #6
 8001a50:	4651      	mov	r1, sl
 8001a52:	ebb2 0801 	subs.w	r8, r2, r1
 8001a56:	4659      	mov	r1, fp
 8001a58:	eb63 0901 	sbc.w	r9, r3, r1
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a70:	4690      	mov	r8, r2
 8001a72:	4699      	mov	r9, r3
 8001a74:	4623      	mov	r3, r4
 8001a76:	eb18 0303 	adds.w	r3, r8, r3
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	eb49 0303 	adc.w	r3, r9, r3
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a90:	4629      	mov	r1, r5
 8001a92:	024b      	lsls	r3, r1, #9
 8001a94:	4621      	mov	r1, r4
 8001a96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	024a      	lsls	r2, r1, #9
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001aaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001aac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ab0:	f7fe fbfe 	bl	80002b0 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001abe:	e065      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x420>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001acc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001adc:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ade:	2300      	movs	r3, #0
 8001ae0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ae2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	464b      	mov	r3, r9
 8001aea:	f04f 0000 	mov.w	r0, #0
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	0159      	lsls	r1, r3, #5
 8001af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af8:	0150      	lsls	r0, r2, #5
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4641      	mov	r1, r8
 8001b00:	1a51      	subs	r1, r2, r1
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	4649      	mov	r1, r9
 8001b06:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b18:	4659      	mov	r1, fp
 8001b1a:	018b      	lsls	r3, r1, #6
 8001b1c:	4651      	mov	r1, sl
 8001b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b22:	4651      	mov	r1, sl
 8001b24:	018a      	lsls	r2, r1, #6
 8001b26:	4651      	mov	r1, sl
 8001b28:	1a54      	subs	r4, r2, r1
 8001b2a:	4659      	mov	r1, fp
 8001b2c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	00eb      	lsls	r3, r5, #3
 8001b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3e:	00e2      	lsls	r2, r4, #3
 8001b40:	4614      	mov	r4, r2
 8001b42:	461d      	mov	r5, r3
 8001b44:	4643      	mov	r3, r8
 8001b46:	18e3      	adds	r3, r4, r3
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	eb45 0303 	adc.w	r3, r5, r3
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	028b      	lsls	r3, r1, #10
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b68:	4621      	mov	r1, r4
 8001b6a:	028a      	lsls	r2, r1, #10
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b74:	2200      	movs	r2, #0
 8001b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b7e:	f7fe fb97 	bl	80002b0 <__aeabi_uldivmod>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4613      	mov	r3, r2
 8001b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0f1b      	lsrs	r3, r3, #28
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001baa:	e003      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	37b8      	adds	r7, #184	@ 0xb8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	00f42400 	.word	0x00f42400

08001bcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e28d      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8083 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bec:	4b94      	ldr	r3, [pc, #592]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d019      	beq.n	8001c2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bf8:	4b91      	ldr	r3, [pc, #580]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c04:	4b8e      	ldr	r3, [pc, #568]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c10:	d00c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b8b      	ldr	r3, [pc, #556]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d112      	bne.n	8001c44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4b88      	ldr	r3, [pc, #544]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c2a:	d10b      	bne.n	8001c44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	4b84      	ldr	r3, [pc, #528]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d05b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x124>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d157      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e25a      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x90>
 8001c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7b      	ldr	r2, [pc, #492]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xcc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0xb4>
 8001c66:	4b76      	ldr	r3, [pc, #472]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b73      	ldr	r3, [pc, #460]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a72      	ldr	r2, [pc, #456]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xcc>
 8001c80:	4b6f      	ldr	r3, [pc, #444]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6e      	ldr	r2, [pc, #440]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6b      	ldr	r2, [pc, #428]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f91a 	bl	8000ed8 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f916 	bl	8000ed8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e21f      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b61      	ldr	r3, [pc, #388]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xdc>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f906 	bl	8000ed8 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f902 	bl	8000ed8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e20b      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	4b57      	ldr	r3, [pc, #348]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x104>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06f      	beq.n	8001dde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cfe:	4b50      	ldr	r3, [pc, #320]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d017      	beq.n	8001d3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d105      	bne.n	8001d22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d16:	4b4a      	ldr	r3, [pc, #296]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b47      	ldr	r3, [pc, #284]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b44      	ldr	r3, [pc, #272]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b41      	ldr	r3, [pc, #260]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x186>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1d3      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b3b      	ldr	r3, [pc, #236]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4937      	ldr	r1, [pc, #220]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f8af 	bl	8000ed8 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f8ab 	bl	8000ed8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1b4      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4925      	ldr	r1, [pc, #148]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f88e 	bl	8000ed8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f88a 	bl	8000ed8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e193      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d036      	beq.n	8001e58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f86e 	bl	8000ed8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff f86a 	bl	8000ed8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e173      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x234>
 8001e1e:	e01b      	b.n	8001e58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff f857 	bl	8000ed8 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	e00e      	b.n	8001e4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f853 	bl	8000ed8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d907      	bls.n	8001e4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e15c      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 8001e40:	40023800 	.word	0x40023800
 8001e44:	42470000 	.word	0x42470000
 8001e48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ea      	bne.n	8001e2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8097 	beq.w	8001f94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b83      	ldr	r3, [pc, #524]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b7c      	ldr	r3, [pc, #496]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b79      	ldr	r3, [pc, #484]	@ (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea2:	4b76      	ldr	r3, [pc, #472]	@ (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a75      	ldr	r2, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff f813 	bl	8000ed8 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff f80f 	bl	8000ed8 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e118      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x31e>
 8001edc:	4b66      	ldr	r3, [pc, #408]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	4a65      	ldr	r2, [pc, #404]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee8:	e01c      	b.n	8001f24 <HAL_RCC_OscConfig+0x358>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x340>
 8001ef2:	4b61      	ldr	r3, [pc, #388]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef6:	4a60      	ldr	r2, [pc, #384]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efe:	4b5e      	ldr	r3, [pc, #376]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f02:	4a5d      	ldr	r2, [pc, #372]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0x358>
 8001f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f10:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f18:	4b57      	ldr	r3, [pc, #348]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1c:	4a56      	ldr	r2, [pc, #344]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d015      	beq.n	8001f58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7fe ffd4 	bl	8000ed8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7fe ffd0 	bl	8000ed8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0d7      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0ee      	beq.n	8001f34 <HAL_RCC_OscConfig+0x368>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7fe ffbe 	bl	8000ed8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7fe ffba 	bl	8000ed8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0c1      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f76:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ee      	bne.n	8001f60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80ad 	beq.w	80020f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d060      	beq.n	800206c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d145      	bne.n	800203e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ff8e 	bl	8000ed8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe ff8a 	bl	8000ed8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e093      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	071b      	lsls	r3, r3, #28
 800200a:	491b      	ldr	r1, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe ff5f 	bl	8000ed8 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe ff5b 	bl	8000ed8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e064      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x452>
 800203c:	e05c      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe ff48 	bl	8000ed8 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe ff44 	bl	8000ed8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e04d      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x480>
 800206a:	e045      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e040      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000
 8002080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <HAL_RCC_OscConfig+0x538>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d030      	beq.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d129      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d122      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	4293      	cmp	r3, r2
 80020be:	d119      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10f      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e041      	b.n	800219e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f839 	bl	80021a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 f9c0 	bl	80024cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d001      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e04e      	b.n	8002272 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a23      	ldr	r2, [pc, #140]	@ (8002280 <HAL_TIM_Base_Start_IT+0xc4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d022      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x80>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021fe:	d01d      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x80>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1f      	ldr	r2, [pc, #124]	@ (8002284 <HAL_TIM_Base_Start_IT+0xc8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d018      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x80>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1e      	ldr	r2, [pc, #120]	@ (8002288 <HAL_TIM_Base_Start_IT+0xcc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x80>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1c      	ldr	r2, [pc, #112]	@ (800228c <HAL_TIM_Base_Start_IT+0xd0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00e      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x80>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1b      	ldr	r2, [pc, #108]	@ (8002290 <HAL_TIM_Base_Start_IT+0xd4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x80>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	@ (8002294 <HAL_TIM_Base_Start_IT+0xd8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x80>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a18      	ldr	r2, [pc, #96]	@ (8002298 <HAL_TIM_Base_Start_IT+0xdc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b06      	cmp	r3, #6
 800224c:	d010      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225e:	e007      	b.n	8002270 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800
 800228c:	40000c00 	.word	0x40000c00
 8002290:	40010400 	.word	0x40010400
 8002294:	40014000 	.word	0x40014000
 8002298:	40001800 	.word	0x40001800

0800229c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d020      	beq.n	8002300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0202 	mvn.w	r2, #2
 80022d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f8d2 	bl	8002490 <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f8c4 	bl	800247c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f8d5 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d020      	beq.n	800234c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01b      	beq.n	800234c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0204 	mvn.w	r2, #4
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8ac 	bl	8002490 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f89e 	bl	800247c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8af 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d020      	beq.n	8002398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0208 	mvn.w	r2, #8
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2204      	movs	r2, #4
 800236e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f886 	bl	8002490 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f878 	bl	800247c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f889 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d020      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01b      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0210 	mvn.w	r2, #16
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2208      	movs	r2, #8
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f860 	bl	8002490 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f852 	bl	800247c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f863 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00c      	beq.n	8002408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0201 	mvn.w	r2, #1
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fb14 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f906 	bl	8002638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00c      	beq.n	8002450 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f834 	bl	80024b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0220 	mvn.w	r2, #32
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8d8 	bl	8002624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a46      	ldr	r2, [pc, #280]	@ (80025f8 <TIM_Base_SetConfig+0x12c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d013      	beq.n	800250c <TIM_Base_SetConfig+0x40>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ea:	d00f      	beq.n	800250c <TIM_Base_SetConfig+0x40>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a43      	ldr	r2, [pc, #268]	@ (80025fc <TIM_Base_SetConfig+0x130>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00b      	beq.n	800250c <TIM_Base_SetConfig+0x40>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a42      	ldr	r2, [pc, #264]	@ (8002600 <TIM_Base_SetConfig+0x134>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d007      	beq.n	800250c <TIM_Base_SetConfig+0x40>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a41      	ldr	r2, [pc, #260]	@ (8002604 <TIM_Base_SetConfig+0x138>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d003      	beq.n	800250c <TIM_Base_SetConfig+0x40>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a40      	ldr	r2, [pc, #256]	@ (8002608 <TIM_Base_SetConfig+0x13c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d108      	bne.n	800251e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a35      	ldr	r2, [pc, #212]	@ (80025f8 <TIM_Base_SetConfig+0x12c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02b      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252c:	d027      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a32      	ldr	r2, [pc, #200]	@ (80025fc <TIM_Base_SetConfig+0x130>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d023      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a31      	ldr	r2, [pc, #196]	@ (8002600 <TIM_Base_SetConfig+0x134>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01f      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a30      	ldr	r2, [pc, #192]	@ (8002604 <TIM_Base_SetConfig+0x138>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01b      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a2f      	ldr	r2, [pc, #188]	@ (8002608 <TIM_Base_SetConfig+0x13c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d017      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a2e      	ldr	r2, [pc, #184]	@ (800260c <TIM_Base_SetConfig+0x140>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a2d      	ldr	r2, [pc, #180]	@ (8002610 <TIM_Base_SetConfig+0x144>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00f      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a2c      	ldr	r2, [pc, #176]	@ (8002614 <TIM_Base_SetConfig+0x148>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00b      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a2b      	ldr	r2, [pc, #172]	@ (8002618 <TIM_Base_SetConfig+0x14c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a2a      	ldr	r2, [pc, #168]	@ (800261c <TIM_Base_SetConfig+0x150>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d003      	beq.n	800257e <TIM_Base_SetConfig+0xb2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a29      	ldr	r2, [pc, #164]	@ (8002620 <TIM_Base_SetConfig+0x154>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d108      	bne.n	8002590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a10      	ldr	r2, [pc, #64]	@ (80025f8 <TIM_Base_SetConfig+0x12c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <TIM_Base_SetConfig+0xf8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <TIM_Base_SetConfig+0x13c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d103      	bne.n	80025cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f023 0201 	bic.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]
  }
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40000400 	.word	0x40000400
 8002600:	40000800 	.word	0x40000800
 8002604:	40000c00 	.word	0x40000c00
 8002608:	40010400 	.word	0x40010400
 800260c:	40014000 	.word	0x40014000
 8002610:	40014400 	.word	0x40014400
 8002614:	40014800 	.word	0x40014800
 8002618:	40001800 	.word	0x40001800
 800261c:	40001c00 	.word	0x40001c00
 8002620:	40002000 	.word	0x40002000

08002624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e042      	b.n	80026e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fa20 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	@ 0x24
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800268e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f82b 	bl	80026ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b0c0      	sub	sp, #256	@ 0x100
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002708:	68d9      	ldr	r1, [r3, #12]
 800270a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	ea40 0301 	orr.w	r3, r0, r1
 8002714:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	431a      	orrs	r2, r3
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	431a      	orrs	r2, r3
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002744:	f021 010c 	bic.w	r1, r1, #12
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002752:	430b      	orrs	r3, r1
 8002754:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002766:	6999      	ldr	r1, [r3, #24]
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	ea40 0301 	orr.w	r3, r0, r1
 8002772:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b8f      	ldr	r3, [pc, #572]	@ (80029b8 <UART_SetConfig+0x2cc>)
 800277c:	429a      	cmp	r2, r3
 800277e:	d005      	beq.n	800278c <UART_SetConfig+0xa0>
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b8d      	ldr	r3, [pc, #564]	@ (80029bc <UART_SetConfig+0x2d0>)
 8002788:	429a      	cmp	r2, r3
 800278a:	d104      	bne.n	8002796 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800278c:	f7fe ffa8 	bl	80016e0 <HAL_RCC_GetPCLK2Freq>
 8002790:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002794:	e003      	b.n	800279e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002796:	f7fe ff8f 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 800279a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800279e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027a8:	f040 810c 	bne.w	80029c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027b0:	2200      	movs	r2, #0
 80027b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027be:	4622      	mov	r2, r4
 80027c0:	462b      	mov	r3, r5
 80027c2:	1891      	adds	r1, r2, r2
 80027c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027c6:	415b      	adcs	r3, r3
 80027c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027ce:	4621      	mov	r1, r4
 80027d0:	eb12 0801 	adds.w	r8, r2, r1
 80027d4:	4629      	mov	r1, r5
 80027d6:	eb43 0901 	adc.w	r9, r3, r1
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ee:	4690      	mov	r8, r2
 80027f0:	4699      	mov	r9, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	eb18 0303 	adds.w	r3, r8, r3
 80027f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027fc:	462b      	mov	r3, r5
 80027fe:	eb49 0303 	adc.w	r3, r9, r3
 8002802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002812:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002816:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800281a:	460b      	mov	r3, r1
 800281c:	18db      	adds	r3, r3, r3
 800281e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002820:	4613      	mov	r3, r2
 8002822:	eb42 0303 	adc.w	r3, r2, r3
 8002826:	657b      	str	r3, [r7, #84]	@ 0x54
 8002828:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800282c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002830:	f7fd fd3e 	bl	80002b0 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4b61      	ldr	r3, [pc, #388]	@ (80029c0 <UART_SetConfig+0x2d4>)
 800283a:	fba3 2302 	umull	r2, r3, r3, r2
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	011c      	lsls	r4, r3, #4
 8002842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800284c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002850:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002854:	4642      	mov	r2, r8
 8002856:	464b      	mov	r3, r9
 8002858:	1891      	adds	r1, r2, r2
 800285a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800285c:	415b      	adcs	r3, r3
 800285e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002860:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002864:	4641      	mov	r1, r8
 8002866:	eb12 0a01 	adds.w	sl, r2, r1
 800286a:	4649      	mov	r1, r9
 800286c:	eb43 0b01 	adc.w	fp, r3, r1
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800287c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002884:	4692      	mov	sl, r2
 8002886:	469b      	mov	fp, r3
 8002888:	4643      	mov	r3, r8
 800288a:	eb1a 0303 	adds.w	r3, sl, r3
 800288e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002892:	464b      	mov	r3, r9
 8002894:	eb4b 0303 	adc.w	r3, fp, r3
 8002898:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80028ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80028b0:	460b      	mov	r3, r1
 80028b2:	18db      	adds	r3, r3, r3
 80028b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80028b6:	4613      	mov	r3, r2
 80028b8:	eb42 0303 	adc.w	r3, r2, r3
 80028bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80028be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028c6:	f7fd fcf3 	bl	80002b0 <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	4b3b      	ldr	r3, [pc, #236]	@ (80029c0 <UART_SetConfig+0x2d4>)
 80028d2:	fba3 2301 	umull	r2, r3, r3, r1
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2264      	movs	r2, #100	@ 0x64
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	1acb      	subs	r3, r1, r3
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028e6:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <UART_SetConfig+0x2d4>)
 80028e8:	fba3 2302 	umull	r2, r3, r3, r2
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028f4:	441c      	add	r4, r3
 80028f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002900:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002904:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002908:	4642      	mov	r2, r8
 800290a:	464b      	mov	r3, r9
 800290c:	1891      	adds	r1, r2, r2
 800290e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002910:	415b      	adcs	r3, r3
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002914:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002918:	4641      	mov	r1, r8
 800291a:	1851      	adds	r1, r2, r1
 800291c:	6339      	str	r1, [r7, #48]	@ 0x30
 800291e:	4649      	mov	r1, r9
 8002920:	414b      	adcs	r3, r1
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002930:	4659      	mov	r1, fp
 8002932:	00cb      	lsls	r3, r1, #3
 8002934:	4651      	mov	r1, sl
 8002936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293a:	4651      	mov	r1, sl
 800293c:	00ca      	lsls	r2, r1, #3
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	4603      	mov	r3, r0
 8002944:	4642      	mov	r2, r8
 8002946:	189b      	adds	r3, r3, r2
 8002948:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800294c:	464b      	mov	r3, r9
 800294e:	460a      	mov	r2, r1
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002964:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002968:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800296c:	460b      	mov	r3, r1
 800296e:	18db      	adds	r3, r3, r3
 8002970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002972:	4613      	mov	r3, r2
 8002974:	eb42 0303 	adc.w	r3, r2, r3
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800297a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800297e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002982:	f7fd fc95 	bl	80002b0 <__aeabi_uldivmod>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <UART_SetConfig+0x2d4>)
 800298c:	fba3 1302 	umull	r1, r3, r3, r2
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	2164      	movs	r1, #100	@ 0x64
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	3332      	adds	r3, #50	@ 0x32
 800299e:	4a08      	ldr	r2, [pc, #32]	@ (80029c0 <UART_SetConfig+0x2d4>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	f003 0207 	and.w	r2, r3, #7
 80029aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4422      	add	r2, r4
 80029b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029b4:	e106      	b.n	8002bc4 <UART_SetConfig+0x4d8>
 80029b6:	bf00      	nop
 80029b8:	40011000 	.word	0x40011000
 80029bc:	40011400 	.word	0x40011400
 80029c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029c8:	2200      	movs	r2, #0
 80029ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029d6:	4642      	mov	r2, r8
 80029d8:	464b      	mov	r3, r9
 80029da:	1891      	adds	r1, r2, r2
 80029dc:	6239      	str	r1, [r7, #32]
 80029de:	415b      	adcs	r3, r3
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029e6:	4641      	mov	r1, r8
 80029e8:	1854      	adds	r4, r2, r1
 80029ea:	4649      	mov	r1, r9
 80029ec:	eb43 0501 	adc.w	r5, r3, r1
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	00eb      	lsls	r3, r5, #3
 80029fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fe:	00e2      	lsls	r2, r4, #3
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	18e3      	adds	r3, r4, r3
 8002a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a0c:	464b      	mov	r3, r9
 8002a0e:	eb45 0303 	adc.w	r3, r5, r3
 8002a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a32:	4629      	mov	r1, r5
 8002a34:	008b      	lsls	r3, r1, #2
 8002a36:	4621      	mov	r1, r4
 8002a38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	008a      	lsls	r2, r1, #2
 8002a40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a44:	f7fd fc34 	bl	80002b0 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4b60      	ldr	r3, [pc, #384]	@ (8002bd0 <UART_SetConfig+0x4e4>)
 8002a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	011c      	lsls	r4, r3, #4
 8002a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a68:	4642      	mov	r2, r8
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	1891      	adds	r1, r2, r2
 8002a6e:	61b9      	str	r1, [r7, #24]
 8002a70:	415b      	adcs	r3, r3
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a78:	4641      	mov	r1, r8
 8002a7a:	1851      	adds	r1, r2, r1
 8002a7c:	6139      	str	r1, [r7, #16]
 8002a7e:	4649      	mov	r1, r9
 8002a80:	414b      	adcs	r3, r1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a90:	4659      	mov	r1, fp
 8002a92:	00cb      	lsls	r3, r1, #3
 8002a94:	4651      	mov	r1, sl
 8002a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a9a:	4651      	mov	r1, sl
 8002a9c:	00ca      	lsls	r2, r1, #3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	189b      	adds	r3, r3, r2
 8002aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002aac:	464b      	mov	r3, r9
 8002aae:	460a      	mov	r2, r1
 8002ab0:	eb42 0303 	adc.w	r3, r2, r3
 8002ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ac2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	008b      	lsls	r3, r1, #2
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ada:	4641      	mov	r1, r8
 8002adc:	008a      	lsls	r2, r1, #2
 8002ade:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ae2:	f7fd fbe5 	bl	80002b0 <__aeabi_uldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	4b38      	ldr	r3, [pc, #224]	@ (8002bd0 <UART_SetConfig+0x4e4>)
 8002aee:	fba3 2301 	umull	r2, r3, r3, r1
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2264      	movs	r2, #100	@ 0x64
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	1acb      	subs	r3, r1, r3
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3332      	adds	r3, #50	@ 0x32
 8002b00:	4a33      	ldr	r2, [pc, #204]	@ (8002bd0 <UART_SetConfig+0x4e4>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b0c:	441c      	add	r4, r3
 8002b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b12:	2200      	movs	r2, #0
 8002b14:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b16:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	464b      	mov	r3, r9
 8002b20:	1891      	adds	r1, r2, r2
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	415b      	adcs	r3, r3
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	1851      	adds	r1, r2, r1
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	4649      	mov	r1, r9
 8002b34:	414b      	adcs	r3, r1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b44:	4659      	mov	r1, fp
 8002b46:	00cb      	lsls	r3, r1, #3
 8002b48:	4651      	mov	r1, sl
 8002b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b4e:	4651      	mov	r1, sl
 8002b50:	00ca      	lsls	r2, r1, #3
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	4642      	mov	r2, r8
 8002b5a:	189b      	adds	r3, r3, r2
 8002b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b5e:	464b      	mov	r3, r9
 8002b60:	460a      	mov	r2, r1
 8002b62:	eb42 0303 	adc.w	r3, r2, r3
 8002b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b72:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b80:	4649      	mov	r1, r9
 8002b82:	008b      	lsls	r3, r1, #2
 8002b84:	4641      	mov	r1, r8
 8002b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8a:	4641      	mov	r1, r8
 8002b8c:	008a      	lsls	r2, r1, #2
 8002b8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b92:	f7fd fb8d 	bl	80002b0 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <UART_SetConfig+0x4e4>)
 8002b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	2164      	movs	r1, #100	@ 0x64
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	3332      	adds	r3, #50	@ 0x32
 8002bae:	4a08      	ldr	r2, [pc, #32]	@ (8002bd0 <UART_SetConfig+0x4e4>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4422      	add	r2, r4
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd0:	51eb851f 	.word	0x51eb851f

08002bd4 <__NVIC_SetPriority>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0a      	blt.n	8002bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	490c      	ldr	r1, [pc, #48]	@ (8002c20 <__NVIC_SetPriority+0x4c>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002bfc:	e00a      	b.n	8002c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4908      	ldr	r1, [pc, #32]	@ (8002c24 <__NVIC_SetPriority+0x50>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	761a      	strb	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <SysTick_Handler+0x1c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002c30:	f002 f9ca 	bl	8004fc8 <xTaskGetSchedulerState>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c3a:	f002 fffd 	bl	8005c38 <xPortSysTickHandler>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f06f 0004 	mvn.w	r0, #4
 8002c52:	f7ff ffbf 	bl	8002bd4 <__NVIC_SetPriority>
#endif
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c62:	f3ef 8305 	mrs	r3, IPSR
 8002c66:	603b      	str	r3, [r7, #0]
  return(result);
 8002c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c6e:	f06f 0305 	mvn.w	r3, #5
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	e00c      	b.n	8002c90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <osKernelInitialize+0x44>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <osKernelInitialize+0x44>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	e002      	b.n	8002c90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c90:	687b      	ldr	r3, [r7, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	2000013c 	.word	0x2000013c

08002ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002caa:	f3ef 8305 	mrs	r3, IPSR
 8002cae:	603b      	str	r3, [r7, #0]
  return(result);
 8002cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8002cb6:	f06f 0305 	mvn.w	r3, #5
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	e010      	b.n	8002ce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <osKernelStart+0x48>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d109      	bne.n	8002cda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002cc6:	f7ff ffbf 	bl	8002c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002cca:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <osKernelStart+0x48>)
 8002ccc:	2202      	movs	r2, #2
 8002cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002cd0:	f001 fc9a 	bl	8004608 <vTaskStartScheduler>
      stat = osOK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	e002      	b.n	8002ce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000013c 	.word	0x2000013c

08002cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	@ 0x38
 8002cf4:	af04      	add	r7, sp, #16
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d00:	f3ef 8305 	mrs	r3, IPSR
 8002d04:	617b      	str	r3, [r7, #20]
  return(result);
 8002d06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d17e      	bne.n	8002e0a <osThreadNew+0x11a>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d07b      	beq.n	8002e0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d16:	2318      	movs	r3, #24
 8002d18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d045      	beq.n	8002db6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <osThreadNew+0x48>
        name = attr->name;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <osThreadNew+0x6e>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b38      	cmp	r3, #56	@ 0x38
 8002d50:	d805      	bhi.n	8002d5e <osThreadNew+0x6e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <osThreadNew+0x72>
        return (NULL);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e054      	b.n	8002e0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00e      	beq.n	8002d98 <osThreadNew+0xa8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2ba7      	cmp	r3, #167	@ 0xa7
 8002d80:	d90a      	bls.n	8002d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <osThreadNew+0xa8>
        mem = 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e010      	b.n	8002dba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10c      	bne.n	8002dba <osThreadNew+0xca>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d108      	bne.n	8002dba <osThreadNew+0xca>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <osThreadNew+0xca>
          mem = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e001      	b.n	8002dba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d110      	bne.n	8002de2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002dc8:	9202      	str	r2, [sp, #8]
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6a3a      	ldr	r2, [r7, #32]
 8002dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f001 f938 	bl	800404c <xTaskCreateStatic>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e013      	b.n	8002e0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d110      	bne.n	8002e0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f001 f986 	bl	800410c <xTaskCreate>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d001      	beq.n	8002e0a <osThreadNew+0x11a>
            hTask = NULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e0a:	693b      	ldr	r3, [r7, #16]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3728      	adds	r7, #40	@ 0x28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8002e1a:	f002 f8c5 	bl	8004fa8 <xTaskGetCurrentTaskHandle>
 8002e1e:	6078      	str	r0, [r7, #4]

  return (id);
 8002e20:	687b      	ldr	r3, [r7, #4]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e38:	f3ef 8305 	mrs	r3, IPSR
 8002e3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <osThreadGetState+0x1e>
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <osThreadGetState+0x26>
    state = osThreadError;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e022      	b.n	8002e98 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8002e52:	6938      	ldr	r0, [r7, #16]
 8002e54:	f001 fade 	bl	8004414 <eTaskGetState>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d818      	bhi.n	8002e90 <osThreadGetState+0x64>
 8002e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e64 <osThreadGetState+0x38>)
 8002e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e64:	08002e79 	.word	0x08002e79
 8002e68:	08002e7f 	.word	0x08002e7f
 8002e6c:	08002e85 	.word	0x08002e85
 8002e70:	08002e85 	.word	0x08002e85
 8002e74:	08002e8b 	.word	0x08002e8b
      case eRunning:   state = osThreadRunning;    break;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e00c      	b.n	8002e98 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e009      	b.n	8002e98 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8002e84:	2303      	movs	r3, #3
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	e006      	b.n	8002e98 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e003      	b.n	8002e98 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	bf00      	nop
    }
  }

  return (state);
 8002e98:	697b      	ldr	r3, [r7, #20]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop

08002ea4 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eb2:	f3ef 8305 	mrs	r3, IPSR
 8002eb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8002ebe:	f06f 0305 	mvn.w	r3, #5
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e013      	b.n	8002eee <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <osThreadSetPriority+0x34>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dd02      	ble.n	8002ed8 <osThreadSetPriority+0x34>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b38      	cmp	r3, #56	@ 0x38
 8002ed6:	dd03      	ble.n	8002ee0 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8002ed8:	f06f 0303 	mvn.w	r3, #3
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e006      	b.n	8002eee <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6938      	ldr	r0, [r7, #16]
 8002eea:	f001 fafb 	bl	80044e4 <vTaskPrioritySet>
  }

  return (stat);
 8002eee:	697b      	ldr	r3, [r7, #20]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f00:	f3ef 8305 	mrs	r3, IPSR
 8002f04:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <osDelay+0x1c>
    stat = osErrorISR;
 8002f0c:	f06f 0305 	mvn.w	r3, #5
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e007      	b.n	8002f24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f001 fa42 	bl	80043a8 <vTaskDelay>
    }
  }

  return (stat);
 8002f24:	68fb      	ldr	r3, [r7, #12]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f3a:	f3ef 8305 	mrs	r3, IPSR
 8002f3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f40:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d12d      	bne.n	8002fa2 <osEventFlagsNew+0x74>
    mem = -1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <osEventFlagsNew+0x3a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b1f      	cmp	r3, #31
 8002f60:	d902      	bls.n	8002f68 <osEventFlagsNew+0x3a>
        mem = 1;
 8002f62:	2301      	movs	r3, #1
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e00c      	b.n	8002f82 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d108      	bne.n	8002f82 <osEventFlagsNew+0x54>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d104      	bne.n	8002f82 <osEventFlagsNew+0x54>
          mem = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e001      	b.n	8002f82 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f8e9 	bl	8003164 <xEventGroupCreateStatic>
 8002f92:	6178      	str	r0, [r7, #20]
 8002f94:	e005      	b.n	8002fa2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002f9c:	f000 f91b 	bl	80031d6 <xEventGroupCreate>
 8002fa0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002fa2:	697b      	ldr	r3, [r7, #20]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <osEventFlagsSet+0x1c>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc6:	d303      	bcc.n	8002fd0 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8002fc8:	f06f 0303 	mvn.w	r3, #3
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e028      	b.n	8003022 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fd0:	f3ef 8305 	mrs	r3, IPSR
 8002fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01d      	beq.n	8003018 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	6938      	ldr	r0, [r7, #16]
 8002fea:	f000 fa9d 	bl	8003528 <xEventGroupSetBitsFromISR>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8002ff4:	f06f 0302 	mvn.w	r3, #2
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e012      	b.n	8003022 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <osEventFlagsSet+0x76>
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <osEventFlagsSet+0x80>)
 8003008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	e004      	b.n	8003022 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	6938      	ldr	r0, [r7, #16]
 800301c:	f000 f9c8 	bl	80033b0 <xEventGroupSetBits>
 8003020:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003022:	697b      	ldr	r3, [r7, #20]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	e000ed04 	.word	0xe000ed04

08003030 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	@ 0x30
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <osEventFlagsWait+0x20>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800304e:	d303      	bcc.n	8003058 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8003050:	f06f 0303 	mvn.w	r3, #3
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e04b      	b.n	80030f0 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003058:	f3ef 8305 	mrs	r3, IPSR
 800305c:	617b      	str	r3, [r7, #20]
  return(result);
 800305e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8003064:	f06f 0305 	mvn.w	r3, #5
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	e041      	b.n	80030f0 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
 800307a:	e001      	b.n	8003080 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	e001      	b.n	8003094 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8003090:	2301      	movs	r3, #1
 8003092:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	6a3a      	ldr	r2, [r7, #32]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	69b8      	ldr	r0, [r7, #24]
 80030a0:	f000 f8b4 	bl	800320c <xEventGroupWaitBits>
 80030a4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d010      	beq.n	80030d2 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4013      	ands	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d019      	beq.n	80030f0 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 80030c2:	f06f 0301 	mvn.w	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e012      	b.n	80030f0 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80030ca:	f06f 0302 	mvn.w	r3, #2
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	e00e      	b.n	80030f0 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80030e2:	f06f 0301 	mvn.w	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e002      	b.n	80030f0 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80030ea:	f06f 0302 	mvn.w	r3, #2
 80030ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80030f0:	69fb      	ldr	r3, [r7, #28]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3728      	adds	r7, #40	@ 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a07      	ldr	r2, [pc, #28]	@ (8003128 <vApplicationGetIdleTaskMemory+0x2c>)
 800310c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4a06      	ldr	r2, [pc, #24]	@ (800312c <vApplicationGetIdleTaskMemory+0x30>)
 8003112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2280      	movs	r2, #128	@ 0x80
 8003118:	601a      	str	r2, [r3, #0]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000140 	.word	0x20000140
 800312c:	200001e8 	.word	0x200001e8

08003130 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a07      	ldr	r2, [pc, #28]	@ (800315c <vApplicationGetTimerTaskMemory+0x2c>)
 8003140:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4a06      	ldr	r2, [pc, #24]	@ (8003160 <vApplicationGetTimerTaskMemory+0x30>)
 8003146:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800314e:	601a      	str	r2, [r3, #0]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	200003e8 	.word	0x200003e8
 8003160:	20000490 	.word	0x20000490

08003164 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	e7fd      	b.n	8003186 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800318a:	2320      	movs	r3, #32
 800318c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b20      	cmp	r3, #32
 8003192:	d00b      	beq.n	80031ac <xEventGroupCreateStatic+0x48>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	60fb      	str	r3, [r7, #12]
}
 80031a6:	bf00      	nop
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3304      	adds	r3, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f9c5 	bl	8003550 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2201      	movs	r2, #1
 80031ca:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80031cc:	697b      	ldr	r3, [r7, #20]
	}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80031dc:	2020      	movs	r0, #32
 80031de:	f002 fdbd 	bl	8005d5c <pvPortMalloc>
 80031e2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f9ab 	bl	8003550 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003200:	687b      	ldr	r3, [r7, #4]
	}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b090      	sub	sp, #64	@ 0x40
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003222:	2300      	movs	r3, #0
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <xEventGroupWaitBits+0x38>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	623b      	str	r3, [r7, #32]
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800324a:	d30b      	bcc.n	8003264 <xEventGroupWaitBits+0x58>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61fb      	str	r3, [r7, #28]
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	e7fd      	b.n	8003260 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <xEventGroupWaitBits+0x76>
	__asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	61bb      	str	r3, [r7, #24]
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003282:	f001 fea1 	bl	8004fc8 <xTaskGetSchedulerState>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <xEventGroupWaitBits+0x86>
 800328c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <xEventGroupWaitBits+0x8a>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <xEventGroupWaitBits+0x8c>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	617b      	str	r3, [r7, #20]
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80032b4:	f001 fa18 	bl	80046e8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032c4:	f000 f90d 	bl	80034e2 <prvTestWaitCondition>
 80032c8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d028      	beq.n	8003330 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80032de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	401a      	ands	r2, r3
 80032e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e020      	b.n	8003330 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80032ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80032f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fc:	e018      	b.n	8003330 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800330a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003314:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003318:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800331a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331c:	1d18      	adds	r0, r3, #4
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003322:	4313      	orrs	r3, r2
 8003324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003326:	4619      	mov	r1, r3
 8003328:	f001 fbb0 	bl	8004a8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003330:	f001 f9e8 	bl	8004704 <xTaskResumeAll>
 8003334:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003338:	2b00      	cmp	r3, #0
 800333a:	d031      	beq.n	80033a0 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	2b00      	cmp	r3, #0
 8003340:	d107      	bne.n	8003352 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8003342:	4b1a      	ldr	r3, [pc, #104]	@ (80033ac <xEventGroupWaitBits+0x1a0>)
 8003344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003352:	f001 fec7 	bl	80050e4 <uxTaskResetEventItemValue>
 8003356:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11a      	bne.n	8003398 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8003362:	f002 fbd9 	bl	8005b18 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003372:	f000 f8b6 	bl	80034e2 <prvTestWaitCondition>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8003394:	f002 fbf2 	bl	8005b7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800339a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80033a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3740      	adds	r7, #64	@ 0x40
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08e      	sub	sp, #56	@ 0x38
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80033ba:	2300      	movs	r3, #0
 80033bc:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <xEventGroupSetBits+0x34>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	613b      	str	r3, [r7, #16]
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033ea:	d30b      	bcc.n	8003404 <xEventGroupSetBits+0x54>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	60fb      	str	r3, [r7, #12]
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	3304      	adds	r3, #4
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	3308      	adds	r3, #8
 800340e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003410:	f001 f96a 	bl	80046e8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800341a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	431a      	orrs	r2, r3
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003426:	e03c      	b.n	80034a2 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800342e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003434:	2300      	movs	r3, #0
 8003436:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800343e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003446:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800345e:	2301      	movs	r3, #1
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003462:	e008      	b.n	8003476 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	429a      	cmp	r2, r3
 8003470:	d101      	bne.n	8003476 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003472:	2301      	movs	r3, #1
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800348e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003496:	4619      	mov	r1, r3
 8003498:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800349a:	f001 fbc5 	bl	8004c28 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80034a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d1be      	bne.n	8003428 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80034aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	43db      	mvns	r3, r3
 80034b2:	401a      	ands	r2, r3
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80034b8:	f001 f924 	bl	8004704 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80034bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3738      	adds	r7, #56	@ 0x38
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff6b 	bl	80033b0 <xEventGroupSetBits>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80034e2:	b480      	push	{r7}
 80034e4:	b087      	sub	sp, #28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d107      	bne.n	8003508 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003502:	2301      	movs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e007      	b.n	8003518 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d101      	bne.n	8003518 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003518:	697b      	ldr	r3, [r7, #20]
}
 800351a:	4618      	mov	r0, r3
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	4804      	ldr	r0, [pc, #16]	@ (800354c <xEventGroupSetBitsFromISR+0x24>)
 800353c:	f002 f998 	bl	8005870 <xTimerPendFunctionCallFromISR>
 8003540:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003542:	697b      	ldr	r3, [r7, #20]
	}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	080034c9 	.word	0x080034c9

08003550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f103 0208 	add.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f04f 32ff 	mov.w	r2, #4294967295
 8003568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f103 0208 	add.w	r2, r3, #8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f103 0208 	add.w	r2, r3, #8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d103      	bne.n	8003612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e00c      	b.n	800362c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3308      	adds	r3, #8
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e002      	b.n	8003620 <vListInsert+0x2e>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d2f6      	bcs.n	800361a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6852      	ldr	r2, [r2, #4]
 8003684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d103      	bne.n	8003698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <xQueueGenericReset+0x2c>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	60bb      	str	r3, [r7, #8]
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036e4:	f002 fa18 	bl	8005b18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	68f9      	ldr	r1, [r7, #12]
 80036f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	441a      	add	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003714:	3b01      	subs	r3, #1
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	441a      	add	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	22ff      	movs	r2, #255	@ 0xff
 8003728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	22ff      	movs	r2, #255	@ 0xff
 8003730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00f      	beq.n	8003762 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3310      	adds	r3, #16
 8003746:	4618      	mov	r0, r3
 8003748:	f001 fa0a 	bl	8004b60 <xTaskRemoveFromEventList>
 800374c:	e009      	b.n	8003762 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3310      	adds	r3, #16
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fefc 	bl	8003550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3324      	adds	r3, #36	@ 0x24
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fef7 	bl	8003550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003762:	f002 fa0b 	bl	8005b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003766:	2301      	movs	r3, #1
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08e      	sub	sp, #56	@ 0x38
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	e7fd      	b.n	80037b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <xQueueGenericCreateStatic+0x56>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <xQueueGenericCreateStatic+0x5a>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <xQueueGenericCreateStatic+0x5c>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	623b      	str	r3, [r7, #32]
}
 80037e2:	bf00      	nop
 80037e4:	bf00      	nop
 80037e6:	e7fd      	b.n	80037e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <xQueueGenericCreateStatic+0x84>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <xQueueGenericCreateStatic+0x88>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <xQueueGenericCreateStatic+0x8a>
 80037f8:	2300      	movs	r3, #0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	61fb      	str	r3, [r7, #28]
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	e7fd      	b.n	8003812 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003816:	2350      	movs	r3, #80	@ 0x50
 8003818:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b50      	cmp	r3, #80	@ 0x50
 800381e:	d00b      	beq.n	8003838 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	61bb      	str	r3, [r7, #24]
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	e7fd      	b.n	8003834 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003838:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00d      	beq.n	8003860 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800384c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f805 	bl	800386a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003862:	4618      	mov	r0, r3
 8003864:	3730      	adds	r7, #48	@ 0x30
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e002      	b.n	800388c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003898:	2101      	movs	r1, #1
 800389a:	69b8      	ldr	r0, [r7, #24]
 800389c:	f7ff ff0c 	bl	80036b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	@ 0x38
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038be:	2300      	movs	r3, #0
 80038c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <xQueueGenericSend+0x34>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <xQueueGenericSend+0x42>
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <xQueueGenericSend+0x46>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <xQueueGenericSend+0x48>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <xQueueGenericSend+0x64>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d103      	bne.n	8003922 <xQueueGenericSend+0x72>
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <xQueueGenericSend+0x76>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <xQueueGenericSend+0x78>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <xQueueGenericSend+0x94>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	623b      	str	r3, [r7, #32]
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003944:	f001 fb40 	bl	8004fc8 <xTaskGetSchedulerState>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <xQueueGenericSend+0xa4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <xQueueGenericSend+0xa8>
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <xQueueGenericSend+0xaa>
 8003958:	2300      	movs	r3, #0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <xQueueGenericSend+0xc6>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	61fb      	str	r3, [r7, #28]
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	e7fd      	b.n	8003972 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003976:	f002 f8cf 	bl	8005b18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <xQueueGenericSend+0xdc>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d112      	bne.n	80039b2 <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003992:	f000 f9ed 	bl	8003d70 <prvCopyDataToQueue>
 8003996:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a2:	3324      	adds	r3, #36	@ 0x24
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 f8db 	bl	8004b60 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039aa:	f002 f8e7 	bl	8005b7c <vPortExitCritical>
				return pdPASS;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e062      	b.n	8003a78 <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039b8:	f002 f8e0 	bl	8005b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	e05b      	b.n	8003a78 <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039c6:	f107 0314 	add.w	r3, r7, #20
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f990 	bl	8004cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039d4:	f002 f8d2 	bl	8005b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039d8:	f000 fe86 	bl	80046e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039dc:	f002 f89c 	bl	8005b18 <vPortEnterCritical>
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d103      	bne.n	80039f6 <xQueueGenericSend+0x146>
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d103      	bne.n	8003a0c <xQueueGenericSend+0x15c>
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a0c:	f002 f8b6 	bl	8005b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a10:	1d3a      	adds	r2, r7, #4
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f97f 	bl	8004d1c <xTaskCheckForTimeOut>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d123      	bne.n	8003a6c <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a26:	f000 fa9b 	bl	8003f60 <prvIsQueueFull>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d017      	beq.n	8003a60 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a32:	3310      	adds	r3, #16
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 f801 	bl	8004a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a40:	f000 fa26 	bl	8003e90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a44:	f000 fe5e 	bl	8004704 <xTaskResumeAll>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d193      	bne.n	8003976 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a80 <xQueueGenericSend+0x1d0>)
 8003a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	e78a      	b.n	8003976 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a62:	f000 fa15 	bl	8003e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a66:	f000 fe4d 	bl	8004704 <xTaskResumeAll>
 8003a6a:	e784      	b.n	8003976 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a6e:	f000 fa0f 	bl	8003e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a72:	f000 fe47 	bl	8004704 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3738      	adds	r7, #56	@ 0x38
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b090      	sub	sp, #64	@ 0x40
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <xQueueGenericSendFromISR+0x3e>
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <xQueueGenericSendFromISR+0x42>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <xQueueGenericSendFromISR+0x44>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d103      	bne.n	8003af2 <xQueueGenericSendFromISR+0x6e>
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <xQueueGenericSendFromISR+0x72>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <xQueueGenericSendFromISR+0x74>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	623b      	str	r3, [r7, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b14:	f002 f8e0 	bl	8005cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b18:	f3ef 8211 	mrs	r2, BASEPRI
 8003b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d302      	bcc.n	8003b46 <xQueueGenericSendFromISR+0xc2>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d12f      	bne.n	8003ba6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b5c:	f000 f908 	bl	8003d70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d112      	bne.n	8003b90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b74:	3324      	adds	r3, #36	@ 0x24
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fff2 	bl	8004b60 <xTaskRemoveFromEventList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00e      	beq.n	8003ba0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e007      	b.n	8003ba0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b94:	3301      	adds	r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	b25a      	sxtb	r2, r3
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003ba4:	e001      	b.n	8003baa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3740      	adds	r7, #64	@ 0x40
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	@ 0x30
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <xQueueReceive+0x32>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	623b      	str	r3, [r7, #32]
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <xQueueReceive+0x40>
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <xQueueReceive+0x44>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <xQueueReceive+0x46>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <xQueueReceive+0x62>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61fb      	str	r3, [r7, #28]
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	e7fd      	b.n	8003c1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c22:	f001 f9d1 	bl	8004fc8 <xTaskGetSchedulerState>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <xQueueReceive+0x72>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <xQueueReceive+0x76>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <xQueueReceive+0x78>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <xQueueReceive+0x94>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	61bb      	str	r3, [r7, #24]
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	e7fd      	b.n	8003c50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c54:	f001 ff60 	bl	8005b18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d014      	beq.n	8003c8e <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c68:	f000 f8ec 	bl	8003e44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	1e5a      	subs	r2, r3, #1
 8003c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7e:	3310      	adds	r3, #16
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 ff6d 	bl	8004b60 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c86:	f001 ff79 	bl	8005b7c <vPortExitCritical>
				return pdPASS;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e069      	b.n	8003d62 <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c94:	f001 ff72 	bl	8005b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e062      	b.n	8003d62 <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca2:	f107 0310 	add.w	r3, r7, #16
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 f822 	bl	8004cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cac:	2301      	movs	r3, #1
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cb0:	f001 ff64 	bl	8005b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb4:	f000 fd18 	bl	80046e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb8:	f001 ff2e 	bl	8005b18 <vPortEnterCritical>
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc2:	b25b      	sxtb	r3, r3
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d103      	bne.n	8003cd2 <xQueueReceive+0x112>
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cd8:	b25b      	sxtb	r3, r3
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d103      	bne.n	8003ce8 <xQueueReceive+0x128>
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ce8:	f001 ff48 	bl	8005b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cec:	1d3a      	adds	r2, r7, #4
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f001 f811 	bl	8004d1c <xTaskCheckForTimeOut>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d123      	bne.n	8003d48 <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d02:	f000 f917 	bl	8003f34 <prvIsQueueEmpty>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d017      	beq.n	8003d3c <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	3324      	adds	r3, #36	@ 0x24
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fe93 	bl	8004a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d1c:	f000 f8b8 	bl	8003e90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d20:	f000 fcf0 	bl	8004704 <xTaskResumeAll>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d194      	bne.n	8003c54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	@ (8003d6c <xQueueReceive+0x1ac>)
 8003d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	e78b      	b.n	8003c54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d3e:	f000 f8a7 	bl	8003e90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d42:	f000 fcdf 	bl	8004704 <xTaskResumeAll>
 8003d46:	e785      	b.n	8003c54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d4a:	f000 f8a1 	bl	8003e90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4e:	f000 fcd9 	bl	8004704 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d54:	f000 f8ee 	bl	8003f34 <prvIsQueueEmpty>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f43f af7a 	beq.w	8003c54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3730      	adds	r7, #48	@ 0x30
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d14d      	bne.n	8003e32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f932 	bl	8005004 <xTaskPriorityDisinherit>
 8003da0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e043      	b.n	8003e32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d119      	bne.n	8003de4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6858      	ldr	r0, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	461a      	mov	r2, r3
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	f002 fc9f 	bl	80066fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	441a      	add	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d32b      	bcc.n	8003e32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	e026      	b.n	8003e32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68d8      	ldr	r0, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	461a      	mov	r2, r3
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	f002 fc85 	bl	80066fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	425b      	negs	r3, r3
 8003dfe:	441a      	add	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d207      	bcs.n	8003e20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	425b      	negs	r3, r3
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d105      	bne.n	8003e32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d018      	beq.n	8003e88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	441a      	add	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d303      	bcc.n	8003e78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68d9      	ldr	r1, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	461a      	mov	r2, r3
 8003e82:	6838      	ldr	r0, [r7, #0]
 8003e84:	f002 fc3b 	bl	80066fe <memcpy>
	}
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e98:	f001 fe3e 	bl	8005b18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ea4:	e011      	b.n	8003eca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d012      	beq.n	8003ed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3324      	adds	r3, #36	@ 0x24
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fe54 	bl	8004b60 <xTaskRemoveFromEventList>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ebe:	f000 ff91 	bl	8004de4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dce9      	bgt.n	8003ea6 <prvUnlockQueue+0x16>
 8003ed2:	e000      	b.n	8003ed6 <prvUnlockQueue+0x46>
					break;
 8003ed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	22ff      	movs	r2, #255	@ 0xff
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ede:	f001 fe4d 	bl	8005b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ee2:	f001 fe19 	bl	8005b18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eee:	e011      	b.n	8003f14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3310      	adds	r3, #16
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fe2f 	bl	8004b60 <xTaskRemoveFromEventList>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f08:	f000 ff6c 	bl	8004de4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dce9      	bgt.n	8003ef0 <prvUnlockQueue+0x60>
 8003f1c:	e000      	b.n	8003f20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	22ff      	movs	r2, #255	@ 0xff
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003f28:	f001 fe28 	bl	8005b7c <vPortExitCritical>
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f3c:	f001 fdec 	bl	8005b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e001      	b.n	8003f52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f52:	f001 fe13 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f68:	f001 fdd6 	bl	8005b18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d102      	bne.n	8003f7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e001      	b.n	8003f82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f82:	f001 fdfb 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 8003f86:	68fb      	ldr	r3, [r7, #12]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e014      	b.n	8003fca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003fe0 <vQueueAddToRegistry+0x50>)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fac:	490c      	ldr	r1, [pc, #48]	@ (8003fe0 <vQueueAddToRegistry+0x50>)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <vQueueAddToRegistry+0x50>)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fc2:	e006      	b.n	8003fd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b07      	cmp	r3, #7
 8003fce:	d9e7      	bls.n	8003fa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000890 	.word	0x20000890

08003fe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ff4:	f001 fd90 	bl	8005b18 <vPortEnterCritical>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ffe:	b25b      	sxtb	r3, r3
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d103      	bne.n	800400e <vQueueWaitForMessageRestricted+0x2a>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004014:	b25b      	sxtb	r3, r3
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d103      	bne.n	8004024 <vQueueWaitForMessageRestricted+0x40>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004024:	f001 fdaa 	bl	8005b7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3324      	adds	r3, #36	@ 0x24
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fd65 	bl	8004b08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800403e:	6978      	ldr	r0, [r7, #20]
 8004040:	f7ff ff26 	bl	8003e90 <prvUnlockQueue>
	}
 8004044:	bf00      	nop
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08e      	sub	sp, #56	@ 0x38
 8004050:	af04      	add	r7, sp, #16
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	623b      	str	r3, [r7, #32]
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <xTaskCreateStatic+0x4a>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	61fb      	str	r3, [r7, #28]
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	e7fd      	b.n	8004092 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004096:	23a8      	movs	r3, #168	@ 0xa8
 8004098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2ba8      	cmp	r3, #168	@ 0xa8
 800409e:	d00b      	beq.n	80040b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	61bb      	str	r3, [r7, #24]
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01e      	beq.n	80040fe <xTaskCreateStatic+0xb2>
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01b      	beq.n	80040fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040d8:	2300      	movs	r3, #0
 80040da:	9303      	str	r3, [sp, #12]
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	9302      	str	r3, [sp, #8]
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f851 	bl	8004198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040f8:	f000 f8f6 	bl	80042e8 <prvAddNewTaskToReadyList>
 80040fc:	e001      	b.n	8004102 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004102:	697b      	ldr	r3, [r7, #20]
	}
 8004104:	4618      	mov	r0, r3
 8004106:	3728      	adds	r7, #40	@ 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	@ 0x30
 8004110:	af04      	add	r7, sp, #16
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fe1b 	bl	8005d5c <pvPortMalloc>
 8004126:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00e      	beq.n	800414c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800412e:	20a8      	movs	r0, #168	@ 0xa8
 8004130:	f001 fe14 	bl	8005d5c <pvPortMalloc>
 8004134:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30
 8004142:	e005      	b.n	8004150 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004144:	6978      	ldr	r0, [r7, #20]
 8004146:	f001 fed7 	bl	8005ef8 <vPortFree>
 800414a:	e001      	b.n	8004150 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d017      	beq.n	8004186 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	2300      	movs	r3, #0
 8004162:	9303      	str	r3, [sp, #12]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	9302      	str	r3, [sp, #8]
 8004168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f80f 	bl	8004198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800417a:	69f8      	ldr	r0, [r7, #28]
 800417c:	f000 f8b4 	bl	80042e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004180:	2301      	movs	r3, #1
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e002      	b.n	800418c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004186:	f04f 33ff 	mov.w	r3, #4294967295
 800418a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800418c:	69bb      	ldr	r3, [r7, #24]
	}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	461a      	mov	r2, r3
 80041b0:	21a5      	movs	r1, #165	@ 0xa5
 80041b2:	f002 f9cb 	bl	800654c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041c0:	3b01      	subs	r3, #1
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	617b      	str	r3, [r7, #20]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01f      	beq.n	8004238 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e012      	b.n	8004224 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	7819      	ldrb	r1, [r3, #0]
 8004206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	3334      	adds	r3, #52	@ 0x34
 800420e:	460a      	mov	r2, r1
 8004210:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3301      	adds	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	d9e9      	bls.n	80041fe <prvInitialiseNewTask+0x66>
 800422a:	e000      	b.n	800422e <prvInitialiseNewTask+0x96>
			{
				break;
 800422c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004236:	e003      	b.n	8004240 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004242:	2b37      	cmp	r3, #55	@ 0x37
 8004244:	d901      	bls.n	800424a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004246:	2337      	movs	r3, #55	@ 0x37
 8004248:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800424e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004254:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	2200      	movs	r2, #0
 800425a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	3304      	adds	r3, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff f995 	bl	8003590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	3318      	adds	r3, #24
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff f990 	bl	8003590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004274:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004278:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004284:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	2200      	movs	r2, #0
 800428a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	2200      	movs	r2, #0
 8004292:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	3354      	adds	r3, #84	@ 0x54
 800429a:	224c      	movs	r2, #76	@ 0x4c
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f002 f954 	bl	800654c <memset>
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <prvInitialiseNewTask+0x144>)
 80042a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	4a0c      	ldr	r2, [pc, #48]	@ (80042e0 <prvInitialiseNewTask+0x148>)
 80042ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	4a0c      	ldr	r2, [pc, #48]	@ (80042e4 <prvInitialiseNewTask+0x14c>)
 80042b4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	69b8      	ldr	r0, [r7, #24]
 80042bc:	f001 faf8 	bl	80058b0 <pxPortInitialiseStack>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042d2:	bf00      	nop
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20004b24 	.word	0x20004b24
 80042e0:	20004b8c 	.word	0x20004b8c
 80042e4:	20004bf4 	.word	0x20004bf4

080042e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042f0:	f001 fc12 	bl	8005b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042f4:	4b26      	ldr	r3, [pc, #152]	@ (8004390 <prvAddNewTaskToReadyList+0xa8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3301      	adds	r3, #1
 80042fa:	4a25      	ldr	r2, [pc, #148]	@ (8004390 <prvAddNewTaskToReadyList+0xa8>)
 80042fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042fe:	4b25      	ldr	r3, [pc, #148]	@ (8004394 <prvAddNewTaskToReadyList+0xac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004306:	4a23      	ldr	r2, [pc, #140]	@ (8004394 <prvAddNewTaskToReadyList+0xac>)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800430c:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <prvAddNewTaskToReadyList+0xa8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d110      	bne.n	8004336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004314:	f000 fd84 	bl	8004e20 <prvInitialiseTaskLists>
 8004318:	e00d      	b.n	8004336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800431a:	4b1f      	ldr	r3, [pc, #124]	@ (8004398 <prvAddNewTaskToReadyList+0xb0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004322:	4b1c      	ldr	r3, [pc, #112]	@ (8004394 <prvAddNewTaskToReadyList+0xac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432c:	429a      	cmp	r2, r3
 800432e:	d802      	bhi.n	8004336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004330:	4a18      	ldr	r2, [pc, #96]	@ (8004394 <prvAddNewTaskToReadyList+0xac>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004336:	4b19      	ldr	r3, [pc, #100]	@ (800439c <prvAddNewTaskToReadyList+0xb4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	4a17      	ldr	r2, [pc, #92]	@ (800439c <prvAddNewTaskToReadyList+0xb4>)
 800433e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004340:	4b16      	ldr	r3, [pc, #88]	@ (800439c <prvAddNewTaskToReadyList+0xb4>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434c:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <prvAddNewTaskToReadyList+0xb8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d903      	bls.n	800435c <prvAddNewTaskToReadyList+0x74>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	4a11      	ldr	r2, [pc, #68]	@ (80043a0 <prvAddNewTaskToReadyList+0xb8>)
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4a0e      	ldr	r2, [pc, #56]	@ (80043a4 <prvAddNewTaskToReadyList+0xbc>)
 800436a:	441a      	add	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f7ff f919 	bl	80035aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004378:	f001 fc00 	bl	8005b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800437c:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <prvAddNewTaskToReadyList+0xb0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004384:	4b03      	ldr	r3, [pc, #12]	@ (8004394 <prvAddNewTaskToReadyList+0xac>)
 8004386:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000da4 	.word	0x20000da4
 8004394:	200008d0 	.word	0x200008d0
 8004398:	20000db0 	.word	0x20000db0
 800439c:	20000dc0 	.word	0x20000dc0
 80043a0:	20000dac 	.word	0x20000dac
 80043a4:	200008d4 	.word	0x200008d4

080043a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043ba:	4b14      	ldr	r3, [pc, #80]	@ (800440c <vTaskDelay+0x64>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <vTaskDelay+0x32>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	60bb      	str	r3, [r7, #8]
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	e7fd      	b.n	80043d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043da:	f000 f985 	bl	80046e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043de:	2100      	movs	r1, #0
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fe97 	bl	8005114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043e6:	f000 f98d 	bl	8004704 <xTaskResumeAll>
 80043ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d107      	bne.n	8004402 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80043f2:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <vTaskDelay+0x68>)
 80043f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000dcc 	.word	0x20000dcc
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <eTaskGetState+0x2a>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60bb      	str	r3, [r7, #8]
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800443e:	4b24      	ldr	r3, [pc, #144]	@ (80044d0 <eTaskGetState+0xbc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	429a      	cmp	r2, r3
 8004446:	d102      	bne.n	800444e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004448:	2300      	movs	r3, #0
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e03a      	b.n	80044c4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800444e:	f001 fb63 	bl	8005b18 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004458:	4b1e      	ldr	r3, [pc, #120]	@ (80044d4 <eTaskGetState+0xc0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800445e:	4b1e      	ldr	r3, [pc, #120]	@ (80044d8 <eTaskGetState+0xc4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004464:	f001 fb8a 	bl	8005b7c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	429a      	cmp	r2, r3
 800446e:	d003      	beq.n	8004478 <eTaskGetState+0x64>
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d102      	bne.n	800447e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004478:	2302      	movs	r3, #2
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e022      	b.n	80044c4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4a16      	ldr	r2, [pc, #88]	@ (80044dc <eTaskGetState+0xc8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d112      	bne.n	80044ac <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d102      	bne.n	80044a0 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800449a:	2302      	movs	r3, #2
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e011      	b.n	80044c4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80044a0:	2303      	movs	r3, #3
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e00e      	b.n	80044c4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80044a6:	2302      	movs	r3, #2
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e00b      	b.n	80044c4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	4a0c      	ldr	r2, [pc, #48]	@ (80044e0 <eTaskGetState+0xcc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d002      	beq.n	80044ba <eTaskGetState+0xa6>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80044ba:	2304      	movs	r3, #4
 80044bc:	77fb      	strb	r3, [r7, #31]
 80044be:	e001      	b.n	80044c4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80044c0:	2301      	movs	r3, #1
 80044c2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80044c4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200008d0 	.word	0x200008d0
 80044d4:	20000d5c 	.word	0x20000d5c
 80044d8:	20000d60 	.word	0x20000d60
 80044dc:	20000d90 	.word	0x20000d90
 80044e0:	20000d78 	.word	0x20000d78

080044e4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b37      	cmp	r3, #55	@ 0x37
 80044f6:	d90b      	bls.n	8004510 <vTaskPrioritySet+0x2c>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60fb      	str	r3, [r7, #12]
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b37      	cmp	r3, #55	@ 0x37
 8004514:	d901      	bls.n	800451a <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004516:	2337      	movs	r3, #55	@ 0x37
 8004518:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800451a:	f001 fafd 	bl	8005b18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <vTaskPrioritySet+0x46>
 8004524:	4b35      	ldr	r3, [pc, #212]	@ (80045fc <vTaskPrioritySet+0x118>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	e000      	b.n	800452c <vTaskPrioritySet+0x48>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004532:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d058      	beq.n	80045ee <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	429a      	cmp	r2, r3
 8004542:	d90d      	bls.n	8004560 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8004544:	4b2d      	ldr	r3, [pc, #180]	@ (80045fc <vTaskPrioritySet+0x118>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	429a      	cmp	r2, r3
 800454c:	d00f      	beq.n	800456e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800454e:	4b2b      	ldr	r3, [pc, #172]	@ (80045fc <vTaskPrioritySet+0x118>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d309      	bcc.n	800456e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e006      	b.n	800456e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8004560:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <vTaskPrioritySet+0x118>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	429a      	cmp	r2, r3
 8004568:	d101      	bne.n	800456e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	429a      	cmp	r2, r3
 800457e:	d102      	bne.n	8004586 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db04      	blt.n	800459e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	6959      	ldr	r1, [r3, #20]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4a14      	ldr	r2, [pc, #80]	@ (8004600 <vTaskPrioritySet+0x11c>)
 80045ae:	4413      	add	r3, r2
 80045b0:	4299      	cmp	r1, r3
 80045b2:	d11c      	bne.n	80045ee <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f853 	bl	8003664 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <vTaskPrioritySet+0x120>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d903      	bls.n	80045d2 <vTaskPrioritySet+0xee>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004604 <vTaskPrioritySet+0x120>)
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4a08      	ldr	r2, [pc, #32]	@ (8004600 <vTaskPrioritySet+0x11c>)
 80045e0:	441a      	add	r2, r3
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f7fe ffde 	bl	80035aa <vListInsertEnd>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80045ee:	f001 fac5 	bl	8005b7c <vPortExitCritical>
	}
 80045f2:	bf00      	nop
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	200008d0 	.word	0x200008d0
 8004600:	200008d4 	.word	0x200008d4
 8004604:	20000dac 	.word	0x20000dac

08004608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	@ 0x28
 800460c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004616:	463a      	mov	r2, r7
 8004618:	1d39      	adds	r1, r7, #4
 800461a:	f107 0308 	add.w	r3, r7, #8
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fd6c 	bl	80030fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	9202      	str	r2, [sp, #8]
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	2300      	movs	r3, #0
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2300      	movs	r3, #0
 8004634:	460a      	mov	r2, r1
 8004636:	4924      	ldr	r1, [pc, #144]	@ (80046c8 <vTaskStartScheduler+0xc0>)
 8004638:	4824      	ldr	r0, [pc, #144]	@ (80046cc <vTaskStartScheduler+0xc4>)
 800463a:	f7ff fd07 	bl	800404c <xTaskCreateStatic>
 800463e:	4603      	mov	r3, r0
 8004640:	4a23      	ldr	r2, [pc, #140]	@ (80046d0 <vTaskStartScheduler+0xc8>)
 8004642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004644:	4b22      	ldr	r3, [pc, #136]	@ (80046d0 <vTaskStartScheduler+0xc8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e001      	b.n	8004656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800465c:	f000 fdae 	bl	80051bc <xTimerCreateTimerTask>
 8004660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d11b      	bne.n	80046a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	613b      	str	r3, [r7, #16]
}
 800467a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800467c:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <vTaskStartScheduler+0xcc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3354      	adds	r3, #84	@ 0x54
 8004682:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <vTaskStartScheduler+0xd0>)
 8004684:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004686:	4b15      	ldr	r3, [pc, #84]	@ (80046dc <vTaskStartScheduler+0xd4>)
 8004688:	f04f 32ff 	mov.w	r2, #4294967295
 800468c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <vTaskStartScheduler+0xd8>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004694:	4b13      	ldr	r3, [pc, #76]	@ (80046e4 <vTaskStartScheduler+0xdc>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800469a:	f001 f999 	bl	80059d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800469e:	e00f      	b.n	80046c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d10b      	bne.n	80046c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	60fb      	str	r3, [r7, #12]
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <vTaskStartScheduler+0xb4>
}
 80046c0:	bf00      	nop
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	08007198 	.word	0x08007198
 80046cc:	08004dfd 	.word	0x08004dfd
 80046d0:	20000dc8 	.word	0x20000dc8
 80046d4:	200008d0 	.word	0x200008d0
 80046d8:	2000001c 	.word	0x2000001c
 80046dc:	20000dc4 	.word	0x20000dc4
 80046e0:	20000db0 	.word	0x20000db0
 80046e4:	20000da8 	.word	0x20000da8

080046e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046ec:	4b04      	ldr	r3, [pc, #16]	@ (8004700 <vTaskSuspendAll+0x18>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a03      	ldr	r2, [pc, #12]	@ (8004700 <vTaskSuspendAll+0x18>)
 80046f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046f6:	bf00      	nop
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	20000dcc 	.word	0x20000dcc

08004704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004712:	4b3c      	ldr	r3, [pc, #240]	@ (8004804 <xTaskResumeAll+0x100>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <xTaskResumeAll+0x2e>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	603b      	str	r3, [r7, #0]
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	e7fd      	b.n	800472e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004732:	f001 f9f1 	bl	8005b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004736:	4b33      	ldr	r3, [pc, #204]	@ (8004804 <xTaskResumeAll+0x100>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3b01      	subs	r3, #1
 800473c:	4a31      	ldr	r2, [pc, #196]	@ (8004804 <xTaskResumeAll+0x100>)
 800473e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004740:	4b30      	ldr	r3, [pc, #192]	@ (8004804 <xTaskResumeAll+0x100>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d156      	bne.n	80047f6 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004748:	4b2f      	ldr	r3, [pc, #188]	@ (8004808 <xTaskResumeAll+0x104>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d052      	beq.n	80047f6 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004750:	e02f      	b.n	80047b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004752:	4b2e      	ldr	r3, [pc, #184]	@ (800480c <xTaskResumeAll+0x108>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3318      	adds	r3, #24
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe ff80 	bl	8003664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3304      	adds	r3, #4
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe ff7b 	bl	8003664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004772:	4b27      	ldr	r3, [pc, #156]	@ (8004810 <xTaskResumeAll+0x10c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d903      	bls.n	8004782 <xTaskResumeAll+0x7e>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	4a24      	ldr	r2, [pc, #144]	@ (8004810 <xTaskResumeAll+0x10c>)
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4a21      	ldr	r2, [pc, #132]	@ (8004814 <xTaskResumeAll+0x110>)
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fe ff06 	bl	80035aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <xTaskResumeAll+0x114>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d302      	bcc.n	80047b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80047ac:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <xTaskResumeAll+0x118>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047b2:	4b16      	ldr	r3, [pc, #88]	@ (800480c <xTaskResumeAll+0x108>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1cb      	bne.n	8004752 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047c0:	f000 fbd2 	bl	8004f68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047c4:	4b16      	ldr	r3, [pc, #88]	@ (8004820 <xTaskResumeAll+0x11c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d010      	beq.n	80047f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047d0:	f000 f838 	bl	8004844 <xTaskIncrementTick>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80047da:	4b10      	ldr	r3, [pc, #64]	@ (800481c <xTaskResumeAll+0x118>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f1      	bne.n	80047d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80047ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <xTaskResumeAll+0x11c>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047f2:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <xTaskResumeAll+0x118>)
 80047f4:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047f6:	f001 f9c1 	bl	8005b7c <vPortExitCritical>

	return xAlreadyYielded;
 80047fa:	687b      	ldr	r3, [r7, #4]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000dcc 	.word	0x20000dcc
 8004808:	20000da4 	.word	0x20000da4
 800480c:	20000d64 	.word	0x20000d64
 8004810:	20000dac 	.word	0x20000dac
 8004814:	200008d4 	.word	0x200008d4
 8004818:	200008d0 	.word	0x200008d0
 800481c:	20000db8 	.word	0x20000db8
 8004820:	20000db4 	.word	0x20000db4

08004824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800482a:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <xTaskGetTickCount+0x1c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004830:	687b      	ldr	r3, [r7, #4]
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000da8 	.word	0x20000da8

08004844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800484e:	4b40      	ldr	r3, [pc, #256]	@ (8004950 <xTaskIncrementTick+0x10c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d171      	bne.n	800493a <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004856:	4b3f      	ldr	r3, [pc, #252]	@ (8004954 <xTaskIncrementTick+0x110>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800485e:	4a3d      	ldr	r2, [pc, #244]	@ (8004954 <xTaskIncrementTick+0x110>)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d121      	bne.n	80048ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800486a:	4b3b      	ldr	r3, [pc, #236]	@ (8004958 <xTaskIncrementTick+0x114>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <xTaskIncrementTick+0x48>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	603b      	str	r3, [r7, #0]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <xTaskIncrementTick+0x44>
 800488c:	4b32      	ldr	r3, [pc, #200]	@ (8004958 <xTaskIncrementTick+0x114>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	4b32      	ldr	r3, [pc, #200]	@ (800495c <xTaskIncrementTick+0x118>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a30      	ldr	r2, [pc, #192]	@ (8004958 <xTaskIncrementTick+0x114>)
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	4a30      	ldr	r2, [pc, #192]	@ (800495c <xTaskIncrementTick+0x118>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004960 <xTaskIncrementTick+0x11c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004960 <xTaskIncrementTick+0x11c>)
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	f000 fb5d 	bl	8004f68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004964 <xTaskIncrementTick+0x120>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d345      	bcc.n	8004944 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b8:	4b27      	ldr	r3, [pc, #156]	@ (8004958 <xTaskIncrementTick+0x114>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c2:	4b28      	ldr	r3, [pc, #160]	@ (8004964 <xTaskIncrementTick+0x120>)
 80048c4:	f04f 32ff 	mov.w	r2, #4294967295
 80048c8:	601a      	str	r2, [r3, #0]
					break;
 80048ca:	e03b      	b.n	8004944 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048cc:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <xTaskIncrementTick+0x114>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d203      	bcs.n	80048ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <xTaskIncrementTick+0x120>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048ea:	e02b      	b.n	8004944 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe feb7 	bl	8003664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	3318      	adds	r3, #24
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe feae 	bl	8003664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490c:	4b16      	ldr	r3, [pc, #88]	@ (8004968 <xTaskIncrementTick+0x124>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d903      	bls.n	800491c <xTaskIncrementTick+0xd8>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	4a13      	ldr	r2, [pc, #76]	@ (8004968 <xTaskIncrementTick+0x124>)
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4a10      	ldr	r2, [pc, #64]	@ (800496c <xTaskIncrementTick+0x128>)
 800492a:	441a      	add	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7fe fe39 	bl	80035aa <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004938:	e7be      	b.n	80048b8 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800493a:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <xTaskIncrementTick+0x12c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	4a0b      	ldr	r2, [pc, #44]	@ (8004970 <xTaskIncrementTick+0x12c>)
 8004942:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004944:	697b      	ldr	r3, [r7, #20]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000dcc 	.word	0x20000dcc
 8004954:	20000da8 	.word	0x20000da8
 8004958:	20000d5c 	.word	0x20000d5c
 800495c:	20000d60 	.word	0x20000d60
 8004960:	20000dbc 	.word	0x20000dbc
 8004964:	20000dc4 	.word	0x20000dc4
 8004968:	20000dac 	.word	0x20000dac
 800496c:	200008d4 	.word	0x200008d4
 8004970:	20000db4 	.word	0x20000db4

08004974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800497a:	4b2b      	ldr	r3, [pc, #172]	@ (8004a28 <vTaskSwitchContext+0xb4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004982:	4b2a      	ldr	r3, [pc, #168]	@ (8004a2c <vTaskSwitchContext+0xb8>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004988:	e047      	b.n	8004a1a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800498a:	4b28      	ldr	r3, [pc, #160]	@ (8004a2c <vTaskSwitchContext+0xb8>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004990:	4b27      	ldr	r3, [pc, #156]	@ (8004a30 <vTaskSwitchContext+0xbc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e011      	b.n	80049bc <vTaskSwitchContext+0x48>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	607b      	str	r3, [r7, #4]
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	e7fd      	b.n	80049b2 <vTaskSwitchContext+0x3e>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	491d      	ldr	r1, [pc, #116]	@ (8004a34 <vTaskSwitchContext+0xc0>)
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0e3      	beq.n	8004998 <vTaskSwitchContext+0x24>
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4a16      	ldr	r2, [pc, #88]	@ (8004a34 <vTaskSwitchContext+0xc0>)
 80049dc:	4413      	add	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	3308      	adds	r3, #8
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d104      	bne.n	8004a00 <vTaskSwitchContext+0x8c>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	4a0c      	ldr	r2, [pc, #48]	@ (8004a38 <vTaskSwitchContext+0xc4>)
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	4a09      	ldr	r2, [pc, #36]	@ (8004a30 <vTaskSwitchContext+0xbc>)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a10:	4b09      	ldr	r3, [pc, #36]	@ (8004a38 <vTaskSwitchContext+0xc4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3354      	adds	r3, #84	@ 0x54
 8004a16:	4a09      	ldr	r2, [pc, #36]	@ (8004a3c <vTaskSwitchContext+0xc8>)
 8004a18:	6013      	str	r3, [r2, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000dcc 	.word	0x20000dcc
 8004a2c:	20000db8 	.word	0x20000db8
 8004a30:	20000dac 	.word	0x20000dac
 8004a34:	200008d4 	.word	0x200008d4
 8004a38:	200008d0 	.word	0x200008d0
 8004a3c:	2000001c 	.word	0x2000001c

08004a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	60fb      	str	r3, [r7, #12]
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a68:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <vTaskPlaceOnEventList+0x48>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3318      	adds	r3, #24
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fe fdbe 	bl	80035f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a76:	2101      	movs	r1, #1
 8004a78:	6838      	ldr	r0, [r7, #0]
 8004a7a:	f000 fb4b 	bl	8005114 <prvAddCurrentTaskToDelayedList>
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200008d0 	.word	0x200008d0

08004a8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	617b      	str	r3, [r7, #20]
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004ab6:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	613b      	str	r3, [r7, #16]
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	e7fd      	b.n	8004ad2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004ae0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ae2:	4b08      	ldr	r3, [pc, #32]	@ (8004b04 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3318      	adds	r3, #24
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7fe fd5d 	bl	80035aa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004af0:	2101      	movs	r1, #1
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fb0e 	bl	8005114 <prvAddCurrentTaskToDelayedList>
}
 8004af8:	bf00      	nop
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000dcc 	.word	0x20000dcc
 8004b04:	200008d0 	.word	0x200008d0

08004b08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	617b      	str	r3, [r7, #20]
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b32:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <vTaskPlaceOnEventListRestricted+0x54>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3318      	adds	r3, #24
 8004b38:	4619      	mov	r1, r3
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7fe fd35 	bl	80035aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b46:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	68b8      	ldr	r0, [r7, #8]
 8004b50:	f000 fae0 	bl	8005114 <prvAddCurrentTaskToDelayedList>
	}
 8004b54:	bf00      	nop
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200008d0 	.word	0x200008d0

08004b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60fb      	str	r3, [r7, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	3318      	adds	r3, #24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe fd66 	bl	8003664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b98:	4b1d      	ldr	r3, [pc, #116]	@ (8004c10 <xTaskRemoveFromEventList+0xb0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d11d      	bne.n	8004bdc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fe fd5d 	bl	8003664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bae:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <xTaskRemoveFromEventList+0xb4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d903      	bls.n	8004bbe <xTaskRemoveFromEventList+0x5e>
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	4a16      	ldr	r2, [pc, #88]	@ (8004c14 <xTaskRemoveFromEventList+0xb4>)
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4a13      	ldr	r2, [pc, #76]	@ (8004c18 <xTaskRemoveFromEventList+0xb8>)
 8004bcc:	441a      	add	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f7fe fce8 	bl	80035aa <vListInsertEnd>
 8004bda:	e005      	b.n	8004be8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	3318      	adds	r3, #24
 8004be0:	4619      	mov	r1, r3
 8004be2:	480e      	ldr	r0, [pc, #56]	@ (8004c1c <xTaskRemoveFromEventList+0xbc>)
 8004be4:	f7fe fce1 	bl	80035aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bec:	4b0c      	ldr	r3, [pc, #48]	@ (8004c20 <xTaskRemoveFromEventList+0xc0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d905      	bls.n	8004c02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <xTaskRemoveFromEventList+0xc4>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e001      	b.n	8004c06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c06:	697b      	ldr	r3, [r7, #20]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000dcc 	.word	0x20000dcc
 8004c14:	20000dac 	.word	0x20000dac
 8004c18:	200008d4 	.word	0x200008d4
 8004c1c:	20000d64 	.word	0x20000d64
 8004c20:	200008d0 	.word	0x200008d0
 8004c24:	20000db8 	.word	0x20000db8

08004c28 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004c32:	4b2a      	ldr	r3, [pc, #168]	@ (8004cdc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	613b      	str	r3, [r7, #16]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	60fb      	str	r3, [r7, #12]
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fe fcef 	bl	8003664 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe fcea 	bl	8003664 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c94:	4b12      	ldr	r3, [pc, #72]	@ (8004ce0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d903      	bls.n	8004ca4 <vTaskRemoveFromUnorderedEventList+0x7c>
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004cb2:	441a      	add	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7fe fc75 	bl	80035aa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc4:	4b08      	ldr	r3, [pc, #32]	@ (8004ce8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d902      	bls.n	8004cd4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004cce:	4b07      	ldr	r3, [pc, #28]	@ (8004cec <vTaskRemoveFromUnorderedEventList+0xc4>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
	}
}
 8004cd4:	bf00      	nop
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000dcc 	.word	0x20000dcc
 8004ce0:	20000dac 	.word	0x20000dac
 8004ce4:	200008d4 	.word	0x200008d4
 8004ce8:	200008d0 	.word	0x200008d0
 8004cec:	20000db8 	.word	0x20000db8

08004cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cf8:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <vTaskInternalSetTimeOutState+0x24>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d00:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <vTaskInternalSetTimeOutState+0x28>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	605a      	str	r2, [r3, #4]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	20000dbc 	.word	0x20000dbc
 8004d18:	20000da8 	.word	0x20000da8

08004d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	613b      	str	r3, [r7, #16]
}
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	e7fd      	b.n	8004d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	60fb      	str	r3, [r7, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	e7fd      	b.n	8004d5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d62:	f000 fed9 	bl	8005b18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d66:	4b1d      	ldr	r3, [pc, #116]	@ (8004ddc <xTaskCheckForTimeOut+0xc0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d102      	bne.n	8004d86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	e023      	b.n	8004dce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b15      	ldr	r3, [pc, #84]	@ (8004de0 <xTaskCheckForTimeOut+0xc4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d007      	beq.n	8004da2 <xTaskCheckForTimeOut+0x86>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d302      	bcc.n	8004da2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e015      	b.n	8004dce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d20b      	bcs.n	8004dc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	1ad2      	subs	r2, r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ff99 	bl	8004cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e004      	b.n	8004dce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dce:	f000 fed5 	bl	8005b7c <vPortExitCritical>

	return xReturn;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000da8 	.word	0x20000da8
 8004de0:	20000dbc 	.word	0x20000dbc

08004de4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004de8:	4b03      	ldr	r3, [pc, #12]	@ (8004df8 <vTaskMissedYield+0x14>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	20000db8 	.word	0x20000db8

08004dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e04:	f000 f84c 	bl	8004ea0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8004e08:	4b04      	ldr	r3, [pc, #16]	@ (8004e1c <prvIdleTask+0x20>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e18:	bf00      	nop
 8004e1a:	e7f3      	b.n	8004e04 <prvIdleTask+0x8>
 8004e1c:	e000ed04 	.word	0xe000ed04

08004e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	e00c      	b.n	8004e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4a12      	ldr	r2, [pc, #72]	@ (8004e80 <prvInitialiseTaskLists+0x60>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fb88 	bl	8003550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3301      	adds	r3, #1
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b37      	cmp	r3, #55	@ 0x37
 8004e4a:	d9ef      	bls.n	8004e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e4c:	480d      	ldr	r0, [pc, #52]	@ (8004e84 <prvInitialiseTaskLists+0x64>)
 8004e4e:	f7fe fb7f 	bl	8003550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e52:	480d      	ldr	r0, [pc, #52]	@ (8004e88 <prvInitialiseTaskLists+0x68>)
 8004e54:	f7fe fb7c 	bl	8003550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e58:	480c      	ldr	r0, [pc, #48]	@ (8004e8c <prvInitialiseTaskLists+0x6c>)
 8004e5a:	f7fe fb79 	bl	8003550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e5e:	480c      	ldr	r0, [pc, #48]	@ (8004e90 <prvInitialiseTaskLists+0x70>)
 8004e60:	f7fe fb76 	bl	8003550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e64:	480b      	ldr	r0, [pc, #44]	@ (8004e94 <prvInitialiseTaskLists+0x74>)
 8004e66:	f7fe fb73 	bl	8003550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e98 <prvInitialiseTaskLists+0x78>)
 8004e6c:	4a05      	ldr	r2, [pc, #20]	@ (8004e84 <prvInitialiseTaskLists+0x64>)
 8004e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e70:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <prvInitialiseTaskLists+0x7c>)
 8004e72:	4a05      	ldr	r2, [pc, #20]	@ (8004e88 <prvInitialiseTaskLists+0x68>)
 8004e74:	601a      	str	r2, [r3, #0]
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200008d4 	.word	0x200008d4
 8004e84:	20000d34 	.word	0x20000d34
 8004e88:	20000d48 	.word	0x20000d48
 8004e8c:	20000d64 	.word	0x20000d64
 8004e90:	20000d78 	.word	0x20000d78
 8004e94:	20000d90 	.word	0x20000d90
 8004e98:	20000d5c 	.word	0x20000d5c
 8004e9c:	20000d60 	.word	0x20000d60

08004ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ea6:	e019      	b.n	8004edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ea8:	f000 fe36 	bl	8005b18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eac:	4b10      	ldr	r3, [pc, #64]	@ (8004ef0 <prvCheckTasksWaitingTermination+0x50>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fbd3 	bl	8003664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <prvCheckTasksWaitingTermination+0x54>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ef4 <prvCheckTasksWaitingTermination+0x54>)
 8004ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <prvCheckTasksWaitingTermination+0x58>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <prvCheckTasksWaitingTermination+0x58>)
 8004ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ed2:	f000 fe53 	bl	8005b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f810 	bl	8004efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004edc:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <prvCheckTasksWaitingTermination+0x58>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e1      	bne.n	8004ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000d78 	.word	0x20000d78
 8004ef4:	20000da4 	.word	0x20000da4
 8004ef8:	20000d8c 	.word	0x20000d8c

08004efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3354      	adds	r3, #84	@ 0x54
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 fb37 	bl	800657c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 ffeb 	bl	8005ef8 <vPortFree>
				vPortFree( pxTCB );
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 ffe8 	bl	8005ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f28:	e019      	b.n	8004f5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d103      	bne.n	8004f3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 ffdf 	bl	8005ef8 <vPortFree>
	}
 8004f3a:	e010      	b.n	8004f5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d00b      	beq.n	8004f5e <prvDeleteTCB+0x62>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	60fb      	str	r3, [r7, #12]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <prvDeleteTCB+0x5e>
	}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <prvResetNextTaskUnblockTime+0x38>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f78:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8004f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f80:	e008      	b.n	8004f94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f82:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <prvResetNextTaskUnblockTime+0x38>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a04      	ldr	r2, [pc, #16]	@ (8004fa4 <prvResetNextTaskUnblockTime+0x3c>)
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	20000d5c 	.word	0x20000d5c
 8004fa4:	20000dc4 	.word	0x20000dc4

08004fa8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004fae:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <xTaskGetCurrentTaskHandle+0x1c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004fb4:	687b      	ldr	r3, [r7, #4]
	}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	200008d0 	.word	0x200008d0

08004fc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fce:	4b0b      	ldr	r3, [pc, #44]	@ (8004ffc <xTaskGetSchedulerState+0x34>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	e008      	b.n	8004fee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fdc:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <xTaskGetSchedulerState+0x38>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	e001      	b.n	8004fee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fee:	687b      	ldr	r3, [r7, #4]
	}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000db0 	.word	0x20000db0
 8005000:	20000dcc 	.word	0x20000dcc

08005004 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d058      	beq.n	80050cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800501a:	4b2f      	ldr	r3, [pc, #188]	@ (80050d8 <xTaskPriorityDisinherit+0xd4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	429a      	cmp	r2, r3
 8005022:	d00b      	beq.n	800503c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	60bb      	str	r3, [r7, #8]
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005060:	1e5a      	subs	r2, r3, #1
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506e:	429a      	cmp	r2, r3
 8005070:	d02c      	beq.n	80050cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005076:	2b00      	cmp	r3, #0
 8005078:	d128      	bne.n	80050cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3304      	adds	r3, #4
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe faf0 	bl	8003664 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509c:	4b0f      	ldr	r3, [pc, #60]	@ (80050dc <xTaskPriorityDisinherit+0xd8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d903      	bls.n	80050ac <xTaskPriorityDisinherit+0xa8>
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	4a0c      	ldr	r2, [pc, #48]	@ (80050dc <xTaskPriorityDisinherit+0xd8>)
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4a09      	ldr	r2, [pc, #36]	@ (80050e0 <xTaskPriorityDisinherit+0xdc>)
 80050ba:	441a      	add	r2, r3
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f7fe fa71 	bl	80035aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050cc:	697b      	ldr	r3, [r7, #20]
	}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	200008d0 	.word	0x200008d0
 80050dc:	20000dac 	.word	0x20000dac
 80050e0:	200008d4 	.word	0x200008d4

080050e4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80050ea:	4b09      	ldr	r3, [pc, #36]	@ (8005110 <uxTaskResetEventItemValue+0x2c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f2:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <uxTaskResetEventItemValue+0x2c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <uxTaskResetEventItemValue+0x2c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8005100:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005102:	687b      	ldr	r3, [r7, #4]
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	200008d0 	.word	0x200008d0

08005114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800511e:	4b21      	ldr	r3, [pc, #132]	@ (80051a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005124:	4b20      	ldr	r3, [pc, #128]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3304      	adds	r3, #4
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fa9a 	bl	8003664 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d10a      	bne.n	800514e <prvAddCurrentTaskToDelayedList+0x3a>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800513e:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4819      	ldr	r0, [pc, #100]	@ (80051ac <prvAddCurrentTaskToDelayedList+0x98>)
 8005148:	f7fe fa2f 	bl	80035aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800514c:	e026      	b.n	800519c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4413      	add	r3, r2
 8005154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005156:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	429a      	cmp	r2, r3
 8005164:	d209      	bcs.n	800517a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005166:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7fe fa3d 	bl	80035f2 <vListInsert>
}
 8005178:	e010      	b.n	800519c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800517a:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7fe fa33 	bl	80035f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d202      	bcs.n	800519c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005196:	4a08      	ldr	r2, [pc, #32]	@ (80051b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000da8 	.word	0x20000da8
 80051a8:	200008d0 	.word	0x200008d0
 80051ac:	20000d90 	.word	0x20000d90
 80051b0:	20000d60 	.word	0x20000d60
 80051b4:	20000d5c 	.word	0x20000d5c
 80051b8:	20000dc4 	.word	0x20000dc4

080051bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051c6:	f000 fb13 	bl	80057f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005240 <xTimerCreateTimerTask+0x84>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d021      	beq.n	8005216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051da:	1d3a      	adds	r2, r7, #4
 80051dc:	f107 0108 	add.w	r1, r7, #8
 80051e0:	f107 030c 	add.w	r3, r7, #12
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fd ffa3 	bl	8003130 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	9202      	str	r2, [sp, #8]
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	2302      	movs	r3, #2
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2300      	movs	r3, #0
 80051fa:	460a      	mov	r2, r1
 80051fc:	4911      	ldr	r1, [pc, #68]	@ (8005244 <xTimerCreateTimerTask+0x88>)
 80051fe:	4812      	ldr	r0, [pc, #72]	@ (8005248 <xTimerCreateTimerTask+0x8c>)
 8005200:	f7fe ff24 	bl	800404c <xTaskCreateStatic>
 8005204:	4603      	mov	r3, r0
 8005206:	4a11      	ldr	r2, [pc, #68]	@ (800524c <xTimerCreateTimerTask+0x90>)
 8005208:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800520a:	4b10      	ldr	r3, [pc, #64]	@ (800524c <xTimerCreateTimerTask+0x90>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005212:	2301      	movs	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	613b      	str	r3, [r7, #16]
}
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	e7fd      	b.n	8005230 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005234:	697b      	ldr	r3, [r7, #20]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000e00 	.word	0x20000e00
 8005244:	080071a0 	.word	0x080071a0
 8005248:	08005389 	.word	0x08005389
 800524c:	20000e04 	.word	0x20000e04

08005250 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	@ 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <xTimerGenericCommand+0x30>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	623b      	str	r3, [r7, #32]
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005280:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <xTimerGenericCommand+0x98>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02a      	beq.n	80052de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b05      	cmp	r3, #5
 8005298:	dc18      	bgt.n	80052cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800529a:	f7ff fe95 	bl	8004fc8 <xTaskGetSchedulerState>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d109      	bne.n	80052b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052a4:	4b10      	ldr	r3, [pc, #64]	@ (80052e8 <xTimerGenericCommand+0x98>)
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	f107 0110 	add.w	r1, r7, #16
 80052ac:	2300      	movs	r3, #0
 80052ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b0:	f7fe fafe 	bl	80038b0 <xQueueGenericSend>
 80052b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80052b6:	e012      	b.n	80052de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <xTimerGenericCommand+0x98>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	f107 0110 	add.w	r1, r7, #16
 80052c0:	2300      	movs	r3, #0
 80052c2:	2200      	movs	r2, #0
 80052c4:	f7fe faf4 	bl	80038b0 <xQueueGenericSend>
 80052c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80052ca:	e008      	b.n	80052de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <xTimerGenericCommand+0x98>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	f107 0110 	add.w	r1, r7, #16
 80052d4:	2300      	movs	r3, #0
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	f7fe fbd4 	bl	8003a84 <xQueueGenericSendFromISR>
 80052dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3728      	adds	r7, #40	@ 0x28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000e00 	.word	0x20000e00

080052ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052f6:	4b23      	ldr	r3, [pc, #140]	@ (8005384 <prvProcessExpiredTimer+0x98>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	3304      	adds	r3, #4
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe f9ad 	bl	8003664 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d023      	beq.n	8005360 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	18d1      	adds	r1, r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	6978      	ldr	r0, [r7, #20]
 8005326:	f000 f8d5 	bl	80054d4 <prvInsertTimerInActiveList>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d020      	beq.n	8005372 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005330:	2300      	movs	r3, #0
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	2100      	movs	r1, #0
 800533a:	6978      	ldr	r0, [r7, #20]
 800533c:	f7ff ff88 	bl	8005250 <xTimerGenericCommand>
 8005340:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d114      	bne.n	8005372 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60fb      	str	r3, [r7, #12]
}
 800535a:	bf00      	nop
 800535c:	bf00      	nop
 800535e:	e7fd      	b.n	800535c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	b2da      	uxtb	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	4798      	blx	r3
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000df8 	.word	0x20000df8

08005388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005390:	f107 0308 	add.w	r3, r7, #8
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f859 	bl	800544c <prvGetNextExpireTime>
 800539a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f805 	bl	80053b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053a6:	f000 f8d7 	bl	8005558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053aa:	bf00      	nop
 80053ac:	e7f0      	b.n	8005390 <prvTimerTask+0x8>
	...

080053b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053ba:	f7ff f995 	bl	80046e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053be:	f107 0308 	add.w	r3, r7, #8
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f866 	bl	8005494 <prvSampleTimeNow>
 80053c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d130      	bne.n	8005432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <prvProcessTimerOrBlockTask+0x3c>
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d806      	bhi.n	80053ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053de:	f7ff f991 	bl	8004704 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ff81 	bl	80052ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053ea:	e024      	b.n	8005436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053f2:	4b13      	ldr	r3, [pc, #76]	@ (8005440 <prvProcessTimerOrBlockTask+0x90>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <prvProcessTimerOrBlockTask+0x50>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <prvProcessTimerOrBlockTask+0x52>
 8005400:	2300      	movs	r3, #0
 8005402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005404:	4b0f      	ldr	r3, [pc, #60]	@ (8005444 <prvProcessTimerOrBlockTask+0x94>)
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	f7fe fde7 	bl	8003fe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005416:	f7ff f975 	bl	8004704 <xTaskResumeAll>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <prvProcessTimerOrBlockTask+0x98>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
}
 8005430:	e001      	b.n	8005436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005432:	f7ff f967 	bl	8004704 <xTaskResumeAll>
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000dfc 	.word	0x20000dfc
 8005444:	20000e00 	.word	0x20000e00
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005454:	4b0e      	ldr	r3, [pc, #56]	@ (8005490 <prvGetNextExpireTime+0x44>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <prvGetNextExpireTime+0x16>
 800545e:	2201      	movs	r2, #1
 8005460:	e000      	b.n	8005464 <prvGetNextExpireTime+0x18>
 8005462:	2200      	movs	r2, #0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d105      	bne.n	800547c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005470:	4b07      	ldr	r3, [pc, #28]	@ (8005490 <prvGetNextExpireTime+0x44>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e001      	b.n	8005480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000df8 	.word	0x20000df8

08005494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800549c:	f7ff f9c2 	bl	8004824 <xTaskGetTickCount>
 80054a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054a2:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <prvSampleTimeNow+0x3c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d205      	bcs.n	80054b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054ac:	f000 f93a 	bl	8005724 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e002      	b.n	80054be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054be:	4a04      	ldr	r2, [pc, #16]	@ (80054d0 <prvSampleTimeNow+0x3c>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054c4:	68fb      	ldr	r3, [r7, #12]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000e08 	.word	0x20000e08

080054d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d812      	bhi.n	8005520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e01b      	b.n	8005546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800550e:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <prvInsertTimerInActiveList+0x7c>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7fe f86a 	bl	80035f2 <vListInsert>
 800551e:	e012      	b.n	8005546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d206      	bcs.n	8005536 <prvInsertTimerInActiveList+0x62>
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d302      	bcc.n	8005536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e007      	b.n	8005546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005536:	4b07      	ldr	r3, [pc, #28]	@ (8005554 <prvInsertTimerInActiveList+0x80>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3304      	adds	r3, #4
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f7fe f856 	bl	80035f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005546:	697b      	ldr	r3, [r7, #20]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000dfc 	.word	0x20000dfc
 8005554:	20000df8 	.word	0x20000df8

08005558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08e      	sub	sp, #56	@ 0x38
 800555c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800555e:	e0ce      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	da19      	bge.n	800559a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	3304      	adds	r3, #4
 800556a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	61fb      	str	r3, [r7, #28]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005590:	6850      	ldr	r0, [r2, #4]
 8005592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005594:	6892      	ldr	r2, [r2, #8]
 8005596:	4611      	mov	r1, r2
 8005598:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f2c0 80ae 	blt.w	80056fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	3304      	adds	r3, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe f856 	bl	8003664 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055b8:	463b      	mov	r3, r7
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ff6a 	bl	8005494 <prvSampleTimeNow>
 80055c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b09      	cmp	r3, #9
 80055c6:	f200 8097 	bhi.w	80056f8 <prvProcessReceivedCommands+0x1a0>
 80055ca:	a201      	add	r2, pc, #4	@ (adr r2, 80055d0 <prvProcessReceivedCommands+0x78>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	080055f9 	.word	0x080055f9
 80055dc:	0800566f 	.word	0x0800566f
 80055e0:	08005683 	.word	0x08005683
 80055e4:	080056cf 	.word	0x080056cf
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	080055f9 	.word	0x080055f9
 80055f0:	0800566f 	.word	0x0800566f
 80055f4:	08005683 	.word	0x08005683
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	18d1      	adds	r1, r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005618:	f7ff ff5c 	bl	80054d4 <prvInsertTimerInActiveList>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d06c      	beq.n	80056fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800562a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d061      	beq.n	80056fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	441a      	add	r2, r3
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	2100      	movs	r1, #0
 8005648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800564a:	f7ff fe01 	bl	8005250 <xTimerGenericCommand>
 800564e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d152      	bne.n	80056fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61bb      	str	r3, [r7, #24]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800566e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005680:	e03d      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	b2da      	uxtb	r2, r3
 800568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005690:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005698:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	617b      	str	r3, [r7, #20]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	18d1      	adds	r1, r2, r3
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056c8:	f7ff ff04 	bl	80054d4 <prvInsertTimerInActiveList>
					break;
 80056cc:	e017      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80056dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056de:	f000 fc0b 	bl	8005ef8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056e2:	e00c      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80056f6:	e002      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80056f8:	bf00      	nop
 80056fa:	e000      	b.n	80056fe <prvProcessReceivedCommands+0x1a6>
					break;
 80056fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056fe:	4b08      	ldr	r3, [pc, #32]	@ (8005720 <prvProcessReceivedCommands+0x1c8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	1d39      	adds	r1, r7, #4
 8005704:	2200      	movs	r2, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fa5a 	bl	8003bc0 <xQueueReceive>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f47f af26 	bne.w	8005560 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	3730      	adds	r7, #48	@ 0x30
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000e00 	.word	0x20000e00

08005724 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800572a:	e049      	b.n	80057c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800572c:	4b2e      	ldr	r3, [pc, #184]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005736:	4b2c      	ldr	r3, [pc, #176]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3304      	adds	r3, #4
 8005744:	4618      	mov	r0, r3
 8005746:	f7fd ff8d 	bl	8003664 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d02f      	beq.n	80057c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	429a      	cmp	r2, r3
 8005770:	d90e      	bls.n	8005790 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800577e:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3304      	adds	r3, #4
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f7fd ff32 	bl	80035f2 <vListInsert>
 800578e:	e017      	b.n	80057c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	2100      	movs	r1, #0
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f7ff fd58 	bl	8005250 <xTimerGenericCommand>
 80057a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	603b      	str	r3, [r7, #0]
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	e7fd      	b.n	80057bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057c0:	4b09      	ldr	r3, [pc, #36]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1b0      	bne.n	800572c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057ca:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057d0:	4b06      	ldr	r3, [pc, #24]	@ (80057ec <prvSwitchTimerLists+0xc8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a04      	ldr	r2, [pc, #16]	@ (80057e8 <prvSwitchTimerLists+0xc4>)
 80057d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057d8:	4a04      	ldr	r2, [pc, #16]	@ (80057ec <prvSwitchTimerLists+0xc8>)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6013      	str	r3, [r2, #0]
}
 80057de:	bf00      	nop
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000df8 	.word	0x20000df8
 80057ec:	20000dfc 	.word	0x20000dfc

080057f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057f6:	f000 f98f 	bl	8005b18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <prvCheckForValidListAndQueue+0x60>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d120      	bne.n	8005844 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005802:	4814      	ldr	r0, [pc, #80]	@ (8005854 <prvCheckForValidListAndQueue+0x64>)
 8005804:	f7fd fea4 	bl	8003550 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005808:	4813      	ldr	r0, [pc, #76]	@ (8005858 <prvCheckForValidListAndQueue+0x68>)
 800580a:	f7fd fea1 	bl	8003550 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800580e:	4b13      	ldr	r3, [pc, #76]	@ (800585c <prvCheckForValidListAndQueue+0x6c>)
 8005810:	4a10      	ldr	r2, [pc, #64]	@ (8005854 <prvCheckForValidListAndQueue+0x64>)
 8005812:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005814:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <prvCheckForValidListAndQueue+0x70>)
 8005816:	4a10      	ldr	r2, [pc, #64]	@ (8005858 <prvCheckForValidListAndQueue+0x68>)
 8005818:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800581a:	2300      	movs	r3, #0
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4b11      	ldr	r3, [pc, #68]	@ (8005864 <prvCheckForValidListAndQueue+0x74>)
 8005820:	4a11      	ldr	r2, [pc, #68]	@ (8005868 <prvCheckForValidListAndQueue+0x78>)
 8005822:	2110      	movs	r1, #16
 8005824:	200a      	movs	r0, #10
 8005826:	f7fd ffa3 	bl	8003770 <xQueueGenericCreateStatic>
 800582a:	4603      	mov	r3, r0
 800582c:	4a08      	ldr	r2, [pc, #32]	@ (8005850 <prvCheckForValidListAndQueue+0x60>)
 800582e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005830:	4b07      	ldr	r3, [pc, #28]	@ (8005850 <prvCheckForValidListAndQueue+0x60>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005838:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <prvCheckForValidListAndQueue+0x60>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	490b      	ldr	r1, [pc, #44]	@ (800586c <prvCheckForValidListAndQueue+0x7c>)
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe fba6 	bl	8003f90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005844:	f000 f99a 	bl	8005b7c <vPortExitCritical>
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000e00 	.word	0x20000e00
 8005854:	20000dd0 	.word	0x20000dd0
 8005858:	20000de4 	.word	0x20000de4
 800585c:	20000df8 	.word	0x20000df8
 8005860:	20000dfc 	.word	0x20000dfc
 8005864:	20000eac 	.word	0x20000eac
 8005868:	20000e0c 	.word	0x20000e0c
 800586c:	080071a8 	.word	0x080071a8

08005870 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	@ 0x28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800587e:	f06f 0301 	mvn.w	r3, #1
 8005882:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005890:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <xTimerPendFunctionCallFromISR+0x3c>)
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	f107 0114 	add.w	r1, r7, #20
 8005898:	2300      	movs	r3, #0
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	f7fe f8f2 	bl	8003a84 <xQueueGenericSendFromISR>
 80058a0:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3728      	adds	r7, #40	@ 0x28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20000e00 	.word	0x20000e00

080058b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3b04      	subs	r3, #4
 80058c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3b04      	subs	r3, #4
 80058ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3b04      	subs	r3, #4
 80058de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005914 <pxPortInitialiseStack+0x64>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3b14      	subs	r3, #20
 80058ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f06f 0202 	mvn.w	r2, #2
 80058fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3b20      	subs	r3, #32
 8005904:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	08005919 	.word	0x08005919

08005918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005922:	4b13      	ldr	r3, [pc, #76]	@ (8005970 <prvTaskExitError+0x58>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d00b      	beq.n	8005944 <prvTaskExitError+0x2c>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60fb      	str	r3, [r7, #12]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <prvTaskExitError+0x28>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	60bb      	str	r3, [r7, #8]
}
 8005956:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005958:	bf00      	nop
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0fc      	beq.n	800595a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	2000000c 	.word	0x2000000c
	...

08005980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005980:	4b07      	ldr	r3, [pc, #28]	@ (80059a0 <pxCurrentTCBConst2>)
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	6808      	ldr	r0, [r1, #0]
 8005986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	f380 8809 	msr	PSP, r0
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8811 	msr	BASEPRI, r0
 800599a:	4770      	bx	lr
 800599c:	f3af 8000 	nop.w

080059a0 <pxCurrentTCBConst2>:
 80059a0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059a8:	4808      	ldr	r0, [pc, #32]	@ (80059cc <prvPortStartFirstTask+0x24>)
 80059aa:	6800      	ldr	r0, [r0, #0]
 80059ac:	6800      	ldr	r0, [r0, #0]
 80059ae:	f380 8808 	msr	MSP, r0
 80059b2:	f04f 0000 	mov.w	r0, #0
 80059b6:	f380 8814 	msr	CONTROL, r0
 80059ba:	b662      	cpsie	i
 80059bc:	b661      	cpsie	f
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	df00      	svc	0
 80059c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059ca:	bf00      	nop
 80059cc:	e000ed08 	.word	0xe000ed08

080059d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059d6:	4b47      	ldr	r3, [pc, #284]	@ (8005af4 <xPortStartScheduler+0x124>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a47      	ldr	r2, [pc, #284]	@ (8005af8 <xPortStartScheduler+0x128>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10b      	bne.n	80059f8 <xPortStartScheduler+0x28>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059f8:	4b3e      	ldr	r3, [pc, #248]	@ (8005af4 <xPortStartScheduler+0x124>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a3f      	ldr	r2, [pc, #252]	@ (8005afc <xPortStartScheduler+0x12c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10b      	bne.n	8005a1a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	613b      	str	r3, [r7, #16]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a1a:	4b39      	ldr	r3, [pc, #228]	@ (8005b00 <xPortStartScheduler+0x130>)
 8005a1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	22ff      	movs	r2, #255	@ 0xff
 8005a2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <xPortStartScheduler+0x134>)
 8005a40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a42:	4b31      	ldr	r3, [pc, #196]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a48:	e009      	b.n	8005a5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a2d      	ldr	r2, [pc, #180]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b80      	cmp	r3, #128	@ 0x80
 8005a68:	d0ef      	beq.n	8005a4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a6a:	4b27      	ldr	r3, [pc, #156]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1c3 0307 	rsb	r3, r3, #7
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d00b      	beq.n	8005a8e <xPortStartScheduler+0xbe>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60bb      	str	r3, [r7, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	4a1c      	ldr	r2, [pc, #112]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a98:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005aa0:	4a19      	ldr	r2, [pc, #100]	@ (8005b08 <xPortStartScheduler+0x138>)
 8005aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005aac:	4b17      	ldr	r3, [pc, #92]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a16      	ldr	r2, [pc, #88]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ab8:	4b14      	ldr	r3, [pc, #80]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a13      	ldr	r2, [pc, #76]	@ (8005b0c <xPortStartScheduler+0x13c>)
 8005abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ac4:	f000 f8da 	bl	8005c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	@ (8005b10 <xPortStartScheduler+0x140>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ace:	f000 f8f9 	bl	8005cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ad2:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <xPortStartScheduler+0x144>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8005b14 <xPortStartScheduler+0x144>)
 8005ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ade:	f7ff ff63 	bl	80059a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ae2:	f7fe ff47 	bl	8004974 <vTaskSwitchContext>
	prvTaskExitError();
 8005ae6:	f7ff ff17 	bl	8005918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000ed00 	.word	0xe000ed00
 8005af8:	410fc271 	.word	0x410fc271
 8005afc:	410fc270 	.word	0x410fc270
 8005b00:	e000e400 	.word	0xe000e400
 8005b04:	20000efc 	.word	0x20000efc
 8005b08:	20000f00 	.word	0x20000f00
 8005b0c:	e000ed20 	.word	0xe000ed20
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	e000ef34 	.word	0xe000ef34

08005b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b32:	4b10      	ldr	r3, [pc, #64]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a0e      	ldr	r2, [pc, #56]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <vPortEnterCritical+0x5c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d110      	bne.n	8005b66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b44:	4b0c      	ldr	r3, [pc, #48]	@ (8005b78 <vPortEnterCritical+0x60>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	603b      	str	r3, [r7, #0]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <vPortEnterCritical+0x4a>
	}
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	2000000c 	.word	0x2000000c
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b82:	4b12      	ldr	r3, [pc, #72]	@ (8005bcc <vPortExitCritical+0x50>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <vPortExitCritical+0x26>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	607b      	str	r3, [r7, #4]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <vPortExitCritical+0x50>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	4a08      	ldr	r2, [pc, #32]	@ (8005bcc <vPortExitCritical+0x50>)
 8005baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bac:	4b07      	ldr	r3, [pc, #28]	@ (8005bcc <vPortExitCritical+0x50>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <vPortExitCritical+0x44>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	2000000c 	.word	0x2000000c

08005bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bd0:	f3ef 8009 	mrs	r0, PSP
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <pxCurrentTCBConst>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	f01e 0f10 	tst.w	lr, #16
 8005be0:	bf08      	it	eq
 8005be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	6010      	str	r0, [r2, #0]
 8005bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005bf4:	f380 8811 	msr	BASEPRI, r0
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f7fe feb8 	bl	8004974 <vTaskSwitchContext>
 8005c04:	f04f 0000 	mov.w	r0, #0
 8005c08:	f380 8811 	msr	BASEPRI, r0
 8005c0c:	bc09      	pop	{r0, r3}
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	6808      	ldr	r0, [r1, #0]
 8005c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c16:	f01e 0f10 	tst.w	lr, #16
 8005c1a:	bf08      	it	eq
 8005c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c20:	f380 8809 	msr	PSP, r0
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst>:
 8005c30:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	607b      	str	r3, [r7, #4]
}
 8005c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c52:	f7fe fdf7 	bl	8004844 <xTaskIncrementTick>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <xPortSysTickHandler+0x40>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	2300      	movs	r3, #0
 8005c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f383 8811 	msr	BASEPRI, r3
}
 8005c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <vPortSetupTimerInterrupt+0x34>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c86:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <vPortSetupTimerInterrupt+0x38>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb8 <vPortSetupTimerInterrupt+0x3c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0a      	ldr	r2, [pc, #40]	@ (8005cbc <vPortSetupTimerInterrupt+0x40>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	099b      	lsrs	r3, r3, #6
 8005c98:	4a09      	ldr	r2, [pc, #36]	@ (8005cc0 <vPortSetupTimerInterrupt+0x44>)
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c9e:	4b04      	ldr	r3, [pc, #16]	@ (8005cb0 <vPortSetupTimerInterrupt+0x34>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	e000e010 	.word	0xe000e010
 8005cb4:	e000e018 	.word	0xe000e018
 8005cb8:	20000000 	.word	0x20000000
 8005cbc:	10624dd3 	.word	0x10624dd3
 8005cc0:	e000e014 	.word	0xe000e014

08005cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005cd4 <vPortEnableVFP+0x10>
 8005cc8:	6801      	ldr	r1, [r0, #0]
 8005cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005cce:	6001      	str	r1, [r0, #0]
 8005cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cd2:	bf00      	nop
 8005cd4:	e000ed88 	.word	0xe000ed88

08005cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cde:	f3ef 8305 	mrs	r3, IPSR
 8005ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b0f      	cmp	r3, #15
 8005ce8:	d915      	bls.n	8005d16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cea:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <vPortValidateInterruptPriority+0x74>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cf4:	4b16      	ldr	r3, [pc, #88]	@ (8005d50 <vPortValidateInterruptPriority+0x78>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	7afa      	ldrb	r2, [r7, #11]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d20b      	bcs.n	8005d16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	607b      	str	r3, [r7, #4]
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	e7fd      	b.n	8005d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d16:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <vPortValidateInterruptPriority+0x7c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <vPortValidateInterruptPriority+0x80>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d90b      	bls.n	8005d3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	603b      	str	r3, [r7, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	e7fd      	b.n	8005d3a <vPortValidateInterruptPriority+0x62>
	}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	e000e3f0 	.word	0xe000e3f0
 8005d50:	20000efc 	.word	0x20000efc
 8005d54:	e000ed0c 	.word	0xe000ed0c
 8005d58:	20000f00 	.word	0x20000f00

08005d5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	@ 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d68:	f7fe fcbe 	bl	80046e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ee0 <pvPortMalloc+0x184>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d74:	f000 f924 	bl	8005fc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d78:	4b5a      	ldr	r3, [pc, #360]	@ (8005ee4 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f040 8095 	bne.w	8005eb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01e      	beq.n	8005dca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4413      	add	r3, r2
 8005d92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d015      	beq.n	8005dca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f023 0307 	bic.w	r3, r3, #7
 8005da4:	3308      	adds	r3, #8
 8005da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <pvPortMalloc+0x6e>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	617b      	str	r3, [r7, #20]
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	e7fd      	b.n	8005dc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d06f      	beq.n	8005eb0 <pvPortMalloc+0x154>
 8005dd0:	4b45      	ldr	r3, [pc, #276]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d86a      	bhi.n	8005eb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dda:	4b44      	ldr	r3, [pc, #272]	@ (8005eec <pvPortMalloc+0x190>)
 8005ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dde:	4b43      	ldr	r3, [pc, #268]	@ (8005eec <pvPortMalloc+0x190>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005de4:	e004      	b.n	8005df0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d903      	bls.n	8005e02 <pvPortMalloc+0xa6>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f1      	bne.n	8005de6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e02:	4b37      	ldr	r3, [pc, #220]	@ (8005ee0 <pvPortMalloc+0x184>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d051      	beq.n	8005eb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2208      	movs	r2, #8
 8005e12:	4413      	add	r3, r2
 8005e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	1ad2      	subs	r2, r2, r3
 8005e26:	2308      	movs	r3, #8
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d920      	bls.n	8005e70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <pvPortMalloc+0xfc>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	613b      	str	r3, [r7, #16]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e6a:	69b8      	ldr	r0, [r7, #24]
 8005e6c:	f000 f90a 	bl	8006084 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <pvPortMalloc+0x194>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d203      	bcs.n	8005e92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e8a:	4b17      	ldr	r3, [pc, #92]	@ (8005ee8 <pvPortMalloc+0x18c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <pvPortMalloc+0x194>)
 8005e90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <pvPortMalloc+0x188>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ea6:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <pvPortMalloc+0x198>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	4a11      	ldr	r2, [pc, #68]	@ (8005ef4 <pvPortMalloc+0x198>)
 8005eae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005eb0:	f7fe fc28 	bl	8004704 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <pvPortMalloc+0x17a>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	60fb      	str	r3, [r7, #12]
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <pvPortMalloc+0x176>
	return pvReturn;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3728      	adds	r7, #40	@ 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20004b0c 	.word	0x20004b0c
 8005ee4:	20004b20 	.word	0x20004b20
 8005ee8:	20004b10 	.word	0x20004b10
 8005eec:	20004b04 	.word	0x20004b04
 8005ef0:	20004b14 	.word	0x20004b14
 8005ef4:	20004b18 	.word	0x20004b18

08005ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d04f      	beq.n	8005faa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <vPortFree+0xbc>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10b      	bne.n	8005f3e <vPortFree+0x46>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60fb      	str	r3, [r7, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <vPortFree+0x66>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60bb      	str	r3, [r7, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	4b14      	ldr	r3, [pc, #80]	@ (8005fb4 <vPortFree+0xbc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01e      	beq.n	8005faa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d11a      	bne.n	8005faa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb4 <vPortFree+0xbc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	401a      	ands	r2, r3
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f84:	f7fe fbb0 	bl	80046e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <vPortFree+0xc0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4413      	add	r3, r2
 8005f92:	4a09      	ldr	r2, [pc, #36]	@ (8005fb8 <vPortFree+0xc0>)
 8005f94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f96:	6938      	ldr	r0, [r7, #16]
 8005f98:	f000 f874 	bl	8006084 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f9c:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <vPortFree+0xc4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	4a06      	ldr	r2, [pc, #24]	@ (8005fbc <vPortFree+0xc4>)
 8005fa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fa6:	f7fe fbad 	bl	8004704 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005faa:	bf00      	nop
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20004b20 	.word	0x20004b20
 8005fb8:	20004b10 	.word	0x20004b10
 8005fbc:	20004b1c 	.word	0x20004b1c

08005fc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005fca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fcc:	4b27      	ldr	r3, [pc, #156]	@ (800606c <prvHeapInit+0xac>)
 8005fce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3307      	adds	r3, #7
 8005fde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0307 	bic.w	r3, r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	4a1f      	ldr	r2, [pc, #124]	@ (800606c <prvHeapInit+0xac>)
 8005ff0:	4413      	add	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <prvHeapInit+0xb0>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8006070 <prvHeapInit+0xb0>)
 8006000:	2200      	movs	r2, #0
 8006002:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4413      	add	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800600c:	2208      	movs	r2, #8
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a15      	ldr	r2, [pc, #84]	@ (8006074 <prvHeapInit+0xb4>)
 8006020:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006022:	4b14      	ldr	r3, [pc, #80]	@ (8006074 <prvHeapInit+0xb4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2200      	movs	r2, #0
 8006028:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <prvHeapInit+0xb4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006040:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <prvHeapInit+0xb4>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a0a      	ldr	r2, [pc, #40]	@ (8006078 <prvHeapInit+0xb8>)
 800604e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4a09      	ldr	r2, [pc, #36]	@ (800607c <prvHeapInit+0xbc>)
 8006056:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006058:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <prvHeapInit+0xc0>)
 800605a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800605e:	601a      	str	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000f04 	.word	0x20000f04
 8006070:	20004b04 	.word	0x20004b04
 8006074:	20004b0c 	.word	0x20004b0c
 8006078:	20004b14 	.word	0x20004b14
 800607c:	20004b10 	.word	0x20004b10
 8006080:	20004b20 	.word	0x20004b20

08006084 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800608c:	4b28      	ldr	r3, [pc, #160]	@ (8006130 <prvInsertBlockIntoFreeList+0xac>)
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e002      	b.n	8006098 <prvInsertBlockIntoFreeList+0x14>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d8f7      	bhi.n	8006092 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d108      	bne.n	80060c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	441a      	add	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d118      	bne.n	800610c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b15      	ldr	r3, [pc, #84]	@ (8006134 <prvInsertBlockIntoFreeList+0xb0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d00d      	beq.n	8006102 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	441a      	add	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e008      	b.n	8006114 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006102:	4b0c      	ldr	r3, [pc, #48]	@ (8006134 <prvInsertBlockIntoFreeList+0xb0>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e003      	b.n	8006114 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d002      	beq.n	8006122 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20004b04 	.word	0x20004b04
 8006134:	20004b0c 	.word	0x20004b0c

08006138 <std>:
 8006138:	2300      	movs	r3, #0
 800613a:	b510      	push	{r4, lr}
 800613c:	4604      	mov	r4, r0
 800613e:	e9c0 3300 	strd	r3, r3, [r0]
 8006142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006146:	6083      	str	r3, [r0, #8]
 8006148:	8181      	strh	r1, [r0, #12]
 800614a:	6643      	str	r3, [r0, #100]	@ 0x64
 800614c:	81c2      	strh	r2, [r0, #14]
 800614e:	6183      	str	r3, [r0, #24]
 8006150:	4619      	mov	r1, r3
 8006152:	2208      	movs	r2, #8
 8006154:	305c      	adds	r0, #92	@ 0x5c
 8006156:	f000 f9f9 	bl	800654c <memset>
 800615a:	4b0d      	ldr	r3, [pc, #52]	@ (8006190 <std+0x58>)
 800615c:	6263      	str	r3, [r4, #36]	@ 0x24
 800615e:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <std+0x5c>)
 8006160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006162:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <std+0x60>)
 8006164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <std+0x64>)
 8006168:	6323      	str	r3, [r4, #48]	@ 0x30
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <std+0x68>)
 800616c:	6224      	str	r4, [r4, #32]
 800616e:	429c      	cmp	r4, r3
 8006170:	d006      	beq.n	8006180 <std+0x48>
 8006172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006176:	4294      	cmp	r4, r2
 8006178:	d002      	beq.n	8006180 <std+0x48>
 800617a:	33d0      	adds	r3, #208	@ 0xd0
 800617c:	429c      	cmp	r4, r3
 800617e:	d105      	bne.n	800618c <std+0x54>
 8006180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006188:	f000 bab6 	b.w	80066f8 <__retarget_lock_init_recursive>
 800618c:	bd10      	pop	{r4, pc}
 800618e:	bf00      	nop
 8006190:	0800639d 	.word	0x0800639d
 8006194:	080063bf 	.word	0x080063bf
 8006198:	080063f7 	.word	0x080063f7
 800619c:	0800641b 	.word	0x0800641b
 80061a0:	20004b24 	.word	0x20004b24

080061a4 <stdio_exit_handler>:
 80061a4:	4a02      	ldr	r2, [pc, #8]	@ (80061b0 <stdio_exit_handler+0xc>)
 80061a6:	4903      	ldr	r1, [pc, #12]	@ (80061b4 <stdio_exit_handler+0x10>)
 80061a8:	4803      	ldr	r0, [pc, #12]	@ (80061b8 <stdio_exit_handler+0x14>)
 80061aa:	f000 b869 	b.w	8006280 <_fwalk_sglue>
 80061ae:	bf00      	nop
 80061b0:	20000010 	.word	0x20000010
 80061b4:	08006fb1 	.word	0x08006fb1
 80061b8:	20000020 	.word	0x20000020

080061bc <cleanup_stdio>:
 80061bc:	6841      	ldr	r1, [r0, #4]
 80061be:	4b0c      	ldr	r3, [pc, #48]	@ (80061f0 <cleanup_stdio+0x34>)
 80061c0:	4299      	cmp	r1, r3
 80061c2:	b510      	push	{r4, lr}
 80061c4:	4604      	mov	r4, r0
 80061c6:	d001      	beq.n	80061cc <cleanup_stdio+0x10>
 80061c8:	f000 fef2 	bl	8006fb0 <_fflush_r>
 80061cc:	68a1      	ldr	r1, [r4, #8]
 80061ce:	4b09      	ldr	r3, [pc, #36]	@ (80061f4 <cleanup_stdio+0x38>)
 80061d0:	4299      	cmp	r1, r3
 80061d2:	d002      	beq.n	80061da <cleanup_stdio+0x1e>
 80061d4:	4620      	mov	r0, r4
 80061d6:	f000 feeb 	bl	8006fb0 <_fflush_r>
 80061da:	68e1      	ldr	r1, [r4, #12]
 80061dc:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <cleanup_stdio+0x3c>)
 80061de:	4299      	cmp	r1, r3
 80061e0:	d004      	beq.n	80061ec <cleanup_stdio+0x30>
 80061e2:	4620      	mov	r0, r4
 80061e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e8:	f000 bee2 	b.w	8006fb0 <_fflush_r>
 80061ec:	bd10      	pop	{r4, pc}
 80061ee:	bf00      	nop
 80061f0:	20004b24 	.word	0x20004b24
 80061f4:	20004b8c 	.word	0x20004b8c
 80061f8:	20004bf4 	.word	0x20004bf4

080061fc <global_stdio_init.part.0>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	4b0b      	ldr	r3, [pc, #44]	@ (800622c <global_stdio_init.part.0+0x30>)
 8006200:	4c0b      	ldr	r4, [pc, #44]	@ (8006230 <global_stdio_init.part.0+0x34>)
 8006202:	4a0c      	ldr	r2, [pc, #48]	@ (8006234 <global_stdio_init.part.0+0x38>)
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	4620      	mov	r0, r4
 8006208:	2200      	movs	r2, #0
 800620a:	2104      	movs	r1, #4
 800620c:	f7ff ff94 	bl	8006138 <std>
 8006210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006214:	2201      	movs	r2, #1
 8006216:	2109      	movs	r1, #9
 8006218:	f7ff ff8e 	bl	8006138 <std>
 800621c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006220:	2202      	movs	r2, #2
 8006222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006226:	2112      	movs	r1, #18
 8006228:	f7ff bf86 	b.w	8006138 <std>
 800622c:	20004c5c 	.word	0x20004c5c
 8006230:	20004b24 	.word	0x20004b24
 8006234:	080061a5 	.word	0x080061a5

08006238 <__sfp_lock_acquire>:
 8006238:	4801      	ldr	r0, [pc, #4]	@ (8006240 <__sfp_lock_acquire+0x8>)
 800623a:	f000 ba5e 	b.w	80066fa <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	20004c65 	.word	0x20004c65

08006244 <__sfp_lock_release>:
 8006244:	4801      	ldr	r0, [pc, #4]	@ (800624c <__sfp_lock_release+0x8>)
 8006246:	f000 ba59 	b.w	80066fc <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	20004c65 	.word	0x20004c65

08006250 <__sinit>:
 8006250:	b510      	push	{r4, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	f7ff fff0 	bl	8006238 <__sfp_lock_acquire>
 8006258:	6a23      	ldr	r3, [r4, #32]
 800625a:	b11b      	cbz	r3, 8006264 <__sinit+0x14>
 800625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006260:	f7ff bff0 	b.w	8006244 <__sfp_lock_release>
 8006264:	4b04      	ldr	r3, [pc, #16]	@ (8006278 <__sinit+0x28>)
 8006266:	6223      	str	r3, [r4, #32]
 8006268:	4b04      	ldr	r3, [pc, #16]	@ (800627c <__sinit+0x2c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f5      	bne.n	800625c <__sinit+0xc>
 8006270:	f7ff ffc4 	bl	80061fc <global_stdio_init.part.0>
 8006274:	e7f2      	b.n	800625c <__sinit+0xc>
 8006276:	bf00      	nop
 8006278:	080061bd 	.word	0x080061bd
 800627c:	20004c5c 	.word	0x20004c5c

08006280 <_fwalk_sglue>:
 8006280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	4607      	mov	r7, r0
 8006286:	4688      	mov	r8, r1
 8006288:	4614      	mov	r4, r2
 800628a:	2600      	movs	r6, #0
 800628c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006290:	f1b9 0901 	subs.w	r9, r9, #1
 8006294:	d505      	bpl.n	80062a2 <_fwalk_sglue+0x22>
 8006296:	6824      	ldr	r4, [r4, #0]
 8006298:	2c00      	cmp	r4, #0
 800629a:	d1f7      	bne.n	800628c <_fwalk_sglue+0xc>
 800629c:	4630      	mov	r0, r6
 800629e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a2:	89ab      	ldrh	r3, [r5, #12]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d907      	bls.n	80062b8 <_fwalk_sglue+0x38>
 80062a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062ac:	3301      	adds	r3, #1
 80062ae:	d003      	beq.n	80062b8 <_fwalk_sglue+0x38>
 80062b0:	4629      	mov	r1, r5
 80062b2:	4638      	mov	r0, r7
 80062b4:	47c0      	blx	r8
 80062b6:	4306      	orrs	r6, r0
 80062b8:	3568      	adds	r5, #104	@ 0x68
 80062ba:	e7e9      	b.n	8006290 <_fwalk_sglue+0x10>

080062bc <iprintf>:
 80062bc:	b40f      	push	{r0, r1, r2, r3}
 80062be:	b507      	push	{r0, r1, r2, lr}
 80062c0:	4906      	ldr	r1, [pc, #24]	@ (80062dc <iprintf+0x20>)
 80062c2:	ab04      	add	r3, sp, #16
 80062c4:	6808      	ldr	r0, [r1, #0]
 80062c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ca:	6881      	ldr	r1, [r0, #8]
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	f000 fb47 	bl	8006960 <_vfiprintf_r>
 80062d2:	b003      	add	sp, #12
 80062d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d8:	b004      	add	sp, #16
 80062da:	4770      	bx	lr
 80062dc:	2000001c 	.word	0x2000001c

080062e0 <_puts_r>:
 80062e0:	6a03      	ldr	r3, [r0, #32]
 80062e2:	b570      	push	{r4, r5, r6, lr}
 80062e4:	6884      	ldr	r4, [r0, #8]
 80062e6:	4605      	mov	r5, r0
 80062e8:	460e      	mov	r6, r1
 80062ea:	b90b      	cbnz	r3, 80062f0 <_puts_r+0x10>
 80062ec:	f7ff ffb0 	bl	8006250 <__sinit>
 80062f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062f2:	07db      	lsls	r3, r3, #31
 80062f4:	d405      	bmi.n	8006302 <_puts_r+0x22>
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	0598      	lsls	r0, r3, #22
 80062fa:	d402      	bmi.n	8006302 <_puts_r+0x22>
 80062fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062fe:	f000 f9fc 	bl	80066fa <__retarget_lock_acquire_recursive>
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	0719      	lsls	r1, r3, #28
 8006306:	d502      	bpl.n	800630e <_puts_r+0x2e>
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d135      	bne.n	800637a <_puts_r+0x9a>
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 f8c5 	bl	80064a0 <__swsetup_r>
 8006316:	b380      	cbz	r0, 800637a <_puts_r+0x9a>
 8006318:	f04f 35ff 	mov.w	r5, #4294967295
 800631c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800631e:	07da      	lsls	r2, r3, #31
 8006320:	d405      	bmi.n	800632e <_puts_r+0x4e>
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	059b      	lsls	r3, r3, #22
 8006326:	d402      	bmi.n	800632e <_puts_r+0x4e>
 8006328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800632a:	f000 f9e7 	bl	80066fc <__retarget_lock_release_recursive>
 800632e:	4628      	mov	r0, r5
 8006330:	bd70      	pop	{r4, r5, r6, pc}
 8006332:	2b00      	cmp	r3, #0
 8006334:	da04      	bge.n	8006340 <_puts_r+0x60>
 8006336:	69a2      	ldr	r2, [r4, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	dc17      	bgt.n	800636c <_puts_r+0x8c>
 800633c:	290a      	cmp	r1, #10
 800633e:	d015      	beq.n	800636c <_puts_r+0x8c>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	6022      	str	r2, [r4, #0]
 8006346:	7019      	strb	r1, [r3, #0]
 8006348:	68a3      	ldr	r3, [r4, #8]
 800634a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800634e:	3b01      	subs	r3, #1
 8006350:	60a3      	str	r3, [r4, #8]
 8006352:	2900      	cmp	r1, #0
 8006354:	d1ed      	bne.n	8006332 <_puts_r+0x52>
 8006356:	2b00      	cmp	r3, #0
 8006358:	da11      	bge.n	800637e <_puts_r+0x9e>
 800635a:	4622      	mov	r2, r4
 800635c:	210a      	movs	r1, #10
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f85f 	bl	8006422 <__swbuf_r>
 8006364:	3001      	adds	r0, #1
 8006366:	d0d7      	beq.n	8006318 <_puts_r+0x38>
 8006368:	250a      	movs	r5, #10
 800636a:	e7d7      	b.n	800631c <_puts_r+0x3c>
 800636c:	4622      	mov	r2, r4
 800636e:	4628      	mov	r0, r5
 8006370:	f000 f857 	bl	8006422 <__swbuf_r>
 8006374:	3001      	adds	r0, #1
 8006376:	d1e7      	bne.n	8006348 <_puts_r+0x68>
 8006378:	e7ce      	b.n	8006318 <_puts_r+0x38>
 800637a:	3e01      	subs	r6, #1
 800637c:	e7e4      	b.n	8006348 <_puts_r+0x68>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	6022      	str	r2, [r4, #0]
 8006384:	220a      	movs	r2, #10
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e7ee      	b.n	8006368 <_puts_r+0x88>
	...

0800638c <puts>:
 800638c:	4b02      	ldr	r3, [pc, #8]	@ (8006398 <puts+0xc>)
 800638e:	4601      	mov	r1, r0
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	f7ff bfa5 	b.w	80062e0 <_puts_r>
 8006396:	bf00      	nop
 8006398:	2000001c 	.word	0x2000001c

0800639c <__sread>:
 800639c:	b510      	push	{r4, lr}
 800639e:	460c      	mov	r4, r1
 80063a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a4:	f000 f95a 	bl	800665c <_read_r>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	bfab      	itete	ge
 80063ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063ae:	89a3      	ldrhlt	r3, [r4, #12]
 80063b0:	181b      	addge	r3, r3, r0
 80063b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063b6:	bfac      	ite	ge
 80063b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063ba:	81a3      	strhlt	r3, [r4, #12]
 80063bc:	bd10      	pop	{r4, pc}

080063be <__swrite>:
 80063be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c2:	461f      	mov	r7, r3
 80063c4:	898b      	ldrh	r3, [r1, #12]
 80063c6:	05db      	lsls	r3, r3, #23
 80063c8:	4605      	mov	r5, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4616      	mov	r6, r2
 80063ce:	d505      	bpl.n	80063dc <__swrite+0x1e>
 80063d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d4:	2302      	movs	r3, #2
 80063d6:	2200      	movs	r2, #0
 80063d8:	f000 f92e 	bl	8006638 <_lseek_r>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	4632      	mov	r2, r6
 80063ea:	463b      	mov	r3, r7
 80063ec:	4628      	mov	r0, r5
 80063ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f2:	f000 b945 	b.w	8006680 <_write_r>

080063f6 <__sseek>:
 80063f6:	b510      	push	{r4, lr}
 80063f8:	460c      	mov	r4, r1
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 f91b 	bl	8006638 <_lseek_r>
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	bf15      	itete	ne
 8006408:	6560      	strne	r0, [r4, #84]	@ 0x54
 800640a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800640e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006412:	81a3      	strheq	r3, [r4, #12]
 8006414:	bf18      	it	ne
 8006416:	81a3      	strhne	r3, [r4, #12]
 8006418:	bd10      	pop	{r4, pc}

0800641a <__sclose>:
 800641a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800641e:	f000 b89d 	b.w	800655c <_close_r>

08006422 <__swbuf_r>:
 8006422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006424:	460e      	mov	r6, r1
 8006426:	4614      	mov	r4, r2
 8006428:	4605      	mov	r5, r0
 800642a:	b118      	cbz	r0, 8006434 <__swbuf_r+0x12>
 800642c:	6a03      	ldr	r3, [r0, #32]
 800642e:	b90b      	cbnz	r3, 8006434 <__swbuf_r+0x12>
 8006430:	f7ff ff0e 	bl	8006250 <__sinit>
 8006434:	69a3      	ldr	r3, [r4, #24]
 8006436:	60a3      	str	r3, [r4, #8]
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	071a      	lsls	r2, r3, #28
 800643c:	d501      	bpl.n	8006442 <__swbuf_r+0x20>
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	b943      	cbnz	r3, 8006454 <__swbuf_r+0x32>
 8006442:	4621      	mov	r1, r4
 8006444:	4628      	mov	r0, r5
 8006446:	f000 f82b 	bl	80064a0 <__swsetup_r>
 800644a:	b118      	cbz	r0, 8006454 <__swbuf_r+0x32>
 800644c:	f04f 37ff 	mov.w	r7, #4294967295
 8006450:	4638      	mov	r0, r7
 8006452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	6922      	ldr	r2, [r4, #16]
 8006458:	1a98      	subs	r0, r3, r2
 800645a:	6963      	ldr	r3, [r4, #20]
 800645c:	b2f6      	uxtb	r6, r6
 800645e:	4283      	cmp	r3, r0
 8006460:	4637      	mov	r7, r6
 8006462:	dc05      	bgt.n	8006470 <__swbuf_r+0x4e>
 8006464:	4621      	mov	r1, r4
 8006466:	4628      	mov	r0, r5
 8006468:	f000 fda2 	bl	8006fb0 <_fflush_r>
 800646c:	2800      	cmp	r0, #0
 800646e:	d1ed      	bne.n	800644c <__swbuf_r+0x2a>
 8006470:	68a3      	ldr	r3, [r4, #8]
 8006472:	3b01      	subs	r3, #1
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	701e      	strb	r6, [r3, #0]
 800647e:	6962      	ldr	r2, [r4, #20]
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	429a      	cmp	r2, r3
 8006484:	d004      	beq.n	8006490 <__swbuf_r+0x6e>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	07db      	lsls	r3, r3, #31
 800648a:	d5e1      	bpl.n	8006450 <__swbuf_r+0x2e>
 800648c:	2e0a      	cmp	r6, #10
 800648e:	d1df      	bne.n	8006450 <__swbuf_r+0x2e>
 8006490:	4621      	mov	r1, r4
 8006492:	4628      	mov	r0, r5
 8006494:	f000 fd8c 	bl	8006fb0 <_fflush_r>
 8006498:	2800      	cmp	r0, #0
 800649a:	d0d9      	beq.n	8006450 <__swbuf_r+0x2e>
 800649c:	e7d6      	b.n	800644c <__swbuf_r+0x2a>
	...

080064a0 <__swsetup_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4b29      	ldr	r3, [pc, #164]	@ (8006548 <__swsetup_r+0xa8>)
 80064a4:	4605      	mov	r5, r0
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	460c      	mov	r4, r1
 80064aa:	b118      	cbz	r0, 80064b4 <__swsetup_r+0x14>
 80064ac:	6a03      	ldr	r3, [r0, #32]
 80064ae:	b90b      	cbnz	r3, 80064b4 <__swsetup_r+0x14>
 80064b0:	f7ff fece 	bl	8006250 <__sinit>
 80064b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b8:	0719      	lsls	r1, r3, #28
 80064ba:	d422      	bmi.n	8006502 <__swsetup_r+0x62>
 80064bc:	06da      	lsls	r2, r3, #27
 80064be:	d407      	bmi.n	80064d0 <__swsetup_r+0x30>
 80064c0:	2209      	movs	r2, #9
 80064c2:	602a      	str	r2, [r5, #0]
 80064c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	f04f 30ff 	mov.w	r0, #4294967295
 80064ce:	e033      	b.n	8006538 <__swsetup_r+0x98>
 80064d0:	0758      	lsls	r0, r3, #29
 80064d2:	d512      	bpl.n	80064fa <__swsetup_r+0x5a>
 80064d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064d6:	b141      	cbz	r1, 80064ea <__swsetup_r+0x4a>
 80064d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064dc:	4299      	cmp	r1, r3
 80064de:	d002      	beq.n	80064e6 <__swsetup_r+0x46>
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 f91b 	bl	800671c <_free_r>
 80064e6:	2300      	movs	r3, #0
 80064e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	2300      	movs	r3, #0
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	f043 0308 	orr.w	r3, r3, #8
 8006500:	81a3      	strh	r3, [r4, #12]
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	b94b      	cbnz	r3, 800651a <__swsetup_r+0x7a>
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800650c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006510:	d003      	beq.n	800651a <__swsetup_r+0x7a>
 8006512:	4621      	mov	r1, r4
 8006514:	4628      	mov	r0, r5
 8006516:	f000 fd99 	bl	800704c <__smakebuf_r>
 800651a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651e:	f013 0201 	ands.w	r2, r3, #1
 8006522:	d00a      	beq.n	800653a <__swsetup_r+0x9a>
 8006524:	2200      	movs	r2, #0
 8006526:	60a2      	str	r2, [r4, #8]
 8006528:	6962      	ldr	r2, [r4, #20]
 800652a:	4252      	negs	r2, r2
 800652c:	61a2      	str	r2, [r4, #24]
 800652e:	6922      	ldr	r2, [r4, #16]
 8006530:	b942      	cbnz	r2, 8006544 <__swsetup_r+0xa4>
 8006532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006536:	d1c5      	bne.n	80064c4 <__swsetup_r+0x24>
 8006538:	bd38      	pop	{r3, r4, r5, pc}
 800653a:	0799      	lsls	r1, r3, #30
 800653c:	bf58      	it	pl
 800653e:	6962      	ldrpl	r2, [r4, #20]
 8006540:	60a2      	str	r2, [r4, #8]
 8006542:	e7f4      	b.n	800652e <__swsetup_r+0x8e>
 8006544:	2000      	movs	r0, #0
 8006546:	e7f7      	b.n	8006538 <__swsetup_r+0x98>
 8006548:	2000001c 	.word	0x2000001c

0800654c <memset>:
 800654c:	4402      	add	r2, r0
 800654e:	4603      	mov	r3, r0
 8006550:	4293      	cmp	r3, r2
 8006552:	d100      	bne.n	8006556 <memset+0xa>
 8006554:	4770      	bx	lr
 8006556:	f803 1b01 	strb.w	r1, [r3], #1
 800655a:	e7f9      	b.n	8006550 <memset+0x4>

0800655c <_close_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d06      	ldr	r5, [pc, #24]	@ (8006578 <_close_r+0x1c>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fa fbd9 	bl	8000d1e <_close>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_close_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_close_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20004c60 	.word	0x20004c60

0800657c <_reclaim_reent>:
 800657c:	4b2d      	ldr	r3, [pc, #180]	@ (8006634 <_reclaim_reent+0xb8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4283      	cmp	r3, r0
 8006582:	b570      	push	{r4, r5, r6, lr}
 8006584:	4604      	mov	r4, r0
 8006586:	d053      	beq.n	8006630 <_reclaim_reent+0xb4>
 8006588:	69c3      	ldr	r3, [r0, #28]
 800658a:	b31b      	cbz	r3, 80065d4 <_reclaim_reent+0x58>
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	b163      	cbz	r3, 80065aa <_reclaim_reent+0x2e>
 8006590:	2500      	movs	r5, #0
 8006592:	69e3      	ldr	r3, [r4, #28]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	5959      	ldr	r1, [r3, r5]
 8006598:	b9b1      	cbnz	r1, 80065c8 <_reclaim_reent+0x4c>
 800659a:	3504      	adds	r5, #4
 800659c:	2d80      	cmp	r5, #128	@ 0x80
 800659e:	d1f8      	bne.n	8006592 <_reclaim_reent+0x16>
 80065a0:	69e3      	ldr	r3, [r4, #28]
 80065a2:	4620      	mov	r0, r4
 80065a4:	68d9      	ldr	r1, [r3, #12]
 80065a6:	f000 f8b9 	bl	800671c <_free_r>
 80065aa:	69e3      	ldr	r3, [r4, #28]
 80065ac:	6819      	ldr	r1, [r3, #0]
 80065ae:	b111      	cbz	r1, 80065b6 <_reclaim_reent+0x3a>
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 f8b3 	bl	800671c <_free_r>
 80065b6:	69e3      	ldr	r3, [r4, #28]
 80065b8:	689d      	ldr	r5, [r3, #8]
 80065ba:	b15d      	cbz	r5, 80065d4 <_reclaim_reent+0x58>
 80065bc:	4629      	mov	r1, r5
 80065be:	4620      	mov	r0, r4
 80065c0:	682d      	ldr	r5, [r5, #0]
 80065c2:	f000 f8ab 	bl	800671c <_free_r>
 80065c6:	e7f8      	b.n	80065ba <_reclaim_reent+0x3e>
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f8a6 	bl	800671c <_free_r>
 80065d0:	4631      	mov	r1, r6
 80065d2:	e7e1      	b.n	8006598 <_reclaim_reent+0x1c>
 80065d4:	6961      	ldr	r1, [r4, #20]
 80065d6:	b111      	cbz	r1, 80065de <_reclaim_reent+0x62>
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 f89f 	bl	800671c <_free_r>
 80065de:	69e1      	ldr	r1, [r4, #28]
 80065e0:	b111      	cbz	r1, 80065e8 <_reclaim_reent+0x6c>
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 f89a 	bl	800671c <_free_r>
 80065e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80065ea:	b111      	cbz	r1, 80065f2 <_reclaim_reent+0x76>
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 f895 	bl	800671c <_free_r>
 80065f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065f4:	b111      	cbz	r1, 80065fc <_reclaim_reent+0x80>
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f890 	bl	800671c <_free_r>
 80065fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80065fe:	b111      	cbz	r1, 8006606 <_reclaim_reent+0x8a>
 8006600:	4620      	mov	r0, r4
 8006602:	f000 f88b 	bl	800671c <_free_r>
 8006606:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006608:	b111      	cbz	r1, 8006610 <_reclaim_reent+0x94>
 800660a:	4620      	mov	r0, r4
 800660c:	f000 f886 	bl	800671c <_free_r>
 8006610:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006612:	b111      	cbz	r1, 800661a <_reclaim_reent+0x9e>
 8006614:	4620      	mov	r0, r4
 8006616:	f000 f881 	bl	800671c <_free_r>
 800661a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800661c:	b111      	cbz	r1, 8006624 <_reclaim_reent+0xa8>
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f87c 	bl	800671c <_free_r>
 8006624:	6a23      	ldr	r3, [r4, #32]
 8006626:	b11b      	cbz	r3, 8006630 <_reclaim_reent+0xb4>
 8006628:	4620      	mov	r0, r4
 800662a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800662e:	4718      	bx	r3
 8006630:	bd70      	pop	{r4, r5, r6, pc}
 8006632:	bf00      	nop
 8006634:	2000001c 	.word	0x2000001c

08006638 <_lseek_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d07      	ldr	r5, [pc, #28]	@ (8006658 <_lseek_r+0x20>)
 800663c:	4604      	mov	r4, r0
 800663e:	4608      	mov	r0, r1
 8006640:	4611      	mov	r1, r2
 8006642:	2200      	movs	r2, #0
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f7fa fb90 	bl	8000d6c <_lseek>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_lseek_r+0x1e>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_lseek_r+0x1e>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	20004c60 	.word	0x20004c60

0800665c <_read_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d07      	ldr	r5, [pc, #28]	@ (800667c <_read_r+0x20>)
 8006660:	4604      	mov	r4, r0
 8006662:	4608      	mov	r0, r1
 8006664:	4611      	mov	r1, r2
 8006666:	2200      	movs	r2, #0
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	f7fa fb1e 	bl	8000cac <_read>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_read_r+0x1e>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_read_r+0x1e>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20004c60 	.word	0x20004c60

08006680 <_write_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4d07      	ldr	r5, [pc, #28]	@ (80066a0 <_write_r+0x20>)
 8006684:	4604      	mov	r4, r0
 8006686:	4608      	mov	r0, r1
 8006688:	4611      	mov	r1, r2
 800668a:	2200      	movs	r2, #0
 800668c:	602a      	str	r2, [r5, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	f7fa fb29 	bl	8000ce6 <_write>
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	d102      	bne.n	800669e <_write_r+0x1e>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	b103      	cbz	r3, 800669e <_write_r+0x1e>
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	bd38      	pop	{r3, r4, r5, pc}
 80066a0:	20004c60 	.word	0x20004c60

080066a4 <__errno>:
 80066a4:	4b01      	ldr	r3, [pc, #4]	@ (80066ac <__errno+0x8>)
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	2000001c 	.word	0x2000001c

080066b0 <__libc_init_array>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	4d0d      	ldr	r5, [pc, #52]	@ (80066e8 <__libc_init_array+0x38>)
 80066b4:	4c0d      	ldr	r4, [pc, #52]	@ (80066ec <__libc_init_array+0x3c>)
 80066b6:	1b64      	subs	r4, r4, r5
 80066b8:	10a4      	asrs	r4, r4, #2
 80066ba:	2600      	movs	r6, #0
 80066bc:	42a6      	cmp	r6, r4
 80066be:	d109      	bne.n	80066d4 <__libc_init_array+0x24>
 80066c0:	4d0b      	ldr	r5, [pc, #44]	@ (80066f0 <__libc_init_array+0x40>)
 80066c2:	4c0c      	ldr	r4, [pc, #48]	@ (80066f4 <__libc_init_array+0x44>)
 80066c4:	f000 fd30 	bl	8007128 <_init>
 80066c8:	1b64      	subs	r4, r4, r5
 80066ca:	10a4      	asrs	r4, r4, #2
 80066cc:	2600      	movs	r6, #0
 80066ce:	42a6      	cmp	r6, r4
 80066d0:	d105      	bne.n	80066de <__libc_init_array+0x2e>
 80066d2:	bd70      	pop	{r4, r5, r6, pc}
 80066d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d8:	4798      	blx	r3
 80066da:	3601      	adds	r6, #1
 80066dc:	e7ee      	b.n	80066bc <__libc_init_array+0xc>
 80066de:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e2:	4798      	blx	r3
 80066e4:	3601      	adds	r6, #1
 80066e6:	e7f2      	b.n	80066ce <__libc_init_array+0x1e>
 80066e8:	08007270 	.word	0x08007270
 80066ec:	08007270 	.word	0x08007270
 80066f0:	08007270 	.word	0x08007270
 80066f4:	08007274 	.word	0x08007274

080066f8 <__retarget_lock_init_recursive>:
 80066f8:	4770      	bx	lr

080066fa <__retarget_lock_acquire_recursive>:
 80066fa:	4770      	bx	lr

080066fc <__retarget_lock_release_recursive>:
 80066fc:	4770      	bx	lr

080066fe <memcpy>:
 80066fe:	440a      	add	r2, r1
 8006700:	4291      	cmp	r1, r2
 8006702:	f100 33ff 	add.w	r3, r0, #4294967295
 8006706:	d100      	bne.n	800670a <memcpy+0xc>
 8006708:	4770      	bx	lr
 800670a:	b510      	push	{r4, lr}
 800670c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006714:	4291      	cmp	r1, r2
 8006716:	d1f9      	bne.n	800670c <memcpy+0xe>
 8006718:	bd10      	pop	{r4, pc}
	...

0800671c <_free_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4605      	mov	r5, r0
 8006720:	2900      	cmp	r1, #0
 8006722:	d041      	beq.n	80067a8 <_free_r+0x8c>
 8006724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006728:	1f0c      	subs	r4, r1, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	bfb8      	it	lt
 800672e:	18e4      	addlt	r4, r4, r3
 8006730:	f000 f8e0 	bl	80068f4 <__malloc_lock>
 8006734:	4a1d      	ldr	r2, [pc, #116]	@ (80067ac <_free_r+0x90>)
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	b933      	cbnz	r3, 8006748 <_free_r+0x2c>
 800673a:	6063      	str	r3, [r4, #4]
 800673c:	6014      	str	r4, [r2, #0]
 800673e:	4628      	mov	r0, r5
 8006740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006744:	f000 b8dc 	b.w	8006900 <__malloc_unlock>
 8006748:	42a3      	cmp	r3, r4
 800674a:	d908      	bls.n	800675e <_free_r+0x42>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	1821      	adds	r1, r4, r0
 8006750:	428b      	cmp	r3, r1
 8006752:	bf01      	itttt	eq
 8006754:	6819      	ldreq	r1, [r3, #0]
 8006756:	685b      	ldreq	r3, [r3, #4]
 8006758:	1809      	addeq	r1, r1, r0
 800675a:	6021      	streq	r1, [r4, #0]
 800675c:	e7ed      	b.n	800673a <_free_r+0x1e>
 800675e:	461a      	mov	r2, r3
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	b10b      	cbz	r3, 8006768 <_free_r+0x4c>
 8006764:	42a3      	cmp	r3, r4
 8006766:	d9fa      	bls.n	800675e <_free_r+0x42>
 8006768:	6811      	ldr	r1, [r2, #0]
 800676a:	1850      	adds	r0, r2, r1
 800676c:	42a0      	cmp	r0, r4
 800676e:	d10b      	bne.n	8006788 <_free_r+0x6c>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	4401      	add	r1, r0
 8006774:	1850      	adds	r0, r2, r1
 8006776:	4283      	cmp	r3, r0
 8006778:	6011      	str	r1, [r2, #0]
 800677a:	d1e0      	bne.n	800673e <_free_r+0x22>
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	6053      	str	r3, [r2, #4]
 8006782:	4408      	add	r0, r1
 8006784:	6010      	str	r0, [r2, #0]
 8006786:	e7da      	b.n	800673e <_free_r+0x22>
 8006788:	d902      	bls.n	8006790 <_free_r+0x74>
 800678a:	230c      	movs	r3, #12
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	e7d6      	b.n	800673e <_free_r+0x22>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	1821      	adds	r1, r4, r0
 8006794:	428b      	cmp	r3, r1
 8006796:	bf04      	itt	eq
 8006798:	6819      	ldreq	r1, [r3, #0]
 800679a:	685b      	ldreq	r3, [r3, #4]
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	bf04      	itt	eq
 80067a0:	1809      	addeq	r1, r1, r0
 80067a2:	6021      	streq	r1, [r4, #0]
 80067a4:	6054      	str	r4, [r2, #4]
 80067a6:	e7ca      	b.n	800673e <_free_r+0x22>
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	20004c6c 	.word	0x20004c6c

080067b0 <sbrk_aligned>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	4e0f      	ldr	r6, [pc, #60]	@ (80067f0 <sbrk_aligned+0x40>)
 80067b4:	460c      	mov	r4, r1
 80067b6:	6831      	ldr	r1, [r6, #0]
 80067b8:	4605      	mov	r5, r0
 80067ba:	b911      	cbnz	r1, 80067c2 <sbrk_aligned+0x12>
 80067bc:	f000 fca4 	bl	8007108 <_sbrk_r>
 80067c0:	6030      	str	r0, [r6, #0]
 80067c2:	4621      	mov	r1, r4
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 fc9f 	bl	8007108 <_sbrk_r>
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	d103      	bne.n	80067d6 <sbrk_aligned+0x26>
 80067ce:	f04f 34ff 	mov.w	r4, #4294967295
 80067d2:	4620      	mov	r0, r4
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
 80067d6:	1cc4      	adds	r4, r0, #3
 80067d8:	f024 0403 	bic.w	r4, r4, #3
 80067dc:	42a0      	cmp	r0, r4
 80067de:	d0f8      	beq.n	80067d2 <sbrk_aligned+0x22>
 80067e0:	1a21      	subs	r1, r4, r0
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 fc90 	bl	8007108 <_sbrk_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d1f2      	bne.n	80067d2 <sbrk_aligned+0x22>
 80067ec:	e7ef      	b.n	80067ce <sbrk_aligned+0x1e>
 80067ee:	bf00      	nop
 80067f0:	20004c68 	.word	0x20004c68

080067f4 <_malloc_r>:
 80067f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f8:	1ccd      	adds	r5, r1, #3
 80067fa:	f025 0503 	bic.w	r5, r5, #3
 80067fe:	3508      	adds	r5, #8
 8006800:	2d0c      	cmp	r5, #12
 8006802:	bf38      	it	cc
 8006804:	250c      	movcc	r5, #12
 8006806:	2d00      	cmp	r5, #0
 8006808:	4606      	mov	r6, r0
 800680a:	db01      	blt.n	8006810 <_malloc_r+0x1c>
 800680c:	42a9      	cmp	r1, r5
 800680e:	d904      	bls.n	800681a <_malloc_r+0x26>
 8006810:	230c      	movs	r3, #12
 8006812:	6033      	str	r3, [r6, #0]
 8006814:	2000      	movs	r0, #0
 8006816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800681a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068f0 <_malloc_r+0xfc>
 800681e:	f000 f869 	bl	80068f4 <__malloc_lock>
 8006822:	f8d8 3000 	ldr.w	r3, [r8]
 8006826:	461c      	mov	r4, r3
 8006828:	bb44      	cbnz	r4, 800687c <_malloc_r+0x88>
 800682a:	4629      	mov	r1, r5
 800682c:	4630      	mov	r0, r6
 800682e:	f7ff ffbf 	bl	80067b0 <sbrk_aligned>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	4604      	mov	r4, r0
 8006836:	d158      	bne.n	80068ea <_malloc_r+0xf6>
 8006838:	f8d8 4000 	ldr.w	r4, [r8]
 800683c:	4627      	mov	r7, r4
 800683e:	2f00      	cmp	r7, #0
 8006840:	d143      	bne.n	80068ca <_malloc_r+0xd6>
 8006842:	2c00      	cmp	r4, #0
 8006844:	d04b      	beq.n	80068de <_malloc_r+0xea>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	4639      	mov	r1, r7
 800684a:	4630      	mov	r0, r6
 800684c:	eb04 0903 	add.w	r9, r4, r3
 8006850:	f000 fc5a 	bl	8007108 <_sbrk_r>
 8006854:	4581      	cmp	r9, r0
 8006856:	d142      	bne.n	80068de <_malloc_r+0xea>
 8006858:	6821      	ldr	r1, [r4, #0]
 800685a:	1a6d      	subs	r5, r5, r1
 800685c:	4629      	mov	r1, r5
 800685e:	4630      	mov	r0, r6
 8006860:	f7ff ffa6 	bl	80067b0 <sbrk_aligned>
 8006864:	3001      	adds	r0, #1
 8006866:	d03a      	beq.n	80068de <_malloc_r+0xea>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	442b      	add	r3, r5
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	f8d8 3000 	ldr.w	r3, [r8]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	bb62      	cbnz	r2, 80068d0 <_malloc_r+0xdc>
 8006876:	f8c8 7000 	str.w	r7, [r8]
 800687a:	e00f      	b.n	800689c <_malloc_r+0xa8>
 800687c:	6822      	ldr	r2, [r4, #0]
 800687e:	1b52      	subs	r2, r2, r5
 8006880:	d420      	bmi.n	80068c4 <_malloc_r+0xd0>
 8006882:	2a0b      	cmp	r2, #11
 8006884:	d917      	bls.n	80068b6 <_malloc_r+0xc2>
 8006886:	1961      	adds	r1, r4, r5
 8006888:	42a3      	cmp	r3, r4
 800688a:	6025      	str	r5, [r4, #0]
 800688c:	bf18      	it	ne
 800688e:	6059      	strne	r1, [r3, #4]
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	bf08      	it	eq
 8006894:	f8c8 1000 	streq.w	r1, [r8]
 8006898:	5162      	str	r2, [r4, r5]
 800689a:	604b      	str	r3, [r1, #4]
 800689c:	4630      	mov	r0, r6
 800689e:	f000 f82f 	bl	8006900 <__malloc_unlock>
 80068a2:	f104 000b 	add.w	r0, r4, #11
 80068a6:	1d23      	adds	r3, r4, #4
 80068a8:	f020 0007 	bic.w	r0, r0, #7
 80068ac:	1ac2      	subs	r2, r0, r3
 80068ae:	bf1c      	itt	ne
 80068b0:	1a1b      	subne	r3, r3, r0
 80068b2:	50a3      	strne	r3, [r4, r2]
 80068b4:	e7af      	b.n	8006816 <_malloc_r+0x22>
 80068b6:	6862      	ldr	r2, [r4, #4]
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	bf0c      	ite	eq
 80068bc:	f8c8 2000 	streq.w	r2, [r8]
 80068c0:	605a      	strne	r2, [r3, #4]
 80068c2:	e7eb      	b.n	800689c <_malloc_r+0xa8>
 80068c4:	4623      	mov	r3, r4
 80068c6:	6864      	ldr	r4, [r4, #4]
 80068c8:	e7ae      	b.n	8006828 <_malloc_r+0x34>
 80068ca:	463c      	mov	r4, r7
 80068cc:	687f      	ldr	r7, [r7, #4]
 80068ce:	e7b6      	b.n	800683e <_malloc_r+0x4a>
 80068d0:	461a      	mov	r2, r3
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d1fb      	bne.n	80068d0 <_malloc_r+0xdc>
 80068d8:	2300      	movs	r3, #0
 80068da:	6053      	str	r3, [r2, #4]
 80068dc:	e7de      	b.n	800689c <_malloc_r+0xa8>
 80068de:	230c      	movs	r3, #12
 80068e0:	6033      	str	r3, [r6, #0]
 80068e2:	4630      	mov	r0, r6
 80068e4:	f000 f80c 	bl	8006900 <__malloc_unlock>
 80068e8:	e794      	b.n	8006814 <_malloc_r+0x20>
 80068ea:	6005      	str	r5, [r0, #0]
 80068ec:	e7d6      	b.n	800689c <_malloc_r+0xa8>
 80068ee:	bf00      	nop
 80068f0:	20004c6c 	.word	0x20004c6c

080068f4 <__malloc_lock>:
 80068f4:	4801      	ldr	r0, [pc, #4]	@ (80068fc <__malloc_lock+0x8>)
 80068f6:	f7ff bf00 	b.w	80066fa <__retarget_lock_acquire_recursive>
 80068fa:	bf00      	nop
 80068fc:	20004c64 	.word	0x20004c64

08006900 <__malloc_unlock>:
 8006900:	4801      	ldr	r0, [pc, #4]	@ (8006908 <__malloc_unlock+0x8>)
 8006902:	f7ff befb 	b.w	80066fc <__retarget_lock_release_recursive>
 8006906:	bf00      	nop
 8006908:	20004c64 	.word	0x20004c64

0800690c <__sfputc_r>:
 800690c:	6893      	ldr	r3, [r2, #8]
 800690e:	3b01      	subs	r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	b410      	push	{r4}
 8006914:	6093      	str	r3, [r2, #8]
 8006916:	da08      	bge.n	800692a <__sfputc_r+0x1e>
 8006918:	6994      	ldr	r4, [r2, #24]
 800691a:	42a3      	cmp	r3, r4
 800691c:	db01      	blt.n	8006922 <__sfputc_r+0x16>
 800691e:	290a      	cmp	r1, #10
 8006920:	d103      	bne.n	800692a <__sfputc_r+0x1e>
 8006922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006926:	f7ff bd7c 	b.w	8006422 <__swbuf_r>
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	1c58      	adds	r0, r3, #1
 800692e:	6010      	str	r0, [r2, #0]
 8006930:	7019      	strb	r1, [r3, #0]
 8006932:	4608      	mov	r0, r1
 8006934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006938:	4770      	bx	lr

0800693a <__sfputs_r>:
 800693a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	4614      	mov	r4, r2
 8006942:	18d5      	adds	r5, r2, r3
 8006944:	42ac      	cmp	r4, r5
 8006946:	d101      	bne.n	800694c <__sfputs_r+0x12>
 8006948:	2000      	movs	r0, #0
 800694a:	e007      	b.n	800695c <__sfputs_r+0x22>
 800694c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006950:	463a      	mov	r2, r7
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ffda 	bl	800690c <__sfputc_r>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d1f3      	bne.n	8006944 <__sfputs_r+0xa>
 800695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006960 <_vfiprintf_r>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	460d      	mov	r5, r1
 8006966:	b09d      	sub	sp, #116	@ 0x74
 8006968:	4614      	mov	r4, r2
 800696a:	4698      	mov	r8, r3
 800696c:	4606      	mov	r6, r0
 800696e:	b118      	cbz	r0, 8006978 <_vfiprintf_r+0x18>
 8006970:	6a03      	ldr	r3, [r0, #32]
 8006972:	b90b      	cbnz	r3, 8006978 <_vfiprintf_r+0x18>
 8006974:	f7ff fc6c 	bl	8006250 <__sinit>
 8006978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	d405      	bmi.n	800698a <_vfiprintf_r+0x2a>
 800697e:	89ab      	ldrh	r3, [r5, #12]
 8006980:	059a      	lsls	r2, r3, #22
 8006982:	d402      	bmi.n	800698a <_vfiprintf_r+0x2a>
 8006984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006986:	f7ff feb8 	bl	80066fa <__retarget_lock_acquire_recursive>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	071b      	lsls	r3, r3, #28
 800698e:	d501      	bpl.n	8006994 <_vfiprintf_r+0x34>
 8006990:	692b      	ldr	r3, [r5, #16]
 8006992:	b99b      	cbnz	r3, 80069bc <_vfiprintf_r+0x5c>
 8006994:	4629      	mov	r1, r5
 8006996:	4630      	mov	r0, r6
 8006998:	f7ff fd82 	bl	80064a0 <__swsetup_r>
 800699c:	b170      	cbz	r0, 80069bc <_vfiprintf_r+0x5c>
 800699e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069a0:	07dc      	lsls	r4, r3, #31
 80069a2:	d504      	bpl.n	80069ae <_vfiprintf_r+0x4e>
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	b01d      	add	sp, #116	@ 0x74
 80069aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	0598      	lsls	r0, r3, #22
 80069b2:	d4f7      	bmi.n	80069a4 <_vfiprintf_r+0x44>
 80069b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069b6:	f7ff fea1 	bl	80066fc <__retarget_lock_release_recursive>
 80069ba:	e7f3      	b.n	80069a4 <_vfiprintf_r+0x44>
 80069bc:	2300      	movs	r3, #0
 80069be:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c0:	2320      	movs	r3, #32
 80069c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ca:	2330      	movs	r3, #48	@ 0x30
 80069cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b7c <_vfiprintf_r+0x21c>
 80069d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069d4:	f04f 0901 	mov.w	r9, #1
 80069d8:	4623      	mov	r3, r4
 80069da:	469a      	mov	sl, r3
 80069dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e0:	b10a      	cbz	r2, 80069e6 <_vfiprintf_r+0x86>
 80069e2:	2a25      	cmp	r2, #37	@ 0x25
 80069e4:	d1f9      	bne.n	80069da <_vfiprintf_r+0x7a>
 80069e6:	ebba 0b04 	subs.w	fp, sl, r4
 80069ea:	d00b      	beq.n	8006a04 <_vfiprintf_r+0xa4>
 80069ec:	465b      	mov	r3, fp
 80069ee:	4622      	mov	r2, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff ffa1 	bl	800693a <__sfputs_r>
 80069f8:	3001      	adds	r0, #1
 80069fa:	f000 80a7 	beq.w	8006b4c <_vfiprintf_r+0x1ec>
 80069fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a00:	445a      	add	r2, fp
 8006a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a04:	f89a 3000 	ldrb.w	r3, [sl]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 809f 	beq.w	8006b4c <_vfiprintf_r+0x1ec>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a18:	f10a 0a01 	add.w	sl, sl, #1
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a26:	4654      	mov	r4, sl
 8006a28:	2205      	movs	r2, #5
 8006a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a2e:	4853      	ldr	r0, [pc, #332]	@ (8006b7c <_vfiprintf_r+0x21c>)
 8006a30:	f7f9 fbee 	bl	8000210 <memchr>
 8006a34:	9a04      	ldr	r2, [sp, #16]
 8006a36:	b9d8      	cbnz	r0, 8006a70 <_vfiprintf_r+0x110>
 8006a38:	06d1      	lsls	r1, r2, #27
 8006a3a:	bf44      	itt	mi
 8006a3c:	2320      	movmi	r3, #32
 8006a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a42:	0713      	lsls	r3, r2, #28
 8006a44:	bf44      	itt	mi
 8006a46:	232b      	movmi	r3, #43	@ 0x2b
 8006a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a52:	d015      	beq.n	8006a80 <_vfiprintf_r+0x120>
 8006a54:	9a07      	ldr	r2, [sp, #28]
 8006a56:	4654      	mov	r4, sl
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f04f 0c0a 	mov.w	ip, #10
 8006a5e:	4621      	mov	r1, r4
 8006a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a64:	3b30      	subs	r3, #48	@ 0x30
 8006a66:	2b09      	cmp	r3, #9
 8006a68:	d94b      	bls.n	8006b02 <_vfiprintf_r+0x1a2>
 8006a6a:	b1b0      	cbz	r0, 8006a9a <_vfiprintf_r+0x13a>
 8006a6c:	9207      	str	r2, [sp, #28]
 8006a6e:	e014      	b.n	8006a9a <_vfiprintf_r+0x13a>
 8006a70:	eba0 0308 	sub.w	r3, r0, r8
 8006a74:	fa09 f303 	lsl.w	r3, r9, r3
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	46a2      	mov	sl, r4
 8006a7e:	e7d2      	b.n	8006a26 <_vfiprintf_r+0xc6>
 8006a80:	9b03      	ldr	r3, [sp, #12]
 8006a82:	1d19      	adds	r1, r3, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	9103      	str	r1, [sp, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfbb      	ittet	lt
 8006a8c:	425b      	neglt	r3, r3
 8006a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a92:	9307      	strge	r3, [sp, #28]
 8006a94:	9307      	strlt	r3, [sp, #28]
 8006a96:	bfb8      	it	lt
 8006a98:	9204      	strlt	r2, [sp, #16]
 8006a9a:	7823      	ldrb	r3, [r4, #0]
 8006a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a9e:	d10a      	bne.n	8006ab6 <_vfiprintf_r+0x156>
 8006aa0:	7863      	ldrb	r3, [r4, #1]
 8006aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aa4:	d132      	bne.n	8006b0c <_vfiprintf_r+0x1ac>
 8006aa6:	9b03      	ldr	r3, [sp, #12]
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	9203      	str	r2, [sp, #12]
 8006aae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ab2:	3402      	adds	r4, #2
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b8c <_vfiprintf_r+0x22c>
 8006aba:	7821      	ldrb	r1, [r4, #0]
 8006abc:	2203      	movs	r2, #3
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f7f9 fba6 	bl	8000210 <memchr>
 8006ac4:	b138      	cbz	r0, 8006ad6 <_vfiprintf_r+0x176>
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	eba0 000a 	sub.w	r0, r0, sl
 8006acc:	2240      	movs	r2, #64	@ 0x40
 8006ace:	4082      	lsls	r2, r0
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	3401      	adds	r4, #1
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ada:	4829      	ldr	r0, [pc, #164]	@ (8006b80 <_vfiprintf_r+0x220>)
 8006adc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ae0:	2206      	movs	r2, #6
 8006ae2:	f7f9 fb95 	bl	8000210 <memchr>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d03f      	beq.n	8006b6a <_vfiprintf_r+0x20a>
 8006aea:	4b26      	ldr	r3, [pc, #152]	@ (8006b84 <_vfiprintf_r+0x224>)
 8006aec:	bb1b      	cbnz	r3, 8006b36 <_vfiprintf_r+0x1d6>
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	3307      	adds	r3, #7
 8006af2:	f023 0307 	bic.w	r3, r3, #7
 8006af6:	3308      	adds	r3, #8
 8006af8:	9303      	str	r3, [sp, #12]
 8006afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afc:	443b      	add	r3, r7
 8006afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b00:	e76a      	b.n	80069d8 <_vfiprintf_r+0x78>
 8006b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b06:	460c      	mov	r4, r1
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e7a8      	b.n	8006a5e <_vfiprintf_r+0xfe>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	3401      	adds	r4, #1
 8006b10:	9305      	str	r3, [sp, #20]
 8006b12:	4619      	mov	r1, r3
 8006b14:	f04f 0c0a 	mov.w	ip, #10
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b1e:	3a30      	subs	r2, #48	@ 0x30
 8006b20:	2a09      	cmp	r2, #9
 8006b22:	d903      	bls.n	8006b2c <_vfiprintf_r+0x1cc>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0c6      	beq.n	8006ab6 <_vfiprintf_r+0x156>
 8006b28:	9105      	str	r1, [sp, #20]
 8006b2a:	e7c4      	b.n	8006ab6 <_vfiprintf_r+0x156>
 8006b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b30:	4604      	mov	r4, r0
 8006b32:	2301      	movs	r3, #1
 8006b34:	e7f0      	b.n	8006b18 <_vfiprintf_r+0x1b8>
 8006b36:	ab03      	add	r3, sp, #12
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4b12      	ldr	r3, [pc, #72]	@ (8006b88 <_vfiprintf_r+0x228>)
 8006b3e:	a904      	add	r1, sp, #16
 8006b40:	4630      	mov	r0, r6
 8006b42:	f3af 8000 	nop.w
 8006b46:	4607      	mov	r7, r0
 8006b48:	1c78      	adds	r0, r7, #1
 8006b4a:	d1d6      	bne.n	8006afa <_vfiprintf_r+0x19a>
 8006b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b4e:	07d9      	lsls	r1, r3, #31
 8006b50:	d405      	bmi.n	8006b5e <_vfiprintf_r+0x1fe>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	059a      	lsls	r2, r3, #22
 8006b56:	d402      	bmi.n	8006b5e <_vfiprintf_r+0x1fe>
 8006b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b5a:	f7ff fdcf 	bl	80066fc <__retarget_lock_release_recursive>
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	065b      	lsls	r3, r3, #25
 8006b62:	f53f af1f 	bmi.w	80069a4 <_vfiprintf_r+0x44>
 8006b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b68:	e71e      	b.n	80069a8 <_vfiprintf_r+0x48>
 8006b6a:	ab03      	add	r3, sp, #12
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <_vfiprintf_r+0x228>)
 8006b72:	a904      	add	r1, sp, #16
 8006b74:	4630      	mov	r0, r6
 8006b76:	f000 f879 	bl	8006c6c <_printf_i>
 8006b7a:	e7e4      	b.n	8006b46 <_vfiprintf_r+0x1e6>
 8006b7c:	08007234 	.word	0x08007234
 8006b80:	0800723e 	.word	0x0800723e
 8006b84:	00000000 	.word	0x00000000
 8006b88:	0800693b 	.word	0x0800693b
 8006b8c:	0800723a 	.word	0x0800723a

08006b90 <_printf_common>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	4616      	mov	r6, r2
 8006b96:	4698      	mov	r8, r3
 8006b98:	688a      	ldr	r2, [r1, #8]
 8006b9a:	690b      	ldr	r3, [r1, #16]
 8006b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	bfb8      	it	lt
 8006ba4:	4613      	movlt	r3, r2
 8006ba6:	6033      	str	r3, [r6, #0]
 8006ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bac:	4607      	mov	r7, r0
 8006bae:	460c      	mov	r4, r1
 8006bb0:	b10a      	cbz	r2, 8006bb6 <_printf_common+0x26>
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	6033      	str	r3, [r6, #0]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	0699      	lsls	r1, r3, #26
 8006bba:	bf42      	ittt	mi
 8006bbc:	6833      	ldrmi	r3, [r6, #0]
 8006bbe:	3302      	addmi	r3, #2
 8006bc0:	6033      	strmi	r3, [r6, #0]
 8006bc2:	6825      	ldr	r5, [r4, #0]
 8006bc4:	f015 0506 	ands.w	r5, r5, #6
 8006bc8:	d106      	bne.n	8006bd8 <_printf_common+0x48>
 8006bca:	f104 0a19 	add.w	sl, r4, #25
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	6832      	ldr	r2, [r6, #0]
 8006bd2:	1a9b      	subs	r3, r3, r2
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dc26      	bgt.n	8006c26 <_printf_common+0x96>
 8006bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	3b00      	subs	r3, #0
 8006be0:	bf18      	it	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	0692      	lsls	r2, r2, #26
 8006be6:	d42b      	bmi.n	8006c40 <_printf_common+0xb0>
 8006be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bec:	4641      	mov	r1, r8
 8006bee:	4638      	mov	r0, r7
 8006bf0:	47c8      	blx	r9
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d01e      	beq.n	8006c34 <_printf_common+0xa4>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	6922      	ldr	r2, [r4, #16]
 8006bfa:	f003 0306 	and.w	r3, r3, #6
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	bf02      	ittt	eq
 8006c02:	68e5      	ldreq	r5, [r4, #12]
 8006c04:	6833      	ldreq	r3, [r6, #0]
 8006c06:	1aed      	subeq	r5, r5, r3
 8006c08:	68a3      	ldr	r3, [r4, #8]
 8006c0a:	bf0c      	ite	eq
 8006c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c10:	2500      	movne	r5, #0
 8006c12:	4293      	cmp	r3, r2
 8006c14:	bfc4      	itt	gt
 8006c16:	1a9b      	subgt	r3, r3, r2
 8006c18:	18ed      	addgt	r5, r5, r3
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	341a      	adds	r4, #26
 8006c1e:	42b5      	cmp	r5, r6
 8006c20:	d11a      	bne.n	8006c58 <_printf_common+0xc8>
 8006c22:	2000      	movs	r0, #0
 8006c24:	e008      	b.n	8006c38 <_printf_common+0xa8>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4652      	mov	r2, sl
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	47c8      	blx	r9
 8006c30:	3001      	adds	r0, #1
 8006c32:	d103      	bne.n	8006c3c <_printf_common+0xac>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e7c6      	b.n	8006bce <_printf_common+0x3e>
 8006c40:	18e1      	adds	r1, r4, r3
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	2030      	movs	r0, #48	@ 0x30
 8006c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c4a:	4422      	add	r2, r4
 8006c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c54:	3302      	adds	r3, #2
 8006c56:	e7c7      	b.n	8006be8 <_printf_common+0x58>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	4638      	mov	r0, r7
 8006c60:	47c8      	blx	r9
 8006c62:	3001      	adds	r0, #1
 8006c64:	d0e6      	beq.n	8006c34 <_printf_common+0xa4>
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7d9      	b.n	8006c1e <_printf_common+0x8e>
	...

08006c6c <_printf_i>:
 8006c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	7e0f      	ldrb	r7, [r1, #24]
 8006c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c74:	2f78      	cmp	r7, #120	@ 0x78
 8006c76:	4691      	mov	r9, r2
 8006c78:	4680      	mov	r8, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	469a      	mov	sl, r3
 8006c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c82:	d807      	bhi.n	8006c94 <_printf_i+0x28>
 8006c84:	2f62      	cmp	r7, #98	@ 0x62
 8006c86:	d80a      	bhi.n	8006c9e <_printf_i+0x32>
 8006c88:	2f00      	cmp	r7, #0
 8006c8a:	f000 80d1 	beq.w	8006e30 <_printf_i+0x1c4>
 8006c8e:	2f58      	cmp	r7, #88	@ 0x58
 8006c90:	f000 80b8 	beq.w	8006e04 <_printf_i+0x198>
 8006c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c9c:	e03a      	b.n	8006d14 <_printf_i+0xa8>
 8006c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ca2:	2b15      	cmp	r3, #21
 8006ca4:	d8f6      	bhi.n	8006c94 <_printf_i+0x28>
 8006ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8006cac <_printf_i+0x40>)
 8006ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cac:	08006d05 	.word	0x08006d05
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006c95 	.word	0x08006c95
 8006cb8:	08006c95 	.word	0x08006c95
 8006cbc:	08006c95 	.word	0x08006c95
 8006cc0:	08006c95 	.word	0x08006c95
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006c95 	.word	0x08006c95
 8006ccc:	08006c95 	.word	0x08006c95
 8006cd0:	08006c95 	.word	0x08006c95
 8006cd4:	08006c95 	.word	0x08006c95
 8006cd8:	08006e17 	.word	0x08006e17
 8006cdc:	08006d43 	.word	0x08006d43
 8006ce0:	08006dd1 	.word	0x08006dd1
 8006ce4:	08006c95 	.word	0x08006c95
 8006ce8:	08006c95 	.word	0x08006c95
 8006cec:	08006e39 	.word	0x08006e39
 8006cf0:	08006c95 	.word	0x08006c95
 8006cf4:	08006d43 	.word	0x08006d43
 8006cf8:	08006c95 	.word	0x08006c95
 8006cfc:	08006c95 	.word	0x08006c95
 8006d00:	08006dd9 	.word	0x08006dd9
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	1d1a      	adds	r2, r3, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6032      	str	r2, [r6, #0]
 8006d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d14:	2301      	movs	r3, #1
 8006d16:	e09c      	b.n	8006e52 <_printf_i+0x1e6>
 8006d18:	6833      	ldr	r3, [r6, #0]
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1d19      	adds	r1, r3, #4
 8006d1e:	6031      	str	r1, [r6, #0]
 8006d20:	0606      	lsls	r6, r0, #24
 8006d22:	d501      	bpl.n	8006d28 <_printf_i+0xbc>
 8006d24:	681d      	ldr	r5, [r3, #0]
 8006d26:	e003      	b.n	8006d30 <_printf_i+0xc4>
 8006d28:	0645      	lsls	r5, r0, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0xb8>
 8006d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	da03      	bge.n	8006d3c <_printf_i+0xd0>
 8006d34:	232d      	movs	r3, #45	@ 0x2d
 8006d36:	426d      	negs	r5, r5
 8006d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d3c:	4858      	ldr	r0, [pc, #352]	@ (8006ea0 <_printf_i+0x234>)
 8006d3e:	230a      	movs	r3, #10
 8006d40:	e011      	b.n	8006d66 <_printf_i+0xfa>
 8006d42:	6821      	ldr	r1, [r4, #0]
 8006d44:	6833      	ldr	r3, [r6, #0]
 8006d46:	0608      	lsls	r0, r1, #24
 8006d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d4c:	d402      	bmi.n	8006d54 <_printf_i+0xe8>
 8006d4e:	0649      	lsls	r1, r1, #25
 8006d50:	bf48      	it	mi
 8006d52:	b2ad      	uxthmi	r5, r5
 8006d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d56:	4852      	ldr	r0, [pc, #328]	@ (8006ea0 <_printf_i+0x234>)
 8006d58:	6033      	str	r3, [r6, #0]
 8006d5a:	bf14      	ite	ne
 8006d5c:	230a      	movne	r3, #10
 8006d5e:	2308      	moveq	r3, #8
 8006d60:	2100      	movs	r1, #0
 8006d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d66:	6866      	ldr	r6, [r4, #4]
 8006d68:	60a6      	str	r6, [r4, #8]
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	db05      	blt.n	8006d7a <_printf_i+0x10e>
 8006d6e:	6821      	ldr	r1, [r4, #0]
 8006d70:	432e      	orrs	r6, r5
 8006d72:	f021 0104 	bic.w	r1, r1, #4
 8006d76:	6021      	str	r1, [r4, #0]
 8006d78:	d04b      	beq.n	8006e12 <_printf_i+0x1a6>
 8006d7a:	4616      	mov	r6, r2
 8006d7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d80:	fb03 5711 	mls	r7, r3, r1, r5
 8006d84:	5dc7      	ldrb	r7, [r0, r7]
 8006d86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d8a:	462f      	mov	r7, r5
 8006d8c:	42bb      	cmp	r3, r7
 8006d8e:	460d      	mov	r5, r1
 8006d90:	d9f4      	bls.n	8006d7c <_printf_i+0x110>
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d10b      	bne.n	8006dae <_printf_i+0x142>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	07df      	lsls	r7, r3, #31
 8006d9a:	d508      	bpl.n	8006dae <_printf_i+0x142>
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	6861      	ldr	r1, [r4, #4]
 8006da0:	4299      	cmp	r1, r3
 8006da2:	bfde      	ittt	le
 8006da4:	2330      	movle	r3, #48	@ 0x30
 8006da6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006daa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dae:	1b92      	subs	r2, r2, r6
 8006db0:	6122      	str	r2, [r4, #16]
 8006db2:	f8cd a000 	str.w	sl, [sp]
 8006db6:	464b      	mov	r3, r9
 8006db8:	aa03      	add	r2, sp, #12
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	f7ff fee7 	bl	8006b90 <_printf_common>
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d14a      	bne.n	8006e5c <_printf_i+0x1f0>
 8006dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dca:	b004      	add	sp, #16
 8006dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	f043 0320 	orr.w	r3, r3, #32
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	4832      	ldr	r0, [pc, #200]	@ (8006ea4 <_printf_i+0x238>)
 8006dda:	2778      	movs	r7, #120	@ 0x78
 8006ddc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	6831      	ldr	r1, [r6, #0]
 8006de4:	061f      	lsls	r7, r3, #24
 8006de6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dea:	d402      	bmi.n	8006df2 <_printf_i+0x186>
 8006dec:	065f      	lsls	r7, r3, #25
 8006dee:	bf48      	it	mi
 8006df0:	b2ad      	uxthmi	r5, r5
 8006df2:	6031      	str	r1, [r6, #0]
 8006df4:	07d9      	lsls	r1, r3, #31
 8006df6:	bf44      	itt	mi
 8006df8:	f043 0320 	orrmi.w	r3, r3, #32
 8006dfc:	6023      	strmi	r3, [r4, #0]
 8006dfe:	b11d      	cbz	r5, 8006e08 <_printf_i+0x19c>
 8006e00:	2310      	movs	r3, #16
 8006e02:	e7ad      	b.n	8006d60 <_printf_i+0xf4>
 8006e04:	4826      	ldr	r0, [pc, #152]	@ (8006ea0 <_printf_i+0x234>)
 8006e06:	e7e9      	b.n	8006ddc <_printf_i+0x170>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	f023 0320 	bic.w	r3, r3, #32
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	e7f6      	b.n	8006e00 <_printf_i+0x194>
 8006e12:	4616      	mov	r6, r2
 8006e14:	e7bd      	b.n	8006d92 <_printf_i+0x126>
 8006e16:	6833      	ldr	r3, [r6, #0]
 8006e18:	6825      	ldr	r5, [r4, #0]
 8006e1a:	6961      	ldr	r1, [r4, #20]
 8006e1c:	1d18      	adds	r0, r3, #4
 8006e1e:	6030      	str	r0, [r6, #0]
 8006e20:	062e      	lsls	r6, r5, #24
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	d501      	bpl.n	8006e2a <_printf_i+0x1be>
 8006e26:	6019      	str	r1, [r3, #0]
 8006e28:	e002      	b.n	8006e30 <_printf_i+0x1c4>
 8006e2a:	0668      	lsls	r0, r5, #25
 8006e2c:	d5fb      	bpl.n	8006e26 <_printf_i+0x1ba>
 8006e2e:	8019      	strh	r1, [r3, #0]
 8006e30:	2300      	movs	r3, #0
 8006e32:	6123      	str	r3, [r4, #16]
 8006e34:	4616      	mov	r6, r2
 8006e36:	e7bc      	b.n	8006db2 <_printf_i+0x146>
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	6032      	str	r2, [r6, #0]
 8006e3e:	681e      	ldr	r6, [r3, #0]
 8006e40:	6862      	ldr	r2, [r4, #4]
 8006e42:	2100      	movs	r1, #0
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7f9 f9e3 	bl	8000210 <memchr>
 8006e4a:	b108      	cbz	r0, 8006e50 <_printf_i+0x1e4>
 8006e4c:	1b80      	subs	r0, r0, r6
 8006e4e:	6060      	str	r0, [r4, #4]
 8006e50:	6863      	ldr	r3, [r4, #4]
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	2300      	movs	r3, #0
 8006e56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e5a:	e7aa      	b.n	8006db2 <_printf_i+0x146>
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	4632      	mov	r2, r6
 8006e60:	4649      	mov	r1, r9
 8006e62:	4640      	mov	r0, r8
 8006e64:	47d0      	blx	sl
 8006e66:	3001      	adds	r0, #1
 8006e68:	d0ad      	beq.n	8006dc6 <_printf_i+0x15a>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	079b      	lsls	r3, r3, #30
 8006e6e:	d413      	bmi.n	8006e98 <_printf_i+0x22c>
 8006e70:	68e0      	ldr	r0, [r4, #12]
 8006e72:	9b03      	ldr	r3, [sp, #12]
 8006e74:	4298      	cmp	r0, r3
 8006e76:	bfb8      	it	lt
 8006e78:	4618      	movlt	r0, r3
 8006e7a:	e7a6      	b.n	8006dca <_printf_i+0x15e>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	4632      	mov	r2, r6
 8006e80:	4649      	mov	r1, r9
 8006e82:	4640      	mov	r0, r8
 8006e84:	47d0      	blx	sl
 8006e86:	3001      	adds	r0, #1
 8006e88:	d09d      	beq.n	8006dc6 <_printf_i+0x15a>
 8006e8a:	3501      	adds	r5, #1
 8006e8c:	68e3      	ldr	r3, [r4, #12]
 8006e8e:	9903      	ldr	r1, [sp, #12]
 8006e90:	1a5b      	subs	r3, r3, r1
 8006e92:	42ab      	cmp	r3, r5
 8006e94:	dcf2      	bgt.n	8006e7c <_printf_i+0x210>
 8006e96:	e7eb      	b.n	8006e70 <_printf_i+0x204>
 8006e98:	2500      	movs	r5, #0
 8006e9a:	f104 0619 	add.w	r6, r4, #25
 8006e9e:	e7f5      	b.n	8006e8c <_printf_i+0x220>
 8006ea0:	08007245 	.word	0x08007245
 8006ea4:	08007256 	.word	0x08007256

08006ea8 <__sflush_r>:
 8006ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb0:	0716      	lsls	r6, r2, #28
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	d454      	bmi.n	8006f62 <__sflush_r+0xba>
 8006eb8:	684b      	ldr	r3, [r1, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	dc02      	bgt.n	8006ec4 <__sflush_r+0x1c>
 8006ebe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	dd48      	ble.n	8006f56 <__sflush_r+0xae>
 8006ec4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ec6:	2e00      	cmp	r6, #0
 8006ec8:	d045      	beq.n	8006f56 <__sflush_r+0xae>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ed0:	682f      	ldr	r7, [r5, #0]
 8006ed2:	6a21      	ldr	r1, [r4, #32]
 8006ed4:	602b      	str	r3, [r5, #0]
 8006ed6:	d030      	beq.n	8006f3a <__sflush_r+0x92>
 8006ed8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	0759      	lsls	r1, r3, #29
 8006ede:	d505      	bpl.n	8006eec <__sflush_r+0x44>
 8006ee0:	6863      	ldr	r3, [r4, #4]
 8006ee2:	1ad2      	subs	r2, r2, r3
 8006ee4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ee6:	b10b      	cbz	r3, 8006eec <__sflush_r+0x44>
 8006ee8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	2300      	movs	r3, #0
 8006eee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ef0:	6a21      	ldr	r1, [r4, #32]
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b0      	blx	r6
 8006ef6:	1c43      	adds	r3, r0, #1
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	d106      	bne.n	8006f0a <__sflush_r+0x62>
 8006efc:	6829      	ldr	r1, [r5, #0]
 8006efe:	291d      	cmp	r1, #29
 8006f00:	d82b      	bhi.n	8006f5a <__sflush_r+0xb2>
 8006f02:	4a2a      	ldr	r2, [pc, #168]	@ (8006fac <__sflush_r+0x104>)
 8006f04:	40ca      	lsrs	r2, r1
 8006f06:	07d6      	lsls	r6, r2, #31
 8006f08:	d527      	bpl.n	8006f5a <__sflush_r+0xb2>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	6062      	str	r2, [r4, #4]
 8006f0e:	04d9      	lsls	r1, r3, #19
 8006f10:	6922      	ldr	r2, [r4, #16]
 8006f12:	6022      	str	r2, [r4, #0]
 8006f14:	d504      	bpl.n	8006f20 <__sflush_r+0x78>
 8006f16:	1c42      	adds	r2, r0, #1
 8006f18:	d101      	bne.n	8006f1e <__sflush_r+0x76>
 8006f1a:	682b      	ldr	r3, [r5, #0]
 8006f1c:	b903      	cbnz	r3, 8006f20 <__sflush_r+0x78>
 8006f1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f22:	602f      	str	r7, [r5, #0]
 8006f24:	b1b9      	cbz	r1, 8006f56 <__sflush_r+0xae>
 8006f26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f2a:	4299      	cmp	r1, r3
 8006f2c:	d002      	beq.n	8006f34 <__sflush_r+0x8c>
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f7ff fbf4 	bl	800671c <_free_r>
 8006f34:	2300      	movs	r3, #0
 8006f36:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f38:	e00d      	b.n	8006f56 <__sflush_r+0xae>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b0      	blx	r6
 8006f40:	4602      	mov	r2, r0
 8006f42:	1c50      	adds	r0, r2, #1
 8006f44:	d1c9      	bne.n	8006eda <__sflush_r+0x32>
 8006f46:	682b      	ldr	r3, [r5, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0c6      	beq.n	8006eda <__sflush_r+0x32>
 8006f4c:	2b1d      	cmp	r3, #29
 8006f4e:	d001      	beq.n	8006f54 <__sflush_r+0xac>
 8006f50:	2b16      	cmp	r3, #22
 8006f52:	d11e      	bne.n	8006f92 <__sflush_r+0xea>
 8006f54:	602f      	str	r7, [r5, #0]
 8006f56:	2000      	movs	r0, #0
 8006f58:	e022      	b.n	8006fa0 <__sflush_r+0xf8>
 8006f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f5e:	b21b      	sxth	r3, r3
 8006f60:	e01b      	b.n	8006f9a <__sflush_r+0xf2>
 8006f62:	690f      	ldr	r7, [r1, #16]
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	d0f6      	beq.n	8006f56 <__sflush_r+0xae>
 8006f68:	0793      	lsls	r3, r2, #30
 8006f6a:	680e      	ldr	r6, [r1, #0]
 8006f6c:	bf08      	it	eq
 8006f6e:	694b      	ldreq	r3, [r1, #20]
 8006f70:	600f      	str	r7, [r1, #0]
 8006f72:	bf18      	it	ne
 8006f74:	2300      	movne	r3, #0
 8006f76:	eba6 0807 	sub.w	r8, r6, r7
 8006f7a:	608b      	str	r3, [r1, #8]
 8006f7c:	f1b8 0f00 	cmp.w	r8, #0
 8006f80:	dde9      	ble.n	8006f56 <__sflush_r+0xae>
 8006f82:	6a21      	ldr	r1, [r4, #32]
 8006f84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f86:	4643      	mov	r3, r8
 8006f88:	463a      	mov	r2, r7
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b0      	blx	r6
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	dc08      	bgt.n	8006fa4 <__sflush_r+0xfc>
 8006f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f9a:	81a3      	strh	r3, [r4, #12]
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa4:	4407      	add	r7, r0
 8006fa6:	eba8 0800 	sub.w	r8, r8, r0
 8006faa:	e7e7      	b.n	8006f7c <__sflush_r+0xd4>
 8006fac:	20400001 	.word	0x20400001

08006fb0 <_fflush_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	690b      	ldr	r3, [r1, #16]
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	b913      	cbnz	r3, 8006fc0 <_fflush_r+0x10>
 8006fba:	2500      	movs	r5, #0
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	b118      	cbz	r0, 8006fca <_fflush_r+0x1a>
 8006fc2:	6a03      	ldr	r3, [r0, #32]
 8006fc4:	b90b      	cbnz	r3, 8006fca <_fflush_r+0x1a>
 8006fc6:	f7ff f943 	bl	8006250 <__sinit>
 8006fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f3      	beq.n	8006fba <_fflush_r+0xa>
 8006fd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fd4:	07d0      	lsls	r0, r2, #31
 8006fd6:	d404      	bmi.n	8006fe2 <_fflush_r+0x32>
 8006fd8:	0599      	lsls	r1, r3, #22
 8006fda:	d402      	bmi.n	8006fe2 <_fflush_r+0x32>
 8006fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fde:	f7ff fb8c 	bl	80066fa <__retarget_lock_acquire_recursive>
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	f7ff ff5f 	bl	8006ea8 <__sflush_r>
 8006fea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fec:	07da      	lsls	r2, r3, #31
 8006fee:	4605      	mov	r5, r0
 8006ff0:	d4e4      	bmi.n	8006fbc <_fflush_r+0xc>
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	059b      	lsls	r3, r3, #22
 8006ff6:	d4e1      	bmi.n	8006fbc <_fflush_r+0xc>
 8006ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ffa:	f7ff fb7f 	bl	80066fc <__retarget_lock_release_recursive>
 8006ffe:	e7dd      	b.n	8006fbc <_fflush_r+0xc>

08007000 <__swhatbuf_r>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	460c      	mov	r4, r1
 8007004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007008:	2900      	cmp	r1, #0
 800700a:	b096      	sub	sp, #88	@ 0x58
 800700c:	4615      	mov	r5, r2
 800700e:	461e      	mov	r6, r3
 8007010:	da0d      	bge.n	800702e <__swhatbuf_r+0x2e>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007018:	f04f 0100 	mov.w	r1, #0
 800701c:	bf14      	ite	ne
 800701e:	2340      	movne	r3, #64	@ 0x40
 8007020:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007024:	2000      	movs	r0, #0
 8007026:	6031      	str	r1, [r6, #0]
 8007028:	602b      	str	r3, [r5, #0]
 800702a:	b016      	add	sp, #88	@ 0x58
 800702c:	bd70      	pop	{r4, r5, r6, pc}
 800702e:	466a      	mov	r2, sp
 8007030:	f000 f848 	bl	80070c4 <_fstat_r>
 8007034:	2800      	cmp	r0, #0
 8007036:	dbec      	blt.n	8007012 <__swhatbuf_r+0x12>
 8007038:	9901      	ldr	r1, [sp, #4]
 800703a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800703e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007042:	4259      	negs	r1, r3
 8007044:	4159      	adcs	r1, r3
 8007046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800704a:	e7eb      	b.n	8007024 <__swhatbuf_r+0x24>

0800704c <__smakebuf_r>:
 800704c:	898b      	ldrh	r3, [r1, #12]
 800704e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007050:	079d      	lsls	r5, r3, #30
 8007052:	4606      	mov	r6, r0
 8007054:	460c      	mov	r4, r1
 8007056:	d507      	bpl.n	8007068 <__smakebuf_r+0x1c>
 8007058:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	6123      	str	r3, [r4, #16]
 8007060:	2301      	movs	r3, #1
 8007062:	6163      	str	r3, [r4, #20]
 8007064:	b003      	add	sp, #12
 8007066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007068:	ab01      	add	r3, sp, #4
 800706a:	466a      	mov	r2, sp
 800706c:	f7ff ffc8 	bl	8007000 <__swhatbuf_r>
 8007070:	9f00      	ldr	r7, [sp, #0]
 8007072:	4605      	mov	r5, r0
 8007074:	4639      	mov	r1, r7
 8007076:	4630      	mov	r0, r6
 8007078:	f7ff fbbc 	bl	80067f4 <_malloc_r>
 800707c:	b948      	cbnz	r0, 8007092 <__smakebuf_r+0x46>
 800707e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007082:	059a      	lsls	r2, r3, #22
 8007084:	d4ee      	bmi.n	8007064 <__smakebuf_r+0x18>
 8007086:	f023 0303 	bic.w	r3, r3, #3
 800708a:	f043 0302 	orr.w	r3, r3, #2
 800708e:	81a3      	strh	r3, [r4, #12]
 8007090:	e7e2      	b.n	8007058 <__smakebuf_r+0xc>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	6020      	str	r0, [r4, #0]
 8007096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	9b01      	ldr	r3, [sp, #4]
 800709e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070a2:	b15b      	cbz	r3, 80070bc <__smakebuf_r+0x70>
 80070a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a8:	4630      	mov	r0, r6
 80070aa:	f000 f81d 	bl	80070e8 <_isatty_r>
 80070ae:	b128      	cbz	r0, 80070bc <__smakebuf_r+0x70>
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f023 0303 	bic.w	r3, r3, #3
 80070b6:	f043 0301 	orr.w	r3, r3, #1
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	431d      	orrs	r5, r3
 80070c0:	81a5      	strh	r5, [r4, #12]
 80070c2:	e7cf      	b.n	8007064 <__smakebuf_r+0x18>

080070c4 <_fstat_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d07      	ldr	r5, [pc, #28]	@ (80070e4 <_fstat_r+0x20>)
 80070c8:	2300      	movs	r3, #0
 80070ca:	4604      	mov	r4, r0
 80070cc:	4608      	mov	r0, r1
 80070ce:	4611      	mov	r1, r2
 80070d0:	602b      	str	r3, [r5, #0]
 80070d2:	f7f9 fe30 	bl	8000d36 <_fstat>
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	d102      	bne.n	80070e0 <_fstat_r+0x1c>
 80070da:	682b      	ldr	r3, [r5, #0]
 80070dc:	b103      	cbz	r3, 80070e0 <_fstat_r+0x1c>
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	bd38      	pop	{r3, r4, r5, pc}
 80070e2:	bf00      	nop
 80070e4:	20004c60 	.word	0x20004c60

080070e8 <_isatty_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d06      	ldr	r5, [pc, #24]	@ (8007104 <_isatty_r+0x1c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	f7f9 fe2f 	bl	8000d56 <_isatty>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_isatty_r+0x1a>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_isatty_r+0x1a>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20004c60 	.word	0x20004c60

08007108 <_sbrk_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d06      	ldr	r5, [pc, #24]	@ (8007124 <_sbrk_r+0x1c>)
 800710c:	2300      	movs	r3, #0
 800710e:	4604      	mov	r4, r0
 8007110:	4608      	mov	r0, r1
 8007112:	602b      	str	r3, [r5, #0]
 8007114:	f7f9 fe38 	bl	8000d88 <_sbrk>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_sbrk_r+0x1a>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_sbrk_r+0x1a>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	20004c60 	.word	0x20004c60

08007128 <_init>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr

08007134 <_fini>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr
