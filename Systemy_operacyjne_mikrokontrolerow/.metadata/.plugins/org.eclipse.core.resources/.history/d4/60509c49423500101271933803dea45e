/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
    CMD_NONE,
    CMD_START_LED,
    CMD_STOP_LED,
    CMD_EXIT,
    CMD_SET_PERIOD,
    CMD_GET_PERIOD,
    CMD_GET_ADC,
    CMD_SET_ALERT,
    CMD_START_ANALYSIS,
    CMD_STOP_ANALYSIS,
    CMD_SET_ANALYSIS_AVG,
    CMD_SET_ANALYSIS_MAX,
    CMD_SET_ANALYSIS_MIN,
    CMD_GET_ANALYSIS,
    CMD_SET_SAMPLES
} Command_t;

typedef enum {
    ANALYSIS_AVG,
    ANALYSIS_MAX,
    ANALYSIS_MIN
} AnalysisMode_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define UART_BUFFER_SIZE 20
#define UART_RESPONSE_SIZE 120
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart2;

/* Definitions for UartTask */
osThreadId_t UartTaskHandle;
const osThreadAttr_t UartTask_attributes = {
  .name = "UartTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for LedTask */
osThreadId_t LedTaskHandle;
const osThreadAttr_t LedTask_attributes = {
  .name = "LedTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for ADC_Sampler */
osThreadId_t ADC_SamplerHandle;
const osThreadAttr_t ADC_Sampler_attributes = {
  .name = "ADC_Sampler",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Data_Analyzer */
osThreadId_t Data_AnalyzerHandle;
const osThreadAttr_t Data_Analyzer_attributes = {
  .name = "Data_Analyzer",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for Alert_Monitor */
osThreadId_t Alert_MonitorHandle;
const osThreadAttr_t Alert_Monitor_attributes = {
  .name = "Alert_Monitor",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for myQueue01 */
osMessageQueueId_t myQueue01Handle;
const osMessageQueueAttr_t myQueue01_attributes = {
  .name = "myQueue01"
};
/* Definitions for ADC_Queue */
osMessageQueueId_t ADC_QueueHandle;
const osMessageQueueAttr_t ADC_Queue_attributes = {
  .name = "ADC_Queue"
};
/* Definitions for Alert_Queue */
osMessageQueueId_t Alert_QueueHandle;
const osMessageQueueAttr_t Alert_Queue_attributes = {
  .name = "Alert_Queue"
};
/* Definitions for Analysis_Queue */
osMessageQueueId_t Analysis_QueueHandle;
const osMessageQueueAttr_t Analysis_Queue_attributes = {
  .name = "Analysis_Queue"
};
/* USER CODE BEGIN PV */
uint8_t uart_rx_char;
uint8_t uart_rx_buffer[UART_BUFFER_SIZE];
uint16_t uart_rx_index = 0;
osMessageQueueId_t ledCmdQueueHandle;
osMessageQueueId_t adcQueueHandle;
osMessageQueueId_t alertQueueHandle;
osMessageQueueId_t analysisQueueHandle;

volatile uint16_t adcPeriod = 1000; // Domyślny okres próbkowania ADC
volatile uint16_t alertThreshold = 4000; // Domyślny próg alarmowy
volatile uint8_t alertActive = 0;
volatile AnalysisMode_t analysisMode = ANALYSIS_AVG;
volatile uint16_t sampleCount = 10; // Domyślna liczba próbek do analizy
volatile uint8_t analysisRunning = 0;

uint16_t adcBuffer[20]; // Bufor na próbki ADC (można dostosować rozmiar)
uint16_t adcBufferIndex = 0;

const char welcome_msg[] =
      "\r\n"
      "***************************************\r\n"
      " System gotowy do działania \r\n"
      "***************************************\r\n"
      "MENU:\r\n"
      "1. START LED\r\n"
      "2. STOP LED\r\n"
      "3. EXIT\r\n"
      "4. SET_PERIOD <ms>\r\n"
      "5. GET_PERIOD\r\n"
      "6. GET_ADC\r\n"
      "7. SET_ALERT <value>\r\n"
      "8. START_ANALYSIS\r\n"
      "9. STOP_ANALYSIS\r\n"
      "10. SET_ANALYSIS_AVG\r\n"
      "11. SET_ANALYSIS_MAX\r\n"
      "12. SET_ANALYSIS_MIN\r\n"
      "13. GET_ANALYSIS\r\n"
      "14. SET_SAMPLES <value>\r\n"
      "***************************************\r\n"
      "> ";

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
void StartDefaultTask(void *argument);
void StartTask02(void *argument);
void StartAdcSamplerTask(void *argument);
void StartDataAnalyzerTask(void *argument);
void StartAlertMonitorTask(void *argument);

/* USER CODE BEGIN PFP */
char* CommandHandler_Parse(char* command);
uint16_t ReadAdcValue(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
    return 1;
}

// Odbiór pojedynczego znaku przez przerwanie
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2)
    {
        // Przekaż znak do kolejki
        osMessageQueuePut(myQueue01Handle, &uart_rx_char, 0, 0);
        HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);

  /* creation of ADC_Queue */
  ADC_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ADC_Queue_attributes);

  /* creation of Alert_Queue */
  Alert_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Alert_Queue_attributes);

  /* creation of Analysis_Queue */
  Analysis_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Analysis_Queue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  ledCmdQueueHandle = osMessageQueueNew (4, sizeof(Command_t), NULL);
  adcQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), NULL);
  alertQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), NULL);
  analysisQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), NULL);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartDefaultTask, NULL, &UartTask_attributes);

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartTask02, NULL, &LedTask_attributes);

  /* creation of ADC_Sampler */
  ADC_SamplerHandle = osThreadNew(StartAdcSamplerTask, NULL, &ADC_Sampler_attributes);

  /* creation of Data_Analyzer */
  Data_AnalyzerHandle = osThreadNew(StartDataAnalyzerTask, NULL, &Data_Analyzer_attributes);

  /* creation of Alert_Monitor */
  Alert_MonitorHandle = osThreadNew(StartAlertMonitorTask, NULL, &Alert_Monitor_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
char* CommandHandler_Parse(char* command)
{
    static char responseBuffer[UART_RESPONSE_SIZE];
    Command_t cmd = CMD_NONE;
    uint16_t value;

    size_t len = strlen(command);
    if (len > 0 && command[len - 1] == '\n') command[len - 1] = '\0';
    if (len > 0 && command[len - 1] == '\r') command[len - 1] = '\0';

    if (strcmp(command, "START LED") == 0) {
        cmd = CMD_START_LED;
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Dioda LED zaczyna mrugac z czestotliwoscia 0.5Hz");
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
    }
    else if (strcmp(command, "STOP LED") == 0) {
        cmd = CMD_STOP_LED;
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Dioda LED zostala wylaczona");
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
    }
    else if (strcmp(command, "EXIT") == 0) {
        cmd = CMD_EXIT;
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Zamykanie programu...");
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
    }
    // Nowe komendy
    else if (strncmp(command, "SET_PERIOD ", 11) == 0) {
        if (sscanf(command + 11, "%hu", &value) == 1) {
            adcPeriod = value;
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Okres probkowania ustawiony na %u ms", value);
        } else {
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieprawidlowy format komendy SET_PERIOD");
        }
    }
    else if (strcmp(command, "GET_PERIOD") == 0) {
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Aktualny okres probkowania: %u ms", adcPeriod);
    }
    else if (strcmp(command, "GET_ADC") == 0) {
        uint16_t adcValue = ReadAdcValue();
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "ADC: %u", adcValue);
    }
    else if (strncmp(command, "SET_ALERT ", 10) == 0) {
        if (sscanf(command + 10, "%hu", &value) == 1) {
            alertThreshold = value;
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Próg alarmowy ustawiony na %u", value);
        } else {
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieprawidlowy format komendy SET_ALERT");
        }
    }
    else if (strcmp(command, "START_ANALYSIS") == 0) {
        analysisRunning = 1;
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Analiza danych uruchomiona");
    }
    else if (strcmp(command, "STOP_ANALYSIS") == 0) {
        analysisRunning = 0;
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Analiza danych zatrzymana");
    }
    else if (strcmp(command, "SET_ANALYSIS_AVG") == 0) {
        analysisMode = ANALYSIS_AVG;
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Tryb analizy ustawiony na: SREDNIA");
    }
    else if (strcmp(command, "SET_ANALYSIS_MAX") == 0) {
        analysisMode = ANALYSIS_MAX;
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Tryb analizy ustawiony na: MAKSIMUM");
    }
    else if (strcmp(command, "SET_ANALYSIS_MIN") == 0) {
        analysisMode = ANALYSIS_MIN;
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Tryb analizy ustawiony na: MINIMUM");
    }
    else if (strcmp(command, "GET_ANALYSIS") == 0) {
        const char* modeStr = "";
        switch(analysisMode) {
            case ANALYSIS_AVG: modeStr = "A:AVG"; break;
            case ANALYSIS_MAX: modeStr = "A:MAX"; break;
            case ANALYSIS_MIN: modeStr = "A:MIN"; break;
        }
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Aktualny tryb analizy: %s", modeStr);
    }
    else if (strncmp(command, "SET_SAMPLES ", 12) == 0) {
        if (sscanf(command + 12, "%hu", &value) == 1 && value > 0 && value <= 20) {
            sampleCount = value;
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Liczba probek do analizy ustawiona na %u", value);
        } else {
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieprawidlowa liczba probek (1-20)");
        }
    }
    else {
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieznane polecenie");
    }
    return responseBuffer;
}

uint16_t ReadAdcValue(void)
{
    ADC_ChannelConfTypeDef sConfig = {0};

    // Konfiguracja kanału ADC
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
    sConfig.Rank = 1;
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    {
        Error_Handler();
    }

    // Rozpoczęcie konwersji
    HAL_ADC_Start(&hadc1);

    // Oczekiwanie na wynik
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
    {
        return HAL_ADC_GetValue(&hadc1);
    }

    return 0;
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the UartTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
	uint8_t rx_char;
	  uint8_t rx_buf[UART_BUFFER_SIZE];
	  uint16_t rx_idx = 0;
	  HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
	  /* Infinite loop */
	  for(;;)
	  {
	     if (osMessageQueueGet(myQueue01Handle, &rx_char, NULL, osWaitForever) == osOK)
	     {
	         if (rx_char == '\n' || rx_char == '\r') // Detekcja końca komendy
	         {
	             if (rx_idx > 0)
	             {
	                 rx_buf[rx_idx] = '\0'; // Zakończenie stringa
	                 char* response = CommandHandler_Parse((char*)rx_buf);
	                 HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
	                 HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
	                 HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n> ", 5, HAL_MAX_DELAY);
	                 rx_idx = 0;
	             }
	         }
	         else if (rx_idx < UART_BUFFER_SIZE - 1)
	         {
	             // Echo znaku (oprócz znaków specjalnych)
	             if(rx_char != '\r' && rx_char != '\n') {
	                 HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
	             }
	             rx_buf[rx_idx++] = rx_char; // Dodanie znaku do bufora
	         }
	         else
	         {
	             char err[] = "\r\nError: Buffer overflow\r\n> ";
	             HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
	             rx_idx = 0;
	         }
	     }
	     osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTask02 */
/**
* @brief Function implementing the LedTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartTask02 */
}

/* USER CODE BEGIN Header_StartAdcSamplerTask */
/**
* @brief Function implementing the ADC_Sampler thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcSamplerTask */
void StartAdcSamplerTask(void *argument)
{
  /* USER CODE BEGIN StartAdcSamplerTask */
    uint16_t adcValue;
	uint32_t tickCount = osKernelGetTickCount();

	for(;;)
	{
		adcValue = ReadAdcValue();

		// Wysyłanie danych do kolejki analizatora i monitora alertów
		osMessageQueuePut(adcQueueHandle, &adcValue, 0, 0);
		osMessageQueuePut(alertQueueHandle, &adcValue, 0, 0);

		// Oczekiwanie do następnego cyklu
		osDelayUntil(&tickCount, adcPeriod);
	}
  /* USER CODE END StartAdcSamplerTask */
}

/* USER CODE BEGIN Header_StartDataAnalyzerTask */
/**
* @brief Function implementing the Data_Analyzer thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataAnalyzerTask */
void StartDataAnalyzerTask(void *argument)
{
  /* USER CODE BEGIN StartDataAnalyzerTask */
    uint16_t adcValue;
    uint16_t sum = 0;
    uint16_t max = 0;
    uint16_t min = 4095;
    uint16_t samplesCollected = 0;

    for(;;)
    {
        if(analysisRunning && osMessageQueueGet(adcQueueHandle, &adcValue, NULL, 0) == osOK)
        {
            // Dodanie wartości do bufora
            adcBuffer[adcBufferIndex] = adcValue;
            adcBufferIndex = (adcBufferIndex + 1) % sampleCount;

            // Obliczenia
            sum += adcValue;
            if(adcValue > max) max = adcValue;
            if(adcValue < min) min = adcValue;
            samplesCollected++;

            // Jeśli zebrano odpowiednią liczbę próbek
            if(samplesCollected >= sampleCount)
            {
                uint16_t result = 0;
                char msg[50];

                switch(analysisMode)
                {
                    case ANALYSIS_AVG:
                        result = sum / sampleCount;
                        snprintf(msg, sizeof(msg), "AVG: %u\r\n", result);
                        break;
                    case ANALYSIS_MAX:
                        result = max;
                        snprintf(msg, sizeof(msg), "MAX: %u\r\n", result);
                        break;
                    case ANALYSIS_MIN:
                        result = min;
                        snprintf(msg, sizeof(msg), "MIN: %u\r\n", result);
                        break;
                }

                HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

                // Resetowanie wartości
                sum = 0;
                max = 0;
                min = 4095;
                samplesCollected = 0;
            }
        }
        osDelay(10);
    }
  /* USER CODE END StartDataAnalyzerTask */
}

/* USER CODE BEGIN Header_StartAlertMonitorTask */
/**
* @brief Function implementing the Alert_Monitor thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlertMonitorTask */
void StartAlertMonitorTask(void *argument)
{
  /* USER CODE BEGIN StartAlertMonitorTask */
    uint16_t adcValue;
    uint8_t alertTriggered = 0;

    for(;;)
    {
        if(osMessageQueueGet(alertQueueHandle, &adcValue, NULL, 0) == osOK)
        {
            if(adcValue > alertThreshold)
            {
                if(!alertTriggered)
                {
                    char alertMsg[50];
                    snprintf(alertMsg, sizeof(alertMsg), "!!! ALERT: Value %u above limit !!!\r\n", adcValue);
                    HAL_UART_Transmit(&huart2, (uint8_t*)alertMsg, strlen(alertMsg), HAL_MAX_DELAY);
                    alertTriggered = 1;
                }
            }
            else
            {
                alertTriggered = 0;
            }
        }
        osDelay(10);
    }
  /* USER CODE END StartAlertMonitorTask */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM5 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
  {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
