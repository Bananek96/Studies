
Projekt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c9c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08008e6c  08008e6c  00009e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f4  080096f4  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080096f4  080096f4  0000a6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096fc  080096fc  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096fc  080096fc  0000a6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009704  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d0c  20000068  0800976c  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d74  0800976c  0000bd74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b91c  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf7  00000000  00000000  000269b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0002a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d0  00000000  00000000  0002bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e8d  00000000  00000000  0002ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b548  00000000  00000000  00052cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8daa  00000000  00000000  0006e23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e8  00000000  00000000  0015702c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015d914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e54 	.word	0x08008e54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08008e54 	.word	0x08008e54

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <vApplicationMallocFailedHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <HAL_UART_RxCpltCallback>:
    return 1;
}

// Odbiór pojedynczego znaku przez przerwanie
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_UART_RxCpltCallback+0x34>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d10b      	bne.n	8000652 <HAL_UART_RxCpltCallback+0x2a>
    {
        // Przekaż znak do kolejki
        osMessageQueuePut(myQueue01Handle, &uart_rx_char, 0, 0);
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <HAL_UART_RxCpltCallback+0x38>)
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2200      	movs	r2, #0
 8000642:	4908      	ldr	r1, [pc, #32]	@ (8000664 <HAL_UART_RxCpltCallback+0x3c>)
 8000644:	f004 fb8a 	bl	8004d5c <osMessageQueuePut>
        HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	4906      	ldr	r1, [pc, #24]	@ (8000664 <HAL_UART_RxCpltCallback+0x3c>)
 800064c:	4806      	ldr	r0, [pc, #24]	@ (8000668 <HAL_UART_RxCpltCallback+0x40>)
 800064e:	f003 fa3e 	bl	8003ace <HAL_UART_Receive_IT>
    }
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40004400 	.word	0x40004400
 8000660:	20000128 	.word	0x20000128
 8000664:	20000138 	.word	0x20000138
 8000668:	200000cc 	.word	0x200000cc

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f001 f80a 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f8b4 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f99e 	bl	80009b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067c:	f000 f972 	bl	8000964 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000680:	f000 f91c 	bl	80008bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	4939      	ldr	r1, [pc, #228]	@ (800076c <main+0x100>)
 8000688:	4839      	ldr	r0, [pc, #228]	@ (8000770 <main+0x104>)
 800068a:	f003 fa20 	bl	8003ace <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800068e:	f004 f9f3 	bl	8004a78 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000692:	4a38      	ldr	r2, [pc, #224]	@ (8000774 <main+0x108>)
 8000694:	2102      	movs	r1, #2
 8000696:	2010      	movs	r0, #16
 8000698:	f004 faec 	bl	8004c74 <osMessageQueueNew>
 800069c:	4603      	mov	r3, r0
 800069e:	4a36      	ldr	r2, [pc, #216]	@ (8000778 <main+0x10c>)
 80006a0:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Queue */
  ADC_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ADC_Queue_attributes);
 80006a2:	4a36      	ldr	r2, [pc, #216]	@ (800077c <main+0x110>)
 80006a4:	2102      	movs	r1, #2
 80006a6:	2010      	movs	r0, #16
 80006a8:	f004 fae4 	bl	8004c74 <osMessageQueueNew>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a34      	ldr	r2, [pc, #208]	@ (8000780 <main+0x114>)
 80006b0:	6013      	str	r3, [r2, #0]

  /* creation of Alert_Queue */
  Alert_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Alert_Queue_attributes);
 80006b2:	4a34      	ldr	r2, [pc, #208]	@ (8000784 <main+0x118>)
 80006b4:	2102      	movs	r1, #2
 80006b6:	2010      	movs	r0, #16
 80006b8:	f004 fadc 	bl	8004c74 <osMessageQueueNew>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a32      	ldr	r2, [pc, #200]	@ (8000788 <main+0x11c>)
 80006c0:	6013      	str	r3, [r2, #0]

  /* creation of Analysis_Queue */
  Analysis_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Analysis_Queue_attributes);
 80006c2:	4a32      	ldr	r2, [pc, #200]	@ (800078c <main+0x120>)
 80006c4:	2102      	movs	r1, #2
 80006c6:	2010      	movs	r0, #16
 80006c8:	f004 fad4 	bl	8004c74 <osMessageQueueNew>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a30      	ldr	r2, [pc, #192]	@ (8000790 <main+0x124>)
 80006d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  ledCmdQueueHandle = osMessageQueueNew (4, sizeof(Command_t), NULL);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	2004      	movs	r0, #4
 80006d8:	f004 facc 	bl	8004c74 <osMessageQueueNew>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a2d      	ldr	r2, [pc, #180]	@ (8000794 <main+0x128>)
 80006e0:	6013      	str	r3, [r2, #0]
  adcQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), NULL);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	2010      	movs	r0, #16
 80006e8:	f004 fac4 	bl	8004c74 <osMessageQueueNew>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <main+0x12c>)
 80006f0:	6013      	str	r3, [r2, #0]
  alertQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), NULL);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2102      	movs	r1, #2
 80006f6:	2010      	movs	r0, #16
 80006f8:	f004 fabc 	bl	8004c74 <osMessageQueueNew>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a27      	ldr	r2, [pc, #156]	@ (800079c <main+0x130>)
 8000700:	6013      	str	r3, [r2, #0]
  analysisQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), NULL);
 8000702:	2200      	movs	r2, #0
 8000704:	2102      	movs	r1, #2
 8000706:	2010      	movs	r0, #16
 8000708:	f004 fab4 	bl	8004c74 <osMessageQueueNew>
 800070c:	4603      	mov	r3, r0
 800070e:	4a24      	ldr	r2, [pc, #144]	@ (80007a0 <main+0x134>)
 8000710:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartDefaultTask, NULL, &UartTask_attributes);
 8000712:	4a24      	ldr	r2, [pc, #144]	@ (80007a4 <main+0x138>)
 8000714:	2100      	movs	r1, #0
 8000716:	4824      	ldr	r0, [pc, #144]	@ (80007a8 <main+0x13c>)
 8000718:	f004 f9f8 	bl	8004b0c <osThreadNew>
 800071c:	4603      	mov	r3, r0
 800071e:	4a23      	ldr	r2, [pc, #140]	@ (80007ac <main+0x140>)
 8000720:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartTask02, NULL, &LedTask_attributes);
 8000722:	4a23      	ldr	r2, [pc, #140]	@ (80007b0 <main+0x144>)
 8000724:	2100      	movs	r1, #0
 8000726:	4823      	ldr	r0, [pc, #140]	@ (80007b4 <main+0x148>)
 8000728:	f004 f9f0 	bl	8004b0c <osThreadNew>
 800072c:	4603      	mov	r3, r0
 800072e:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <main+0x14c>)
 8000730:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Sampler */
  ADC_SamplerHandle = osThreadNew(StartAdcSamplerTask, NULL, &ADC_Sampler_attributes);
 8000732:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <main+0x150>)
 8000734:	2100      	movs	r1, #0
 8000736:	4822      	ldr	r0, [pc, #136]	@ (80007c0 <main+0x154>)
 8000738:	f004 f9e8 	bl	8004b0c <osThreadNew>
 800073c:	4603      	mov	r3, r0
 800073e:	4a21      	ldr	r2, [pc, #132]	@ (80007c4 <main+0x158>)
 8000740:	6013      	str	r3, [r2, #0]

  /* creation of Data_Analyzer */
  Data_AnalyzerHandle = osThreadNew(StartDataAnalyzerTask, NULL, &Data_Analyzer_attributes);
 8000742:	4a21      	ldr	r2, [pc, #132]	@ (80007c8 <main+0x15c>)
 8000744:	2100      	movs	r1, #0
 8000746:	4821      	ldr	r0, [pc, #132]	@ (80007cc <main+0x160>)
 8000748:	f004 f9e0 	bl	8004b0c <osThreadNew>
 800074c:	4603      	mov	r3, r0
 800074e:	4a20      	ldr	r2, [pc, #128]	@ (80007d0 <main+0x164>)
 8000750:	6013      	str	r3, [r2, #0]

  /* creation of Alert_Monitor */
  Alert_MonitorHandle = osThreadNew(StartAlertMonitorTask, NULL, &Alert_Monitor_attributes);
 8000752:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <main+0x168>)
 8000754:	2100      	movs	r1, #0
 8000756:	4820      	ldr	r0, [pc, #128]	@ (80007d8 <main+0x16c>)
 8000758:	f004 f9d8 	bl	8004b0c <osThreadNew>
 800075c:	4603      	mov	r3, r0
 800075e:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <main+0x170>)
 8000760:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000762:	f004 f9ad 	bl	8004ac0 <osKernelStart>
 8000766:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000768:	4618      	mov	r0, r3
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000138 	.word	0x20000138
 8000770:	200000cc 	.word	0x200000cc
 8000774:	08009388 	.word	0x08009388
 8000778:	20000128 	.word	0x20000128
 800077c:	080093a0 	.word	0x080093a0
 8000780:	2000012c 	.word	0x2000012c
 8000784:	080093b8 	.word	0x080093b8
 8000788:	20000130 	.word	0x20000130
 800078c:	080093d0 	.word	0x080093d0
 8000790:	20000134 	.word	0x20000134
 8000794:	2000013c 	.word	0x2000013c
 8000798:	20000140 	.word	0x20000140
 800079c:	20000144 	.word	0x20000144
 80007a0:	20000148 	.word	0x20000148
 80007a4:	080092d4 	.word	0x080092d4
 80007a8:	08000ead 	.word	0x08000ead
 80007ac:	20000114 	.word	0x20000114
 80007b0:	080092f8 	.word	0x080092f8
 80007b4:	08000fe5 	.word	0x08000fe5
 80007b8:	20000118 	.word	0x20000118
 80007bc:	0800931c 	.word	0x0800931c
 80007c0:	08001065 	.word	0x08001065
 80007c4:	2000011c 	.word	0x2000011c
 80007c8:	08009340 	.word	0x08009340
 80007cc:	080010b1 	.word	0x080010b1
 80007d0:	20000120 	.word	0x20000120
 80007d4:	08009364 	.word	0x08009364
 80007d8:	08001235 	.word	0x08001235
 80007dc:	20000124 	.word	0x20000124

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	@ 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2234      	movs	r2, #52	@ 0x34
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f007 f9c4 	bl	8007b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <SystemClock_Config+0xd4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	4a29      	ldr	r2, [pc, #164]	@ (80008b4 <SystemClock_Config+0xd4>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	@ 0x40
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <SystemClock_Config+0xd4>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <SystemClock_Config+0xd8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800082c:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <SystemClock_Config+0xd8>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <SystemClock_Config+0xd8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2310      	movs	r3, #16
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000854:	2310      	movs	r3, #16
 8000856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000858:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800085c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800085e:	2304      	movs	r3, #4
 8000860:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fb18 	bl	8002ea4 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087a:	f000 fd31 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2302      	movs	r3, #2
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2102      	movs	r1, #2
 800089a:	4618      	mov	r0, r3
 800089c:	f001 ff86 	bl	80027ac <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008a6:	f000 fd1b 	bl	80012e0 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	@ 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_ADC1_Init+0x98>)
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <MX_ADC1_Init+0x9c>)
 80008d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_ADC1_Init+0x98>)
 80008d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <MX_ADC1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <MX_ADC1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_ADC1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_ADC1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_ADC1_Init+0x98>)
 80008fe:	4a17      	ldr	r2, [pc, #92]	@ (800095c <MX_ADC1_Init+0xa0>)
 8000900:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_ADC1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_ADC1_Init+0x98>)
 800090a:	2201      	movs	r2, #1
 800090c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_ADC1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_ADC1_Init+0x98>)
 8000918:	2201      	movs	r2, #1
 800091a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091c:	480d      	ldr	r0, [pc, #52]	@ (8000954 <MX_ADC1_Init+0x98>)
 800091e:	f000 fef5 	bl	800170c <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000928:	f000 fcda 	bl	80012e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_ADC1_Init+0xa4>)
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_ADC1_Init+0x98>)
 800093e:	f001 f9c1 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000948:	f000 fcca 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000084 	.word	0x20000084
 8000958:	40012000 	.word	0x40012000
 800095c:	0f000001 	.word	0x0f000001
 8000960:	10000012 	.word	0x10000012

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <MX_USART2_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_USART2_UART_Init+0x4c>)
 800099c:	f002 ffbc 	bl	8003918 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 fc9b 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000cc 	.word	0x200000cc
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a25      	ldr	r2, [pc, #148]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	4812      	ldr	r0, [pc, #72]	@ (8000a8c <MX_GPIO_Init+0xd4>)
 8000a44:	f001 fe7e 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_GPIO_Init+0xd8>)
 8000a60:	f001 fcdc 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a64:	2320      	movs	r3, #32
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <MX_GPIO_Init+0xd4>)
 8000a7c:	f001 fcce 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	@ 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020800 	.word	0x40020800

08000a94 <CommandHandler_Parse>:

/* USER CODE BEGIN 4 */
char* CommandHandler_Parse(char* command)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    static char responseBuffer[UART_RESPONSE_SIZE];
    Command_t cmd = CMD_NONE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	737b      	strb	r3, [r7, #13]
    uint16_t value;

    size_t len = strlen(command);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fbbf 	bl	8000224 <strlen>
 8000aa6:	6138      	str	r0, [r7, #16]
    if (len > 0 && command[len - 1] == '\n') command[len - 1] = '\0';
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d00c      	beq.n	8000ac8 <CommandHandler_Parse+0x34>
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b0a      	cmp	r3, #10
 8000aba:	d105      	bne.n	8000ac8 <CommandHandler_Parse+0x34>
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
    if (len > 0 && command[len - 1] == '\r') command[len - 1] = '\0';
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00c      	beq.n	8000ae8 <CommandHandler_Parse+0x54>
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b0d      	cmp	r3, #13
 8000ada:	d105      	bne.n	8000ae8 <CommandHandler_Parse+0x54>
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]

    if (strcmp(command, "START LED") == 0) {
 8000ae8:	49a5      	ldr	r1, [pc, #660]	@ (8000d80 <CommandHandler_Parse+0x2ec>)
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fb90 	bl	8000210 <strcmp>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10f      	bne.n	8000b16 <CommandHandler_Parse+0x82>
        cmd = CMD_START_LED;
 8000af6:	2301      	movs	r3, #1
 8000af8:	737b      	strb	r3, [r7, #13]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Dioda LED zaczyna mrugac z czestotliwoscia 0.5Hz");
 8000afa:	4aa2      	ldr	r2, [pc, #648]	@ (8000d84 <CommandHandler_Parse+0x2f0>)
 8000afc:	2178      	movs	r1, #120	@ 0x78
 8000afe:	48a2      	ldr	r0, [pc, #648]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000b00:	f006 ffd8 	bl	8007ab4 <sniprintf>
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
 8000b04:	4ba1      	ldr	r3, [pc, #644]	@ (8000d8c <CommandHandler_Parse+0x2f8>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	f107 010d 	add.w	r1, r7, #13
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f004 f924 	bl	8004d5c <osMessageQueuePut>
 8000b14:	e18f      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strcmp(command, "STOP LED") == 0) {
 8000b16:	499e      	ldr	r1, [pc, #632]	@ (8000d90 <CommandHandler_Parse+0x2fc>)
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff fb79 	bl	8000210 <strcmp>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10f      	bne.n	8000b44 <CommandHandler_Parse+0xb0>
        cmd = CMD_STOP_LED;
 8000b24:	2302      	movs	r3, #2
 8000b26:	737b      	strb	r3, [r7, #13]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Dioda LED zostala wylaczona");
 8000b28:	4a9a      	ldr	r2, [pc, #616]	@ (8000d94 <CommandHandler_Parse+0x300>)
 8000b2a:	2178      	movs	r1, #120	@ 0x78
 8000b2c:	4896      	ldr	r0, [pc, #600]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000b2e:	f006 ffc1 	bl	8007ab4 <sniprintf>
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
 8000b32:	4b96      	ldr	r3, [pc, #600]	@ (8000d8c <CommandHandler_Parse+0x2f8>)
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	f107 010d 	add.w	r1, r7, #13
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f004 f90d 	bl	8004d5c <osMessageQueuePut>
 8000b42:	e178      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strcmp(command, "EXIT") == 0) {
 8000b44:	4994      	ldr	r1, [pc, #592]	@ (8000d98 <CommandHandler_Parse+0x304>)
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fb62 	bl	8000210 <strcmp>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10f      	bne.n	8000b72 <CommandHandler_Parse+0xde>
        cmd = CMD_EXIT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	737b      	strb	r3, [r7, #13]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Zamykanie programu...");
 8000b56:	4a91      	ldr	r2, [pc, #580]	@ (8000d9c <CommandHandler_Parse+0x308>)
 8000b58:	2178      	movs	r1, #120	@ 0x78
 8000b5a:	488b      	ldr	r0, [pc, #556]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000b5c:	f006 ffaa 	bl	8007ab4 <sniprintf>
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
 8000b60:	4b8a      	ldr	r3, [pc, #552]	@ (8000d8c <CommandHandler_Parse+0x2f8>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 010d 	add.w	r1, r7, #13
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f004 f8f6 	bl	8004d5c <osMessageQueuePut>
 8000b70:	e161      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    // Nowe komendy
    else if (strncmp(command, "SET PERIOD ", 11) == 0) {
 8000b72:	220b      	movs	r2, #11
 8000b74:	498a      	ldr	r1, [pc, #552]	@ (8000da0 <CommandHandler_Parse+0x30c>)
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f007 f808 	bl	8007b8c <strncmp>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d11a      	bne.n	8000bb8 <CommandHandler_Parse+0x124>
        if (sscanf(command + 11, "%hu", &value) == 1) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	330b      	adds	r3, #11
 8000b86:	f107 020a 	add.w	r2, r7, #10
 8000b8a:	4986      	ldr	r1, [pc, #536]	@ (8000da4 <CommandHandler_Parse+0x310>)
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f006 ffc7 	bl	8007b20 <siscanf>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d109      	bne.n	8000bac <CommandHandler_Parse+0x118>
            adcPeriod = value;
 8000b98:	897a      	ldrh	r2, [r7, #10]
 8000b9a:	4b83      	ldr	r3, [pc, #524]	@ (8000da8 <CommandHandler_Parse+0x314>)
 8000b9c:	801a      	strh	r2, [r3, #0]
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Okres probkowania ustawiony na %u ms", value);
 8000b9e:	897b      	ldrh	r3, [r7, #10]
 8000ba0:	4a82      	ldr	r2, [pc, #520]	@ (8000dac <CommandHandler_Parse+0x318>)
 8000ba2:	2178      	movs	r1, #120	@ 0x78
 8000ba4:	4878      	ldr	r0, [pc, #480]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000ba6:	f006 ff85 	bl	8007ab4 <sniprintf>
 8000baa:	e144      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
        } else {
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieprawidlowy format komendy SET_PERIOD");
 8000bac:	4a80      	ldr	r2, [pc, #512]	@ (8000db0 <CommandHandler_Parse+0x31c>)
 8000bae:	2178      	movs	r1, #120	@ 0x78
 8000bb0:	4875      	ldr	r0, [pc, #468]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000bb2:	f006 ff7f 	bl	8007ab4 <sniprintf>
 8000bb6:	e13e      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
        }
    }
    else if (strcmp(command, "GET PERIOD") == 0) {
 8000bb8:	497e      	ldr	r1, [pc, #504]	@ (8000db4 <CommandHandler_Parse+0x320>)
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fb28 	bl	8000210 <strcmp>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d108      	bne.n	8000bd8 <CommandHandler_Parse+0x144>
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Aktualny okres probkowania: %u ms", adcPeriod);
 8000bc6:	4b78      	ldr	r3, [pc, #480]	@ (8000da8 <CommandHandler_Parse+0x314>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	4a7a      	ldr	r2, [pc, #488]	@ (8000db8 <CommandHandler_Parse+0x324>)
 8000bce:	2178      	movs	r1, #120	@ 0x78
 8000bd0:	486d      	ldr	r0, [pc, #436]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000bd2:	f006 ff6f 	bl	8007ab4 <sniprintf>
 8000bd6:	e12e      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strcmp(command, "GET ADC") == 0) {
 8000bd8:	4978      	ldr	r1, [pc, #480]	@ (8000dbc <CommandHandler_Parse+0x328>)
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fb18 	bl	8000210 <strcmp>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10a      	bne.n	8000bfc <CommandHandler_Parse+0x168>
        uint16_t adcValue = ReadAdcValue();
 8000be6:	f000 f92f 	bl	8000e48 <ReadAdcValue>
 8000bea:	4603      	mov	r3, r0
 8000bec:	81fb      	strh	r3, [r7, #14]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "ADC: %u", adcValue);
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	4a73      	ldr	r2, [pc, #460]	@ (8000dc0 <CommandHandler_Parse+0x32c>)
 8000bf2:	2178      	movs	r1, #120	@ 0x78
 8000bf4:	4864      	ldr	r0, [pc, #400]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000bf6:	f006 ff5d 	bl	8007ab4 <sniprintf>
 8000bfa:	e11c      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strncmp(command, "SET ALERT ", 10) == 0) {
 8000bfc:	220a      	movs	r2, #10
 8000bfe:	4971      	ldr	r1, [pc, #452]	@ (8000dc4 <CommandHandler_Parse+0x330>)
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f006 ffc3 	bl	8007b8c <strncmp>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d11a      	bne.n	8000c42 <CommandHandler_Parse+0x1ae>
        if (sscanf(command + 10, "%hu", &value) == 1) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	330a      	adds	r3, #10
 8000c10:	f107 020a 	add.w	r2, r7, #10
 8000c14:	4963      	ldr	r1, [pc, #396]	@ (8000da4 <CommandHandler_Parse+0x310>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f006 ff82 	bl	8007b20 <siscanf>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d109      	bne.n	8000c36 <CommandHandler_Parse+0x1a2>
            alertThreshold = value;
 8000c22:	897a      	ldrh	r2, [r7, #10]
 8000c24:	4b68      	ldr	r3, [pc, #416]	@ (8000dc8 <CommandHandler_Parse+0x334>)
 8000c26:	801a      	strh	r2, [r3, #0]
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Próg alarmowy ustawiony na %u", value);
 8000c28:	897b      	ldrh	r3, [r7, #10]
 8000c2a:	4a68      	ldr	r2, [pc, #416]	@ (8000dcc <CommandHandler_Parse+0x338>)
 8000c2c:	2178      	movs	r1, #120	@ 0x78
 8000c2e:	4856      	ldr	r0, [pc, #344]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000c30:	f006 ff40 	bl	8007ab4 <sniprintf>
 8000c34:	e0ff      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
        } else {
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieprawidlowy format komendy SET_ALERT");
 8000c36:	4a66      	ldr	r2, [pc, #408]	@ (8000dd0 <CommandHandler_Parse+0x33c>)
 8000c38:	2178      	movs	r1, #120	@ 0x78
 8000c3a:	4853      	ldr	r0, [pc, #332]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000c3c:	f006 ff3a 	bl	8007ab4 <sniprintf>
 8000c40:	e0f9      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
        }
    }
    else if (strcmp(command, "START ANALYSIS") == 0) {
 8000c42:	4964      	ldr	r1, [pc, #400]	@ (8000dd4 <CommandHandler_Parse+0x340>)
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fae3 	bl	8000210 <strcmp>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d108      	bne.n	8000c62 <CommandHandler_Parse+0x1ce>
        analysisRunning = 1;
 8000c50:	4b61      	ldr	r3, [pc, #388]	@ (8000dd8 <CommandHandler_Parse+0x344>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Analiza danych uruchomiona");
 8000c56:	4a61      	ldr	r2, [pc, #388]	@ (8000ddc <CommandHandler_Parse+0x348>)
 8000c58:	2178      	movs	r1, #120	@ 0x78
 8000c5a:	484b      	ldr	r0, [pc, #300]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000c5c:	f006 ff2a 	bl	8007ab4 <sniprintf>
 8000c60:	e0e9      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strcmp(command, "STOP ANALYSIS") == 0) {
 8000c62:	495f      	ldr	r1, [pc, #380]	@ (8000de0 <CommandHandler_Parse+0x34c>)
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fad3 	bl	8000210 <strcmp>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d108      	bne.n	8000c82 <CommandHandler_Parse+0x1ee>
        analysisRunning = 0;
 8000c70:	4b59      	ldr	r3, [pc, #356]	@ (8000dd8 <CommandHandler_Parse+0x344>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Analiza danych zatrzymana");
 8000c76:	4a5b      	ldr	r2, [pc, #364]	@ (8000de4 <CommandHandler_Parse+0x350>)
 8000c78:	2178      	movs	r1, #120	@ 0x78
 8000c7a:	4843      	ldr	r0, [pc, #268]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000c7c:	f006 ff1a 	bl	8007ab4 <sniprintf>
 8000c80:	e0d9      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strcmp(command, "SET ANALYSIS AVG") == 0) {
 8000c82:	4959      	ldr	r1, [pc, #356]	@ (8000de8 <CommandHandler_Parse+0x354>)
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff fac3 	bl	8000210 <strcmp>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d108      	bne.n	8000ca2 <CommandHandler_Parse+0x20e>
        analysisMode = ANALYSIS_AVG;
 8000c90:	4b56      	ldr	r3, [pc, #344]	@ (8000dec <CommandHandler_Parse+0x358>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Tryb analizy ustawiony na: SREDNIA");
 8000c96:	4a56      	ldr	r2, [pc, #344]	@ (8000df0 <CommandHandler_Parse+0x35c>)
 8000c98:	2178      	movs	r1, #120	@ 0x78
 8000c9a:	483b      	ldr	r0, [pc, #236]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000c9c:	f006 ff0a 	bl	8007ab4 <sniprintf>
 8000ca0:	e0c9      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strcmp(command, "SET ANALYSIS MAX") == 0) {
 8000ca2:	4954      	ldr	r1, [pc, #336]	@ (8000df4 <CommandHandler_Parse+0x360>)
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fab3 	bl	8000210 <strcmp>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d108      	bne.n	8000cc2 <CommandHandler_Parse+0x22e>
        analysisMode = ANALYSIS_MAX;
 8000cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8000dec <CommandHandler_Parse+0x358>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Tryb analizy ustawiony na: MAKSIMUM");
 8000cb6:	4a50      	ldr	r2, [pc, #320]	@ (8000df8 <CommandHandler_Parse+0x364>)
 8000cb8:	2178      	movs	r1, #120	@ 0x78
 8000cba:	4833      	ldr	r0, [pc, #204]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000cbc:	f006 fefa 	bl	8007ab4 <sniprintf>
 8000cc0:	e0b9      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strcmp(command, "SET ANALYSIS MIN") == 0) {
 8000cc2:	494e      	ldr	r1, [pc, #312]	@ (8000dfc <CommandHandler_Parse+0x368>)
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff faa3 	bl	8000210 <strcmp>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d108      	bne.n	8000ce2 <CommandHandler_Parse+0x24e>
        analysisMode = ANALYSIS_MIN;
 8000cd0:	4b46      	ldr	r3, [pc, #280]	@ (8000dec <CommandHandler_Parse+0x358>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	701a      	strb	r2, [r3, #0]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Tryb analizy ustawiony na: MINIMUM");
 8000cd6:	4a4a      	ldr	r2, [pc, #296]	@ (8000e00 <CommandHandler_Parse+0x36c>)
 8000cd8:	2178      	movs	r1, #120	@ 0x78
 8000cda:	482b      	ldr	r0, [pc, #172]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000cdc:	f006 feea 	bl	8007ab4 <sniprintf>
 8000ce0:	e0a9      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strcmp(command, "GET ANALYSIS") == 0) {
 8000ce2:	4948      	ldr	r1, [pc, #288]	@ (8000e04 <CommandHandler_Parse+0x370>)
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fa93 	bl	8000210 <strcmp>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d11d      	bne.n	8000d2c <CommandHandler_Parse+0x298>
        const char* modeStr = "";
 8000cf0:	4b45      	ldr	r3, [pc, #276]	@ (8000e08 <CommandHandler_Parse+0x374>)
 8000cf2:	617b      	str	r3, [r7, #20]
        switch(analysisMode) {
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8000dec <CommandHandler_Parse+0x358>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d00c      	beq.n	8000d18 <CommandHandler_Parse+0x284>
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	dc0d      	bgt.n	8000d1e <CommandHandler_Parse+0x28a>
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <CommandHandler_Parse+0x278>
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d003      	beq.n	8000d12 <CommandHandler_Parse+0x27e>
 8000d0a:	e008      	b.n	8000d1e <CommandHandler_Parse+0x28a>
            case ANALYSIS_AVG: modeStr = "A:AVG"; break;
 8000d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e0c <CommandHandler_Parse+0x378>)
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e005      	b.n	8000d1e <CommandHandler_Parse+0x28a>
            case ANALYSIS_MAX: modeStr = "A:MAX"; break;
 8000d12:	4b3f      	ldr	r3, [pc, #252]	@ (8000e10 <CommandHandler_Parse+0x37c>)
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e002      	b.n	8000d1e <CommandHandler_Parse+0x28a>
            case ANALYSIS_MIN: modeStr = "A:MIN"; break;
 8000d18:	4b3e      	ldr	r3, [pc, #248]	@ (8000e14 <CommandHandler_Parse+0x380>)
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	bf00      	nop
        }
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Aktualny tryb analizy: %s", modeStr);
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	4a3d      	ldr	r2, [pc, #244]	@ (8000e18 <CommandHandler_Parse+0x384>)
 8000d22:	2178      	movs	r1, #120	@ 0x78
 8000d24:	4818      	ldr	r0, [pc, #96]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000d26:	f006 fec5 	bl	8007ab4 <sniprintf>
 8000d2a:	e084      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
    }
    else if (strncmp(command, "SET SAMPLES ", 12) == 0) {
 8000d2c:	220c      	movs	r2, #12
 8000d2e:	493b      	ldr	r1, [pc, #236]	@ (8000e1c <CommandHandler_Parse+0x388>)
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f006 ff2b 	bl	8007b8c <strncmp>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d177      	bne.n	8000e2c <CommandHandler_Parse+0x398>
        if (sscanf(command + 12, "%hu", &value) == 1 && value > 0 && value <= 20) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	330c      	adds	r3, #12
 8000d40:	f107 020a 	add.w	r2, r7, #10
 8000d44:	4917      	ldr	r1, [pc, #92]	@ (8000da4 <CommandHandler_Parse+0x310>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f006 feea 	bl	8007b20 <siscanf>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d10f      	bne.n	8000d72 <CommandHandler_Parse+0x2de>
 8000d52:	897b      	ldrh	r3, [r7, #10]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00c      	beq.n	8000d72 <CommandHandler_Parse+0x2de>
 8000d58:	897b      	ldrh	r3, [r7, #10]
 8000d5a:	2b14      	cmp	r3, #20
 8000d5c:	d809      	bhi.n	8000d72 <CommandHandler_Parse+0x2de>
            sampleCount = value;
 8000d5e:	897a      	ldrh	r2, [r7, #10]
 8000d60:	4b2f      	ldr	r3, [pc, #188]	@ (8000e20 <CommandHandler_Parse+0x38c>)
 8000d62:	801a      	strh	r2, [r3, #0]
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Liczba probek do analizy ustawiona na %u", value);
 8000d64:	897b      	ldrh	r3, [r7, #10]
 8000d66:	4a2f      	ldr	r2, [pc, #188]	@ (8000e24 <CommandHandler_Parse+0x390>)
 8000d68:	2178      	movs	r1, #120	@ 0x78
 8000d6a:	4807      	ldr	r0, [pc, #28]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000d6c:	f006 fea2 	bl	8007ab4 <sniprintf>
 8000d70:	e061      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
        } else {
            snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieprawidlowa liczba probek (1-20)");
 8000d72:	4a2d      	ldr	r2, [pc, #180]	@ (8000e28 <CommandHandler_Parse+0x394>)
 8000d74:	2178      	movs	r1, #120	@ 0x78
 8000d76:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <CommandHandler_Parse+0x2f4>)
 8000d78:	f006 fe9c 	bl	8007ab4 <sniprintf>
 8000d7c:	e05b      	b.n	8000e36 <CommandHandler_Parse+0x3a2>
 8000d7e:	bf00      	nop
 8000d80:	08008ee0 	.word	0x08008ee0
 8000d84:	08008eec 	.word	0x08008eec
 8000d88:	2000017c 	.word	0x2000017c
 8000d8c:	2000013c 	.word	0x2000013c
 8000d90:	08008f20 	.word	0x08008f20
 8000d94:	08008f2c 	.word	0x08008f2c
 8000d98:	08008f48 	.word	0x08008f48
 8000d9c:	08008f50 	.word	0x08008f50
 8000da0:	08008f68 	.word	0x08008f68
 8000da4:	08008f74 	.word	0x08008f74
 8000da8:	20000000 	.word	0x20000000
 8000dac:	08008f78 	.word	0x08008f78
 8000db0:	08008fa0 	.word	0x08008fa0
 8000db4:	08008fd0 	.word	0x08008fd0
 8000db8:	08008fdc 	.word	0x08008fdc
 8000dbc:	08009000 	.word	0x08009000
 8000dc0:	08009008 	.word	0x08009008
 8000dc4:	08009010 	.word	0x08009010
 8000dc8:	20000002 	.word	0x20000002
 8000dcc:	0800901c 	.word	0x0800901c
 8000dd0:	0800903c 	.word	0x0800903c
 8000dd4:	0800906c 	.word	0x0800906c
 8000dd8:	2000014d 	.word	0x2000014d
 8000ddc:	0800907c 	.word	0x0800907c
 8000de0:	08009098 	.word	0x08009098
 8000de4:	080090a8 	.word	0x080090a8
 8000de8:	080090c4 	.word	0x080090c4
 8000dec:	2000014c 	.word	0x2000014c
 8000df0:	080090d8 	.word	0x080090d8
 8000df4:	080090fc 	.word	0x080090fc
 8000df8:	08009110 	.word	0x08009110
 8000dfc:	08009134 	.word	0x08009134
 8000e00:	08009148 	.word	0x08009148
 8000e04:	0800916c 	.word	0x0800916c
 8000e08:	0800917c 	.word	0x0800917c
 8000e0c:	08009180 	.word	0x08009180
 8000e10:	08009188 	.word	0x08009188
 8000e14:	08009190 	.word	0x08009190
 8000e18:	08009198 	.word	0x08009198
 8000e1c:	080091b4 	.word	0x080091b4
 8000e20:	20000004 	.word	0x20000004
 8000e24:	080091c4 	.word	0x080091c4
 8000e28:	080091f0 	.word	0x080091f0
        }
    }
    else {
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieznane polecenie");
 8000e2c:	4a04      	ldr	r2, [pc, #16]	@ (8000e40 <CommandHandler_Parse+0x3ac>)
 8000e2e:	2178      	movs	r1, #120	@ 0x78
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <CommandHandler_Parse+0x3b0>)
 8000e32:	f006 fe3f 	bl	8007ab4 <sniprintf>
    }
    return responseBuffer;
 8000e36:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <CommandHandler_Parse+0x3b0>)
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	0800921c 	.word	0x0800921c
 8000e44:	2000017c 	.word	0x2000017c

08000e48 <ReadAdcValue>:

uint16_t ReadAdcValue(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

    // Konfiguracja kanału ADC
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <ReadAdcValue+0x5c>)
 8000e5c:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e62:	2307      	movs	r3, #7
 8000e64:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480f      	ldr	r0, [pc, #60]	@ (8000ea8 <ReadAdcValue+0x60>)
 8000e6c:	f000 ff2a 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <ReadAdcValue+0x32>
    {
        Error_Handler();
 8000e76:	f000 fa33 	bl	80012e0 <Error_Handler>
    }

    // Rozpoczęcie konwersji
    HAL_ADC_Start(&hadc1);
 8000e7a:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <ReadAdcValue+0x60>)
 8000e7c:	f000 fc8a 	bl	8001794 <HAL_ADC_Start>

    // Oczekiwanie na wynik
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000e80:	210a      	movs	r1, #10
 8000e82:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <ReadAdcValue+0x60>)
 8000e84:	f000 fd58 	bl	8001938 <HAL_ADC_PollForConversion>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <ReadAdcValue+0x52>
    {
        return HAL_ADC_GetValue(&hadc1);
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <ReadAdcValue+0x60>)
 8000e90:	f000 feed 	bl	8001c6e <HAL_ADC_GetValue>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	e000      	b.n	8000e9c <ReadAdcValue+0x54>
    }

    return 0;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	10000012 	.word	0x10000012
 8000ea8:	20000084 	.word	0x20000084

08000eac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b092      	sub	sp, #72	@ 0x48
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t rx_char;
	  uint8_t rx_buf[UART_BUFFER_SIZE];
	  uint16_t rx_idx = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	  HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000ec2:	4942      	ldr	r1, [pc, #264]	@ (8000fcc <StartDefaultTask+0x120>)
 8000ec4:	4842      	ldr	r0, [pc, #264]	@ (8000fd0 <StartDefaultTask+0x124>)
 8000ec6:	f002 fd77 	bl	80039b8 <HAL_UART_Transmit>
	  /* Infinite loop */
	  for(;;)
	  {
	     if (osMessageQueueGet(myQueue01Handle, &rx_char, NULL, osWaitForever) == osOK)
 8000eca:	4b42      	ldr	r3, [pc, #264]	@ (8000fd4 <StartDefaultTask+0x128>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f003 ffa0 	bl	8004e1c <osMessageQueueGet>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d170      	bne.n	8000fc4 <StartDefaultTask+0x118>
	     {
	         if (rx_char == '\n' || rx_char == '\r') // Detekcja końca komendy
 8000ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	d003      	beq.n	8000ef2 <StartDefaultTask+0x46>
 8000eea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000eee:	2b0d      	cmp	r3, #13
 8000ef0:	d12d      	bne.n	8000f4e <StartDefaultTask+0xa2>
	         {
	             if (rx_idx > 0)
 8000ef2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d064      	beq.n	8000fc4 <StartDefaultTask+0x118>
	             {
	                 rx_buf[rx_idx] = '\0'; // Zakończenie stringa
 8000efa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000efe:	3348      	adds	r3, #72	@ 0x48
 8000f00:	443b      	add	r3, r7
 8000f02:	2200      	movs	r2, #0
 8000f04:	f803 2c20 	strb.w	r2, [r3, #-32]
	                 char* response = CommandHandler_Parse((char*)rx_buf);
 8000f08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fdc1 	bl	8000a94 <CommandHandler_Parse>
 8000f12:	6438      	str	r0, [r7, #64]	@ 0x40
	                 HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	2202      	movs	r2, #2
 8000f1a:	492f      	ldr	r1, [pc, #188]	@ (8000fd8 <StartDefaultTask+0x12c>)
 8000f1c:	482c      	ldr	r0, [pc, #176]	@ (8000fd0 <StartDefaultTask+0x124>)
 8000f1e:	f002 fd4b 	bl	80039b8 <HAL_UART_Transmit>
	                 HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000f22:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000f24:	f7ff f97e 	bl	8000224 <strlen>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000f32:	4827      	ldr	r0, [pc, #156]	@ (8000fd0 <StartDefaultTask+0x124>)
 8000f34:	f002 fd40 	bl	80039b8 <HAL_UART_Transmit>
	                 HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n> ", 5, HAL_MAX_DELAY);
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	4927      	ldr	r1, [pc, #156]	@ (8000fdc <StartDefaultTask+0x130>)
 8000f40:	4823      	ldr	r0, [pc, #140]	@ (8000fd0 <StartDefaultTask+0x124>)
 8000f42:	f002 fd39 	bl	80039b8 <HAL_UART_Transmit>
	                 rx_idx = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	             if (rx_idx > 0)
 8000f4c:	e03a      	b.n	8000fc4 <StartDefaultTask+0x118>
	             }
	         }
	         else if (rx_idx < UART_BUFFER_SIZE - 1)
 8000f4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d81b      	bhi.n	8000f8e <StartDefaultTask+0xe2>
	         {
	             // Echo znaku (oprócz znaków specjalnych)
	             if(rx_char != '\r' && rx_char != '\n') {
 8000f56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f5a:	2b0d      	cmp	r3, #13
 8000f5c:	d00b      	beq.n	8000f76 <StartDefaultTask+0xca>
 8000f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d007      	beq.n	8000f76 <StartDefaultTask+0xca>
	                 HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 8000f66:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4817      	ldr	r0, [pc, #92]	@ (8000fd0 <StartDefaultTask+0x124>)
 8000f72:	f002 fd21 	bl	80039b8 <HAL_UART_Transmit>
	             }
	             rx_buf[rx_idx++] = rx_char; // Dodanie znaku do bufora
 8000f76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8000f80:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000f84:	3348      	adds	r3, #72	@ 0x48
 8000f86:	443b      	add	r3, r7
 8000f88:	f803 2c20 	strb.w	r2, [r3, #-32]
 8000f8c:	e01a      	b.n	8000fc4 <StartDefaultTask+0x118>
	         }
	         else
	         {
	             char err[] = "\r\nError: Buffer overflow\r\n> ";
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <StartDefaultTask+0x134>)
 8000f90:	f107 0408 	add.w	r4, r7, #8
 8000f94:	461d      	mov	r5, r3
 8000f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000fa0:	7023      	strb	r3, [r4, #0]
	             HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f93c 	bl	8000224 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	f107 0108 	add.w	r1, r7, #8
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <StartDefaultTask+0x124>)
 8000fba:	f002 fcfd 	bl	80039b8 <HAL_UART_Transmit>
	             rx_idx = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	         }
	     }
	     osDelay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f003 fe3a 	bl	8004c3e <osDelay>
	     if (osMessageQueueGet(myQueue01Handle, &rx_char, NULL, osWaitForever) == osOK)
 8000fca:	e77e      	b.n	8000eca <StartDefaultTask+0x1e>
 8000fcc:	080093e8 	.word	0x080093e8
 8000fd0:	200000cc 	.word	0x200000cc
 8000fd4:	20000128 	.word	0x20000128
 8000fd8:	08009238 	.word	0x08009238
 8000fdc:	0800923c 	.word	0x0800923c
 8000fe0:	08009244 	.word	0x08009244

08000fe4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
    Command_t cmd;
    uint8_t led_on = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]

    for(;;)
    {
        if(osMessageQueueGet(ledCmdQueueHandle, &cmd, NULL, 0) == osOK)
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <StartTask02+0x78>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	f107 010e 	add.w	r1, r7, #14
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f003 ff0e 	bl	8004e1c <osMessageQueueGet>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d11a      	bne.n	800103c <StartTask02+0x58>
        {
            if (cmd == CMD_START_LED){
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d102      	bne.n	8001012 <StartTask02+0x2e>
                led_on = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e014      	b.n	800103c <StartTask02+0x58>
            }
            else if(cmd == CMD_STOP_LED) {
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d107      	bne.n	8001028 <StartTask02+0x44>
                led_on = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
                HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2120      	movs	r1, #32
 8001020:	480f      	ldr	r0, [pc, #60]	@ (8001060 <StartTask02+0x7c>)
 8001022:	f001 fb8f 	bl	8002744 <HAL_GPIO_WritePin>
 8001026:	e009      	b.n	800103c <StartTask02+0x58>
            }
            else if(cmd == CMD_EXIT) {
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d106      	bne.n	800103c <StartTask02+0x58>
                HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2120      	movs	r1, #32
 8001032:	480b      	ldr	r0, [pc, #44]	@ (8001060 <StartTask02+0x7c>)
 8001034:	f001 fb86 	bl	8002744 <HAL_GPIO_WritePin>
                osThreadExit();
 8001038:	f003 fdfa 	bl	8004c30 <osThreadExit>
            }
        }

        if(led_on){
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d008      	beq.n	8001054 <StartTask02+0x70>
            HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001042:	2120      	movs	r1, #32
 8001044:	4806      	ldr	r0, [pc, #24]	@ (8001060 <StartTask02+0x7c>)
 8001046:	f001 fb96 	bl	8002776 <HAL_GPIO_TogglePin>
            osDelay(500);
 800104a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800104e:	f003 fdf6 	bl	8004c3e <osDelay>
 8001052:	e7cd      	b.n	8000ff0 <StartTask02+0xc>
        } else {
            osDelay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f003 fdf2 	bl	8004c3e <osDelay>
        if(osMessageQueueGet(ledCmdQueueHandle, &cmd, NULL, 0) == osOK)
 800105a:	e7c9      	b.n	8000ff0 <StartTask02+0xc>
 800105c:	2000013c 	.word	0x2000013c
 8001060:	40020000 	.word	0x40020000

08001064 <StartAdcSamplerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcSamplerTask */
void StartAdcSamplerTask(void *argument)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcSamplerTask */
    uint16_t adcValue;

    for(;;)
    {
        adcValue = ReadAdcValue();
 800106c:	f7ff feec 	bl	8000e48 <ReadAdcValue>
 8001070:	4603      	mov	r3, r0
 8001072:	81fb      	strh	r3, [r7, #14]

        // Wysyłanie danych do kolejki analizatora i monitora alertów
        osMessageQueuePut(adcQueueHandle, &adcValue, 0, 0);
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <StartAdcSamplerTask+0x40>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f107 010e 	add.w	r1, r7, #14
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	f003 fe6c 	bl	8004d5c <osMessageQueuePut>
        osMessageQueuePut(alertQueueHandle, &adcValue, 0, 0);
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <StartAdcSamplerTask+0x44>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	f107 010e 	add.w	r1, r7, #14
 800108c:	2300      	movs	r3, #0
 800108e:	2200      	movs	r2, #0
 8001090:	f003 fe64 	bl	8004d5c <osMessageQueuePut>

        // Oczekiwanie do następnego cyklu
        osDelay(adcPeriod);
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <StartAdcSamplerTask+0x48>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fdcf 	bl	8004c3e <osDelay>
        adcValue = ReadAdcValue();
 80010a0:	bf00      	nop
 80010a2:	e7e3      	b.n	800106c <StartAdcSamplerTask+0x8>
 80010a4:	20000140 	.word	0x20000140
 80010a8:	20000144 	.word	0x20000144
 80010ac:	20000000 	.word	0x20000000

080010b0 <StartDataAnalyzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataAnalyzerTask */
void StartDataAnalyzerTask(void *argument)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b092      	sub	sp, #72	@ 0x48
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDataAnalyzerTask */
    uint16_t adcValue;
    uint16_t sum = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t max = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    uint16_t min = 4095;
 80010c4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80010c8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t samplesCollected = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    for(;;)
    {
        if(analysisRunning && osMessageQueueGet(adcQueueHandle, &adcValue, NULL, 0) == osOK)
 80010d2:	4b4e      	ldr	r3, [pc, #312]	@ (800120c <StartDataAnalyzerTask+0x15c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 8092 	beq.w	8001202 <StartDataAnalyzerTask+0x152>
 80010de:	4b4c      	ldr	r3, [pc, #304]	@ (8001210 <StartDataAnalyzerTask+0x160>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80010e6:	2300      	movs	r3, #0
 80010e8:	2200      	movs	r2, #0
 80010ea:	f003 fe97 	bl	8004e1c <osMessageQueueGet>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f040 8086 	bne.w	8001202 <StartDataAnalyzerTask+0x152>
        {
            // Dodanie wartości do bufora
            adcBuffer[adcBufferIndex] = adcValue;
 80010f6:	4b47      	ldr	r3, [pc, #284]	@ (8001214 <StartDataAnalyzerTask+0x164>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80010fe:	4b46      	ldr	r3, [pc, #280]	@ (8001218 <StartDataAnalyzerTask+0x168>)
 8001100:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            adcBufferIndex = (adcBufferIndex + 1) % sampleCount;
 8001104:	4b43      	ldr	r3, [pc, #268]	@ (8001214 <StartDataAnalyzerTask+0x164>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a44      	ldr	r2, [pc, #272]	@ (800121c <StartDataAnalyzerTask+0x16c>)
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	b292      	uxth	r2, r2
 8001110:	fb93 f1f2 	sdiv	r1, r3, r2
 8001114:	fb01 f202 	mul.w	r2, r1, r2
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <StartDataAnalyzerTask+0x164>)
 800111e:	801a      	strh	r2, [r3, #0]

            // Obliczenia
            sum += adcValue;
 8001120:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8001122:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001126:	4413      	add	r3, r2
 8001128:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            if(adcValue > max) max = adcValue;
 800112c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800112e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001132:	429a      	cmp	r2, r3
 8001134:	d202      	bcs.n	800113c <StartDataAnalyzerTask+0x8c>
 8001136:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001138:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            if(adcValue < min) min = adcValue;
 800113c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800113e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001142:	429a      	cmp	r2, r3
 8001144:	d902      	bls.n	800114c <StartDataAnalyzerTask+0x9c>
 8001146:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001148:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            samplesCollected++;
 800114c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001150:	3301      	adds	r3, #1
 8001152:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            // Jeśli zebrano odpowiednią liczbę próbek
            if(samplesCollected >= sampleCount)
 8001156:	4b31      	ldr	r3, [pc, #196]	@ (800121c <StartDataAnalyzerTask+0x16c>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001160:	429a      	cmp	r2, r3
 8001162:	d34e      	bcc.n	8001202 <StartDataAnalyzerTask+0x152>
            {
                uint16_t result = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                char msg[50];

                switch(analysisMode)
 8001168:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <StartDataAnalyzerTask+0x170>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d021      	beq.n	80011b6 <StartDataAnalyzerTask+0x106>
 8001172:	2b02      	cmp	r3, #2
 8001174:	dc2a      	bgt.n	80011cc <StartDataAnalyzerTask+0x11c>
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <StartDataAnalyzerTask+0xd0>
 800117a:	2b01      	cmp	r3, #1
 800117c:	d010      	beq.n	80011a0 <StartDataAnalyzerTask+0xf0>
 800117e:	e025      	b.n	80011cc <StartDataAnalyzerTask+0x11c>
                {
                    case ANALYSIS_AVG:
                        result = sum / sampleCount;
 8001180:	4b26      	ldr	r3, [pc, #152]	@ (800121c <StartDataAnalyzerTask+0x16c>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        snprintf(msg, sizeof(msg), "AVG: %u\r\n", result);
 8001190:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001192:	f107 0008 	add.w	r0, r7, #8
 8001196:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <StartDataAnalyzerTask+0x174>)
 8001198:	2132      	movs	r1, #50	@ 0x32
 800119a:	f006 fc8b 	bl	8007ab4 <sniprintf>
                        break;
 800119e:	e015      	b.n	80011cc <StartDataAnalyzerTask+0x11c>
                    case ANALYSIS_MAX:
                        result = max;
 80011a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80011a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        snprintf(msg, sizeof(msg), "MAX: %u\r\n", result);
 80011a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80011a8:	f107 0008 	add.w	r0, r7, #8
 80011ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001228 <StartDataAnalyzerTask+0x178>)
 80011ae:	2132      	movs	r1, #50	@ 0x32
 80011b0:	f006 fc80 	bl	8007ab4 <sniprintf>
                        break;
 80011b4:	e00a      	b.n	80011cc <StartDataAnalyzerTask+0x11c>
                    case ANALYSIS_MIN:
                        result = min;
 80011b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80011ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                        snprintf(msg, sizeof(msg), "MIN: %u\r\n", result);
 80011bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80011be:	f107 0008 	add.w	r0, r7, #8
 80011c2:	4a1a      	ldr	r2, [pc, #104]	@ (800122c <StartDataAnalyzerTask+0x17c>)
 80011c4:	2132      	movs	r1, #50	@ 0x32
 80011c6:	f006 fc75 	bl	8007ab4 <sniprintf>
                        break;
 80011ca:	bf00      	nop
                }

                HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f827 	bl	8000224 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f107 0108 	add.w	r1, r7, #8
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	4813      	ldr	r0, [pc, #76]	@ (8001230 <StartDataAnalyzerTask+0x180>)
 80011e4:	f002 fbe8 	bl	80039b8 <HAL_UART_Transmit>

                // Resetowanie wartości
                sum = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                max = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                min = 4095;
 80011f4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80011f8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
                samplesCollected = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            }
        }
        osDelay(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f003 fd1b 	bl	8004c3e <osDelay>
        if(analysisRunning && osMessageQueueGet(adcQueueHandle, &adcValue, NULL, 0) == osOK)
 8001208:	e763      	b.n	80010d2 <StartDataAnalyzerTask+0x22>
 800120a:	bf00      	nop
 800120c:	2000014d 	.word	0x2000014d
 8001210:	20000140 	.word	0x20000140
 8001214:	20000178 	.word	0x20000178
 8001218:	20000150 	.word	0x20000150
 800121c:	20000004 	.word	0x20000004
 8001220:	2000014c 	.word	0x2000014c
 8001224:	08009264 	.word	0x08009264
 8001228:	08009270 	.word	0x08009270
 800122c:	0800927c 	.word	0x0800927c
 8001230:	200000cc 	.word	0x200000cc

08001234 <StartAlertMonitorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlertMonitorTask */
void StartAlertMonitorTask(void *argument)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b090      	sub	sp, #64	@ 0x40
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAlertMonitorTask */
    uint16_t adcValue;
    uint8_t alertTriggered = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    for(;;)
    {
        if(osMessageQueueGet(alertQueueHandle, &adcValue, NULL, 0) == osOK)
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <StartAlertMonitorTask+0x78>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800124a:	2300      	movs	r3, #0
 800124c:	2200      	movs	r2, #0
 800124e:	f003 fde5 	bl	8004e1c <osMessageQueueGet>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d125      	bne.n	80012a4 <StartAlertMonitorTask+0x70>
        {
            if(adcValue > alertThreshold)
 8001258:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <StartAlertMonitorTask+0x7c>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	429a      	cmp	r2, r3
 8001262:	d91c      	bls.n	800129e <StartAlertMonitorTask+0x6a>
            {
                if(!alertTriggered)
 8001264:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001268:	2b00      	cmp	r3, #0
 800126a:	d11b      	bne.n	80012a4 <StartAlertMonitorTask+0x70>
                {
                    char alertMsg[50];
                    snprintf(alertMsg, sizeof(alertMsg), "!!! ALERT: Value %u above limit !!!\r\n", adcValue);
 800126c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800126e:	f107 0008 	add.w	r0, r7, #8
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <StartAlertMonitorTask+0x80>)
 8001274:	2132      	movs	r1, #50	@ 0x32
 8001276:	f006 fc1d 	bl	8007ab4 <sniprintf>
                    HAL_UART_Transmit(&huart2, (uint8_t*)alertMsg, strlen(alertMsg), HAL_MAX_DELAY);
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffd0 	bl	8000224 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	f107 0108 	add.w	r1, r7, #8
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <StartAlertMonitorTask+0x84>)
 8001292:	f002 fb91 	bl	80039b8 <HAL_UART_Transmit>
                    alertTriggered = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800129c:	e002      	b.n	80012a4 <StartAlertMonitorTask+0x70>
                }
            }
            else
            {
                alertTriggered = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            }
        }
        osDelay(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f003 fcca 	bl	8004c3e <osDelay>
        if(osMessageQueueGet(alertQueueHandle, &adcValue, NULL, 0) == osOK)
 80012aa:	e7ca      	b.n	8001242 <StartAlertMonitorTask+0xe>
 80012ac:	20000144 	.word	0x20000144
 80012b0:	20000002 	.word	0x20000002
 80012b4:	08009288 	.word	0x08009288
 80012b8:	200000cc 	.word	0x200000cc

080012bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012ce:	f000 f9fd 	bl	80016cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40000c00 	.word	0x40000c00

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_MspInit+0x54>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a11      	ldr	r2, [pc, #68]	@ (8001344 <HAL_MspInit+0x54>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_MspInit+0x54>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_MspInit+0x54>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_MspInit+0x54>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_MspInit+0x54>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	210f      	movs	r1, #15
 8001332:	f06f 0001 	mvn.w	r0, #1
 8001336:	f000 ffb5 	bl	80022a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <HAL_ADC_MspInit+0x48>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d115      	bne.n	8001386 <HAL_ADC_MspInit+0x3e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_ADC_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <HAL_ADC_MspInit+0x4c>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_ADC_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	2012      	movs	r0, #18
 800137c:	f000 ff92 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001380:	2012      	movs	r0, #18
 8001382:	f000 ffab 	bl	80022dc <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40012000 	.word	0x40012000
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <HAL_UART_MspInit+0x94>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d133      	bne.n	8001422 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <HAL_UART_MspInit+0x98>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <HAL_UART_MspInit+0x98>)
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_UART_MspInit+0x98>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <HAL_UART_MspInit+0x98>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <HAL_UART_MspInit+0x98>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_UART_MspInit+0x98>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013f2:	230c      	movs	r3, #12
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001402:	2307      	movs	r3, #7
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4809      	ldr	r0, [pc, #36]	@ (8001434 <HAL_UART_MspInit+0x9c>)
 800140e:	f001 f805 	bl	800241c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2105      	movs	r1, #5
 8001416:	2026      	movs	r0, #38	@ 0x26
 8001418:	f000 ff44 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800141c:	2026      	movs	r0, #38	@ 0x26
 800141e:	f000 ff5d 	bl	80022dc <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	@ 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40004400 	.word	0x40004400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b33      	ldr	r3, [pc, #204]	@ (800151c <HAL_InitTick+0xe4>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	4a32      	ldr	r2, [pc, #200]	@ (800151c <HAL_InitTick+0xe4>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6413      	str	r3, [r2, #64]	@ 0x40
 8001458:	4b30      	ldr	r3, [pc, #192]	@ (800151c <HAL_InitTick+0xe4>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001464:	f107 0210 	add.w	r2, r7, #16
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f001 fab6 	bl	80029e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800147e:	f001 fa87 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8001482:	6378      	str	r0, [r7, #52]	@ 0x34
 8001484:	e004      	b.n	8001490 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001486:	f001 fa83 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 800148a:	4603      	mov	r3, r0
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001492:	4a23      	ldr	r2, [pc, #140]	@ (8001520 <HAL_InitTick+0xe8>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	0c9b      	lsrs	r3, r3, #18
 800149a:	3b01      	subs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <HAL_InitTick+0xec>)
 80014a0:	4a21      	ldr	r2, [pc, #132]	@ (8001528 <HAL_InitTick+0xf0>)
 80014a2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_InitTick+0xec>)
 80014a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014aa:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80014ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <HAL_InitTick+0xec>)
 80014ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <HAL_InitTick+0xec>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <HAL_InitTick+0xec>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <HAL_InitTick+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80014c4:	4817      	ldr	r0, [pc, #92]	@ (8001524 <HAL_InitTick+0xec>)
 80014c6:	f001 ff8b 	bl	80033e0 <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d11b      	bne.n	8001510 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80014d8:	4812      	ldr	r0, [pc, #72]	@ (8001524 <HAL_InitTick+0xec>)
 80014da:	f001 ffdb 	bl	8003494 <HAL_TIM_Base_Start_IT>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014ec:	2032      	movs	r0, #50	@ 0x32
 80014ee:	f000 fef5 	bl	80022dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d808      	bhi.n	800150a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	2032      	movs	r0, #50	@ 0x32
 80014fe:	f000 fed1 	bl	80022a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <HAL_InitTick+0xf4>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e002      	b.n	8001510 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001510:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001514:	4618      	mov	r0, r3
 8001516:	3738      	adds	r7, #56	@ 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	431bde83 	.word	0x431bde83
 8001524:	200001f4 	.word	0x200001f4
 8001528:	40000c00 	.word	0x40000c00
 800152c:	2000000c 	.word	0x2000000c

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <NMI_Handler+0x4>

08001538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <MemManage_Handler+0x4>

08001548 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <UsageFault_Handler+0x4>

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <ADC_IRQHandler+0x10>)
 800156e:	f000 fa6e 	bl	8001a4e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000084 	.word	0x20000084

0800157c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <USART2_IRQHandler+0x10>)
 8001582:	f002 fac9 	bl	8003b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200000cc 	.word	0x200000cc

08001590 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <TIM5_IRQHandler+0x10>)
 8001596:	f001 ffed 	bl	8003574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001f4 	.word	0x200001f4

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f006 fb4a 	bl	8007c6c <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20020000 	.word	0x20020000
 8001604:	00000400 	.word	0x00000400
 8001608:	2000023c 	.word	0x2000023c
 800160c:	20004d78 	.word	0x20004d78

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800166c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001638:	f7ff ffea 	bl	8001610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	@ (8001680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001662:	f006 fb09 	bl	8007c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff f801 	bl	800066c <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001678:	08009704 	.word	0x08009704
  ldr r2, =_sbss
 800167c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001680:	20004d74 	.word	0x20004d74

08001684 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <CAN1_RX0_IRQHandler>
	...

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <HAL_Init+0x40>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <HAL_Init+0x40>)
 800169e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_Init+0x40>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 fdec 	bl	800228e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f7ff febe 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fe18 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000010 	.word	0x20000010
 80016f0:	20000240 	.word	0x20000240

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000240 	.word	0x20000240

0800170c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e033      	b.n	800178a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fe0c 	bl	8001348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d118      	bne.n	800177c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001752:	f023 0302 	bic.w	r3, r3, #2
 8001756:	f043 0202 	orr.w	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fbe2 	bl	8001f28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40
 800177a:	e001      	b.n	8001780 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_Start+0x1a>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e0b2      	b.n	8001914 <HAL_ADC_Start+0x180>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d018      	beq.n	80017f6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017d4:	4b52      	ldr	r3, [pc, #328]	@ (8001920 <HAL_ADC_Start+0x18c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a52      	ldr	r2, [pc, #328]	@ (8001924 <HAL_ADC_Start+0x190>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0c9a      	lsrs	r2, r3, #18
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017e8:	e002      	b.n	80017f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f9      	bne.n	80017ea <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d17a      	bne.n	80018fa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800182e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001842:	d106      	bne.n	8001852 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	f023 0206 	bic.w	r2, r3, #6
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001850:	e002      	b.n	8001858 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <HAL_ADC_Start+0x194>)
 8001862:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800186c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	2b00      	cmp	r3, #0
 8001878:	d12a      	bne.n	80018d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2b      	ldr	r2, [pc, #172]	@ (800192c <HAL_ADC_Start+0x198>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d015      	beq.n	80018b0 <HAL_ADC_Start+0x11c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a29      	ldr	r2, [pc, #164]	@ (8001930 <HAL_ADC_Start+0x19c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d105      	bne.n	800189a <HAL_ADC_Start+0x106>
 800188e:	4b26      	ldr	r3, [pc, #152]	@ (8001928 <HAL_ADC_Start+0x194>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <HAL_ADC_Start+0x1a0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d136      	bne.n	8001912 <HAL_ADC_Start+0x17e>
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <HAL_ADC_Start+0x194>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d130      	bne.n	8001912 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d129      	bne.n	8001912 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	e020      	b.n	8001912 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a15      	ldr	r2, [pc, #84]	@ (800192c <HAL_ADC_Start+0x198>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d11b      	bne.n	8001912 <HAL_ADC_Start+0x17e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d114      	bne.n	8001912 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	e00b      	b.n	8001912 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	20000008 	.word	0x20000008
 8001924:	431bde83 	.word	0x431bde83
 8001928:	40012300 	.word	0x40012300
 800192c:	40012000 	.word	0x40012000
 8001930:	40012100 	.word	0x40012100
 8001934:	40012200 	.word	0x40012200

08001938 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001954:	d113      	bne.n	800197e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001964:	d10b      	bne.n	800197e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f043 0220 	orr.w	r2, r3, #32
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e063      	b.n	8001a46 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800197e:	f7ff feb9 	bl	80016f4 <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001984:	e021      	b.n	80019ca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d01d      	beq.n	80019ca <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_ADC_PollForConversion+0x6c>
 8001994:	f7ff feae 	bl	80016f4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d212      	bcs.n	80019ca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d00b      	beq.n	80019ca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f043 0204 	orr.w	r2, r3, #4
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e03d      	b.n	8001a46 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d1d6      	bne.n	8001986 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0212 	mvn.w	r2, #18
 80019e0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d123      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d11f      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d111      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d049      	beq.n	8001b18 <HAL_ADC_IRQHandler+0xca>
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d046      	beq.n	8001b18 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d12b      	bne.n	8001b08 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d127      	bne.n	8001b08 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d119      	bne.n	8001b08 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0220 	bic.w	r2, r2, #32
 8001ae2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8bd 	bl	8001c88 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f06f 0212 	mvn.w	r2, #18
 8001b16:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b26:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d057      	beq.n	8001bde <HAL_ADC_IRQHandler+0x190>
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d054      	beq.n	8001bde <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d139      	bne.n	8001bce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d12b      	bne.n	8001bce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d124      	bne.n	8001bce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11d      	bne.n	8001bce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d119      	bne.n	8001bce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ba8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 faa6 	bl	8002120 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 020c 	mvn.w	r2, #12
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d017      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x1d6>
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d014      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10d      	bne.n	8001c24 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f841 	bl	8001c9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f06f 0201 	mvn.w	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c32:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d015      	beq.n	8001c66 <HAL_ADC_IRQHandler+0x218>
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c44:	f043 0202 	orr.w	r2, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0220 	mvn.w	r2, #32
 8001c54:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f82a 	bl	8001cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0220 	mvn.w	r2, #32
 8001c64:	601a      	str	r2, [r3, #0]
  }
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1c>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e113      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x244>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d925      	bls.n	8001d3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68d9      	ldr	r1, [r3, #12]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	2207      	movs	r2, #7
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	400a      	ands	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68d9      	ldr	r1, [r3, #12]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4403      	add	r3, r0
 8001d2e:	3b1e      	subs	r3, #30
 8001d30:	409a      	lsls	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	e022      	b.n	8001d82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6919      	ldr	r1, [r3, #16]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	2207      	movs	r2, #7
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	4603      	mov	r3, r0
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4403      	add	r3, r0
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d824      	bhi.n	8001dd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b05      	subs	r3, #5
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b05      	subs	r3, #5
 8001dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dd2:	e04c      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d824      	bhi.n	8001e26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	3b23      	subs	r3, #35	@ 0x23
 8001dee:	221f      	movs	r2, #31
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43da      	mvns	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	3b23      	subs	r3, #35	@ 0x23
 8001e18:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e24:	e023      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b41      	subs	r3, #65	@ 0x41
 8001e38:	221f      	movs	r2, #31
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	400a      	ands	r2, r1
 8001e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b41      	subs	r3, #65	@ 0x41
 8001e62:	fa00 f203 	lsl.w	r2, r0, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6e:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <HAL_ADC_ConfigChannel+0x250>)
 8001e70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a28      	ldr	r2, [pc, #160]	@ (8001f18 <HAL_ADC_ConfigChannel+0x254>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10f      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1d8>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b12      	cmp	r3, #18
 8001e82:	d10b      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f18 <HAL_ADC_ConfigChannel+0x254>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12b      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x23a>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8001f1c <HAL_ADC_ConfigChannel+0x258>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <HAL_ADC_ConfigChannel+0x1f4>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b11      	cmp	r3, #17
 8001eb6:	d122      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <HAL_ADC_ConfigChannel+0x258>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d111      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_ADC_ConfigChannel+0x25c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <HAL_ADC_ConfigChannel+0x260>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9a      	lsrs	r2, r3, #18
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40012300 	.word	0x40012300
 8001f18:	40012000 	.word	0x40012000
 8001f1c:	10000012 	.word	0x10000012
 8001f20:	20000008 	.word	0x20000008
 8001f24:	431bde83 	.word	0x431bde83

08001f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f30:	4b79      	ldr	r3, [pc, #484]	@ (8002118 <ADC_Init+0x1f0>)
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	021a      	lsls	r2, r3, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fba:	4a58      	ldr	r2, [pc, #352]	@ (800211c <ADC_Init+0x1f4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	e00f      	b.n	8002026 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002024:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0202 	bic.w	r2, r2, #2
 8002034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6899      	ldr	r1, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e1b      	ldrb	r3, [r3, #24]
 8002040:	005a      	lsls	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002062:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	3b01      	subs	r3, #1
 8002080:	035a      	lsls	r2, r3, #13
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	e007      	b.n	800209c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800209a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	051a      	lsls	r2, r3, #20
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6899      	ldr	r1, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020de:	025a      	lsls	r2, r3, #9
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	029a      	lsls	r2, r3, #10
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40012300 	.word	0x40012300
 800211c:	0f000001 	.word	0x0f000001

08002120 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	@ (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff4c 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b6:	f7ff ff61 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	6978      	ldr	r0, [r7, #20]
 80022c2:	f7ff ffb1 	bl	8002228 <NVIC_EncodePriority>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff80 	bl	80021d4 <__NVIC_SetPriority>
}
 80022d4:	bf00      	nop
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff54 	bl	8002198 <__NVIC_EnableIRQ>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002306:	f7ff f9f5 	bl	80016f4 <HAL_GetTick>
 800230a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d008      	beq.n	800232a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2280      	movs	r2, #128	@ 0x80
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e052      	b.n	80023d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0216 	bic.w	r2, r2, #22
 8002338:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002348:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_DMA_Abort+0x62>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0208 	bic.w	r2, r2, #8
 8002368:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237a:	e013      	b.n	80023a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237c:	f7ff f9ba 	bl	80016f4 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b05      	cmp	r3, #5
 8002388:	d90c      	bls.n	80023a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2203      	movs	r2, #3
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e015      	b.n	80023d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e4      	bne.n	800237c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b6:	223f      	movs	r2, #63	@ 0x3f
 80023b8:	409a      	lsls	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d004      	beq.n	80023f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2280      	movs	r2, #128	@ 0x80
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00c      	b.n	8002410 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e165      	b.n	8002704 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8154 	bne.w	80026fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80ae 	beq.w	80026fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b5d      	ldr	r3, [pc, #372]	@ (800271c <HAL_GPIO_Init+0x300>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a5c      	ldr	r2, [pc, #368]	@ (800271c <HAL_GPIO_Init+0x300>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b5a      	ldr	r3, [pc, #360]	@ (800271c <HAL_GPIO_Init+0x300>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a58      	ldr	r2, [pc, #352]	@ (8002720 <HAL_GPIO_Init+0x304>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002724 <HAL_GPIO_Init+0x308>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d025      	beq.n	8002636 <HAL_GPIO_Init+0x21a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <HAL_GPIO_Init+0x216>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4d      	ldr	r2, [pc, #308]	@ (800272c <HAL_GPIO_Init+0x310>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x212>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002730 <HAL_GPIO_Init+0x314>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x20e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4b      	ldr	r2, [pc, #300]	@ (8002734 <HAL_GPIO_Init+0x318>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x20a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4a      	ldr	r2, [pc, #296]	@ (8002738 <HAL_GPIO_Init+0x31c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x206>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a49      	ldr	r2, [pc, #292]	@ (800273c <HAL_GPIO_Init+0x320>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x202>
 800261a:	2306      	movs	r3, #6
 800261c:	e00c      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 800261e:	2307      	movs	r3, #7
 8002620:	e00a      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 8002622:	2305      	movs	r3, #5
 8002624:	e008      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 8002626:	2304      	movs	r3, #4
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 800262a:	2303      	movs	r3, #3
 800262c:	e004      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 800262e:	2302      	movs	r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_GPIO_Init+0x21c>
 8002636:	2300      	movs	r3, #0
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	4093      	lsls	r3, r2
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002648:	4935      	ldr	r1, [pc, #212]	@ (8002720 <HAL_GPIO_Init+0x304>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_GPIO_Init+0x324>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267a:	4a31      	ldr	r2, [pc, #196]	@ (8002740 <HAL_GPIO_Init+0x324>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002680:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <HAL_GPIO_Init+0x324>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a4:	4a26      	ldr	r2, [pc, #152]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026aa:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	f67f ae96 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3724      	adds	r7, #36	@ 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40021400 	.word	0x40021400
 800273c:	40021800 	.word	0x40021800
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002788:	887a      	ldrh	r2, [r7, #2]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	041a      	lsls	r2, r3, #16
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43d9      	mvns	r1, r3
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	400b      	ands	r3, r1
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0cc      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b68      	ldr	r3, [pc, #416]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d90c      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b65      	ldr	r3, [pc, #404]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b63      	ldr	r3, [pc, #396]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b8      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002800:	4b59      	ldr	r3, [pc, #356]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a58      	ldr	r2, [pc, #352]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800280a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002818:	4b53      	ldr	r3, [pc, #332]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a52      	ldr	r2, [pc, #328]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b50      	ldr	r3, [pc, #320]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	494d      	ldr	r1, [pc, #308]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d044      	beq.n	80028cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b47      	ldr	r3, [pc, #284]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d119      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b3f      	ldr	r3, [pc, #252]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e067      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b37      	ldr	r3, [pc, #220]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4934      	ldr	r1, [pc, #208]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7fe ff2a 	bl	80016f4 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe ff26 	bl	80016f4 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b25      	ldr	r3, [pc, #148]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d20c      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b22      	ldr	r3, [pc, #136]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b20      	ldr	r3, [pc, #128]	@ (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e032      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4916      	ldr	r1, [pc, #88]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4b12      	ldr	r3, [pc, #72]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	490e      	ldr	r1, [pc, #56]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002932:	f000 f887 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002936:	4602      	mov	r2, r0
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	490a      	ldr	r1, [pc, #40]	@ (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	5ccb      	ldrb	r3, [r1, r3]
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fd70 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00
 8002968:	40023800 	.word	0x40023800
 800296c:	0800958c 	.word	0x0800958c
 8002970:	20000008 	.word	0x20000008
 8002974:	2000000c 	.word	0x2000000c

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b03      	ldr	r3, [pc, #12]	@ (800298c <HAL_RCC_GetHCLKFreq+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000008 	.word	0x20000008

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002994:	f7ff fff0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0a9b      	lsrs	r3, r3, #10
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	0800959c 	.word	0x0800959c

080029b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029bc:	f7ff ffdc 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0b5b      	lsrs	r3, r3, #13
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	@ (80029dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	0800959c 	.word	0x0800959c

080029e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	220f      	movs	r2, #15
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029f0:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029fc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <HAL_RCC_GetClockConfig+0x5c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a08:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <HAL_RCC_GetClockConfig+0x5c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a14:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <HAL_RCC_GetClockConfig+0x5c>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	08db      	lsrs	r3, r3, #3
 8002a1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <HAL_RCC_GetClockConfig+0x60>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 020f 	and.w	r2, r3, #15
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	601a      	str	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40023c00 	.word	0x40023c00

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a48:	b0ae      	sub	sp, #184	@ 0xb8
 8002a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a6a:	4bcb      	ldr	r3, [pc, #812]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	f200 8206 	bhi.w	8002e84 <HAL_RCC_GetSysClockFreq+0x440>
 8002a78:	a201      	add	r2, pc, #4	@ (adr r2, 8002a80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002ab5 	.word	0x08002ab5
 8002a84:	08002e85 	.word	0x08002e85
 8002a88:	08002e85 	.word	0x08002e85
 8002a8c:	08002e85 	.word	0x08002e85
 8002a90:	08002abd 	.word	0x08002abd
 8002a94:	08002e85 	.word	0x08002e85
 8002a98:	08002e85 	.word	0x08002e85
 8002a9c:	08002e85 	.word	0x08002e85
 8002aa0:	08002ac5 	.word	0x08002ac5
 8002aa4:	08002e85 	.word	0x08002e85
 8002aa8:	08002e85 	.word	0x08002e85
 8002aac:	08002e85 	.word	0x08002e85
 8002ab0:	08002cb5 	.word	0x08002cb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4bb9      	ldr	r3, [pc, #740]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aba:	e1e7      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002abc:	4bb8      	ldr	r3, [pc, #736]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ac2:	e1e3      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac4:	4bb4      	ldr	r3, [pc, #720]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad0:	4bb1      	ldr	r3, [pc, #708]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d071      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002adc:	4bae      	ldr	r3, [pc, #696]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ae8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b02:	4622      	mov	r2, r4
 8002b04:	462b      	mov	r3, r5
 8002b06:	f04f 0000 	mov.w	r0, #0
 8002b0a:	f04f 0100 	mov.w	r1, #0
 8002b0e:	0159      	lsls	r1, r3, #5
 8002b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b14:	0150      	lsls	r0, r2, #5
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	1a51      	subs	r1, r2, r1
 8002b1e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b20:	4629      	mov	r1, r5
 8002b22:	eb63 0301 	sbc.w	r3, r3, r1
 8002b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b34:	4649      	mov	r1, r9
 8002b36:	018b      	lsls	r3, r1, #6
 8002b38:	4641      	mov	r1, r8
 8002b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b3e:	4641      	mov	r1, r8
 8002b40:	018a      	lsls	r2, r1, #6
 8002b42:	4641      	mov	r1, r8
 8002b44:	1a51      	subs	r1, r2, r1
 8002b46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b48:	4649      	mov	r1, r9
 8002b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	00cb      	lsls	r3, r1, #3
 8002b60:	4641      	mov	r1, r8
 8002b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b66:	4641      	mov	r1, r8
 8002b68:	00ca      	lsls	r2, r1, #3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4622      	mov	r2, r4
 8002b72:	189b      	adds	r3, r3, r2
 8002b74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b76:	462b      	mov	r3, r5
 8002b78:	460a      	mov	r2, r1
 8002b7a:	eb42 0303 	adc.w	r3, r2, r3
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	024b      	lsls	r3, r1, #9
 8002b90:	4621      	mov	r1, r4
 8002b92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b96:	4621      	mov	r1, r4
 8002b98:	024a      	lsls	r2, r1, #9
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ba8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002bb0:	f7fd fb96 	bl	80002e0 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bbe:	e067      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc0:	4b75      	ldr	r3, [pc, #468]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bcc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bda:	2300      	movs	r3, #0
 8002bdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bde:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002be2:	4622      	mov	r2, r4
 8002be4:	462b      	mov	r3, r5
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	0159      	lsls	r1, r3, #5
 8002bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf4:	0150      	lsls	r0, r2, #5
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	1a51      	subs	r1, r2, r1
 8002bfe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c00:	4629      	mov	r1, r5
 8002c02:	eb63 0301 	sbc.w	r3, r3, r1
 8002c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c14:	4649      	mov	r1, r9
 8002c16:	018b      	lsls	r3, r1, #6
 8002c18:	4641      	mov	r1, r8
 8002c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c1e:	4641      	mov	r1, r8
 8002c20:	018a      	lsls	r2, r1, #6
 8002c22:	4641      	mov	r1, r8
 8002c24:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c28:	4649      	mov	r1, r9
 8002c2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c42:	4692      	mov	sl, r2
 8002c44:	469b      	mov	fp, r3
 8002c46:	4623      	mov	r3, r4
 8002c48:	eb1a 0303 	adds.w	r3, sl, r3
 8002c4c:	623b      	str	r3, [r7, #32]
 8002c4e:	462b      	mov	r3, r5
 8002c50:	eb4b 0303 	adc.w	r3, fp, r3
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c62:	4629      	mov	r1, r5
 8002c64:	028b      	lsls	r3, r1, #10
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	028a      	lsls	r2, r1, #10
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c78:	2200      	movs	r2, #0
 8002c7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c7c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c82:	f7fd fb2d 	bl	80002e0 <__aeabi_uldivmod>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c90:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002ca2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cb2:	e0eb      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb4:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc0:	4b35      	ldr	r3, [pc, #212]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d06b      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ce4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ce8:	4622      	mov	r2, r4
 8002cea:	462b      	mov	r3, r5
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	0159      	lsls	r1, r3, #5
 8002cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfa:	0150      	lsls	r0, r2, #5
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4621      	mov	r1, r4
 8002d02:	1a51      	subs	r1, r2, r1
 8002d04:	61b9      	str	r1, [r7, #24]
 8002d06:	4629      	mov	r1, r5
 8002d08:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d1a:	4659      	mov	r1, fp
 8002d1c:	018b      	lsls	r3, r1, #6
 8002d1e:	4651      	mov	r1, sl
 8002d20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d24:	4651      	mov	r1, sl
 8002d26:	018a      	lsls	r2, r1, #6
 8002d28:	4651      	mov	r1, sl
 8002d2a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d2e:	4659      	mov	r1, fp
 8002d30:	eb63 0901 	sbc.w	r9, r3, r1
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d48:	4690      	mov	r8, r2
 8002d4a:	4699      	mov	r9, r3
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	eb18 0303 	adds.w	r3, r8, r3
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	462b      	mov	r3, r5
 8002d56:	eb49 0303 	adc.w	r3, r9, r3
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	024b      	lsls	r3, r1, #9
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d72:	4621      	mov	r1, r4
 8002d74:	024a      	lsls	r2, r1, #9
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d7e:	2200      	movs	r2, #0
 8002d80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d82:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d88:	f7fd faaa 	bl	80002e0 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d96:	e065      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x420>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da4:	4b3d      	ldr	r3, [pc, #244]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x458>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	2200      	movs	r2, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	4611      	mov	r1, r2
 8002db0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002db4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002db6:	2300      	movs	r3, #0
 8002db8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	0159      	lsls	r1, r3, #5
 8002dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd0:	0150      	lsls	r0, r2, #5
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4641      	mov	r1, r8
 8002dd8:	1a51      	subs	r1, r2, r1
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	4649      	mov	r1, r9
 8002dde:	eb63 0301 	sbc.w	r3, r3, r1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002df0:	4659      	mov	r1, fp
 8002df2:	018b      	lsls	r3, r1, #6
 8002df4:	4651      	mov	r1, sl
 8002df6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	018a      	lsls	r2, r1, #6
 8002dfe:	4651      	mov	r1, sl
 8002e00:	1a54      	subs	r4, r2, r1
 8002e02:	4659      	mov	r1, fp
 8002e04:	eb63 0501 	sbc.w	r5, r3, r1
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	00eb      	lsls	r3, r5, #3
 8002e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e16:	00e2      	lsls	r2, r4, #3
 8002e18:	4614      	mov	r4, r2
 8002e1a:	461d      	mov	r5, r3
 8002e1c:	4643      	mov	r3, r8
 8002e1e:	18e3      	adds	r3, r4, r3
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	464b      	mov	r3, r9
 8002e24:	eb45 0303 	adc.w	r3, r5, r3
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e36:	4629      	mov	r1, r5
 8002e38:	028b      	lsls	r3, r1, #10
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e40:	4621      	mov	r1, r4
 8002e42:	028a      	lsls	r2, r1, #10
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e50:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e56:	f7fd fa43 	bl	80002e0 <__aeabi_uldivmod>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4613      	mov	r3, r2
 8002e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e64:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0f1b      	lsrs	r3, r3, #28
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e82:	e003      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	37b8      	adds	r7, #184	@ 0xb8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400

08002ea4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e28d      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8083 	beq.w	8002fca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ec4:	4b94      	ldr	r3, [pc, #592]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d019      	beq.n	8002f04 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ed0:	4b91      	ldr	r3, [pc, #580]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002edc:	4b8e      	ldr	r3, [pc, #568]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee8:	d00c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b8b      	ldr	r3, [pc, #556]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d112      	bne.n	8002f1c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b88      	ldr	r3, [pc, #544]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	4b84      	ldr	r3, [pc, #528]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05b      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x124>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d157      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e25a      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCC_OscConfig+0x90>
 8002f26:	4b7c      	ldr	r3, [pc, #496]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7b      	ldr	r2, [pc, #492]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e01d      	b.n	8002f70 <HAL_RCC_OscConfig+0xcc>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0xb4>
 8002f3e:	4b76      	ldr	r3, [pc, #472]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a75      	ldr	r2, [pc, #468]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b73      	ldr	r3, [pc, #460]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a72      	ldr	r2, [pc, #456]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0xcc>
 8002f58:	4b6f      	ldr	r3, [pc, #444]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b6c      	ldr	r3, [pc, #432]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6b      	ldr	r2, [pc, #428]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fbbc 	bl	80016f4 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fbb8 	bl	80016f4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e21f      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b61      	ldr	r3, [pc, #388]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xdc>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fba8 	bl	80016f4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fba4 	bl	80016f4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e20b      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	4b57      	ldr	r3, [pc, #348]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x104>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d06f      	beq.n	80030b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fd6:	4b50      	ldr	r3, [pc, #320]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d017      	beq.n	8003012 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002fee:	4b4a      	ldr	r3, [pc, #296]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffa:	4b47      	ldr	r3, [pc, #284]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d11c      	bne.n	8003040 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b44      	ldr	r3, [pc, #272]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d116      	bne.n	8003040 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	4b41      	ldr	r3, [pc, #260]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_RCC_OscConfig+0x186>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e1d3      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4937      	ldr	r1, [pc, #220]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	e03a      	b.n	80030b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003048:	4b34      	ldr	r3, [pc, #208]	@ (800311c <HAL_RCC_OscConfig+0x278>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe fb51 	bl	80016f4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe fb4d 	bl	80016f4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1b4      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b28      	ldr	r3, [pc, #160]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4925      	ldr	r1, [pc, #148]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
 8003088:	e015      	b.n	80030b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308a:	4b24      	ldr	r3, [pc, #144]	@ (800311c <HAL_RCC_OscConfig+0x278>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe fb30 	bl	80016f4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003098:	f7fe fb2c 	bl	80016f4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e193      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d036      	beq.n	8003130 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_RCC_OscConfig+0x27c>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe fb10 	bl	80016f4 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe fb0c 	bl	80016f4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e173      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 80030ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x234>
 80030f6:	e01b      	b.n	8003130 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fe faf9 	bl	80016f4 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	e00e      	b.n	8003124 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003106:	f7fe faf5 	bl	80016f4 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d907      	bls.n	8003124 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e15c      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
 8003118:	40023800 	.word	0x40023800
 800311c:	42470000 	.word	0x42470000
 8003120:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	4b8a      	ldr	r3, [pc, #552]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ea      	bne.n	8003106 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8097 	beq.w	800326c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b83      	ldr	r3, [pc, #524]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b7f      	ldr	r3, [pc, #508]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	4a7e      	ldr	r2, [pc, #504]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	@ 0x40
 800315e:	4b7c      	ldr	r3, [pc, #496]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b79      	ldr	r3, [pc, #484]	@ (8003354 <HAL_RCC_OscConfig+0x4b0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317a:	4b76      	ldr	r3, [pc, #472]	@ (8003354 <HAL_RCC_OscConfig+0x4b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	@ (8003354 <HAL_RCC_OscConfig+0x4b0>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fe fab5 	bl	80016f4 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fe fab1 	bl	80016f4 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e118      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003354 <HAL_RCC_OscConfig+0x4b0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x31e>
 80031b4:	4b66      	ldr	r3, [pc, #408]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	4a65      	ldr	r2, [pc, #404]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c0:	e01c      	b.n	80031fc <HAL_RCC_OscConfig+0x358>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x340>
 80031ca:	4b61      	ldr	r3, [pc, #388]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	4a60      	ldr	r2, [pc, #384]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a5d      	ldr	r2, [pc, #372]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0x358>
 80031e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	4a59      	ldr	r2, [pc, #356]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f0:	4b57      	ldr	r3, [pc, #348]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a56      	ldr	r2, [pc, #344]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe fa76 	bl	80016f4 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe fa72 	bl	80016f4 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0d7      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	4b4b      	ldr	r3, [pc, #300]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0ee      	beq.n	800320c <HAL_RCC_OscConfig+0x368>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe fa60 	bl	80016f4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe fa5c 	bl	80016f4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0c1      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	4b40      	ldr	r3, [pc, #256]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ee      	bne.n	8003238 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	4a3a      	ldr	r2, [pc, #232]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80ad 	beq.w	80033d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003276:	4b36      	ldr	r3, [pc, #216]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b08      	cmp	r3, #8
 8003280:	d060      	beq.n	8003344 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d145      	bne.n	8003316 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b33      	ldr	r3, [pc, #204]	@ (8003358 <HAL_RCC_OscConfig+0x4b4>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fa30 	bl	80016f4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fa2c 	bl	80016f4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e093      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	3b01      	subs	r3, #1
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	071b      	lsls	r3, r3, #28
 80032e2:	491b      	ldr	r1, [pc, #108]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <HAL_RCC_OscConfig+0x4b4>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe fa01 	bl	80016f4 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fe f9fd 	bl	80016f4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e064      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003308:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x452>
 8003314:	e05c      	b.n	80033d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_RCC_OscConfig+0x4b4>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe f9ea 	bl	80016f4 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe f9e6 	bl	80016f4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e04d      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x480>
 8003342:	e045      	b.n	80033d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e040      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
 8003350:	40023800 	.word	0x40023800
 8003354:	40007000 	.word	0x40007000
 8003358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800335c:	4b1f      	ldr	r3, [pc, #124]	@ (80033dc <HAL_RCC_OscConfig+0x538>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d030      	beq.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d129      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d122      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003394:	4293      	cmp	r3, r2
 8003396:	d119      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	3b01      	subs	r3, #1
 80033a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d10f      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f839 	bl	800347e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 f9c0 	bl	80037a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d001      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e04e      	b.n	800354a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a23      	ldr	r2, [pc, #140]	@ (8003558 <HAL_TIM_Base_Start_IT+0xc4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d6:	d01d      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	@ (800355c <HAL_TIM_Base_Start_IT+0xc8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <HAL_TIM_Base_Start_IT+0xcc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <HAL_TIM_Base_Start_IT+0xd0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <HAL_TIM_Base_Start_IT+0xd4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a19      	ldr	r2, [pc, #100]	@ (800356c <HAL_TIM_Base_Start_IT+0xd8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <HAL_TIM_Base_Start_IT+0xdc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d111      	bne.n	8003538 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d010      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003536:	e007      	b.n	8003548 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40010400 	.word	0x40010400
 800356c:	40014000 	.word	0x40014000
 8003570:	40001800 	.word	0x40001800

08003574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d020      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0202 	mvn.w	r2, #2
 80035a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8d2 	bl	8003768 <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8c4 	bl	8003754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8d5 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d020      	beq.n	8003624 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01b      	beq.n	8003624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0204 	mvn.w	r2, #4
 80035f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8ac 	bl	8003768 <HAL_TIM_IC_CaptureCallback>
 8003610:	e005      	b.n	800361e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f89e 	bl	8003754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f8af 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d020      	beq.n	8003670 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01b      	beq.n	8003670 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0208 	mvn.w	r2, #8
 8003640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2204      	movs	r2, #4
 8003646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f886 	bl	8003768 <HAL_TIM_IC_CaptureCallback>
 800365c:	e005      	b.n	800366a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f878 	bl	8003754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f889 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d020      	beq.n	80036bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01b      	beq.n	80036bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0210 	mvn.w	r2, #16
 800368c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2208      	movs	r2, #8
 8003692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f860 	bl	8003768 <HAL_TIM_IC_CaptureCallback>
 80036a8:	e005      	b.n	80036b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f852 	bl	8003754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f863 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0201 	mvn.w	r2, #1
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fdee 	bl	80012bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f900 	bl	8003904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00c      	beq.n	8003728 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f834 	bl	8003790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0220 	mvn.w	r2, #32
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8d2 	bl	80038f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a43      	ldr	r2, [pc, #268]	@ (80038c4 <TIM_Base_SetConfig+0x120>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <TIM_Base_SetConfig+0x40>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c2:	d00f      	beq.n	80037e4 <TIM_Base_SetConfig+0x40>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a40      	ldr	r2, [pc, #256]	@ (80038c8 <TIM_Base_SetConfig+0x124>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <TIM_Base_SetConfig+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a3f      	ldr	r2, [pc, #252]	@ (80038cc <TIM_Base_SetConfig+0x128>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a3e      	ldr	r2, [pc, #248]	@ (80038d0 <TIM_Base_SetConfig+0x12c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3d      	ldr	r2, [pc, #244]	@ (80038d4 <TIM_Base_SetConfig+0x130>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d108      	bne.n	80037f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a32      	ldr	r2, [pc, #200]	@ (80038c4 <TIM_Base_SetConfig+0x120>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d02b      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003804:	d027      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a2f      	ldr	r2, [pc, #188]	@ (80038c8 <TIM_Base_SetConfig+0x124>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d023      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a2e      	ldr	r2, [pc, #184]	@ (80038cc <TIM_Base_SetConfig+0x128>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01f      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2d      	ldr	r2, [pc, #180]	@ (80038d0 <TIM_Base_SetConfig+0x12c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01b      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2c      	ldr	r2, [pc, #176]	@ (80038d4 <TIM_Base_SetConfig+0x130>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d017      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2b      	ldr	r2, [pc, #172]	@ (80038d8 <TIM_Base_SetConfig+0x134>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2a      	ldr	r2, [pc, #168]	@ (80038dc <TIM_Base_SetConfig+0x138>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00f      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a29      	ldr	r2, [pc, #164]	@ (80038e0 <TIM_Base_SetConfig+0x13c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a28      	ldr	r2, [pc, #160]	@ (80038e4 <TIM_Base_SetConfig+0x140>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a27      	ldr	r2, [pc, #156]	@ (80038e8 <TIM_Base_SetConfig+0x144>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a26      	ldr	r2, [pc, #152]	@ (80038ec <TIM_Base_SetConfig+0x148>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d108      	bne.n	8003868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a0e      	ldr	r2, [pc, #56]	@ (80038c4 <TIM_Base_SetConfig+0x120>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d003      	beq.n	8003896 <TIM_Base_SetConfig+0xf2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <TIM_Base_SetConfig+0x130>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d103      	bne.n	800389e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800
 80038e4:	40001800 	.word	0x40001800
 80038e8:	40001c00 	.word	0x40001c00
 80038ec:	40002000 	.word	0x40002000

080038f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e042      	b.n	80039b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fd2a 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	@ 0x24
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800395a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fdd3 	bl	8004508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	@ 0x28
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d175      	bne.n	8003ac4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Transmit+0x2c>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e06e      	b.n	8003ac6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2221      	movs	r2, #33	@ 0x21
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039f6:	f7fd fe7d 	bl	80016f4 <HAL_GetTick>
 80039fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a10:	d108      	bne.n	8003a24 <HAL_UART_Transmit+0x6c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d104      	bne.n	8003a24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e003      	b.n	8003a2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a2c:	e02e      	b.n	8003a8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2200      	movs	r2, #0
 8003a36:	2180      	movs	r1, #128	@ 0x80
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 fb37 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e03a      	b.n	8003ac6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3302      	adds	r3, #2
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	e007      	b.n	8003a7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1cb      	bne.n	8003a2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2140      	movs	r1, #64	@ 0x40
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fb03 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d112      	bne.n	8003b0e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_UART_Receive_IT+0x26>
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e00b      	b.n	8003b10 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	461a      	mov	r2, r3
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fb2a 	bl	800415e <UART_Start_Receive_IT>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	e000      	b.n	8003b10 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b0ba      	sub	sp, #232	@ 0xe8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_UART_IRQHandler+0x66>
 8003b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fc07 	bl	800438a <UART_Receive_IT>
      return;
 8003b7c:	e273      	b.n	8004066 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80de 	beq.w	8003d44 <HAL_UART_IRQHandler+0x22c>
 8003b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80d1 	beq.w	8003d44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_UART_IRQHandler+0xae>
 8003bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_UART_IRQHandler+0xd2>
 8003bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f043 0202 	orr.w	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_UART_IRQHandler+0xf6>
 8003bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d011      	beq.n	8003c3e <HAL_UART_IRQHandler+0x126>
 8003c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	f043 0208 	orr.w	r2, r3, #8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 820a 	beq.w	800405c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_UART_IRQHandler+0x14e>
 8003c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fb92 	bl	800438a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c70:	2b40      	cmp	r3, #64	@ 0x40
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <HAL_UART_IRQHandler+0x17a>
 8003c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d04f      	beq.n	8003d32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa9d 	bl	80041d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d141      	bne.n	8003d2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3314      	adds	r3, #20
 8003cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1d9      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d013      	beq.n	8003d22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	4a8a      	ldr	r2, [pc, #552]	@ (8003f28 <HAL_UART_IRQHandler+0x410>)
 8003d00:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fb66 	bl	80023d8 <HAL_DMA_Abort_IT>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e00e      	b.n	8003d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9ac 	bl	8004080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	e00a      	b.n	8003d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f9a8 	bl	8004080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	e006      	b.n	8003d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f9a4 	bl	8004080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d3e:	e18d      	b.n	800405c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	bf00      	nop
    return;
 8003d42:	e18b      	b.n	800405c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	f040 8167 	bne.w	800401c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8160 	beq.w	800401c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8159 	beq.w	800401c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	f040 80ce 	bne.w	8003f2c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a9 	beq.w	8003ef8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dae:	429a      	cmp	r2, r3
 8003db0:	f080 80a2 	bcs.w	8003ef8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc6:	f000 8088 	beq.w	8003eda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003df6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1d9      	bne.n	8003dca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e1      	bne.n	8003e16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e3      	bne.n	8003e52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ebc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ebe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ec2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e3      	bne.n	8003e98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fa0f 	bl	80022f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8cf 	bl	8004094 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ef6:	e0b3      	b.n	8004060 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003efc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f040 80ad 	bne.w	8004060 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f10:	f040 80a6 	bne.w	8004060 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8b7 	bl	8004094 <HAL_UARTEx_RxEventCallback>
      return;
 8003f26:	e09b      	b.n	8004060 <HAL_UART_IRQHandler+0x548>
 8003f28:	08004299 	.word	0x08004299
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 808e 	beq.w	8004064 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8089 	beq.w	8004064 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f76:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e3      	bne.n	8003f52 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3314      	adds	r3, #20
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	623b      	str	r3, [r7, #32]
   return(result);
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fae:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e3      	bne.n	8003f8a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0310 	bic.w	r3, r3, #16
 8003fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ff4:	61fa      	str	r2, [r7, #28]
 8003ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	69b9      	ldr	r1, [r7, #24]
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	617b      	str	r3, [r7, #20]
   return(result);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e3      	bne.n	8003fd0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800400e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f83d 	bl	8004094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800401a:	e023      	b.n	8004064 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800401c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HAL_UART_IRQHandler+0x524>
 8004028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f940 	bl	80042ba <UART_Transmit_IT>
    return;
 800403a:	e014      	b.n	8004066 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <HAL_UART_IRQHandler+0x54e>
 8004048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f980 	bl	800435a <UART_EndTransmit_IT>
    return;
 800405a:	e004      	b.n	8004066 <HAL_UART_IRQHandler+0x54e>
    return;
 800405c:	bf00      	nop
 800405e:	e002      	b.n	8004066 <HAL_UART_IRQHandler+0x54e>
      return;
 8004060:	bf00      	nop
 8004062:	e000      	b.n	8004066 <HAL_UART_IRQHandler+0x54e>
      return;
 8004064:	bf00      	nop
  }
}
 8004066:	37e8      	adds	r7, #232	@ 0xe8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040bc:	e03b      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d037      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fd fb15 	bl	80016f4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <UART_WaitOnFlagUntilTimeout+0x30>
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e03a      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d023      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b80      	cmp	r3, #128	@ 0x80
 80040f2:	d020      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b40      	cmp	r3, #64	@ 0x40
 80040f8:	d01d      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d116      	bne.n	8004136 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f857 	bl	80041d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2208      	movs	r2, #8
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e00f      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	429a      	cmp	r2, r3
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	429a      	cmp	r2, r3
 8004152:	d0b4      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	4613      	mov	r3, r2
 800416a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2222      	movs	r2, #34	@ 0x22
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0220 	orr.w	r2, r2, #32
 80041c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b095      	sub	sp, #84	@ 0x54
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004200:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e5      	bne.n	80041da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	61fb      	str	r3, [r7, #28]
   return(result);
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800422e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004230:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e5      	bne.n	800420e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	2b01      	cmp	r3, #1
 8004248:	d119      	bne.n	800427e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	60bb      	str	r3, [r7, #8]
   return(result);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f023 0310 	bic.w	r3, r3, #16
 8004260:	647b      	str	r3, [r7, #68]	@ 0x44
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800426a:	61ba      	str	r2, [r7, #24]
 800426c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6979      	ldr	r1, [r7, #20]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	613b      	str	r3, [r7, #16]
   return(result);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e5      	bne.n	800424a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800428c:	bf00      	nop
 800428e:	3754      	adds	r7, #84	@ 0x54
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff fee7 	bl	8004080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b21      	cmp	r3, #33	@ 0x21
 80042cc:	d13e      	bne.n	800434c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d6:	d114      	bne.n	8004302 <UART_Transmit_IT+0x48>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d110      	bne.n	8004302 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	1c9a      	adds	r2, r3, #2
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	621a      	str	r2, [r3, #32]
 8004300:	e008      	b.n	8004314 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	1c59      	adds	r1, r3, #1
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6211      	str	r1, [r2, #32]
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29b      	uxth	r3, r3
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4619      	mov	r1, r3
 8004322:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004336:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004346:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	e000      	b.n	800434e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800434c:	2302      	movs	r3, #2
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004370:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fe76 	bl	800406c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b08c      	sub	sp, #48	@ 0x30
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b22      	cmp	r3, #34	@ 0x22
 80043a4:	f040 80aa 	bne.w	80044fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b0:	d115      	bne.n	80043de <UART_Receive_IT+0x54>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d111      	bne.n	80043de <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	1c9a      	adds	r2, r3, #2
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	@ 0x28
 80043dc:	e024      	b.n	8004428 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ec:	d007      	beq.n	80043fe <UART_Receive_IT+0x74>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <UART_Receive_IT+0x82>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e008      	b.n	800441e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004418:	b2da      	uxtb	r2, r3
 800441a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29b      	uxth	r3, r3
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4619      	mov	r1, r3
 8004436:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004438:	2b00      	cmp	r3, #0
 800443a:	d15d      	bne.n	80044f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0220 	bic.w	r2, r2, #32
 800444a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800445a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	2b01      	cmp	r3, #1
 8004480:	d135      	bne.n	80044ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	613b      	str	r3, [r7, #16]
   return(result);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f023 0310 	bic.w	r3, r3, #16
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a8:	623a      	str	r2, [r7, #32]
 80044aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	69f9      	ldr	r1, [r7, #28]
 80044ae:	6a3a      	ldr	r2, [r7, #32]
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d10a      	bne.n	80044e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fdd4 	bl	8004094 <HAL_UARTEx_RxEventCallback>
 80044ec:	e002      	b.n	80044f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc f89a 	bl	8000628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e002      	b.n	80044fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	e000      	b.n	80044fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
  }
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3730      	adds	r7, #48	@ 0x30
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b0c0      	sub	sp, #256	@ 0x100
 800450e:	af00      	add	r7, sp, #0
 8004510:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	68d9      	ldr	r1, [r3, #12]
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	ea40 0301 	orr.w	r3, r0, r1
 8004530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	431a      	orrs	r2, r3
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	431a      	orrs	r2, r3
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004560:	f021 010c 	bic.w	r1, r1, #12
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800456e:	430b      	orrs	r3, r1
 8004570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	6999      	ldr	r1, [r3, #24]
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	ea40 0301 	orr.w	r3, r0, r1
 800458e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b8f      	ldr	r3, [pc, #572]	@ (80047d4 <UART_SetConfig+0x2cc>)
 8004598:	429a      	cmp	r2, r3
 800459a:	d005      	beq.n	80045a8 <UART_SetConfig+0xa0>
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b8d      	ldr	r3, [pc, #564]	@ (80047d8 <UART_SetConfig+0x2d0>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d104      	bne.n	80045b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a8:	f7fe fa06 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 80045ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045b0:	e003      	b.n	80045ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045b2:	f7fe f9ed 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 80045b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045c4:	f040 810c 	bne.w	80047e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045da:	4622      	mov	r2, r4
 80045dc:	462b      	mov	r3, r5
 80045de:	1891      	adds	r1, r2, r2
 80045e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045e2:	415b      	adcs	r3, r3
 80045e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045ea:	4621      	mov	r1, r4
 80045ec:	eb12 0801 	adds.w	r8, r2, r1
 80045f0:	4629      	mov	r1, r5
 80045f2:	eb43 0901 	adc.w	r9, r3, r1
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800460a:	4690      	mov	r8, r2
 800460c:	4699      	mov	r9, r3
 800460e:	4623      	mov	r3, r4
 8004610:	eb18 0303 	adds.w	r3, r8, r3
 8004614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004618:	462b      	mov	r3, r5
 800461a:	eb49 0303 	adc.w	r3, r9, r3
 800461e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800462e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004636:	460b      	mov	r3, r1
 8004638:	18db      	adds	r3, r3, r3
 800463a:	653b      	str	r3, [r7, #80]	@ 0x50
 800463c:	4613      	mov	r3, r2
 800463e:	eb42 0303 	adc.w	r3, r2, r3
 8004642:	657b      	str	r3, [r7, #84]	@ 0x54
 8004644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800464c:	f7fb fe48 	bl	80002e0 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4b61      	ldr	r3, [pc, #388]	@ (80047dc <UART_SetConfig+0x2d4>)
 8004656:	fba3 2302 	umull	r2, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	011c      	lsls	r4, r3, #4
 800465e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004668:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800466c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004678:	415b      	adcs	r3, r3
 800467a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004680:	4641      	mov	r1, r8
 8004682:	eb12 0a01 	adds.w	sl, r2, r1
 8004686:	4649      	mov	r1, r9
 8004688:	eb43 0b01 	adc.w	fp, r3, r1
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800469c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046a0:	4692      	mov	sl, r2
 80046a2:	469b      	mov	fp, r3
 80046a4:	4643      	mov	r3, r8
 80046a6:	eb1a 0303 	adds.w	r3, sl, r3
 80046aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046ae:	464b      	mov	r3, r9
 80046b0:	eb4b 0303 	adc.w	r3, fp, r3
 80046b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046cc:	460b      	mov	r3, r1
 80046ce:	18db      	adds	r3, r3, r3
 80046d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046d2:	4613      	mov	r3, r2
 80046d4:	eb42 0303 	adc.w	r3, r2, r3
 80046d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046e2:	f7fb fdfd 	bl	80002e0 <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	4b3b      	ldr	r3, [pc, #236]	@ (80047dc <UART_SetConfig+0x2d4>)
 80046ee:	fba3 2301 	umull	r2, r3, r3, r1
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2264      	movs	r2, #100	@ 0x64
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	1acb      	subs	r3, r1, r3
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004702:	4b36      	ldr	r3, [pc, #216]	@ (80047dc <UART_SetConfig+0x2d4>)
 8004704:	fba3 2302 	umull	r2, r3, r3, r2
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004710:	441c      	add	r4, r3
 8004712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800471c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	1891      	adds	r1, r2, r2
 800472a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800472c:	415b      	adcs	r3, r3
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004734:	4641      	mov	r1, r8
 8004736:	1851      	adds	r1, r2, r1
 8004738:	6339      	str	r1, [r7, #48]	@ 0x30
 800473a:	4649      	mov	r1, r9
 800473c:	414b      	adcs	r3, r1
 800473e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800474c:	4659      	mov	r1, fp
 800474e:	00cb      	lsls	r3, r1, #3
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004756:	4651      	mov	r1, sl
 8004758:	00ca      	lsls	r2, r1, #3
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	4603      	mov	r3, r0
 8004760:	4642      	mov	r2, r8
 8004762:	189b      	adds	r3, r3, r2
 8004764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004768:	464b      	mov	r3, r9
 800476a:	460a      	mov	r2, r1
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004780:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004788:	460b      	mov	r3, r1
 800478a:	18db      	adds	r3, r3, r3
 800478c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800478e:	4613      	mov	r3, r2
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800479a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800479e:	f7fb fd9f 	bl	80002e0 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <UART_SetConfig+0x2d4>)
 80047a8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	2164      	movs	r1, #100	@ 0x64
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	3332      	adds	r3, #50	@ 0x32
 80047ba:	4a08      	ldr	r2, [pc, #32]	@ (80047dc <UART_SetConfig+0x2d4>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	f003 0207 	and.w	r2, r3, #7
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4422      	add	r2, r4
 80047ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047d0:	e106      	b.n	80049e0 <UART_SetConfig+0x4d8>
 80047d2:	bf00      	nop
 80047d4:	40011000 	.word	0x40011000
 80047d8:	40011400 	.word	0x40011400
 80047dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047f2:	4642      	mov	r2, r8
 80047f4:	464b      	mov	r3, r9
 80047f6:	1891      	adds	r1, r2, r2
 80047f8:	6239      	str	r1, [r7, #32]
 80047fa:	415b      	adcs	r3, r3
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004802:	4641      	mov	r1, r8
 8004804:	1854      	adds	r4, r2, r1
 8004806:	4649      	mov	r1, r9
 8004808:	eb43 0501 	adc.w	r5, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	00eb      	lsls	r3, r5, #3
 8004816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481a:	00e2      	lsls	r2, r4, #3
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	4643      	mov	r3, r8
 8004822:	18e3      	adds	r3, r4, r3
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004828:	464b      	mov	r3, r9
 800482a:	eb45 0303 	adc.w	r3, r5, r3
 800482e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800483e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800484e:	4629      	mov	r1, r5
 8004850:	008b      	lsls	r3, r1, #2
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004858:	4621      	mov	r1, r4
 800485a:	008a      	lsls	r2, r1, #2
 800485c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004860:	f7fb fd3e 	bl	80002e0 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4b60      	ldr	r3, [pc, #384]	@ (80049ec <UART_SetConfig+0x4e4>)
 800486a:	fba3 2302 	umull	r2, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	011c      	lsls	r4, r3, #4
 8004872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800487c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	1891      	adds	r1, r2, r2
 800488a:	61b9      	str	r1, [r7, #24]
 800488c:	415b      	adcs	r3, r3
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004894:	4641      	mov	r1, r8
 8004896:	1851      	adds	r1, r2, r1
 8004898:	6139      	str	r1, [r7, #16]
 800489a:	4649      	mov	r1, r9
 800489c:	414b      	adcs	r3, r1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048ac:	4659      	mov	r1, fp
 80048ae:	00cb      	lsls	r3, r1, #3
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b6:	4651      	mov	r1, sl
 80048b8:	00ca      	lsls	r2, r1, #3
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	4642      	mov	r2, r8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048c8:	464b      	mov	r3, r9
 80048ca:	460a      	mov	r2, r1
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048ec:	4649      	mov	r1, r9
 80048ee:	008b      	lsls	r3, r1, #2
 80048f0:	4641      	mov	r1, r8
 80048f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f6:	4641      	mov	r1, r8
 80048f8:	008a      	lsls	r2, r1, #2
 80048fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048fe:	f7fb fcef 	bl	80002e0 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4611      	mov	r1, r2
 8004908:	4b38      	ldr	r3, [pc, #224]	@ (80049ec <UART_SetConfig+0x4e4>)
 800490a:	fba3 2301 	umull	r2, r3, r3, r1
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2264      	movs	r2, #100	@ 0x64
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	1acb      	subs	r3, r1, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	@ 0x32
 800491c:	4a33      	ldr	r2, [pc, #204]	@ (80049ec <UART_SetConfig+0x4e4>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004928:	441c      	add	r4, r3
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	673b      	str	r3, [r7, #112]	@ 0x70
 8004932:	677a      	str	r2, [r7, #116]	@ 0x74
 8004934:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	415b      	adcs	r3, r3
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004948:	4641      	mov	r1, r8
 800494a:	1851      	adds	r1, r2, r1
 800494c:	6039      	str	r1, [r7, #0]
 800494e:	4649      	mov	r1, r9
 8004950:	414b      	adcs	r3, r1
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004960:	4659      	mov	r1, fp
 8004962:	00cb      	lsls	r3, r1, #3
 8004964:	4651      	mov	r1, sl
 8004966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496a:	4651      	mov	r1, sl
 800496c:	00ca      	lsls	r2, r1, #3
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	4603      	mov	r3, r0
 8004974:	4642      	mov	r2, r8
 8004976:	189b      	adds	r3, r3, r2
 8004978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800497a:	464b      	mov	r3, r9
 800497c:	460a      	mov	r2, r1
 800497e:	eb42 0303 	adc.w	r3, r2, r3
 8004982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	663b      	str	r3, [r7, #96]	@ 0x60
 800498e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800499c:	4649      	mov	r1, r9
 800499e:	008b      	lsls	r3, r1, #2
 80049a0:	4641      	mov	r1, r8
 80049a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a6:	4641      	mov	r1, r8
 80049a8:	008a      	lsls	r2, r1, #2
 80049aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049ae:	f7fb fc97 	bl	80002e0 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <UART_SetConfig+0x4e4>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2164      	movs	r1, #100	@ 0x64
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	3332      	adds	r3, #50	@ 0x32
 80049ca:	4a08      	ldr	r2, [pc, #32]	@ (80049ec <UART_SetConfig+0x4e4>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4422      	add	r2, r4
 80049de:	609a      	str	r2, [r3, #8]
}
 80049e0:	bf00      	nop
 80049e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049e6:	46bd      	mov	sp, r7
 80049e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <__NVIC_SetPriority>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db0a      	blt.n	8004a1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	490c      	ldr	r1, [pc, #48]	@ (8004a3c <__NVIC_SetPriority+0x4c>)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	0112      	lsls	r2, r2, #4
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	440b      	add	r3, r1
 8004a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a18:	e00a      	b.n	8004a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4908      	ldr	r1, [pc, #32]	@ (8004a40 <__NVIC_SetPriority+0x50>)
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	3b04      	subs	r3, #4
 8004a28:	0112      	lsls	r2, r2, #4
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	761a      	strb	r2, [r3, #24]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000e100 	.word	0xe000e100
 8004a40:	e000ed00 	.word	0xe000ed00

08004a44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <SysTick_Handler+0x1c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a4c:	f001 ffb2 	bl	80069b4 <xTaskGetSchedulerState>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d001      	beq.n	8004a5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a56:	f002 fda7 	bl	80075a8 <xPortSysTickHandler>
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	e000e010 	.word	0xe000e010

08004a64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a68:	2100      	movs	r1, #0
 8004a6a:	f06f 0004 	mvn.w	r0, #4
 8004a6e:	f7ff ffbf 	bl	80049f0 <__NVIC_SetPriority>
#endif
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a7e:	f3ef 8305 	mrs	r3, IPSR
 8004a82:	603b      	str	r3, [r7, #0]
  return(result);
 8004a84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a8a:	f06f 0305 	mvn.w	r3, #5
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	e00c      	b.n	8004aac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a92:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <osKernelInitialize+0x44>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d105      	bne.n	8004aa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a9a:	4b08      	ldr	r3, [pc, #32]	@ (8004abc <osKernelInitialize+0x44>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	e002      	b.n	8004aac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004aac:	687b      	ldr	r3, [r7, #4]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000244 	.word	0x20000244

08004ac0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac6:	f3ef 8305 	mrs	r3, IPSR
 8004aca:	603b      	str	r3, [r7, #0]
  return(result);
 8004acc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ad2:	f06f 0305 	mvn.w	r3, #5
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e010      	b.n	8004afc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ada:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <osKernelStart+0x48>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d109      	bne.n	8004af6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ae2:	f7ff ffbf 	bl	8004a64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ae6:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <osKernelStart+0x48>)
 8004ae8:	2202      	movs	r2, #2
 8004aea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004aec:	f001 fafc 	bl	80060e8 <vTaskStartScheduler>
      stat = osOK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	e002      	b.n	8004afc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004afc:	687b      	ldr	r3, [r7, #4]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000244 	.word	0x20000244

08004b0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08e      	sub	sp, #56	@ 0x38
 8004b10:	af04      	add	r7, sp, #16
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b1c:	f3ef 8305 	mrs	r3, IPSR
 8004b20:	617b      	str	r3, [r7, #20]
  return(result);
 8004b22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d17e      	bne.n	8004c26 <osThreadNew+0x11a>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d07b      	beq.n	8004c26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b32:	2318      	movs	r3, #24
 8004b34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d045      	beq.n	8004bd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <osThreadNew+0x48>
        name = attr->name;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <osThreadNew+0x6e>
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b38      	cmp	r3, #56	@ 0x38
 8004b6c:	d805      	bhi.n	8004b7a <osThreadNew+0x6e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <osThreadNew+0x72>
        return (NULL);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e054      	b.n	8004c28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00e      	beq.n	8004bb4 <osThreadNew+0xa8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b9c:	d90a      	bls.n	8004bb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d006      	beq.n	8004bb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <osThreadNew+0xa8>
        mem = 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	e010      	b.n	8004bd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10c      	bne.n	8004bd6 <osThreadNew+0xca>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d108      	bne.n	8004bd6 <osThreadNew+0xca>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <osThreadNew+0xca>
          mem = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	e001      	b.n	8004bd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d110      	bne.n	8004bfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004be4:	9202      	str	r2, [sp, #8]
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6a3a      	ldr	r2, [r7, #32]
 8004bf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f001 f810 	bl	8005c18 <xTaskCreateStatic>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	e013      	b.n	8004c26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d110      	bne.n	8004c26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	f107 0310 	add.w	r3, r7, #16
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f001 f85e 	bl	8005cd8 <xTaskCreate>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d001      	beq.n	8004c26 <osThreadNew+0x11a>
            hTask = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c26:	693b      	ldr	r3, [r7, #16]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	@ 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8004c34:	2000      	movs	r0, #0
 8004c36:	f001 f9ad 	bl	8005f94 <vTaskDelete>
#endif
  for (;;);
 8004c3a:	bf00      	nop
 8004c3c:	e7fd      	b.n	8004c3a <osThreadExit+0xa>

08004c3e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c46:	f3ef 8305 	mrs	r3, IPSR
 8004c4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <osDelay+0x1c>
    stat = osErrorISR;
 8004c52:	f06f 0305 	mvn.w	r3, #5
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e007      	b.n	8004c6a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 fa09 	bl	800607c <vTaskDelay>
    }
  }

  return (stat);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	@ 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c84:	f3ef 8305 	mrs	r3, IPSR
 8004c88:	613b      	str	r3, [r7, #16]
  return(result);
 8004c8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d15f      	bne.n	8004d50 <osMessageQueueNew+0xdc>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d05c      	beq.n	8004d50 <osMessageQueueNew+0xdc>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d059      	beq.n	8004d50 <osMessageQueueNew+0xdc>
    mem = -1;
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d029      	beq.n	8004cfc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d012      	beq.n	8004cd6 <osMessageQueueNew+0x62>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b4f      	cmp	r3, #79	@ 0x4f
 8004cb6:	d90e      	bls.n	8004cd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <osMessageQueueNew+0x62>
        mem = 1;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	e014      	b.n	8004d00 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d110      	bne.n	8004d00 <osMessageQueueNew+0x8c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10c      	bne.n	8004d00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d108      	bne.n	8004d00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <osMessageQueueNew+0x8c>
          mem = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e001      	b.n	8004d00 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d10b      	bne.n	8004d1e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2100      	movs	r1, #0
 8004d10:	9100      	str	r1, [sp, #0]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fa31 	bl	800517c <xQueueGenericCreateStatic>
 8004d1a:	61f8      	str	r0, [r7, #28]
 8004d1c:	e008      	b.n	8004d30 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d105      	bne.n	8004d30 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004d24:	2200      	movs	r2, #0
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 faa4 	bl	8005276 <xQueueGenericCreate>
 8004d2e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00c      	beq.n	8004d50 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e001      	b.n	8004d48 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004d48:	6979      	ldr	r1, [r7, #20]
 8004d4a:	69f8      	ldr	r0, [r7, #28]
 8004d4c:	f000 ff06 	bl	8005b5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004d50:	69fb      	ldr	r3, [r7, #28]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d74:	f3ef 8305 	mrs	r3, IPSR
 8004d78:	617b      	str	r3, [r7, #20]
  return(result);
 8004d7a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d028      	beq.n	8004dd2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <osMessageQueuePut+0x36>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <osMessageQueuePut+0x36>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004d92:	f06f 0303 	mvn.w	r3, #3
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	e038      	b.n	8004e0c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004d9e:	f107 0210 	add.w	r2, r7, #16
 8004da2:	2300      	movs	r3, #0
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	69b8      	ldr	r0, [r7, #24]
 8004da8:	f000 fbc6 	bl	8005538 <xQueueGenericSendFromISR>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d003      	beq.n	8004dba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004db2:	f06f 0302 	mvn.w	r3, #2
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	e028      	b.n	8004e0c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d025      	beq.n	8004e0c <osMessageQueuePut+0xb0>
 8004dc0:	4b15      	ldr	r3, [pc, #84]	@ (8004e18 <osMessageQueuePut+0xbc>)
 8004dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	e01c      	b.n	8004e0c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <osMessageQueuePut+0x82>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004dde:	f06f 0303 	mvn.w	r3, #3
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e012      	b.n	8004e0c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004de6:	2300      	movs	r3, #0
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	69b8      	ldr	r0, [r7, #24]
 8004dee:	f000 faa1 	bl	8005334 <xQueueGenericSend>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d009      	beq.n	8004e0c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004dfe:	f06f 0301 	mvn.w	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e002      	b.n	8004e0c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004e06:	f06f 0302 	mvn.w	r3, #2
 8004e0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e32:	f3ef 8305 	mrs	r3, IPSR
 8004e36:	617b      	str	r3, [r7, #20]
  return(result);
 8004e38:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <osMessageQueueGet+0x34>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <osMessageQueueGet+0x34>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004e50:	f06f 0303 	mvn.w	r3, #3
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	e037      	b.n	8004ec8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	461a      	mov	r2, r3
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f000 fce7 	bl	8005838 <xQueueReceiveFromISR>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d003      	beq.n	8004e78 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004e70:	f06f 0302 	mvn.w	r3, #2
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e027      	b.n	8004ec8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d024      	beq.n	8004ec8 <osMessageQueueGet+0xac>
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <osMessageQueueGet+0xb8>)
 8004e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	e01b      	b.n	8004ec8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <osMessageQueueGet+0x80>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004e9c:	f06f 0303 	mvn.w	r3, #3
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	e011      	b.n	8004ec8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	69b8      	ldr	r0, [r7, #24]
 8004eaa:	f000 fbe3 	bl	8005674 <xQueueReceive>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d009      	beq.n	8004ec8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004eba:	f06f 0301 	mvn.w	r3, #1
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	e002      	b.n	8004ec8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004ec2:	f06f 0302 	mvn.w	r3, #2
 8004ec6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004ec8:	69fb      	ldr	r3, [r7, #28]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a07      	ldr	r2, [pc, #28]	@ (8004f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4a06      	ldr	r2, [pc, #24]	@ (8004f08 <vApplicationGetIdleTaskMemory+0x30>)
 8004eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2280      	movs	r2, #128	@ 0x80
 8004ef4:	601a      	str	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000248 	.word	0x20000248
 8004f08:	200002f0 	.word	0x200002f0

08004f0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a07      	ldr	r2, [pc, #28]	@ (8004f38 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4a06      	ldr	r2, [pc, #24]	@ (8004f3c <vApplicationGetTimerTaskMemory+0x30>)
 8004f22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f2a:	601a      	str	r2, [r3, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	200004f0 	.word	0x200004f0
 8004f3c:	20000598 	.word	0x20000598

08004f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f103 0208 	add.w	r2, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 0208 	add.w	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f103 0208 	add.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d103      	bne.n	8005002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e00c      	b.n	800501c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3308      	adds	r3, #8
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e002      	b.n	8005010 <vListInsert+0x2e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d2f6      	bcs.n	800500a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6852      	ldr	r2, [r2, #4]
 8005074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d103      	bne.n	8005088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050d4:	f002 f9d8 	bl	8007488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e0:	68f9      	ldr	r1, [r7, #12]
 80050e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	441a      	add	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005104:	3b01      	subs	r3, #1
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	441a      	add	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	22ff      	movs	r2, #255	@ 0xff
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	22ff      	movs	r2, #255	@ 0xff
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d114      	bne.n	8005154 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01a      	beq.n	8005168 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3310      	adds	r3, #16
 8005136:	4618      	mov	r0, r3
 8005138:	f001 fa74 	bl	8006624 <xTaskRemoveFromEventList>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d012      	beq.n	8005168 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <xQueueGenericReset+0xd0>)
 8005144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	e009      	b.n	8005168 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3310      	adds	r3, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fef1 	bl	8004f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3324      	adds	r3, #36	@ 0x24
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff feec 	bl	8004f40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005168:	f002 f9c0 	bl	80074ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800516c:	2301      	movs	r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08e      	sub	sp, #56	@ 0x38
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <xQueueGenericCreateStatic+0x56>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <xQueueGenericCreateStatic+0x5a>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <xQueueGenericCreateStatic+0x5c>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <xQueueGenericCreateStatic+0x84>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <xQueueGenericCreateStatic+0x88>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <xQueueGenericCreateStatic+0x8a>
 8005204:	2300      	movs	r3, #0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	61fb      	str	r3, [r7, #28]
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	e7fd      	b.n	800521e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005222:	2350      	movs	r3, #80	@ 0x50
 8005224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b50      	cmp	r3, #80	@ 0x50
 800522a:	d00b      	beq.n	8005244 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61bb      	str	r3, [r7, #24]
}
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005244:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800524a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005258:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800525c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f840 	bl	80052ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800526e:	4618      	mov	r0, r3
 8005270:	3730      	adds	r7, #48	@ 0x30
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005276:	b580      	push	{r7, lr}
 8005278:	b08a      	sub	sp, #40	@ 0x28
 800527a:	af02      	add	r7, sp, #8
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	4613      	mov	r3, r2
 8005282:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	613b      	str	r3, [r7, #16]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	3350      	adds	r3, #80	@ 0x50
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 fa0b 	bl	80076cc <pvPortMalloc>
 80052b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d011      	beq.n	80052e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	3350      	adds	r3, #80	@ 0x50
 80052c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052d0:	79fa      	ldrb	r2, [r7, #7]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4613      	mov	r3, r2
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f805 	bl	80052ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052e2:	69bb      	ldr	r3, [r7, #24]
	}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d103      	bne.n	8005308 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e002      	b.n	800530e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800531a:	2101      	movs	r1, #1
 800531c:	69b8      	ldr	r0, [r7, #24]
 800531e:	f7ff fec3 	bl	80050a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	@ 0x38
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <xQueueGenericSend+0x34>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <xQueueGenericSend+0x42>
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <xQueueGenericSend+0x46>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <xQueueGenericSend+0x48>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <xQueueGenericSend+0x64>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d103      	bne.n	80053a6 <xQueueGenericSend+0x72>
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <xQueueGenericSend+0x76>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <xQueueGenericSend+0x78>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10b      	bne.n	80053c8 <xQueueGenericSend+0x94>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	623b      	str	r3, [r7, #32]
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	e7fd      	b.n	80053c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053c8:	f001 faf4 	bl	80069b4 <xTaskGetSchedulerState>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <xQueueGenericSend+0xa4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <xQueueGenericSend+0xa8>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <xQueueGenericSend+0xaa>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <xQueueGenericSend+0xc6>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	61fb      	str	r3, [r7, #28]
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053fa:	f002 f845 	bl	8007488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005406:	429a      	cmp	r2, r3
 8005408:	d302      	bcc.n	8005410 <xQueueGenericSend+0xdc>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d129      	bne.n	8005464 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005416:	f000 fa91 	bl	800593c <prvCopyDataToQueue>
 800541a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	3324      	adds	r3, #36	@ 0x24
 8005428:	4618      	mov	r0, r3
 800542a:	f001 f8fb 	bl	8006624 <xTaskRemoveFromEventList>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005434:	4b3f      	ldr	r3, [pc, #252]	@ (8005534 <xQueueGenericSend+0x200>)
 8005436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	e00a      	b.n	800545c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800544c:	4b39      	ldr	r3, [pc, #228]	@ (8005534 <xQueueGenericSend+0x200>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800545c:	f002 f846 	bl	80074ec <vPortExitCritical>
				return pdPASS;
 8005460:	2301      	movs	r3, #1
 8005462:	e063      	b.n	800552c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800546a:	f002 f83f 	bl	80074ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800546e:	2300      	movs	r3, #0
 8005470:	e05c      	b.n	800552c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005478:	f107 0314 	add.w	r3, r7, #20
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f935 	bl	80066ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005482:	2301      	movs	r3, #1
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005486:	f002 f831 	bl	80074ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800548a:	f000 fe9d 	bl	80061c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800548e:	f001 fffb 	bl	8007488 <vPortEnterCritical>
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005498:	b25b      	sxtb	r3, r3
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d103      	bne.n	80054a8 <xQueueGenericSend+0x174>
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d103      	bne.n	80054be <xQueueGenericSend+0x18a>
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054be:	f002 f815 	bl	80074ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 f924 	bl	8006718 <xTaskCheckForTimeOut>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d124      	bne.n	8005520 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054d8:	f000 fb28 	bl	8005b2c <prvIsQueueFull>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	3310      	adds	r3, #16
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 f848 	bl	8006580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054f2:	f000 fab3 	bl	8005a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054f6:	f000 fe75 	bl	80061e4 <xTaskResumeAll>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f af7c 	bne.w	80053fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005502:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <xQueueGenericSend+0x200>)
 8005504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	e772      	b.n	80053fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005516:	f000 faa1 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800551a:	f000 fe63 	bl	80061e4 <xTaskResumeAll>
 800551e:	e76c      	b.n	80053fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005522:	f000 fa9b 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005526:	f000 fe5d 	bl	80061e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800552a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800552c:	4618      	mov	r0, r3
 800552e:	3738      	adds	r7, #56	@ 0x38
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b090      	sub	sp, #64	@ 0x40
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <xQueueGenericSendFromISR+0x3e>
 800556e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <xQueueGenericSendFromISR+0x42>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <xQueueGenericSendFromISR+0x44>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d103      	bne.n	80055a6 <xQueueGenericSendFromISR+0x6e>
 800559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <xQueueGenericSendFromISR+0x72>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <xQueueGenericSendFromISR+0x74>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	623b      	str	r3, [r7, #32]
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055c8:	f002 f83e 	bl	8007648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055cc:	f3ef 8211 	mrs	r2, BASEPRI
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <xQueueGenericSendFromISR+0xc2>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d12f      	bne.n	800565a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005600:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005610:	f000 f994 	bl	800593c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005614:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d112      	bne.n	8005644 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d016      	beq.n	8005654 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	3324      	adds	r3, #36	@ 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fffa 	bl	8006624 <xTaskRemoveFromEventList>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00e      	beq.n	8005654 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e007      	b.n	8005654 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005644:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005648:	3301      	adds	r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	b25a      	sxtb	r2, r3
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005654:	2301      	movs	r3, #1
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005658:	e001      	b.n	800565e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800565a:	2300      	movs	r3, #0
 800565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800565e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005660:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005668:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800566a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800566c:	4618      	mov	r0, r3
 800566e:	3740      	adds	r7, #64	@ 0x40
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08c      	sub	sp, #48	@ 0x30
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <xQueueReceive+0x32>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	623b      	str	r3, [r7, #32]
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	e7fd      	b.n	80056a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <xQueueReceive+0x40>
 80056ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <xQueueReceive+0x44>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <xQueueReceive+0x46>
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <xQueueReceive+0x62>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	61fb      	str	r3, [r7, #28]
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056d6:	f001 f96d 	bl	80069b4 <xTaskGetSchedulerState>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <xQueueReceive+0x72>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <xQueueReceive+0x76>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xQueueReceive+0x78>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <xQueueReceive+0x94>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005708:	f001 febe 	bl	8007488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01f      	beq.n	8005758 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800571c:	f000 f978 	bl	8005a10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00f      	beq.n	8005750 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005732:	3310      	adds	r3, #16
 8005734:	4618      	mov	r0, r3
 8005736:	f000 ff75 	bl	8006624 <xTaskRemoveFromEventList>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005740:	4b3c      	ldr	r3, [pc, #240]	@ (8005834 <xQueueReceive+0x1c0>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005750:	f001 fecc 	bl	80074ec <vPortExitCritical>
				return pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	e069      	b.n	800582c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800575e:	f001 fec5 	bl	80074ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005762:	2300      	movs	r3, #0
 8005764:	e062      	b.n	800582c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800576c:	f107 0310 	add.w	r3, r7, #16
 8005770:	4618      	mov	r0, r3
 8005772:	f000 ffbb 	bl	80066ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005776:	2301      	movs	r3, #1
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800577a:	f001 feb7 	bl	80074ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800577e:	f000 fd23 	bl	80061c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005782:	f001 fe81 	bl	8007488 <vPortEnterCritical>
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d103      	bne.n	800579c <xQueueReceive+0x128>
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057a2:	b25b      	sxtb	r3, r3
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d103      	bne.n	80057b2 <xQueueReceive+0x13e>
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057b2:	f001 fe9b 	bl	80074ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b6:	1d3a      	adds	r2, r7, #4
 80057b8:	f107 0310 	add.w	r3, r7, #16
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 ffaa 	bl	8006718 <xTaskCheckForTimeOut>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d123      	bne.n	8005812 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057cc:	f000 f998 	bl	8005b00 <prvIsQueueEmpty>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d017      	beq.n	8005806 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d8:	3324      	adds	r3, #36	@ 0x24
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fece 	bl	8006580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057e6:	f000 f939 	bl	8005a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057ea:	f000 fcfb 	bl	80061e4 <xTaskResumeAll>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d189      	bne.n	8005708 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80057f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005834 <xQueueReceive+0x1c0>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	e780      	b.n	8005708 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005808:	f000 f928 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800580c:	f000 fcea 	bl	80061e4 <xTaskResumeAll>
 8005810:	e77a      	b.n	8005708 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005814:	f000 f922 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005818:	f000 fce4 	bl	80061e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800581c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800581e:	f000 f96f 	bl	8005b00 <prvIsQueueEmpty>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	f43f af6f 	beq.w	8005708 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800582a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800582c:	4618      	mov	r0, r3
 800582e:	3730      	adds	r7, #48	@ 0x30
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	@ 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	623b      	str	r3, [r7, #32]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d103      	bne.n	8005874 <xQueueReceiveFromISR+0x3c>
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <xQueueReceiveFromISR+0x40>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <xQueueReceiveFromISR+0x42>
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	61fb      	str	r3, [r7, #28]
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005896:	f001 fed7 	bl	8007648 <vPortValidateInterruptPriority>
	__asm volatile
 800589a:	f3ef 8211 	mrs	r2, BASEPRI
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	61ba      	str	r2, [r7, #24]
 80058b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d02f      	beq.n	8005922 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058d0:	f000 f89e 	bl	8005a10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	1e5a      	subs	r2, r3, #1
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d112      	bne.n	800590c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d016      	beq.n	800591c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	3310      	adds	r3, #16
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fe96 	bl	8006624 <xTaskRemoveFromEventList>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00e      	beq.n	800591c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e007      	b.n	800591c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800590c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005910:	3301      	adds	r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	b25a      	sxtb	r2, r3
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800591c:	2301      	movs	r3, #1
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005920:	e001      	b.n	8005926 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	613b      	str	r3, [r7, #16]
	__asm volatile
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f383 8811 	msr	BASEPRI, r3
}
 8005930:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005934:	4618      	mov	r0, r3
 8005936:	3738      	adds	r7, #56	@ 0x38
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d14d      	bne.n	80059fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f001 f842 	bl	80069f0 <xTaskPriorityDisinherit>
 800596c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	e043      	b.n	80059fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d119      	bne.n	80059b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6858      	ldr	r0, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005984:	461a      	mov	r2, r3
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	f002 f99c 	bl	8007cc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d32b      	bcc.n	80059fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	e026      	b.n	80059fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68d8      	ldr	r0, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	461a      	mov	r2, r3
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	f002 f982 	bl	8007cc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	425b      	negs	r3, r3
 80059ca:	441a      	add	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d207      	bcs.n	80059ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	425b      	negs	r3, r3
 80059e6:	441a      	add	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d105      	bne.n	80059fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a06:	697b      	ldr	r3, [r7, #20]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d018      	beq.n	8005a54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	441a      	add	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d303      	bcc.n	8005a44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68d9      	ldr	r1, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6838      	ldr	r0, [r7, #0]
 8005a50:	f002 f938 	bl	8007cc4 <memcpy>
	}
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a64:	f001 fd10 	bl	8007488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a70:	e011      	b.n	8005a96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d012      	beq.n	8005aa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3324      	adds	r3, #36	@ 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fdd0 	bl	8006624 <xTaskRemoveFromEventList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a8a:	f000 fea9 	bl	80067e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dce9      	bgt.n	8005a72 <prvUnlockQueue+0x16>
 8005a9e:	e000      	b.n	8005aa2 <prvUnlockQueue+0x46>
					break;
 8005aa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	22ff      	movs	r2, #255	@ 0xff
 8005aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005aaa:	f001 fd1f 	bl	80074ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aae:	f001 fceb 	bl	8007488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aba:	e011      	b.n	8005ae0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d012      	beq.n	8005aea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3310      	adds	r3, #16
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fdab 	bl	8006624 <xTaskRemoveFromEventList>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ad4:	f000 fe84 	bl	80067e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dce9      	bgt.n	8005abc <prvUnlockQueue+0x60>
 8005ae8:	e000      	b.n	8005aec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	22ff      	movs	r2, #255	@ 0xff
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005af4:	f001 fcfa 	bl	80074ec <vPortExitCritical>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b08:	f001 fcbe 	bl	8007488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e001      	b.n	8005b1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b1e:	f001 fce5 	bl	80074ec <vPortExitCritical>

	return xReturn;
 8005b22:	68fb      	ldr	r3, [r7, #12]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b34:	f001 fca8 	bl	8007488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d102      	bne.n	8005b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e001      	b.n	8005b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b4e:	f001 fccd 	bl	80074ec <vPortExitCritical>

	return xReturn;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e014      	b.n	8005b96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8005bac <vQueueAddToRegistry+0x50>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b78:	490c      	ldr	r1, [pc, #48]	@ (8005bac <vQueueAddToRegistry+0x50>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b82:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <vQueueAddToRegistry+0x50>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b8e:	e006      	b.n	8005b9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	d9e7      	bls.n	8005b6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000998 	.word	0x20000998

08005bb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bc0:	f001 fc62 	bl	8007488 <vPortEnterCritical>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bca:	b25b      	sxtb	r3, r3
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d103      	bne.n	8005bda <vQueueWaitForMessageRestricted+0x2a>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005be0:	b25b      	sxtb	r3, r3
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d103      	bne.n	8005bf0 <vQueueWaitForMessageRestricted+0x40>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bf0:	f001 fc7c 	bl	80074ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3324      	adds	r3, #36	@ 0x24
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fce1 	bl	80065cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c0a:	6978      	ldr	r0, [r7, #20]
 8005c0c:	f7ff ff26 	bl	8005a5c <prvUnlockQueue>
	}
 8005c10:	bf00      	nop
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	@ 0x38
 8005c1c:	af04      	add	r7, sp, #16
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	623b      	str	r3, [r7, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	e7fd      	b.n	8005c40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	61fb      	str	r3, [r7, #28]
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	e7fd      	b.n	8005c5e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c62:	23a8      	movs	r3, #168	@ 0xa8
 8005c64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2ba8      	cmp	r3, #168	@ 0xa8
 8005c6a:	d00b      	beq.n	8005c84 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	61bb      	str	r3, [r7, #24]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01e      	beq.n	8005cca <xTaskCreateStatic+0xb2>
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01b      	beq.n	8005cca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9303      	str	r3, [sp, #12]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	9302      	str	r3, [sp, #8]
 8005cac:	f107 0314 	add.w	r3, r7, #20
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f851 	bl	8005d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cc4:	f000 f8f6 	bl	8005eb4 <prvAddNewTaskToReadyList>
 8005cc8:	e001      	b.n	8005cce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cce:	697b      	ldr	r3, [r7, #20]
	}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3728      	adds	r7, #40	@ 0x28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	@ 0x30
 8005cdc:	af04      	add	r7, sp, #16
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 fced 	bl	80076cc <pvPortMalloc>
 8005cf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00e      	beq.n	8005d18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cfa:	20a8      	movs	r0, #168	@ 0xa8
 8005cfc:	f001 fce6 	bl	80076cc <pvPortMalloc>
 8005d00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d0e:	e005      	b.n	8005d1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d10:	6978      	ldr	r0, [r7, #20]
 8005d12:	f001 fdaf 	bl	8007874 <vPortFree>
 8005d16:	e001      	b.n	8005d1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d017      	beq.n	8005d52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9303      	str	r3, [sp, #12]
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	9302      	str	r3, [sp, #8]
 8005d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f80f 	bl	8005d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d46:	69f8      	ldr	r0, [r7, #28]
 8005d48:	f000 f8b4 	bl	8005eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	e002      	b.n	8005d58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d52:	f04f 33ff 	mov.w	r3, #4294967295
 8005d56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d58:	69bb      	ldr	r3, [r7, #24]
	}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	21a5      	movs	r1, #165	@ 0xa5
 8005d7e:	f001 fefd 	bl	8007b7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f023 0307 	bic.w	r3, r3, #7
 8005d9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	617b      	str	r3, [r7, #20]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01f      	beq.n	8005e04 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e012      	b.n	8005df0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	7819      	ldrb	r1, [r3, #0]
 8005dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3334      	adds	r3, #52	@ 0x34
 8005dda:	460a      	mov	r2, r1
 8005ddc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3301      	adds	r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d9e9      	bls.n	8005dca <prvInitialiseNewTask+0x66>
 8005df6:	e000      	b.n	8005dfa <prvInitialiseNewTask+0x96>
			{
				break;
 8005df8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e02:	e003      	b.n	8005e0c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	2b37      	cmp	r3, #55	@ 0x37
 8005e10:	d901      	bls.n	8005e16 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e12:	2337      	movs	r3, #55	@ 0x37
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	2200      	movs	r2, #0
 8005e26:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff f8a7 	bl	8004f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	3318      	adds	r3, #24
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff f8a2 	bl	8004f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	3354      	adds	r3, #84	@ 0x54
 8005e66:	224c      	movs	r2, #76	@ 0x4c
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 fe86 	bl	8007b7c <memset>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea8 <prvInitialiseNewTask+0x144>)
 8005e74:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	4a0c      	ldr	r2, [pc, #48]	@ (8005eac <prvInitialiseNewTask+0x148>)
 8005e7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005eb0 <prvInitialiseNewTask+0x14c>)
 8005e80:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	69b8      	ldr	r0, [r7, #24]
 8005e88:	f001 f9d0 	bl	800722c <pxPortInitialiseStack>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e9e:	bf00      	nop
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20004c2c 	.word	0x20004c2c
 8005eac:	20004c94 	.word	0x20004c94
 8005eb0:	20004cfc 	.word	0x20004cfc

08005eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ebc:	f001 fae4 	bl	8007488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f78 <prvAddNewTaskToReadyList+0xc4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f78 <prvAddNewTaskToReadyList+0xc4>)
 8005ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eca:	4b2c      	ldr	r3, [pc, #176]	@ (8005f7c <prvAddNewTaskToReadyList+0xc8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f7c <prvAddNewTaskToReadyList+0xc8>)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ed8:	4b27      	ldr	r3, [pc, #156]	@ (8005f78 <prvAddNewTaskToReadyList+0xc4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d110      	bne.n	8005f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ee0:	f000 fca4 	bl	800682c <prvInitialiseTaskLists>
 8005ee4:	e00d      	b.n	8005f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ee6:	4b26      	ldr	r3, [pc, #152]	@ (8005f80 <prvAddNewTaskToReadyList+0xcc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eee:	4b23      	ldr	r3, [pc, #140]	@ (8005f7c <prvAddNewTaskToReadyList+0xc8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d802      	bhi.n	8005f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005efc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f7c <prvAddNewTaskToReadyList+0xc8>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f02:	4b20      	ldr	r3, [pc, #128]	@ (8005f84 <prvAddNewTaskToReadyList+0xd0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	4a1e      	ldr	r2, [pc, #120]	@ (8005f84 <prvAddNewTaskToReadyList+0xd0>)
 8005f0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f84 <prvAddNewTaskToReadyList+0xd0>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f18:	4b1b      	ldr	r3, [pc, #108]	@ (8005f88 <prvAddNewTaskToReadyList+0xd4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d903      	bls.n	8005f28 <prvAddNewTaskToReadyList+0x74>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <prvAddNewTaskToReadyList+0xd4>)
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <prvAddNewTaskToReadyList+0xd8>)
 8005f36:	441a      	add	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f7ff f82b 	bl	8004f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f44:	f001 fad2 	bl	80074ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f48:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <prvAddNewTaskToReadyList+0xcc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00e      	beq.n	8005f6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f50:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <prvAddNewTaskToReadyList+0xc8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d207      	bcs.n	8005f6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f90 <prvAddNewTaskToReadyList+0xdc>)
 8005f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000eac 	.word	0x20000eac
 8005f7c:	200009d8 	.word	0x200009d8
 8005f80:	20000eb8 	.word	0x20000eb8
 8005f84:	20000ec8 	.word	0x20000ec8
 8005f88:	20000eb4 	.word	0x20000eb4
 8005f8c:	200009dc 	.word	0x200009dc
 8005f90:	e000ed04 	.word	0xe000ed04

08005f94 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f9c:	f001 fa74 	bl	8007488 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <vTaskDelete+0x18>
 8005fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800605c <vTaskDelete+0xc8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	e000      	b.n	8005fae <vTaskDelete+0x1a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff f84d 	bl	8005054 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d004      	beq.n	8005fcc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff f844 	bl	8005054 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005fcc:	4b24      	ldr	r3, [pc, #144]	@ (8006060 <vTaskDelete+0xcc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	4a23      	ldr	r2, [pc, #140]	@ (8006060 <vTaskDelete+0xcc>)
 8005fd4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005fd6:	4b21      	ldr	r3, [pc, #132]	@ (800605c <vTaskDelete+0xc8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d10b      	bne.n	8005ff8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	481f      	ldr	r0, [pc, #124]	@ (8006064 <vTaskDelete+0xd0>)
 8005fe8:	f7fe ffd7 	bl	8004f9a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005fec:	4b1e      	ldr	r3, [pc, #120]	@ (8006068 <vTaskDelete+0xd4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8006068 <vTaskDelete+0xd4>)
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	e009      	b.n	800600c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800606c <vTaskDelete+0xd8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800606c <vTaskDelete+0xd8>)
 8006000:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fc80 	bl	8006908 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006008:	f000 fcb4 	bl	8006974 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800600c:	f001 fa6e 	bl	80074ec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006010:	4b17      	ldr	r3, [pc, #92]	@ (8006070 <vTaskDelete+0xdc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01c      	beq.n	8006052 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8006018:	4b10      	ldr	r3, [pc, #64]	@ (800605c <vTaskDelete+0xc8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	429a      	cmp	r2, r3
 8006020:	d117      	bne.n	8006052 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006022:	4b14      	ldr	r3, [pc, #80]	@ (8006074 <vTaskDelete+0xe0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <vTaskDelete+0xae>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	60bb      	str	r3, [r7, #8]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <vTaskDelete+0xe4>)
 8006044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200009d8 	.word	0x200009d8
 8006060:	20000ec8 	.word	0x20000ec8
 8006064:	20000e80 	.word	0x20000e80
 8006068:	20000e94 	.word	0x20000e94
 800606c:	20000eac 	.word	0x20000eac
 8006070:	20000eb8 	.word	0x20000eb8
 8006074:	20000ed4 	.word	0x20000ed4
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d018      	beq.n	80060c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800608e:	4b14      	ldr	r3, [pc, #80]	@ (80060e0 <vTaskDelay+0x64>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <vTaskDelay+0x32>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60bb      	str	r3, [r7, #8]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060ae:	f000 f88b 	bl	80061c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060b2:	2100      	movs	r1, #0
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fd0b 	bl	8006ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060ba:	f000 f893 	bl	80061e4 <xTaskResumeAll>
 80060be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d107      	bne.n	80060d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80060c6:	4b07      	ldr	r3, [pc, #28]	@ (80060e4 <vTaskDelay+0x68>)
 80060c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000ed4 	.word	0x20000ed4
 80060e4:	e000ed04 	.word	0xe000ed04

080060e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	@ 0x28
 80060ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060f6:	463a      	mov	r2, r7
 80060f8:	1d39      	adds	r1, r7, #4
 80060fa:	f107 0308 	add.w	r3, r7, #8
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe feea 	bl	8004ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	9202      	str	r2, [sp, #8]
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	2300      	movs	r3, #0
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	2300      	movs	r3, #0
 8006114:	460a      	mov	r2, r1
 8006116:	4924      	ldr	r1, [pc, #144]	@ (80061a8 <vTaskStartScheduler+0xc0>)
 8006118:	4824      	ldr	r0, [pc, #144]	@ (80061ac <vTaskStartScheduler+0xc4>)
 800611a:	f7ff fd7d 	bl	8005c18 <xTaskCreateStatic>
 800611e:	4603      	mov	r3, r0
 8006120:	4a23      	ldr	r2, [pc, #140]	@ (80061b0 <vTaskStartScheduler+0xc8>)
 8006122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006124:	4b22      	ldr	r3, [pc, #136]	@ (80061b0 <vTaskStartScheduler+0xc8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	e001      	b.n	8006136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d102      	bne.n	8006142 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800613c:	f000 fd1c 	bl	8006b78 <xTimerCreateTimerTask>
 8006140:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d11b      	bne.n	8006180 <vTaskStartScheduler+0x98>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	613b      	str	r3, [r7, #16]
}
 800615a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800615c:	4b15      	ldr	r3, [pc, #84]	@ (80061b4 <vTaskStartScheduler+0xcc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3354      	adds	r3, #84	@ 0x54
 8006162:	4a15      	ldr	r2, [pc, #84]	@ (80061b8 <vTaskStartScheduler+0xd0>)
 8006164:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006166:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <vTaskStartScheduler+0xd4>)
 8006168:	f04f 32ff 	mov.w	r2, #4294967295
 800616c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800616e:	4b14      	ldr	r3, [pc, #80]	@ (80061c0 <vTaskStartScheduler+0xd8>)
 8006170:	2201      	movs	r2, #1
 8006172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006174:	4b13      	ldr	r3, [pc, #76]	@ (80061c4 <vTaskStartScheduler+0xdc>)
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800617a:	f001 f8e1 	bl	8007340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800617e:	e00f      	b.n	80061a0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d10b      	bne.n	80061a0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	60fb      	str	r3, [r7, #12]
}
 800619a:	bf00      	nop
 800619c:	bf00      	nop
 800619e:	e7fd      	b.n	800619c <vTaskStartScheduler+0xb4>
}
 80061a0:	bf00      	nop
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	080092b0 	.word	0x080092b0
 80061ac:	080067f9 	.word	0x080067f9
 80061b0:	20000ed0 	.word	0x20000ed0
 80061b4:	200009d8 	.word	0x200009d8
 80061b8:	20000018 	.word	0x20000018
 80061bc:	20000ecc 	.word	0x20000ecc
 80061c0:	20000eb8 	.word	0x20000eb8
 80061c4:	20000eb0 	.word	0x20000eb0

080061c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061cc:	4b04      	ldr	r3, [pc, #16]	@ (80061e0 <vTaskSuspendAll+0x18>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	4a03      	ldr	r2, [pc, #12]	@ (80061e0 <vTaskSuspendAll+0x18>)
 80061d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061d6:	bf00      	nop
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	20000ed4 	.word	0x20000ed4

080061e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061f2:	4b42      	ldr	r3, [pc, #264]	@ (80062fc <xTaskResumeAll+0x118>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <xTaskResumeAll+0x2e>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	603b      	str	r3, [r7, #0]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006212:	f001 f939 	bl	8007488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006216:	4b39      	ldr	r3, [pc, #228]	@ (80062fc <xTaskResumeAll+0x118>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3b01      	subs	r3, #1
 800621c:	4a37      	ldr	r2, [pc, #220]	@ (80062fc <xTaskResumeAll+0x118>)
 800621e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006220:	4b36      	ldr	r3, [pc, #216]	@ (80062fc <xTaskResumeAll+0x118>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d162      	bne.n	80062ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006228:	4b35      	ldr	r3, [pc, #212]	@ (8006300 <xTaskResumeAll+0x11c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d05e      	beq.n	80062ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006230:	e02f      	b.n	8006292 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006232:	4b34      	ldr	r3, [pc, #208]	@ (8006304 <xTaskResumeAll+0x120>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3318      	adds	r3, #24
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe ff08 	bl	8005054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3304      	adds	r3, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe ff03 	bl	8005054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006252:	4b2d      	ldr	r3, [pc, #180]	@ (8006308 <xTaskResumeAll+0x124>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d903      	bls.n	8006262 <xTaskResumeAll+0x7e>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	4a2a      	ldr	r2, [pc, #168]	@ (8006308 <xTaskResumeAll+0x124>)
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4a27      	ldr	r2, [pc, #156]	@ (800630c <xTaskResumeAll+0x128>)
 8006270:	441a      	add	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3304      	adds	r3, #4
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f7fe fe8e 	bl	8004f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006282:	4b23      	ldr	r3, [pc, #140]	@ (8006310 <xTaskResumeAll+0x12c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	429a      	cmp	r2, r3
 800628a:	d302      	bcc.n	8006292 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800628c:	4b21      	ldr	r3, [pc, #132]	@ (8006314 <xTaskResumeAll+0x130>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006292:	4b1c      	ldr	r3, [pc, #112]	@ (8006304 <xTaskResumeAll+0x120>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1cb      	bne.n	8006232 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062a0:	f000 fb68 	bl	8006974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006318 <xTaskResumeAll+0x134>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d010      	beq.n	80062d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062b0:	f000 f846 	bl	8006340 <xTaskIncrementTick>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80062ba:	4b16      	ldr	r3, [pc, #88]	@ (8006314 <xTaskResumeAll+0x130>)
 80062bc:	2201      	movs	r2, #1
 80062be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f1      	bne.n	80062b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80062cc:	4b12      	ldr	r3, [pc, #72]	@ (8006318 <xTaskResumeAll+0x134>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062d2:	4b10      	ldr	r3, [pc, #64]	@ (8006314 <xTaskResumeAll+0x130>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062da:	2301      	movs	r3, #1
 80062dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062de:	4b0f      	ldr	r3, [pc, #60]	@ (800631c <xTaskResumeAll+0x138>)
 80062e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062ee:	f001 f8fd 	bl	80074ec <vPortExitCritical>

	return xAlreadyYielded;
 80062f2:	68bb      	ldr	r3, [r7, #8]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000ed4 	.word	0x20000ed4
 8006300:	20000eac 	.word	0x20000eac
 8006304:	20000e6c 	.word	0x20000e6c
 8006308:	20000eb4 	.word	0x20000eb4
 800630c:	200009dc 	.word	0x200009dc
 8006310:	200009d8 	.word	0x200009d8
 8006314:	20000ec0 	.word	0x20000ec0
 8006318:	20000ebc 	.word	0x20000ebc
 800631c:	e000ed04 	.word	0xe000ed04

08006320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006326:	4b05      	ldr	r3, [pc, #20]	@ (800633c <xTaskGetTickCount+0x1c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800632c:	687b      	ldr	r3, [r7, #4]
}
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000eb0 	.word	0x20000eb0

08006340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634a:	4b4f      	ldr	r3, [pc, #316]	@ (8006488 <xTaskIncrementTick+0x148>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 8090 	bne.w	8006474 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006354:	4b4d      	ldr	r3, [pc, #308]	@ (800648c <xTaskIncrementTick+0x14c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3301      	adds	r3, #1
 800635a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800635c:	4a4b      	ldr	r2, [pc, #300]	@ (800648c <xTaskIncrementTick+0x14c>)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d121      	bne.n	80063ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006368:	4b49      	ldr	r3, [pc, #292]	@ (8006490 <xTaskIncrementTick+0x150>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	603b      	str	r3, [r7, #0]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xTaskIncrementTick+0x46>
 800638a:	4b41      	ldr	r3, [pc, #260]	@ (8006490 <xTaskIncrementTick+0x150>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	4b40      	ldr	r3, [pc, #256]	@ (8006494 <xTaskIncrementTick+0x154>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a3e      	ldr	r2, [pc, #248]	@ (8006490 <xTaskIncrementTick+0x150>)
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	4a3e      	ldr	r2, [pc, #248]	@ (8006494 <xTaskIncrementTick+0x154>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b3e      	ldr	r3, [pc, #248]	@ (8006498 <xTaskIncrementTick+0x158>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3301      	adds	r3, #1
 80063a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006498 <xTaskIncrementTick+0x158>)
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	f000 fae4 	bl	8006974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ac:	4b3b      	ldr	r3, [pc, #236]	@ (800649c <xTaskIncrementTick+0x15c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d349      	bcc.n	800644a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063b6:	4b36      	ldr	r3, [pc, #216]	@ (8006490 <xTaskIncrementTick+0x150>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c0:	4b36      	ldr	r3, [pc, #216]	@ (800649c <xTaskIncrementTick+0x15c>)
 80063c2:	f04f 32ff 	mov.w	r2, #4294967295
 80063c6:	601a      	str	r2, [r3, #0]
					break;
 80063c8:	e03f      	b.n	800644a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ca:	4b31      	ldr	r3, [pc, #196]	@ (8006490 <xTaskIncrementTick+0x150>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d203      	bcs.n	80063ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063e2:	4a2e      	ldr	r2, [pc, #184]	@ (800649c <xTaskIncrementTick+0x15c>)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063e8:	e02f      	b.n	800644a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fe30 	bl	8005054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	3318      	adds	r3, #24
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fe27 	bl	8005054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640a:	4b25      	ldr	r3, [pc, #148]	@ (80064a0 <xTaskIncrementTick+0x160>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d903      	bls.n	800641a <xTaskIncrementTick+0xda>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	4a22      	ldr	r2, [pc, #136]	@ (80064a0 <xTaskIncrementTick+0x160>)
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4a1f      	ldr	r2, [pc, #124]	@ (80064a4 <xTaskIncrementTick+0x164>)
 8006428:	441a      	add	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fe fdb2 	bl	8004f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643a:	4b1b      	ldr	r3, [pc, #108]	@ (80064a8 <xTaskIncrementTick+0x168>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	429a      	cmp	r2, r3
 8006442:	d3b8      	bcc.n	80063b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006448:	e7b5      	b.n	80063b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800644a:	4b17      	ldr	r3, [pc, #92]	@ (80064a8 <xTaskIncrementTick+0x168>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006450:	4914      	ldr	r1, [pc, #80]	@ (80064a4 <xTaskIncrementTick+0x164>)
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d901      	bls.n	8006466 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006466:	4b11      	ldr	r3, [pc, #68]	@ (80064ac <xTaskIncrementTick+0x16c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800646e:	2301      	movs	r3, #1
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e004      	b.n	800647e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006474:	4b0e      	ldr	r3, [pc, #56]	@ (80064b0 <xTaskIncrementTick+0x170>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	4a0d      	ldr	r2, [pc, #52]	@ (80064b0 <xTaskIncrementTick+0x170>)
 800647c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800647e:	697b      	ldr	r3, [r7, #20]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000ed4 	.word	0x20000ed4
 800648c:	20000eb0 	.word	0x20000eb0
 8006490:	20000e64 	.word	0x20000e64
 8006494:	20000e68 	.word	0x20000e68
 8006498:	20000ec4 	.word	0x20000ec4
 800649c:	20000ecc 	.word	0x20000ecc
 80064a0:	20000eb4 	.word	0x20000eb4
 80064a4:	200009dc 	.word	0x200009dc
 80064a8:	200009d8 	.word	0x200009d8
 80064ac:	20000ec0 	.word	0x20000ec0
 80064b0:	20000ebc 	.word	0x20000ebc

080064b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006568 <vTaskSwitchContext+0xb4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064c2:	4b2a      	ldr	r3, [pc, #168]	@ (800656c <vTaskSwitchContext+0xb8>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064c8:	e047      	b.n	800655a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80064ca:	4b28      	ldr	r3, [pc, #160]	@ (800656c <vTaskSwitchContext+0xb8>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d0:	4b27      	ldr	r3, [pc, #156]	@ (8006570 <vTaskSwitchContext+0xbc>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e011      	b.n	80064fc <vTaskSwitchContext+0x48>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <vTaskSwitchContext+0x3e>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	491d      	ldr	r1, [pc, #116]	@ (8006574 <vTaskSwitchContext+0xc0>)
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0e3      	beq.n	80064d8 <vTaskSwitchContext+0x24>
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4a16      	ldr	r2, [pc, #88]	@ (8006574 <vTaskSwitchContext+0xc0>)
 800651c:	4413      	add	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	3308      	adds	r3, #8
 8006532:	429a      	cmp	r2, r3
 8006534:	d104      	bne.n	8006540 <vTaskSwitchContext+0x8c>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	605a      	str	r2, [r3, #4]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	4a0c      	ldr	r2, [pc, #48]	@ (8006578 <vTaskSwitchContext+0xc4>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	4a09      	ldr	r2, [pc, #36]	@ (8006570 <vTaskSwitchContext+0xbc>)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006550:	4b09      	ldr	r3, [pc, #36]	@ (8006578 <vTaskSwitchContext+0xc4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3354      	adds	r3, #84	@ 0x54
 8006556:	4a09      	ldr	r2, [pc, #36]	@ (800657c <vTaskSwitchContext+0xc8>)
 8006558:	6013      	str	r3, [r2, #0]
}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20000ed4 	.word	0x20000ed4
 800656c:	20000ec0 	.word	0x20000ec0
 8006570:	20000eb4 	.word	0x20000eb4
 8006574:	200009dc 	.word	0x200009dc
 8006578:	200009d8 	.word	0x200009d8
 800657c:	20000018 	.word	0x20000018

08006580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	bf00      	nop
 80065a6:	e7fd      	b.n	80065a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a8:	4b07      	ldr	r3, [pc, #28]	@ (80065c8 <vTaskPlaceOnEventList+0x48>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3318      	adds	r3, #24
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fe fd16 	bl	8004fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065b6:	2101      	movs	r1, #1
 80065b8:	6838      	ldr	r0, [r7, #0]
 80065ba:	f000 fa89 	bl	8006ad0 <prvAddCurrentTaskToDelayedList>
}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200009d8 	.word	0x200009d8

080065cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	617b      	str	r3, [r7, #20]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006620 <vTaskPlaceOnEventListRestricted+0x54>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3318      	adds	r3, #24
 80065fc:	4619      	mov	r1, r3
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7fe fccb 	bl	8004f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	68b8      	ldr	r0, [r7, #8]
 8006614:	f000 fa5c 	bl	8006ad0 <prvAddCurrentTaskToDelayedList>
	}
 8006618:	bf00      	nop
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	200009d8 	.word	0x200009d8

08006624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60fb      	str	r3, [r7, #12]
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3318      	adds	r3, #24
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fcfc 	bl	8005054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800665c:	4b1d      	ldr	r3, [pc, #116]	@ (80066d4 <xTaskRemoveFromEventList+0xb0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d11d      	bne.n	80066a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	3304      	adds	r3, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fcf3 	bl	8005054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006672:	4b19      	ldr	r3, [pc, #100]	@ (80066d8 <xTaskRemoveFromEventList+0xb4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d903      	bls.n	8006682 <xTaskRemoveFromEventList+0x5e>
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667e:	4a16      	ldr	r2, [pc, #88]	@ (80066d8 <xTaskRemoveFromEventList+0xb4>)
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4a13      	ldr	r2, [pc, #76]	@ (80066dc <xTaskRemoveFromEventList+0xb8>)
 8006690:	441a      	add	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7fe fc7e 	bl	8004f9a <vListInsertEnd>
 800669e:	e005      	b.n	80066ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	3318      	adds	r3, #24
 80066a4:	4619      	mov	r1, r3
 80066a6:	480e      	ldr	r0, [pc, #56]	@ (80066e0 <xTaskRemoveFromEventList+0xbc>)
 80066a8:	f7fe fc77 	bl	8004f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b0:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <xTaskRemoveFromEventList+0xc0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d905      	bls.n	80066c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066ba:	2301      	movs	r3, #1
 80066bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066be:	4b0a      	ldr	r3, [pc, #40]	@ (80066e8 <xTaskRemoveFromEventList+0xc4>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e001      	b.n	80066ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066ca:	697b      	ldr	r3, [r7, #20]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000ed4 	.word	0x20000ed4
 80066d8:	20000eb4 	.word	0x20000eb4
 80066dc:	200009dc 	.word	0x200009dc
 80066e0:	20000e6c 	.word	0x20000e6c
 80066e4:	200009d8 	.word	0x200009d8
 80066e8:	20000ec0 	.word	0x20000ec0

080066ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066f4:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <vTaskInternalSetTimeOutState+0x24>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066fc:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <vTaskInternalSetTimeOutState+0x28>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	605a      	str	r2, [r3, #4]
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000ec4 	.word	0x20000ec4
 8006714:	20000eb0 	.word	0x20000eb0

08006718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	613b      	str	r3, [r7, #16]
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	e7fd      	b.n	800673c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60fb      	str	r3, [r7, #12]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800675e:	f000 fe93 	bl	8007488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006762:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <xTaskCheckForTimeOut+0xc0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d102      	bne.n	8006782 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800677c:	2300      	movs	r3, #0
 800677e:	61fb      	str	r3, [r7, #28]
 8006780:	e023      	b.n	80067ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b15      	ldr	r3, [pc, #84]	@ (80067dc <xTaskCheckForTimeOut+0xc4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d007      	beq.n	800679e <xTaskCheckForTimeOut+0x86>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	429a      	cmp	r2, r3
 8006796:	d302      	bcc.n	800679e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006798:	2301      	movs	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e015      	b.n	80067ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d20b      	bcs.n	80067c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff ff99 	bl	80066ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	e004      	b.n	80067ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067c6:	2301      	movs	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067ca:	f000 fe8f 	bl	80074ec <vPortExitCritical>

	return xReturn;
 80067ce:	69fb      	ldr	r3, [r7, #28]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20000eb0 	.word	0x20000eb0
 80067dc:	20000ec4 	.word	0x20000ec4

080067e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067e4:	4b03      	ldr	r3, [pc, #12]	@ (80067f4 <vTaskMissedYield+0x14>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
}
 80067ea:	bf00      	nop
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	20000ec0 	.word	0x20000ec0

080067f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006800:	f000 f854 	bl	80068ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006804:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <prvIdleTask+0x2c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d907      	bls.n	800681c <prvIdleTask+0x24>
			{
				taskYIELD();
 800680c:	4b06      	ldr	r3, [pc, #24]	@ (8006828 <prvIdleTask+0x30>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800681c:	f7f9 fef6 	bl	800060c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006820:	e7ee      	b.n	8006800 <prvIdleTask+0x8>
 8006822:	bf00      	nop
 8006824:	200009dc 	.word	0x200009dc
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	e00c      	b.n	8006852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4a12      	ldr	r2, [pc, #72]	@ (800688c <prvInitialiseTaskLists+0x60>)
 8006844:	4413      	add	r3, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe fb7a 	bl	8004f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3301      	adds	r3, #1
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b37      	cmp	r3, #55	@ 0x37
 8006856:	d9ef      	bls.n	8006838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006858:	480d      	ldr	r0, [pc, #52]	@ (8006890 <prvInitialiseTaskLists+0x64>)
 800685a:	f7fe fb71 	bl	8004f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800685e:	480d      	ldr	r0, [pc, #52]	@ (8006894 <prvInitialiseTaskLists+0x68>)
 8006860:	f7fe fb6e 	bl	8004f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006864:	480c      	ldr	r0, [pc, #48]	@ (8006898 <prvInitialiseTaskLists+0x6c>)
 8006866:	f7fe fb6b 	bl	8004f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800686a:	480c      	ldr	r0, [pc, #48]	@ (800689c <prvInitialiseTaskLists+0x70>)
 800686c:	f7fe fb68 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006870:	480b      	ldr	r0, [pc, #44]	@ (80068a0 <prvInitialiseTaskLists+0x74>)
 8006872:	f7fe fb65 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006876:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <prvInitialiseTaskLists+0x78>)
 8006878:	4a05      	ldr	r2, [pc, #20]	@ (8006890 <prvInitialiseTaskLists+0x64>)
 800687a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800687c:	4b0a      	ldr	r3, [pc, #40]	@ (80068a8 <prvInitialiseTaskLists+0x7c>)
 800687e:	4a05      	ldr	r2, [pc, #20]	@ (8006894 <prvInitialiseTaskLists+0x68>)
 8006880:	601a      	str	r2, [r3, #0]
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200009dc 	.word	0x200009dc
 8006890:	20000e3c 	.word	0x20000e3c
 8006894:	20000e50 	.word	0x20000e50
 8006898:	20000e6c 	.word	0x20000e6c
 800689c:	20000e80 	.word	0x20000e80
 80068a0:	20000e98 	.word	0x20000e98
 80068a4:	20000e64 	.word	0x20000e64
 80068a8:	20000e68 	.word	0x20000e68

080068ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068b2:	e019      	b.n	80068e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068b4:	f000 fde8 	bl	8007488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b8:	4b10      	ldr	r3, [pc, #64]	@ (80068fc <prvCheckTasksWaitingTermination+0x50>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe fbc5 	bl	8005054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <prvCheckTasksWaitingTermination+0x54>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006900 <prvCheckTasksWaitingTermination+0x54>)
 80068d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <prvCheckTasksWaitingTermination+0x58>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3b01      	subs	r3, #1
 80068da:	4a0a      	ldr	r2, [pc, #40]	@ (8006904 <prvCheckTasksWaitingTermination+0x58>)
 80068dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068de:	f000 fe05 	bl	80074ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f810 	bl	8006908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068e8:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <prvCheckTasksWaitingTermination+0x58>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e1      	bne.n	80068b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000e80 	.word	0x20000e80
 8006900:	20000eac 	.word	0x20000eac
 8006904:	20000e94 	.word	0x20000e94

08006908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3354      	adds	r3, #84	@ 0x54
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f94b 	bl	8007bb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006920:	2b00      	cmp	r3, #0
 8006922:	d108      	bne.n	8006936 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	4618      	mov	r0, r3
 800692a:	f000 ffa3 	bl	8007874 <vPortFree>
				vPortFree( pxTCB );
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 ffa0 	bl	8007874 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006934:	e019      	b.n	800696a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800693c:	2b01      	cmp	r3, #1
 800693e:	d103      	bne.n	8006948 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 ff97 	bl	8007874 <vPortFree>
	}
 8006946:	e010      	b.n	800696a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800694e:	2b02      	cmp	r3, #2
 8006950:	d00b      	beq.n	800696a <prvDeleteTCB+0x62>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60fb      	str	r3, [r7, #12]
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	e7fd      	b.n	8006966 <prvDeleteTCB+0x5e>
	}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800697a:	4b0c      	ldr	r3, [pc, #48]	@ (80069ac <prvResetNextTaskUnblockTime+0x38>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <prvResetNextTaskUnblockTime+0x3c>)
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800698c:	e008      	b.n	80069a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698e:	4b07      	ldr	r3, [pc, #28]	@ (80069ac <prvResetNextTaskUnblockTime+0x38>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4a04      	ldr	r2, [pc, #16]	@ (80069b0 <prvResetNextTaskUnblockTime+0x3c>)
 800699e:	6013      	str	r3, [r2, #0]
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20000e64 	.word	0x20000e64
 80069b0:	20000ecc 	.word	0x20000ecc

080069b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069ba:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <xTaskGetSchedulerState+0x34>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069c2:	2301      	movs	r3, #1
 80069c4:	607b      	str	r3, [r7, #4]
 80069c6:	e008      	b.n	80069da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c8:	4b08      	ldr	r3, [pc, #32]	@ (80069ec <xTaskGetSchedulerState+0x38>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069d0:	2302      	movs	r3, #2
 80069d2:	607b      	str	r3, [r7, #4]
 80069d4:	e001      	b.n	80069da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069d6:	2300      	movs	r3, #0
 80069d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069da:	687b      	ldr	r3, [r7, #4]
	}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	20000eb8 	.word	0x20000eb8
 80069ec:	20000ed4 	.word	0x20000ed4

080069f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d058      	beq.n	8006ab8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a06:	4b2f      	ldr	r3, [pc, #188]	@ (8006ac4 <xTaskPriorityDisinherit+0xd4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d00b      	beq.n	8006a28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	60fb      	str	r3, [r7, #12]
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60bb      	str	r3, [r7, #8]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4c:	1e5a      	subs	r2, r3, #1
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d02c      	beq.n	8006ab8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d128      	bne.n	8006ab8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe faf2 	bl	8005054 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a88:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac8 <xTaskPriorityDisinherit+0xd8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d903      	bls.n	8006a98 <xTaskPriorityDisinherit+0xa8>
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	4a0c      	ldr	r2, [pc, #48]	@ (8006ac8 <xTaskPriorityDisinherit+0xd8>)
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4a09      	ldr	r2, [pc, #36]	@ (8006acc <xTaskPriorityDisinherit+0xdc>)
 8006aa6:	441a      	add	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f7fe fa73 	bl	8004f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ab8:	697b      	ldr	r3, [r7, #20]
	}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	200009d8 	.word	0x200009d8
 8006ac8:	20000eb4 	.word	0x20000eb4
 8006acc:	200009dc 	.word	0x200009dc

08006ad0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ada:	4b21      	ldr	r3, [pc, #132]	@ (8006b60 <prvAddCurrentTaskToDelayedList+0x90>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ae0:	4b20      	ldr	r3, [pc, #128]	@ (8006b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe fab4 	bl	8005054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d10a      	bne.n	8006b0a <prvAddCurrentTaskToDelayedList+0x3a>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006afa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4819      	ldr	r0, [pc, #100]	@ (8006b68 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b04:	f7fe fa49 	bl	8004f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b08:	e026      	b.n	8006b58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4413      	add	r3, r2
 8006b10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b12:	4b14      	ldr	r3, [pc, #80]	@ (8006b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d209      	bcs.n	8006b36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b22:	4b12      	ldr	r3, [pc, #72]	@ (8006b6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	4b0f      	ldr	r3, [pc, #60]	@ (8006b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	f7fe fa57 	bl	8004fe2 <vListInsert>
}
 8006b34:	e010      	b.n	8006b58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b36:	4b0e      	ldr	r3, [pc, #56]	@ (8006b70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4619      	mov	r1, r3
 8006b42:	4610      	mov	r0, r2
 8006b44:	f7fe fa4d 	bl	8004fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b48:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d202      	bcs.n	8006b58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b52:	4a08      	ldr	r2, [pc, #32]	@ (8006b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6013      	str	r3, [r2, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000eb0 	.word	0x20000eb0
 8006b64:	200009d8 	.word	0x200009d8
 8006b68:	20000e98 	.word	0x20000e98
 8006b6c:	20000e68 	.word	0x20000e68
 8006b70:	20000e64 	.word	0x20000e64
 8006b74:	20000ecc 	.word	0x20000ecc

08006b78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08a      	sub	sp, #40	@ 0x28
 8006b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b82:	f000 fb13 	bl	80071ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b86:	4b1d      	ldr	r3, [pc, #116]	@ (8006bfc <xTimerCreateTimerTask+0x84>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d021      	beq.n	8006bd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b96:	1d3a      	adds	r2, r7, #4
 8006b98:	f107 0108 	add.w	r1, r7, #8
 8006b9c:	f107 030c 	add.w	r3, r7, #12
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fe f9b3 	bl	8004f0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	9202      	str	r2, [sp, #8]
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	4911      	ldr	r1, [pc, #68]	@ (8006c00 <xTimerCreateTimerTask+0x88>)
 8006bba:	4812      	ldr	r0, [pc, #72]	@ (8006c04 <xTimerCreateTimerTask+0x8c>)
 8006bbc:	f7ff f82c 	bl	8005c18 <xTaskCreateStatic>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	4a11      	ldr	r2, [pc, #68]	@ (8006c08 <xTimerCreateTimerTask+0x90>)
 8006bc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bc6:	4b10      	ldr	r3, [pc, #64]	@ (8006c08 <xTimerCreateTimerTask+0x90>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10b      	bne.n	8006bf0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	613b      	str	r3, [r7, #16]
}
 8006bea:	bf00      	nop
 8006bec:	bf00      	nop
 8006bee:	e7fd      	b.n	8006bec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bf0:	697b      	ldr	r3, [r7, #20]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000f08 	.word	0x20000f08
 8006c00:	080092b8 	.word	0x080092b8
 8006c04:	08006d45 	.word	0x08006d45
 8006c08:	20000f0c 	.word	0x20000f0c

08006c0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	@ 0x28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10b      	bne.n	8006c3c <xTimerGenericCommand+0x30>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	623b      	str	r3, [r7, #32]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ca4 <xTimerGenericCommand+0x98>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02a      	beq.n	8006c9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	dc18      	bgt.n	8006c88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c56:	f7ff fead 	bl	80069b4 <xTaskGetSchedulerState>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d109      	bne.n	8006c74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c60:	4b10      	ldr	r3, [pc, #64]	@ (8006ca4 <xTimerGenericCommand+0x98>)
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	f107 0110 	add.w	r1, r7, #16
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c6c:	f7fe fb62 	bl	8005334 <xQueueGenericSend>
 8006c70:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c72:	e012      	b.n	8006c9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <xTimerGenericCommand+0x98>)
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	f107 0110 	add.w	r1, r7, #16
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f7fe fb58 	bl	8005334 <xQueueGenericSend>
 8006c84:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c86:	e008      	b.n	8006c9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c88:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <xTimerGenericCommand+0x98>)
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	f107 0110 	add.w	r1, r7, #16
 8006c90:	2300      	movs	r3, #0
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	f7fe fc50 	bl	8005538 <xQueueGenericSendFromISR>
 8006c98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3728      	adds	r7, #40	@ 0x28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20000f08 	.word	0x20000f08

08006ca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb2:	4b23      	ldr	r3, [pc, #140]	@ (8006d40 <prvProcessExpiredTimer+0x98>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe f9c7 	bl	8005054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d023      	beq.n	8006d1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	18d1      	adds	r1, r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	6978      	ldr	r0, [r7, #20]
 8006ce2:	f000 f8d5 	bl	8006e90 <prvInsertTimerInActiveList>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d020      	beq.n	8006d2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cec:	2300      	movs	r3, #0
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	6978      	ldr	r0, [r7, #20]
 8006cf8:	f7ff ff88 	bl	8006c0c <xTimerGenericCommand>
 8006cfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d114      	bne.n	8006d2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60fb      	str	r3, [r7, #12]
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	6978      	ldr	r0, [r7, #20]
 8006d34:	4798      	blx	r3
}
 8006d36:	bf00      	nop
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000f00 	.word	0x20000f00

08006d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d4c:	f107 0308 	add.w	r3, r7, #8
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 f859 	bl	8006e08 <prvGetNextExpireTime>
 8006d56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 f805 	bl	8006d6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d62:	f000 f8d7 	bl	8006f14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d66:	bf00      	nop
 8006d68:	e7f0      	b.n	8006d4c <prvTimerTask+0x8>
	...

08006d6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d76:	f7ff fa27 	bl	80061c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d7a:	f107 0308 	add.w	r3, r7, #8
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f866 	bl	8006e50 <prvSampleTimeNow>
 8006d84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d130      	bne.n	8006dee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <prvProcessTimerOrBlockTask+0x3c>
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d806      	bhi.n	8006da8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d9a:	f7ff fa23 	bl	80061e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d9e:	68f9      	ldr	r1, [r7, #12]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff ff81 	bl	8006ca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006da6:	e024      	b.n	8006df2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d008      	beq.n	8006dc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dae:	4b13      	ldr	r3, [pc, #76]	@ (8006dfc <prvProcessTimerOrBlockTask+0x90>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <prvProcessTimerOrBlockTask+0x50>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <prvProcessTimerOrBlockTask+0x52>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e00 <prvProcessTimerOrBlockTask+0x94>)
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	f7fe feef 	bl	8005bb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dd2:	f7ff fa07 	bl	80061e4 <xTaskResumeAll>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ddc:	4b09      	ldr	r3, [pc, #36]	@ (8006e04 <prvProcessTimerOrBlockTask+0x98>)
 8006dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	f3bf 8f6f 	isb	sy
}
 8006dec:	e001      	b.n	8006df2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dee:	f7ff f9f9 	bl	80061e4 <xTaskResumeAll>
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000f04 	.word	0x20000f04
 8006e00:	20000f08 	.word	0x20000f08
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e10:	4b0e      	ldr	r3, [pc, #56]	@ (8006e4c <prvGetNextExpireTime+0x44>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <prvGetNextExpireTime+0x16>
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	e000      	b.n	8006e20 <prvGetNextExpireTime+0x18>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d105      	bne.n	8006e38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e2c:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <prvGetNextExpireTime+0x44>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e001      	b.n	8006e3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000f00 	.word	0x20000f00

08006e50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e58:	f7ff fa62 	bl	8006320 <xTaskGetTickCount>
 8006e5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <prvSampleTimeNow+0x3c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d205      	bcs.n	8006e74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e68:	f000 f93a 	bl	80070e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e002      	b.n	8006e7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e7a:	4a04      	ldr	r2, [pc, #16]	@ (8006e8c <prvSampleTimeNow+0x3c>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e80:	68fb      	ldr	r3, [r7, #12]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000f10 	.word	0x20000f10

08006e90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d812      	bhi.n	8006edc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d302      	bcc.n	8006eca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	e01b      	b.n	8006f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006eca:	4b10      	ldr	r3, [pc, #64]	@ (8006f0c <prvInsertTimerInActiveList+0x7c>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	f7fe f884 	bl	8004fe2 <vListInsert>
 8006eda:	e012      	b.n	8006f02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d206      	bcs.n	8006ef2 <prvInsertTimerInActiveList+0x62>
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d302      	bcc.n	8006ef2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e007      	b.n	8006f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ef2:	4b07      	ldr	r3, [pc, #28]	@ (8006f10 <prvInsertTimerInActiveList+0x80>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f7fe f870 	bl	8004fe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f02:	697b      	ldr	r3, [r7, #20]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20000f04 	.word	0x20000f04
 8006f10:	20000f00 	.word	0x20000f00

08006f14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08e      	sub	sp, #56	@ 0x38
 8006f18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f1a:	e0ce      	b.n	80070ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da19      	bge.n	8006f56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f22:	1d3b      	adds	r3, r7, #4
 8006f24:	3304      	adds	r3, #4
 8006f26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10b      	bne.n	8006f46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	61fb      	str	r3, [r7, #28]
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	e7fd      	b.n	8006f42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f4c:	6850      	ldr	r0, [r2, #4]
 8006f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f50:	6892      	ldr	r2, [r2, #8]
 8006f52:	4611      	mov	r1, r2
 8006f54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f2c0 80ae 	blt.w	80070ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe f870 	bl	8005054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f74:	463b      	mov	r3, r7
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff ff6a 	bl	8006e50 <prvSampleTimeNow>
 8006f7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b09      	cmp	r3, #9
 8006f82:	f200 8097 	bhi.w	80070b4 <prvProcessReceivedCommands+0x1a0>
 8006f86:	a201      	add	r2, pc, #4	@ (adr r2, 8006f8c <prvProcessReceivedCommands+0x78>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fb5 	.word	0x08006fb5
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006fb5 	.word	0x08006fb5
 8006f98:	0800702b 	.word	0x0800702b
 8006f9c:	0800703f 	.word	0x0800703f
 8006fa0:	0800708b 	.word	0x0800708b
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fb5 	.word	0x08006fb5
 8006fac:	0800702b 	.word	0x0800702b
 8006fb0:	0800703f 	.word	0x0800703f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	18d1      	adds	r1, r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fd4:	f7ff ff5c 	bl	8006e90 <prvInsertTimerInActiveList>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d06c      	beq.n	80070b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d061      	beq.n	80070b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	441a      	add	r2, r3
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	2300      	movs	r3, #0
 8007002:	2100      	movs	r1, #0
 8007004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007006:	f7ff fe01 	bl	8006c0c <xTimerGenericCommand>
 800700a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d152      	bne.n	80070b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	61bb      	str	r3, [r7, #24]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800702a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	b2da      	uxtb	r2, r3
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800703c:	e03d      	b.n	80070ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007044:	f043 0301 	orr.w	r3, r3, #1
 8007048:	b2da      	uxtb	r2, r3
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10b      	bne.n	8007076 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	617b      	str	r3, [r7, #20]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	18d1      	adds	r1, r2, r3
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007084:	f7ff ff04 	bl	8006e90 <prvInsertTimerInActiveList>
					break;
 8007088:	e017      	b.n	80070ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800708a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800709a:	f000 fbeb 	bl	8007874 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800709e:	e00c      	b.n	80070ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070b2:	e002      	b.n	80070ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <prvProcessReceivedCommands+0x1a6>
					break;
 80070b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ba:	4b08      	ldr	r3, [pc, #32]	@ (80070dc <prvProcessReceivedCommands+0x1c8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	1d39      	adds	r1, r7, #4
 80070c0:	2200      	movs	r2, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fad6 	bl	8005674 <xQueueReceive>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f47f af26 	bne.w	8006f1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80070d0:	bf00      	nop
 80070d2:	bf00      	nop
 80070d4:	3730      	adds	r7, #48	@ 0x30
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000f08 	.word	0x20000f08

080070e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070e6:	e049      	b.n	800717c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070e8:	4b2e      	ldr	r3, [pc, #184]	@ (80071a4 <prvSwitchTimerLists+0xc4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f2:	4b2c      	ldr	r3, [pc, #176]	@ (80071a4 <prvSwitchTimerLists+0xc4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fd ffa7 	bl	8005054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d02f      	beq.n	800717c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	429a      	cmp	r2, r3
 800712c:	d90e      	bls.n	800714c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800713a:	4b1a      	ldr	r3, [pc, #104]	@ (80071a4 <prvSwitchTimerLists+0xc4>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3304      	adds	r3, #4
 8007142:	4619      	mov	r1, r3
 8007144:	4610      	mov	r0, r2
 8007146:	f7fd ff4c 	bl	8004fe2 <vListInsert>
 800714a:	e017      	b.n	800717c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800714c:	2300      	movs	r3, #0
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	2300      	movs	r3, #0
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	2100      	movs	r1, #0
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fd58 	bl	8006c0c <xTimerGenericCommand>
 800715c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	603b      	str	r3, [r7, #0]
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800717c:	4b09      	ldr	r3, [pc, #36]	@ (80071a4 <prvSwitchTimerLists+0xc4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1b0      	bne.n	80070e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007186:	4b07      	ldr	r3, [pc, #28]	@ (80071a4 <prvSwitchTimerLists+0xc4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800718c:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <prvSwitchTimerLists+0xc8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a04      	ldr	r2, [pc, #16]	@ (80071a4 <prvSwitchTimerLists+0xc4>)
 8007192:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007194:	4a04      	ldr	r2, [pc, #16]	@ (80071a8 <prvSwitchTimerLists+0xc8>)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	6013      	str	r3, [r2, #0]
}
 800719a:	bf00      	nop
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000f00 	.word	0x20000f00
 80071a8:	20000f04 	.word	0x20000f04

080071ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071b2:	f000 f969 	bl	8007488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071b6:	4b15      	ldr	r3, [pc, #84]	@ (800720c <prvCheckForValidListAndQueue+0x60>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d120      	bne.n	8007200 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071be:	4814      	ldr	r0, [pc, #80]	@ (8007210 <prvCheckForValidListAndQueue+0x64>)
 80071c0:	f7fd febe 	bl	8004f40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071c4:	4813      	ldr	r0, [pc, #76]	@ (8007214 <prvCheckForValidListAndQueue+0x68>)
 80071c6:	f7fd febb 	bl	8004f40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071ca:	4b13      	ldr	r3, [pc, #76]	@ (8007218 <prvCheckForValidListAndQueue+0x6c>)
 80071cc:	4a10      	ldr	r2, [pc, #64]	@ (8007210 <prvCheckForValidListAndQueue+0x64>)
 80071ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071d0:	4b12      	ldr	r3, [pc, #72]	@ (800721c <prvCheckForValidListAndQueue+0x70>)
 80071d2:	4a10      	ldr	r2, [pc, #64]	@ (8007214 <prvCheckForValidListAndQueue+0x68>)
 80071d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071d6:	2300      	movs	r3, #0
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4b11      	ldr	r3, [pc, #68]	@ (8007220 <prvCheckForValidListAndQueue+0x74>)
 80071dc:	4a11      	ldr	r2, [pc, #68]	@ (8007224 <prvCheckForValidListAndQueue+0x78>)
 80071de:	2110      	movs	r1, #16
 80071e0:	200a      	movs	r0, #10
 80071e2:	f7fd ffcb 	bl	800517c <xQueueGenericCreateStatic>
 80071e6:	4603      	mov	r3, r0
 80071e8:	4a08      	ldr	r2, [pc, #32]	@ (800720c <prvCheckForValidListAndQueue+0x60>)
 80071ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80071ec:	4b07      	ldr	r3, [pc, #28]	@ (800720c <prvCheckForValidListAndQueue+0x60>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071f4:	4b05      	ldr	r3, [pc, #20]	@ (800720c <prvCheckForValidListAndQueue+0x60>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	490b      	ldr	r1, [pc, #44]	@ (8007228 <prvCheckForValidListAndQueue+0x7c>)
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fcae 	bl	8005b5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007200:	f000 f974 	bl	80074ec <vPortExitCritical>
}
 8007204:	bf00      	nop
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000f08 	.word	0x20000f08
 8007210:	20000ed8 	.word	0x20000ed8
 8007214:	20000eec 	.word	0x20000eec
 8007218:	20000f00 	.word	0x20000f00
 800721c:	20000f04 	.word	0x20000f04
 8007220:	20000fb4 	.word	0x20000fb4
 8007224:	20000f14 	.word	0x20000f14
 8007228:	080092c0 	.word	0x080092c0

0800722c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3b04      	subs	r3, #4
 800723c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3b04      	subs	r3, #4
 800724a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f023 0201 	bic.w	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b04      	subs	r3, #4
 800725a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800725c:	4a0c      	ldr	r2, [pc, #48]	@ (8007290 <pxPortInitialiseStack+0x64>)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3b14      	subs	r3, #20
 8007266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3b04      	subs	r3, #4
 8007272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f06f 0202 	mvn.w	r2, #2
 800727a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3b20      	subs	r3, #32
 8007280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007282:	68fb      	ldr	r3, [r7, #12]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	08007295 	.word	0x08007295

08007294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800729e:	4b13      	ldr	r3, [pc, #76]	@ (80072ec <prvTaskExitError+0x58>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d00b      	beq.n	80072c0 <prvTaskExitError+0x2c>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	60fb      	str	r3, [r7, #12]
}
 80072ba:	bf00      	nop
 80072bc:	bf00      	nop
 80072be:	e7fd      	b.n	80072bc <prvTaskExitError+0x28>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	60bb      	str	r3, [r7, #8]
}
 80072d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072d4:	bf00      	nop
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0fc      	beq.n	80072d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000014 	.word	0x20000014

080072f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072f0:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <pxCurrentTCBConst2>)
 80072f2:	6819      	ldr	r1, [r3, #0]
 80072f4:	6808      	ldr	r0, [r1, #0]
 80072f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fa:	f380 8809 	msr	PSP, r0
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8811 	msr	BASEPRI, r0
 800730a:	4770      	bx	lr
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst2>:
 8007310:	200009d8 	.word	0x200009d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007318:	4808      	ldr	r0, [pc, #32]	@ (800733c <prvPortStartFirstTask+0x24>)
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	6800      	ldr	r0, [r0, #0]
 800731e:	f380 8808 	msr	MSP, r0
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8814 	msr	CONTROL, r0
 800732a:	b662      	cpsie	i
 800732c:	b661      	cpsie	f
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	df00      	svc	0
 8007338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800733a:	bf00      	nop
 800733c:	e000ed08 	.word	0xe000ed08

08007340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007346:	4b47      	ldr	r3, [pc, #284]	@ (8007464 <xPortStartScheduler+0x124>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a47      	ldr	r2, [pc, #284]	@ (8007468 <xPortStartScheduler+0x128>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10b      	bne.n	8007368 <xPortStartScheduler+0x28>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007368:	4b3e      	ldr	r3, [pc, #248]	@ (8007464 <xPortStartScheduler+0x124>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a3f      	ldr	r2, [pc, #252]	@ (800746c <xPortStartScheduler+0x12c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d10b      	bne.n	800738a <xPortStartScheduler+0x4a>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	613b      	str	r3, [r7, #16]
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	e7fd      	b.n	8007386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800738a:	4b39      	ldr	r3, [pc, #228]	@ (8007470 <xPortStartScheduler+0x130>)
 800738c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	22ff      	movs	r2, #255	@ 0xff
 800739a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	4b31      	ldr	r3, [pc, #196]	@ (8007474 <xPortStartScheduler+0x134>)
 80073b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073b2:	4b31      	ldr	r3, [pc, #196]	@ (8007478 <xPortStartScheduler+0x138>)
 80073b4:	2207      	movs	r2, #7
 80073b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073b8:	e009      	b.n	80073ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80073ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007478 <xPortStartScheduler+0x138>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3b01      	subs	r3, #1
 80073c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007478 <xPortStartScheduler+0x138>)
 80073c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d6:	2b80      	cmp	r3, #128	@ 0x80
 80073d8:	d0ef      	beq.n	80073ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073da:	4b27      	ldr	r3, [pc, #156]	@ (8007478 <xPortStartScheduler+0x138>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f1c3 0307 	rsb	r3, r3, #7
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d00b      	beq.n	80073fe <xPortStartScheduler+0xbe>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	60bb      	str	r3, [r7, #8]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007478 <xPortStartScheduler+0x138>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	4a1c      	ldr	r2, [pc, #112]	@ (8007478 <xPortStartScheduler+0x138>)
 8007406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007408:	4b1b      	ldr	r3, [pc, #108]	@ (8007478 <xPortStartScheduler+0x138>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007410:	4a19      	ldr	r2, [pc, #100]	@ (8007478 <xPortStartScheduler+0x138>)
 8007412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800741c:	4b17      	ldr	r3, [pc, #92]	@ (800747c <xPortStartScheduler+0x13c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a16      	ldr	r2, [pc, #88]	@ (800747c <xPortStartScheduler+0x13c>)
 8007422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007428:	4b14      	ldr	r3, [pc, #80]	@ (800747c <xPortStartScheduler+0x13c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a13      	ldr	r2, [pc, #76]	@ (800747c <xPortStartScheduler+0x13c>)
 800742e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007434:	f000 f8da 	bl	80075ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007438:	4b11      	ldr	r3, [pc, #68]	@ (8007480 <xPortStartScheduler+0x140>)
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800743e:	f000 f8f9 	bl	8007634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007442:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <xPortStartScheduler+0x144>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a0f      	ldr	r2, [pc, #60]	@ (8007484 <xPortStartScheduler+0x144>)
 8007448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800744c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800744e:	f7ff ff63 	bl	8007318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007452:	f7ff f82f 	bl	80064b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007456:	f7ff ff1d 	bl	8007294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	e000ed00 	.word	0xe000ed00
 8007468:	410fc271 	.word	0x410fc271
 800746c:	410fc270 	.word	0x410fc270
 8007470:	e000e400 	.word	0xe000e400
 8007474:	20001004 	.word	0x20001004
 8007478:	20001008 	.word	0x20001008
 800747c:	e000ed20 	.word	0xe000ed20
 8007480:	20000014 	.word	0x20000014
 8007484:	e000ef34 	.word	0xe000ef34

08007488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	607b      	str	r3, [r7, #4]
}
 80074a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074a2:	4b10      	ldr	r3, [pc, #64]	@ (80074e4 <vPortEnterCritical+0x5c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	4a0e      	ldr	r2, [pc, #56]	@ (80074e4 <vPortEnterCritical+0x5c>)
 80074aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074ac:	4b0d      	ldr	r3, [pc, #52]	@ (80074e4 <vPortEnterCritical+0x5c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d110      	bne.n	80074d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074b4:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <vPortEnterCritical+0x60>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	603b      	str	r3, [r7, #0]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <vPortEnterCritical+0x4a>
	}
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000014 	.word	0x20000014
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074f2:	4b12      	ldr	r3, [pc, #72]	@ (800753c <vPortExitCritical+0x50>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10b      	bne.n	8007512 <vPortExitCritical+0x26>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	607b      	str	r3, [r7, #4]
}
 800750c:	bf00      	nop
 800750e:	bf00      	nop
 8007510:	e7fd      	b.n	800750e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007512:	4b0a      	ldr	r3, [pc, #40]	@ (800753c <vPortExitCritical+0x50>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3b01      	subs	r3, #1
 8007518:	4a08      	ldr	r2, [pc, #32]	@ (800753c <vPortExitCritical+0x50>)
 800751a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800751c:	4b07      	ldr	r3, [pc, #28]	@ (800753c <vPortExitCritical+0x50>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d105      	bne.n	8007530 <vPortExitCritical+0x44>
 8007524:	2300      	movs	r3, #0
 8007526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	f383 8811 	msr	BASEPRI, r3
}
 800752e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	20000014 	.word	0x20000014

08007540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007540:	f3ef 8009 	mrs	r0, PSP
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4b15      	ldr	r3, [pc, #84]	@ (80075a0 <pxCurrentTCBConst>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f01e 0f10 	tst.w	lr, #16
 8007550:	bf08      	it	eq
 8007552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	6010      	str	r0, [r2, #0]
 800755c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007564:	f380 8811 	msr	BASEPRI, r0
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f7fe ffa0 	bl	80064b4 <vTaskSwitchContext>
 8007574:	f04f 0000 	mov.w	r0, #0
 8007578:	f380 8811 	msr	BASEPRI, r0
 800757c:	bc09      	pop	{r0, r3}
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	6808      	ldr	r0, [r1, #0]
 8007582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007586:	f01e 0f10 	tst.w	lr, #16
 800758a:	bf08      	it	eq
 800758c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007590:	f380 8809 	msr	PSP, r0
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	f3af 8000 	nop.w

080075a0 <pxCurrentTCBConst>:
 80075a0:	200009d8 	.word	0x200009d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop

080075a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075c2:	f7fe febd 	bl	8006340 <xTaskIncrementTick>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075cc:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <xPortSysTickHandler+0x40>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	2300      	movs	r3, #0
 80075d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f383 8811 	msr	BASEPRI, r3
}
 80075de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007620 <vPortSetupTimerInterrupt+0x34>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007624 <vPortSetupTimerInterrupt+0x38>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007628 <vPortSetupTimerInterrupt+0x3c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0a      	ldr	r2, [pc, #40]	@ (800762c <vPortSetupTimerInterrupt+0x40>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	099b      	lsrs	r3, r3, #6
 8007608:	4a09      	ldr	r2, [pc, #36]	@ (8007630 <vPortSetupTimerInterrupt+0x44>)
 800760a:	3b01      	subs	r3, #1
 800760c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800760e:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <vPortSetupTimerInterrupt+0x34>)
 8007610:	2207      	movs	r2, #7
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	e000e010 	.word	0xe000e010
 8007624:	e000e018 	.word	0xe000e018
 8007628:	20000008 	.word	0x20000008
 800762c:	10624dd3 	.word	0x10624dd3
 8007630:	e000e014 	.word	0xe000e014

08007634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007644 <vPortEnableVFP+0x10>
 8007638:	6801      	ldr	r1, [r0, #0]
 800763a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800763e:	6001      	str	r1, [r0, #0]
 8007640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007642:	bf00      	nop
 8007644:	e000ed88 	.word	0xe000ed88

08007648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800764e:	f3ef 8305 	mrs	r3, IPSR
 8007652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d915      	bls.n	8007686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800765a:	4a18      	ldr	r2, [pc, #96]	@ (80076bc <vPortValidateInterruptPriority+0x74>)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007664:	4b16      	ldr	r3, [pc, #88]	@ (80076c0 <vPortValidateInterruptPriority+0x78>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	7afa      	ldrb	r2, [r7, #11]
 800766a:	429a      	cmp	r2, r3
 800766c:	d20b      	bcs.n	8007686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007686:	4b0f      	ldr	r3, [pc, #60]	@ (80076c4 <vPortValidateInterruptPriority+0x7c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800768e:	4b0e      	ldr	r3, [pc, #56]	@ (80076c8 <vPortValidateInterruptPriority+0x80>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d90b      	bls.n	80076ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	603b      	str	r3, [r7, #0]
}
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	e7fd      	b.n	80076aa <vPortValidateInterruptPriority+0x62>
	}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	e000e3f0 	.word	0xe000e3f0
 80076c0:	20001004 	.word	0x20001004
 80076c4:	e000ed0c 	.word	0xe000ed0c
 80076c8:	20001008 	.word	0x20001008

080076cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	@ 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076d8:	f7fe fd76 	bl	80061c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076dc:	4b5f      	ldr	r3, [pc, #380]	@ (800785c <pvPortMalloc+0x190>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076e4:	f000 f92a 	bl	800793c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076e8:	4b5d      	ldr	r3, [pc, #372]	@ (8007860 <pvPortMalloc+0x194>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f040 8095 	bne.w	8007820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01e      	beq.n	800773a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80076fc:	2208      	movs	r2, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4413      	add	r3, r2
 8007702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	2b00      	cmp	r3, #0
 800770c:	d015      	beq.n	800773a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f023 0307 	bic.w	r3, r3, #7
 8007714:	3308      	adds	r3, #8
 8007716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <pvPortMalloc+0x6e>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	617b      	str	r3, [r7, #20]
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	e7fd      	b.n	8007736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d06f      	beq.n	8007820 <pvPortMalloc+0x154>
 8007740:	4b48      	ldr	r3, [pc, #288]	@ (8007864 <pvPortMalloc+0x198>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	429a      	cmp	r2, r3
 8007748:	d86a      	bhi.n	8007820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800774a:	4b47      	ldr	r3, [pc, #284]	@ (8007868 <pvPortMalloc+0x19c>)
 800774c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800774e:	4b46      	ldr	r3, [pc, #280]	@ (8007868 <pvPortMalloc+0x19c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007754:	e004      	b.n	8007760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	429a      	cmp	r2, r3
 8007768:	d903      	bls.n	8007772 <pvPortMalloc+0xa6>
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f1      	bne.n	8007756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007772:	4b3a      	ldr	r3, [pc, #232]	@ (800785c <pvPortMalloc+0x190>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007778:	429a      	cmp	r2, r3
 800777a:	d051      	beq.n	8007820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2208      	movs	r2, #8
 8007782:	4413      	add	r3, r2
 8007784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	1ad2      	subs	r2, r2, r3
 8007796:	2308      	movs	r3, #8
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	429a      	cmp	r2, r3
 800779c:	d920      	bls.n	80077e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800779e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4413      	add	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <pvPortMalloc+0xfc>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	613b      	str	r3, [r7, #16]
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	e7fd      	b.n	80077c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	1ad2      	subs	r2, r2, r3
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077da:	69b8      	ldr	r0, [r7, #24]
 80077dc:	f000 f910 	bl	8007a00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077e0:	4b20      	ldr	r3, [pc, #128]	@ (8007864 <pvPortMalloc+0x198>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007864 <pvPortMalloc+0x198>)
 80077ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007864 <pvPortMalloc+0x198>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	4b1e      	ldr	r3, [pc, #120]	@ (800786c <pvPortMalloc+0x1a0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d203      	bcs.n	8007802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <pvPortMalloc+0x198>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1b      	ldr	r2, [pc, #108]	@ (800786c <pvPortMalloc+0x1a0>)
 8007800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	4b16      	ldr	r3, [pc, #88]	@ (8007860 <pvPortMalloc+0x194>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	431a      	orrs	r2, r3
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007816:	4b16      	ldr	r3, [pc, #88]	@ (8007870 <pvPortMalloc+0x1a4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3301      	adds	r3, #1
 800781c:	4a14      	ldr	r2, [pc, #80]	@ (8007870 <pvPortMalloc+0x1a4>)
 800781e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007820:	f7fe fce0 	bl	80061e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800782a:	f7f8 fef6 	bl	800061a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <pvPortMalloc+0x184>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	60fb      	str	r3, [r7, #12]
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <pvPortMalloc+0x180>
	return pvReturn;
 8007850:	69fb      	ldr	r3, [r7, #28]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3728      	adds	r7, #40	@ 0x28
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20004c14 	.word	0x20004c14
 8007860:	20004c28 	.word	0x20004c28
 8007864:	20004c18 	.word	0x20004c18
 8007868:	20004c0c 	.word	0x20004c0c
 800786c:	20004c1c 	.word	0x20004c1c
 8007870:	20004c20 	.word	0x20004c20

08007874 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d04f      	beq.n	8007926 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007886:	2308      	movs	r3, #8
 8007888:	425b      	negs	r3, r3
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4413      	add	r3, r2
 800788e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	4b25      	ldr	r3, [pc, #148]	@ (8007930 <vPortFree+0xbc>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4013      	ands	r3, r2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10b      	bne.n	80078ba <vPortFree+0x46>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60fb      	str	r3, [r7, #12]
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	e7fd      	b.n	80078b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <vPortFree+0x66>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60bb      	str	r3, [r7, #8]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	4b14      	ldr	r3, [pc, #80]	@ (8007930 <vPortFree+0xbc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01e      	beq.n	8007926 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11a      	bne.n	8007926 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007930 <vPortFree+0xbc>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	43db      	mvns	r3, r3
 80078fa:	401a      	ands	r2, r3
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007900:	f7fe fc62 	bl	80061c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	4b0a      	ldr	r3, [pc, #40]	@ (8007934 <vPortFree+0xc0>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4413      	add	r3, r2
 800790e:	4a09      	ldr	r2, [pc, #36]	@ (8007934 <vPortFree+0xc0>)
 8007910:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007912:	6938      	ldr	r0, [r7, #16]
 8007914:	f000 f874 	bl	8007a00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007918:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <vPortFree+0xc4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3301      	adds	r3, #1
 800791e:	4a06      	ldr	r2, [pc, #24]	@ (8007938 <vPortFree+0xc4>)
 8007920:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007922:	f7fe fc5f 	bl	80061e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007926:	bf00      	nop
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20004c28 	.word	0x20004c28
 8007934:	20004c18 	.word	0x20004c18
 8007938:	20004c24 	.word	0x20004c24

0800793c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007942:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007946:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007948:	4b27      	ldr	r3, [pc, #156]	@ (80079e8 <prvHeapInit+0xac>)
 800794a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00c      	beq.n	8007970 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3307      	adds	r3, #7
 800795a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0307 	bic.w	r3, r3, #7
 8007962:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	4a1f      	ldr	r2, [pc, #124]	@ (80079e8 <prvHeapInit+0xac>)
 800796c:	4413      	add	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007974:	4a1d      	ldr	r2, [pc, #116]	@ (80079ec <prvHeapInit+0xb0>)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800797a:	4b1c      	ldr	r3, [pc, #112]	@ (80079ec <prvHeapInit+0xb0>)
 800797c:	2200      	movs	r2, #0
 800797e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007988:	2208      	movs	r2, #8
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0307 	bic.w	r3, r3, #7
 8007996:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4a15      	ldr	r2, [pc, #84]	@ (80079f0 <prvHeapInit+0xb4>)
 800799c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800799e:	4b14      	ldr	r3, [pc, #80]	@ (80079f0 <prvHeapInit+0xb4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079a6:	4b12      	ldr	r3, [pc, #72]	@ (80079f0 <prvHeapInit+0xb4>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079bc:	4b0c      	ldr	r3, [pc, #48]	@ (80079f0 <prvHeapInit+0xb4>)
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4a0a      	ldr	r2, [pc, #40]	@ (80079f4 <prvHeapInit+0xb8>)
 80079ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4a09      	ldr	r2, [pc, #36]	@ (80079f8 <prvHeapInit+0xbc>)
 80079d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079d4:	4b09      	ldr	r3, [pc, #36]	@ (80079fc <prvHeapInit+0xc0>)
 80079d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80079da:	601a      	str	r2, [r3, #0]
}
 80079dc:	bf00      	nop
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	2000100c 	.word	0x2000100c
 80079ec:	20004c0c 	.word	0x20004c0c
 80079f0:	20004c14 	.word	0x20004c14
 80079f4:	20004c1c 	.word	0x20004c1c
 80079f8:	20004c18 	.word	0x20004c18
 80079fc:	20004c28 	.word	0x20004c28

08007a00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a08:	4b28      	ldr	r3, [pc, #160]	@ (8007aac <prvInsertBlockIntoFreeList+0xac>)
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e002      	b.n	8007a14 <prvInsertBlockIntoFreeList+0x14>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d8f7      	bhi.n	8007a0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	4413      	add	r3, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d108      	bne.n	8007a42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	441a      	add	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	441a      	add	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d118      	bne.n	8007a88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	4b15      	ldr	r3, [pc, #84]	@ (8007ab0 <prvInsertBlockIntoFreeList+0xb0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d00d      	beq.n	8007a7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	441a      	add	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e008      	b.n	8007a90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab0 <prvInsertBlockIntoFreeList+0xb0>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e003      	b.n	8007a90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d002      	beq.n	8007a9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20004c0c 	.word	0x20004c0c
 8007ab0:	20004c14 	.word	0x20004c14

08007ab4 <sniprintf>:
 8007ab4:	b40c      	push	{r2, r3}
 8007ab6:	b530      	push	{r4, r5, lr}
 8007ab8:	4b18      	ldr	r3, [pc, #96]	@ (8007b1c <sniprintf+0x68>)
 8007aba:	1e0c      	subs	r4, r1, #0
 8007abc:	681d      	ldr	r5, [r3, #0]
 8007abe:	b09d      	sub	sp, #116	@ 0x74
 8007ac0:	da08      	bge.n	8007ad4 <sniprintf+0x20>
 8007ac2:	238b      	movs	r3, #139	@ 0x8b
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aca:	b01d      	add	sp, #116	@ 0x74
 8007acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ad0:	b002      	add	sp, #8
 8007ad2:	4770      	bx	lr
 8007ad4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ad8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007adc:	f04f 0300 	mov.w	r3, #0
 8007ae0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007ae2:	bf14      	ite	ne
 8007ae4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ae8:	4623      	moveq	r3, r4
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	9307      	str	r3, [sp, #28]
 8007aee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007af2:	9002      	str	r0, [sp, #8]
 8007af4:	9006      	str	r0, [sp, #24]
 8007af6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007afa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007afc:	ab21      	add	r3, sp, #132	@ 0x84
 8007afe:	a902      	add	r1, sp, #8
 8007b00:	4628      	mov	r0, r5
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	f000 fa40 	bl	8007f88 <_svfiprintf_r>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	bfbc      	itt	lt
 8007b0c:	238b      	movlt	r3, #139	@ 0x8b
 8007b0e:	602b      	strlt	r3, [r5, #0]
 8007b10:	2c00      	cmp	r4, #0
 8007b12:	d0da      	beq.n	8007aca <sniprintf+0x16>
 8007b14:	9b02      	ldr	r3, [sp, #8]
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e7d6      	b.n	8007aca <sniprintf+0x16>
 8007b1c:	20000018 	.word	0x20000018

08007b20 <siscanf>:
 8007b20:	b40e      	push	{r1, r2, r3}
 8007b22:	b570      	push	{r4, r5, r6, lr}
 8007b24:	b09d      	sub	sp, #116	@ 0x74
 8007b26:	ac21      	add	r4, sp, #132	@ 0x84
 8007b28:	2500      	movs	r5, #0
 8007b2a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007b2e:	f854 6b04 	ldr.w	r6, [r4], #4
 8007b32:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007b36:	951b      	str	r5, [sp, #108]	@ 0x6c
 8007b38:	9002      	str	r0, [sp, #8]
 8007b3a:	9006      	str	r0, [sp, #24]
 8007b3c:	f7f8 fb72 	bl	8000224 <strlen>
 8007b40:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <siscanf+0x50>)
 8007b42:	9003      	str	r0, [sp, #12]
 8007b44:	9007      	str	r0, [sp, #28]
 8007b46:	480b      	ldr	r0, [pc, #44]	@ (8007b74 <siscanf+0x54>)
 8007b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b52:	4632      	mov	r2, r6
 8007b54:	4623      	mov	r3, r4
 8007b56:	a902      	add	r1, sp, #8
 8007b58:	6800      	ldr	r0, [r0, #0]
 8007b5a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007b5c:	9514      	str	r5, [sp, #80]	@ 0x50
 8007b5e:	9401      	str	r4, [sp, #4]
 8007b60:	f000 fb68 	bl	8008234 <__ssvfiscanf_r>
 8007b64:	b01d      	add	sp, #116	@ 0x74
 8007b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b6a:	b003      	add	sp, #12
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	08007b79 	.word	0x08007b79
 8007b74:	20000018 	.word	0x20000018

08007b78 <__seofread>:
 8007b78:	2000      	movs	r0, #0
 8007b7a:	4770      	bx	lr

08007b7c <memset>:
 8007b7c:	4402      	add	r2, r0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d100      	bne.n	8007b86 <memset+0xa>
 8007b84:	4770      	bx	lr
 8007b86:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8a:	e7f9      	b.n	8007b80 <memset+0x4>

08007b8c <strncmp>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	b16a      	cbz	r2, 8007bac <strncmp+0x20>
 8007b90:	3901      	subs	r1, #1
 8007b92:	1884      	adds	r4, r0, r2
 8007b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d103      	bne.n	8007ba8 <strncmp+0x1c>
 8007ba0:	42a0      	cmp	r0, r4
 8007ba2:	d001      	beq.n	8007ba8 <strncmp+0x1c>
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	d1f5      	bne.n	8007b94 <strncmp+0x8>
 8007ba8:	1ad0      	subs	r0, r2, r3
 8007baa:	bd10      	pop	{r4, pc}
 8007bac:	4610      	mov	r0, r2
 8007bae:	e7fc      	b.n	8007baa <strncmp+0x1e>

08007bb0 <_reclaim_reent>:
 8007bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8007c68 <_reclaim_reent+0xb8>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4283      	cmp	r3, r0
 8007bb6:	b570      	push	{r4, r5, r6, lr}
 8007bb8:	4604      	mov	r4, r0
 8007bba:	d053      	beq.n	8007c64 <_reclaim_reent+0xb4>
 8007bbc:	69c3      	ldr	r3, [r0, #28]
 8007bbe:	b31b      	cbz	r3, 8007c08 <_reclaim_reent+0x58>
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	b163      	cbz	r3, 8007bde <_reclaim_reent+0x2e>
 8007bc4:	2500      	movs	r5, #0
 8007bc6:	69e3      	ldr	r3, [r4, #28]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	5959      	ldr	r1, [r3, r5]
 8007bcc:	b9b1      	cbnz	r1, 8007bfc <_reclaim_reent+0x4c>
 8007bce:	3504      	adds	r5, #4
 8007bd0:	2d80      	cmp	r5, #128	@ 0x80
 8007bd2:	d1f8      	bne.n	8007bc6 <_reclaim_reent+0x16>
 8007bd4:	69e3      	ldr	r3, [r4, #28]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	68d9      	ldr	r1, [r3, #12]
 8007bda:	f000 f881 	bl	8007ce0 <_free_r>
 8007bde:	69e3      	ldr	r3, [r4, #28]
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	b111      	cbz	r1, 8007bea <_reclaim_reent+0x3a>
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 f87b 	bl	8007ce0 <_free_r>
 8007bea:	69e3      	ldr	r3, [r4, #28]
 8007bec:	689d      	ldr	r5, [r3, #8]
 8007bee:	b15d      	cbz	r5, 8007c08 <_reclaim_reent+0x58>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	682d      	ldr	r5, [r5, #0]
 8007bf6:	f000 f873 	bl	8007ce0 <_free_r>
 8007bfa:	e7f8      	b.n	8007bee <_reclaim_reent+0x3e>
 8007bfc:	680e      	ldr	r6, [r1, #0]
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 f86e 	bl	8007ce0 <_free_r>
 8007c04:	4631      	mov	r1, r6
 8007c06:	e7e1      	b.n	8007bcc <_reclaim_reent+0x1c>
 8007c08:	6961      	ldr	r1, [r4, #20]
 8007c0a:	b111      	cbz	r1, 8007c12 <_reclaim_reent+0x62>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 f867 	bl	8007ce0 <_free_r>
 8007c12:	69e1      	ldr	r1, [r4, #28]
 8007c14:	b111      	cbz	r1, 8007c1c <_reclaim_reent+0x6c>
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f862 	bl	8007ce0 <_free_r>
 8007c1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c1e:	b111      	cbz	r1, 8007c26 <_reclaim_reent+0x76>
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 f85d 	bl	8007ce0 <_free_r>
 8007c26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c28:	b111      	cbz	r1, 8007c30 <_reclaim_reent+0x80>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f858 	bl	8007ce0 <_free_r>
 8007c30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c32:	b111      	cbz	r1, 8007c3a <_reclaim_reent+0x8a>
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 f853 	bl	8007ce0 <_free_r>
 8007c3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c3c:	b111      	cbz	r1, 8007c44 <_reclaim_reent+0x94>
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f84e 	bl	8007ce0 <_free_r>
 8007c44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c46:	b111      	cbz	r1, 8007c4e <_reclaim_reent+0x9e>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 f849 	bl	8007ce0 <_free_r>
 8007c4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c50:	b111      	cbz	r1, 8007c58 <_reclaim_reent+0xa8>
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 f844 	bl	8007ce0 <_free_r>
 8007c58:	6a23      	ldr	r3, [r4, #32]
 8007c5a:	b11b      	cbz	r3, 8007c64 <_reclaim_reent+0xb4>
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c62:	4718      	bx	r3
 8007c64:	bd70      	pop	{r4, r5, r6, pc}
 8007c66:	bf00      	nop
 8007c68:	20000018 	.word	0x20000018

08007c6c <__errno>:
 8007c6c:	4b01      	ldr	r3, [pc, #4]	@ (8007c74 <__errno+0x8>)
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000018 	.word	0x20000018

08007c78 <__libc_init_array>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8007cb0 <__libc_init_array+0x38>)
 8007c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8007cb4 <__libc_init_array+0x3c>)
 8007c7e:	1b64      	subs	r4, r4, r5
 8007c80:	10a4      	asrs	r4, r4, #2
 8007c82:	2600      	movs	r6, #0
 8007c84:	42a6      	cmp	r6, r4
 8007c86:	d109      	bne.n	8007c9c <__libc_init_array+0x24>
 8007c88:	4d0b      	ldr	r5, [pc, #44]	@ (8007cb8 <__libc_init_array+0x40>)
 8007c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8007cbc <__libc_init_array+0x44>)
 8007c8c:	f001 f8e2 	bl	8008e54 <_init>
 8007c90:	1b64      	subs	r4, r4, r5
 8007c92:	10a4      	asrs	r4, r4, #2
 8007c94:	2600      	movs	r6, #0
 8007c96:	42a6      	cmp	r6, r4
 8007c98:	d105      	bne.n	8007ca6 <__libc_init_array+0x2e>
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca0:	4798      	blx	r3
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7ee      	b.n	8007c84 <__libc_init_array+0xc>
 8007ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007caa:	4798      	blx	r3
 8007cac:	3601      	adds	r6, #1
 8007cae:	e7f2      	b.n	8007c96 <__libc_init_array+0x1e>
 8007cb0:	080096fc 	.word	0x080096fc
 8007cb4:	080096fc 	.word	0x080096fc
 8007cb8:	080096fc 	.word	0x080096fc
 8007cbc:	08009700 	.word	0x08009700

08007cc0 <__retarget_lock_acquire_recursive>:
 8007cc0:	4770      	bx	lr

08007cc2 <__retarget_lock_release_recursive>:
 8007cc2:	4770      	bx	lr

08007cc4 <memcpy>:
 8007cc4:	440a      	add	r2, r1
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ccc:	d100      	bne.n	8007cd0 <memcpy+0xc>
 8007cce:	4770      	bx	lr
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	d1f9      	bne.n	8007cd2 <memcpy+0xe>
 8007cde:	bd10      	pop	{r4, pc}

08007ce0 <_free_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d041      	beq.n	8007d6c <_free_r+0x8c>
 8007ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cec:	1f0c      	subs	r4, r1, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	18e4      	addlt	r4, r4, r3
 8007cf4:	f000 f8e0 	bl	8007eb8 <__malloc_lock>
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d70 <_free_r+0x90>)
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	b933      	cbnz	r3, 8007d0c <_free_r+0x2c>
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6014      	str	r4, [r2, #0]
 8007d02:	4628      	mov	r0, r5
 8007d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d08:	f000 b8dc 	b.w	8007ec4 <__malloc_unlock>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d908      	bls.n	8007d22 <_free_r+0x42>
 8007d10:	6820      	ldr	r0, [r4, #0]
 8007d12:	1821      	adds	r1, r4, r0
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf01      	itttt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	1809      	addeq	r1, r1, r0
 8007d1e:	6021      	streq	r1, [r4, #0]
 8007d20:	e7ed      	b.n	8007cfe <_free_r+0x1e>
 8007d22:	461a      	mov	r2, r3
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b10b      	cbz	r3, 8007d2c <_free_r+0x4c>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d9fa      	bls.n	8007d22 <_free_r+0x42>
 8007d2c:	6811      	ldr	r1, [r2, #0]
 8007d2e:	1850      	adds	r0, r2, r1
 8007d30:	42a0      	cmp	r0, r4
 8007d32:	d10b      	bne.n	8007d4c <_free_r+0x6c>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	4401      	add	r1, r0
 8007d38:	1850      	adds	r0, r2, r1
 8007d3a:	4283      	cmp	r3, r0
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	d1e0      	bne.n	8007d02 <_free_r+0x22>
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	6053      	str	r3, [r2, #4]
 8007d46:	4408      	add	r0, r1
 8007d48:	6010      	str	r0, [r2, #0]
 8007d4a:	e7da      	b.n	8007d02 <_free_r+0x22>
 8007d4c:	d902      	bls.n	8007d54 <_free_r+0x74>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	602b      	str	r3, [r5, #0]
 8007d52:	e7d6      	b.n	8007d02 <_free_r+0x22>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	1821      	adds	r1, r4, r0
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf04      	itt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	6063      	str	r3, [r4, #4]
 8007d62:	bf04      	itt	eq
 8007d64:	1809      	addeq	r1, r1, r0
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	6054      	str	r4, [r2, #4]
 8007d6a:	e7ca      	b.n	8007d02 <_free_r+0x22>
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	20004d70 	.word	0x20004d70

08007d74 <sbrk_aligned>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4e0f      	ldr	r6, [pc, #60]	@ (8007db4 <sbrk_aligned+0x40>)
 8007d78:	460c      	mov	r4, r1
 8007d7a:	6831      	ldr	r1, [r6, #0]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	b911      	cbnz	r1, 8007d86 <sbrk_aligned+0x12>
 8007d80:	f000 ff36 	bl	8008bf0 <_sbrk_r>
 8007d84:	6030      	str	r0, [r6, #0]
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f000 ff31 	bl	8008bf0 <_sbrk_r>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d103      	bne.n	8007d9a <sbrk_aligned+0x26>
 8007d92:	f04f 34ff 	mov.w	r4, #4294967295
 8007d96:	4620      	mov	r0, r4
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
 8007d9a:	1cc4      	adds	r4, r0, #3
 8007d9c:	f024 0403 	bic.w	r4, r4, #3
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d0f8      	beq.n	8007d96 <sbrk_aligned+0x22>
 8007da4:	1a21      	subs	r1, r4, r0
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 ff22 	bl	8008bf0 <_sbrk_r>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d1f2      	bne.n	8007d96 <sbrk_aligned+0x22>
 8007db0:	e7ef      	b.n	8007d92 <sbrk_aligned+0x1e>
 8007db2:	bf00      	nop
 8007db4:	20004d6c 	.word	0x20004d6c

08007db8 <_malloc_r>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	1ccd      	adds	r5, r1, #3
 8007dbe:	f025 0503 	bic.w	r5, r5, #3
 8007dc2:	3508      	adds	r5, #8
 8007dc4:	2d0c      	cmp	r5, #12
 8007dc6:	bf38      	it	cc
 8007dc8:	250c      	movcc	r5, #12
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	4606      	mov	r6, r0
 8007dce:	db01      	blt.n	8007dd4 <_malloc_r+0x1c>
 8007dd0:	42a9      	cmp	r1, r5
 8007dd2:	d904      	bls.n	8007dde <_malloc_r+0x26>
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	6033      	str	r3, [r6, #0]
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007eb4 <_malloc_r+0xfc>
 8007de2:	f000 f869 	bl	8007eb8 <__malloc_lock>
 8007de6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dea:	461c      	mov	r4, r3
 8007dec:	bb44      	cbnz	r4, 8007e40 <_malloc_r+0x88>
 8007dee:	4629      	mov	r1, r5
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ffbf 	bl	8007d74 <sbrk_aligned>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	4604      	mov	r4, r0
 8007dfa:	d158      	bne.n	8007eae <_malloc_r+0xf6>
 8007dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8007e00:	4627      	mov	r7, r4
 8007e02:	2f00      	cmp	r7, #0
 8007e04:	d143      	bne.n	8007e8e <_malloc_r+0xd6>
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	d04b      	beq.n	8007ea2 <_malloc_r+0xea>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4630      	mov	r0, r6
 8007e10:	eb04 0903 	add.w	r9, r4, r3
 8007e14:	f000 feec 	bl	8008bf0 <_sbrk_r>
 8007e18:	4581      	cmp	r9, r0
 8007e1a:	d142      	bne.n	8007ea2 <_malloc_r+0xea>
 8007e1c:	6821      	ldr	r1, [r4, #0]
 8007e1e:	1a6d      	subs	r5, r5, r1
 8007e20:	4629      	mov	r1, r5
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffa6 	bl	8007d74 <sbrk_aligned>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d03a      	beq.n	8007ea2 <_malloc_r+0xea>
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	442b      	add	r3, r5
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	f8d8 3000 	ldr.w	r3, [r8]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	bb62      	cbnz	r2, 8007e94 <_malloc_r+0xdc>
 8007e3a:	f8c8 7000 	str.w	r7, [r8]
 8007e3e:	e00f      	b.n	8007e60 <_malloc_r+0xa8>
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	1b52      	subs	r2, r2, r5
 8007e44:	d420      	bmi.n	8007e88 <_malloc_r+0xd0>
 8007e46:	2a0b      	cmp	r2, #11
 8007e48:	d917      	bls.n	8007e7a <_malloc_r+0xc2>
 8007e4a:	1961      	adds	r1, r4, r5
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	6025      	str	r5, [r4, #0]
 8007e50:	bf18      	it	ne
 8007e52:	6059      	strne	r1, [r3, #4]
 8007e54:	6863      	ldr	r3, [r4, #4]
 8007e56:	bf08      	it	eq
 8007e58:	f8c8 1000 	streq.w	r1, [r8]
 8007e5c:	5162      	str	r2, [r4, r5]
 8007e5e:	604b      	str	r3, [r1, #4]
 8007e60:	4630      	mov	r0, r6
 8007e62:	f000 f82f 	bl	8007ec4 <__malloc_unlock>
 8007e66:	f104 000b 	add.w	r0, r4, #11
 8007e6a:	1d23      	adds	r3, r4, #4
 8007e6c:	f020 0007 	bic.w	r0, r0, #7
 8007e70:	1ac2      	subs	r2, r0, r3
 8007e72:	bf1c      	itt	ne
 8007e74:	1a1b      	subne	r3, r3, r0
 8007e76:	50a3      	strne	r3, [r4, r2]
 8007e78:	e7af      	b.n	8007dda <_malloc_r+0x22>
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	bf0c      	ite	eq
 8007e80:	f8c8 2000 	streq.w	r2, [r8]
 8007e84:	605a      	strne	r2, [r3, #4]
 8007e86:	e7eb      	b.n	8007e60 <_malloc_r+0xa8>
 8007e88:	4623      	mov	r3, r4
 8007e8a:	6864      	ldr	r4, [r4, #4]
 8007e8c:	e7ae      	b.n	8007dec <_malloc_r+0x34>
 8007e8e:	463c      	mov	r4, r7
 8007e90:	687f      	ldr	r7, [r7, #4]
 8007e92:	e7b6      	b.n	8007e02 <_malloc_r+0x4a>
 8007e94:	461a      	mov	r2, r3
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d1fb      	bne.n	8007e94 <_malloc_r+0xdc>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6053      	str	r3, [r2, #4]
 8007ea0:	e7de      	b.n	8007e60 <_malloc_r+0xa8>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 f80c 	bl	8007ec4 <__malloc_unlock>
 8007eac:	e794      	b.n	8007dd8 <_malloc_r+0x20>
 8007eae:	6005      	str	r5, [r0, #0]
 8007eb0:	e7d6      	b.n	8007e60 <_malloc_r+0xa8>
 8007eb2:	bf00      	nop
 8007eb4:	20004d70 	.word	0x20004d70

08007eb8 <__malloc_lock>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	@ (8007ec0 <__malloc_lock+0x8>)
 8007eba:	f7ff bf01 	b.w	8007cc0 <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	20004d68 	.word	0x20004d68

08007ec4 <__malloc_unlock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	@ (8007ecc <__malloc_unlock+0x8>)
 8007ec6:	f7ff befc 	b.w	8007cc2 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	20004d68 	.word	0x20004d68

08007ed0 <__ssputs_r>:
 8007ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	688e      	ldr	r6, [r1, #8]
 8007ed6:	461f      	mov	r7, r3
 8007ed8:	42be      	cmp	r6, r7
 8007eda:	680b      	ldr	r3, [r1, #0]
 8007edc:	4682      	mov	sl, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	4690      	mov	r8, r2
 8007ee2:	d82d      	bhi.n	8007f40 <__ssputs_r+0x70>
 8007ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ee8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007eec:	d026      	beq.n	8007f3c <__ssputs_r+0x6c>
 8007eee:	6965      	ldr	r5, [r4, #20]
 8007ef0:	6909      	ldr	r1, [r1, #16]
 8007ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ef6:	eba3 0901 	sub.w	r9, r3, r1
 8007efa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007efe:	1c7b      	adds	r3, r7, #1
 8007f00:	444b      	add	r3, r9
 8007f02:	106d      	asrs	r5, r5, #1
 8007f04:	429d      	cmp	r5, r3
 8007f06:	bf38      	it	cc
 8007f08:	461d      	movcc	r5, r3
 8007f0a:	0553      	lsls	r3, r2, #21
 8007f0c:	d527      	bpl.n	8007f5e <__ssputs_r+0x8e>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	f7ff ff52 	bl	8007db8 <_malloc_r>
 8007f14:	4606      	mov	r6, r0
 8007f16:	b360      	cbz	r0, 8007f72 <__ssputs_r+0xa2>
 8007f18:	6921      	ldr	r1, [r4, #16]
 8007f1a:	464a      	mov	r2, r9
 8007f1c:	f7ff fed2 	bl	8007cc4 <memcpy>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	6126      	str	r6, [r4, #16]
 8007f2e:	6165      	str	r5, [r4, #20]
 8007f30:	444e      	add	r6, r9
 8007f32:	eba5 0509 	sub.w	r5, r5, r9
 8007f36:	6026      	str	r6, [r4, #0]
 8007f38:	60a5      	str	r5, [r4, #8]
 8007f3a:	463e      	mov	r6, r7
 8007f3c:	42be      	cmp	r6, r7
 8007f3e:	d900      	bls.n	8007f42 <__ssputs_r+0x72>
 8007f40:	463e      	mov	r6, r7
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	4632      	mov	r2, r6
 8007f46:	4641      	mov	r1, r8
 8007f48:	f000 fe37 	bl	8008bba <memmove>
 8007f4c:	68a3      	ldr	r3, [r4, #8]
 8007f4e:	1b9b      	subs	r3, r3, r6
 8007f50:	60a3      	str	r3, [r4, #8]
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	4433      	add	r3, r6
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f5e:	462a      	mov	r2, r5
 8007f60:	f000 fe56 	bl	8008c10 <_realloc_r>
 8007f64:	4606      	mov	r6, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d1e0      	bne.n	8007f2c <__ssputs_r+0x5c>
 8007f6a:	6921      	ldr	r1, [r4, #16]
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	f7ff feb7 	bl	8007ce0 <_free_r>
 8007f72:	230c      	movs	r3, #12
 8007f74:	f8ca 3000 	str.w	r3, [sl]
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	e7e9      	b.n	8007f5a <__ssputs_r+0x8a>
	...

08007f88 <_svfiprintf_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	4698      	mov	r8, r3
 8007f8e:	898b      	ldrh	r3, [r1, #12]
 8007f90:	061b      	lsls	r3, r3, #24
 8007f92:	b09d      	sub	sp, #116	@ 0x74
 8007f94:	4607      	mov	r7, r0
 8007f96:	460d      	mov	r5, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	d510      	bpl.n	8007fbe <_svfiprintf_r+0x36>
 8007f9c:	690b      	ldr	r3, [r1, #16]
 8007f9e:	b973      	cbnz	r3, 8007fbe <_svfiprintf_r+0x36>
 8007fa0:	2140      	movs	r1, #64	@ 0x40
 8007fa2:	f7ff ff09 	bl	8007db8 <_malloc_r>
 8007fa6:	6028      	str	r0, [r5, #0]
 8007fa8:	6128      	str	r0, [r5, #16]
 8007faa:	b930      	cbnz	r0, 8007fba <_svfiprintf_r+0x32>
 8007fac:	230c      	movs	r3, #12
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	b01d      	add	sp, #116	@ 0x74
 8007fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fba:	2340      	movs	r3, #64	@ 0x40
 8007fbc:	616b      	str	r3, [r5, #20]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fc2:	2320      	movs	r3, #32
 8007fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fcc:	2330      	movs	r3, #48	@ 0x30
 8007fce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800816c <_svfiprintf_r+0x1e4>
 8007fd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fd6:	f04f 0901 	mov.w	r9, #1
 8007fda:	4623      	mov	r3, r4
 8007fdc:	469a      	mov	sl, r3
 8007fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe2:	b10a      	cbz	r2, 8007fe8 <_svfiprintf_r+0x60>
 8007fe4:	2a25      	cmp	r2, #37	@ 0x25
 8007fe6:	d1f9      	bne.n	8007fdc <_svfiprintf_r+0x54>
 8007fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8007fec:	d00b      	beq.n	8008006 <_svfiprintf_r+0x7e>
 8007fee:	465b      	mov	r3, fp
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ff6b 	bl	8007ed0 <__ssputs_r>
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f000 80a7 	beq.w	800814e <_svfiprintf_r+0x1c6>
 8008000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008002:	445a      	add	r2, fp
 8008004:	9209      	str	r2, [sp, #36]	@ 0x24
 8008006:	f89a 3000 	ldrb.w	r3, [sl]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 809f 	beq.w	800814e <_svfiprintf_r+0x1c6>
 8008010:	2300      	movs	r3, #0
 8008012:	f04f 32ff 	mov.w	r2, #4294967295
 8008016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800801a:	f10a 0a01 	add.w	sl, sl, #1
 800801e:	9304      	str	r3, [sp, #16]
 8008020:	9307      	str	r3, [sp, #28]
 8008022:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008026:	931a      	str	r3, [sp, #104]	@ 0x68
 8008028:	4654      	mov	r4, sl
 800802a:	2205      	movs	r2, #5
 800802c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008030:	484e      	ldr	r0, [pc, #312]	@ (800816c <_svfiprintf_r+0x1e4>)
 8008032:	f7f8 f905 	bl	8000240 <memchr>
 8008036:	9a04      	ldr	r2, [sp, #16]
 8008038:	b9d8      	cbnz	r0, 8008072 <_svfiprintf_r+0xea>
 800803a:	06d0      	lsls	r0, r2, #27
 800803c:	bf44      	itt	mi
 800803e:	2320      	movmi	r3, #32
 8008040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008044:	0711      	lsls	r1, r2, #28
 8008046:	bf44      	itt	mi
 8008048:	232b      	movmi	r3, #43	@ 0x2b
 800804a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800804e:	f89a 3000 	ldrb.w	r3, [sl]
 8008052:	2b2a      	cmp	r3, #42	@ 0x2a
 8008054:	d015      	beq.n	8008082 <_svfiprintf_r+0xfa>
 8008056:	9a07      	ldr	r2, [sp, #28]
 8008058:	4654      	mov	r4, sl
 800805a:	2000      	movs	r0, #0
 800805c:	f04f 0c0a 	mov.w	ip, #10
 8008060:	4621      	mov	r1, r4
 8008062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008066:	3b30      	subs	r3, #48	@ 0x30
 8008068:	2b09      	cmp	r3, #9
 800806a:	d94b      	bls.n	8008104 <_svfiprintf_r+0x17c>
 800806c:	b1b0      	cbz	r0, 800809c <_svfiprintf_r+0x114>
 800806e:	9207      	str	r2, [sp, #28]
 8008070:	e014      	b.n	800809c <_svfiprintf_r+0x114>
 8008072:	eba0 0308 	sub.w	r3, r0, r8
 8008076:	fa09 f303 	lsl.w	r3, r9, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	46a2      	mov	sl, r4
 8008080:	e7d2      	b.n	8008028 <_svfiprintf_r+0xa0>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	1d19      	adds	r1, r3, #4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	9103      	str	r1, [sp, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	bfbb      	ittet	lt
 800808e:	425b      	neglt	r3, r3
 8008090:	f042 0202 	orrlt.w	r2, r2, #2
 8008094:	9307      	strge	r3, [sp, #28]
 8008096:	9307      	strlt	r3, [sp, #28]
 8008098:	bfb8      	it	lt
 800809a:	9204      	strlt	r2, [sp, #16]
 800809c:	7823      	ldrb	r3, [r4, #0]
 800809e:	2b2e      	cmp	r3, #46	@ 0x2e
 80080a0:	d10a      	bne.n	80080b8 <_svfiprintf_r+0x130>
 80080a2:	7863      	ldrb	r3, [r4, #1]
 80080a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a6:	d132      	bne.n	800810e <_svfiprintf_r+0x186>
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	1d1a      	adds	r2, r3, #4
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	9203      	str	r2, [sp, #12]
 80080b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080b4:	3402      	adds	r4, #2
 80080b6:	9305      	str	r3, [sp, #20]
 80080b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800817c <_svfiprintf_r+0x1f4>
 80080bc:	7821      	ldrb	r1, [r4, #0]
 80080be:	2203      	movs	r2, #3
 80080c0:	4650      	mov	r0, sl
 80080c2:	f7f8 f8bd 	bl	8000240 <memchr>
 80080c6:	b138      	cbz	r0, 80080d8 <_svfiprintf_r+0x150>
 80080c8:	9b04      	ldr	r3, [sp, #16]
 80080ca:	eba0 000a 	sub.w	r0, r0, sl
 80080ce:	2240      	movs	r2, #64	@ 0x40
 80080d0:	4082      	lsls	r2, r0
 80080d2:	4313      	orrs	r3, r2
 80080d4:	3401      	adds	r4, #1
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080dc:	4824      	ldr	r0, [pc, #144]	@ (8008170 <_svfiprintf_r+0x1e8>)
 80080de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080e2:	2206      	movs	r2, #6
 80080e4:	f7f8 f8ac 	bl	8000240 <memchr>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d036      	beq.n	800815a <_svfiprintf_r+0x1d2>
 80080ec:	4b21      	ldr	r3, [pc, #132]	@ (8008174 <_svfiprintf_r+0x1ec>)
 80080ee:	bb1b      	cbnz	r3, 8008138 <_svfiprintf_r+0x1b0>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	3307      	adds	r3, #7
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	3308      	adds	r3, #8
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080fe:	4433      	add	r3, r6
 8008100:	9309      	str	r3, [sp, #36]	@ 0x24
 8008102:	e76a      	b.n	8007fda <_svfiprintf_r+0x52>
 8008104:	fb0c 3202 	mla	r2, ip, r2, r3
 8008108:	460c      	mov	r4, r1
 800810a:	2001      	movs	r0, #1
 800810c:	e7a8      	b.n	8008060 <_svfiprintf_r+0xd8>
 800810e:	2300      	movs	r3, #0
 8008110:	3401      	adds	r4, #1
 8008112:	9305      	str	r3, [sp, #20]
 8008114:	4619      	mov	r1, r3
 8008116:	f04f 0c0a 	mov.w	ip, #10
 800811a:	4620      	mov	r0, r4
 800811c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008120:	3a30      	subs	r2, #48	@ 0x30
 8008122:	2a09      	cmp	r2, #9
 8008124:	d903      	bls.n	800812e <_svfiprintf_r+0x1a6>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0c6      	beq.n	80080b8 <_svfiprintf_r+0x130>
 800812a:	9105      	str	r1, [sp, #20]
 800812c:	e7c4      	b.n	80080b8 <_svfiprintf_r+0x130>
 800812e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008132:	4604      	mov	r4, r0
 8008134:	2301      	movs	r3, #1
 8008136:	e7f0      	b.n	800811a <_svfiprintf_r+0x192>
 8008138:	ab03      	add	r3, sp, #12
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	462a      	mov	r2, r5
 800813e:	4b0e      	ldr	r3, [pc, #56]	@ (8008178 <_svfiprintf_r+0x1f0>)
 8008140:	a904      	add	r1, sp, #16
 8008142:	4638      	mov	r0, r7
 8008144:	f3af 8000 	nop.w
 8008148:	1c42      	adds	r2, r0, #1
 800814a:	4606      	mov	r6, r0
 800814c:	d1d6      	bne.n	80080fc <_svfiprintf_r+0x174>
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	065b      	lsls	r3, r3, #25
 8008152:	f53f af2d 	bmi.w	8007fb0 <_svfiprintf_r+0x28>
 8008156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008158:	e72c      	b.n	8007fb4 <_svfiprintf_r+0x2c>
 800815a:	ab03      	add	r3, sp, #12
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	462a      	mov	r2, r5
 8008160:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <_svfiprintf_r+0x1f0>)
 8008162:	a904      	add	r1, sp, #16
 8008164:	4638      	mov	r0, r7
 8008166:	f000 fa49 	bl	80085fc <_printf_i>
 800816a:	e7ed      	b.n	8008148 <_svfiprintf_r+0x1c0>
 800816c:	080095a4 	.word	0x080095a4
 8008170:	080095ae 	.word	0x080095ae
 8008174:	00000000 	.word	0x00000000
 8008178:	08007ed1 	.word	0x08007ed1
 800817c:	080095aa 	.word	0x080095aa

08008180 <_sungetc_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	1c4b      	adds	r3, r1, #1
 8008184:	4614      	mov	r4, r2
 8008186:	d103      	bne.n	8008190 <_sungetc_r+0x10>
 8008188:	f04f 35ff 	mov.w	r5, #4294967295
 800818c:	4628      	mov	r0, r5
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	8993      	ldrh	r3, [r2, #12]
 8008192:	f023 0320 	bic.w	r3, r3, #32
 8008196:	8193      	strh	r3, [r2, #12]
 8008198:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800819a:	6852      	ldr	r2, [r2, #4]
 800819c:	b2cd      	uxtb	r5, r1
 800819e:	b18b      	cbz	r3, 80081c4 <_sungetc_r+0x44>
 80081a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80081a2:	4293      	cmp	r3, r2
 80081a4:	dd08      	ble.n	80081b8 <_sungetc_r+0x38>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	6022      	str	r2, [r4, #0]
 80081ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	3301      	adds	r3, #1
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	e7e9      	b.n	800818c <_sungetc_r+0xc>
 80081b8:	4621      	mov	r1, r4
 80081ba:	f000 fcc4 	bl	8008b46 <__submore>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d0f1      	beq.n	80081a6 <_sungetc_r+0x26>
 80081c2:	e7e1      	b.n	8008188 <_sungetc_r+0x8>
 80081c4:	6921      	ldr	r1, [r4, #16]
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	b151      	cbz	r1, 80081e0 <_sungetc_r+0x60>
 80081ca:	4299      	cmp	r1, r3
 80081cc:	d208      	bcs.n	80081e0 <_sungetc_r+0x60>
 80081ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80081d2:	42a9      	cmp	r1, r5
 80081d4:	d104      	bne.n	80081e0 <_sungetc_r+0x60>
 80081d6:	3b01      	subs	r3, #1
 80081d8:	3201      	adds	r2, #1
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	6062      	str	r2, [r4, #4]
 80081de:	e7d5      	b.n	800818c <_sungetc_r+0xc>
 80081e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80081e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80081ea:	2303      	movs	r3, #3
 80081ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 80081ee:	4623      	mov	r3, r4
 80081f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	2301      	movs	r3, #1
 80081f8:	e7dc      	b.n	80081b4 <_sungetc_r+0x34>

080081fa <__ssrefill_r>:
 80081fa:	b510      	push	{r4, lr}
 80081fc:	460c      	mov	r4, r1
 80081fe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008200:	b169      	cbz	r1, 800821e <__ssrefill_r+0x24>
 8008202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008206:	4299      	cmp	r1, r3
 8008208:	d001      	beq.n	800820e <__ssrefill_r+0x14>
 800820a:	f7ff fd69 	bl	8007ce0 <_free_r>
 800820e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008210:	6063      	str	r3, [r4, #4]
 8008212:	2000      	movs	r0, #0
 8008214:	6360      	str	r0, [r4, #52]	@ 0x34
 8008216:	b113      	cbz	r3, 800821e <__ssrefill_r+0x24>
 8008218:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	bd10      	pop	{r4, pc}
 800821e:	6923      	ldr	r3, [r4, #16]
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f043 0320 	orr.w	r3, r3, #32
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	f04f 30ff 	mov.w	r0, #4294967295
 8008232:	e7f3      	b.n	800821c <__ssrefill_r+0x22>

08008234 <__ssvfiscanf_r>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	460c      	mov	r4, r1
 800823a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800823e:	2100      	movs	r1, #0
 8008240:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008244:	49a6      	ldr	r1, [pc, #664]	@ (80084e0 <__ssvfiscanf_r+0x2ac>)
 8008246:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008248:	f10d 0804 	add.w	r8, sp, #4
 800824c:	49a5      	ldr	r1, [pc, #660]	@ (80084e4 <__ssvfiscanf_r+0x2b0>)
 800824e:	4fa6      	ldr	r7, [pc, #664]	@ (80084e8 <__ssvfiscanf_r+0x2b4>)
 8008250:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008254:	4606      	mov	r6, r0
 8008256:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	f892 9000 	ldrb.w	r9, [r2]
 800825e:	f1b9 0f00 	cmp.w	r9, #0
 8008262:	f000 8158 	beq.w	8008516 <__ssvfiscanf_r+0x2e2>
 8008266:	f817 3009 	ldrb.w	r3, [r7, r9]
 800826a:	f013 0308 	ands.w	r3, r3, #8
 800826e:	f102 0501 	add.w	r5, r2, #1
 8008272:	d019      	beq.n	80082a8 <__ssvfiscanf_r+0x74>
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd0f      	ble.n	800829a <__ssvfiscanf_r+0x66>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	781a      	ldrb	r2, [r3, #0]
 800827e:	5cba      	ldrb	r2, [r7, r2]
 8008280:	0712      	lsls	r2, r2, #28
 8008282:	d401      	bmi.n	8008288 <__ssvfiscanf_r+0x54>
 8008284:	462a      	mov	r2, r5
 8008286:	e7e8      	b.n	800825a <__ssvfiscanf_r+0x26>
 8008288:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800828a:	3201      	adds	r2, #1
 800828c:	9245      	str	r2, [sp, #276]	@ 0x114
 800828e:	6862      	ldr	r2, [r4, #4]
 8008290:	3301      	adds	r3, #1
 8008292:	3a01      	subs	r2, #1
 8008294:	6062      	str	r2, [r4, #4]
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	e7ec      	b.n	8008274 <__ssvfiscanf_r+0x40>
 800829a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800829c:	4621      	mov	r1, r4
 800829e:	4630      	mov	r0, r6
 80082a0:	4798      	blx	r3
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0e9      	beq.n	800827a <__ssvfiscanf_r+0x46>
 80082a6:	e7ed      	b.n	8008284 <__ssvfiscanf_r+0x50>
 80082a8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80082ac:	f040 8085 	bne.w	80083ba <__ssvfiscanf_r+0x186>
 80082b0:	9341      	str	r3, [sp, #260]	@ 0x104
 80082b2:	9343      	str	r3, [sp, #268]	@ 0x10c
 80082b4:	7853      	ldrb	r3, [r2, #1]
 80082b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082b8:	bf02      	ittt	eq
 80082ba:	2310      	moveq	r3, #16
 80082bc:	1c95      	addeq	r5, r2, #2
 80082be:	9341      	streq	r3, [sp, #260]	@ 0x104
 80082c0:	220a      	movs	r2, #10
 80082c2:	46aa      	mov	sl, r5
 80082c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80082c8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	d91e      	bls.n	800830e <__ssvfiscanf_r+0xda>
 80082d0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80084ec <__ssvfiscanf_r+0x2b8>
 80082d4:	2203      	movs	r2, #3
 80082d6:	4658      	mov	r0, fp
 80082d8:	f7f7 ffb2 	bl	8000240 <memchr>
 80082dc:	b138      	cbz	r0, 80082ee <__ssvfiscanf_r+0xba>
 80082de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80082e0:	eba0 000b 	sub.w	r0, r0, fp
 80082e4:	2301      	movs	r3, #1
 80082e6:	4083      	lsls	r3, r0
 80082e8:	4313      	orrs	r3, r2
 80082ea:	9341      	str	r3, [sp, #260]	@ 0x104
 80082ec:	4655      	mov	r5, sl
 80082ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082f2:	2b78      	cmp	r3, #120	@ 0x78
 80082f4:	d806      	bhi.n	8008304 <__ssvfiscanf_r+0xd0>
 80082f6:	2b57      	cmp	r3, #87	@ 0x57
 80082f8:	d810      	bhi.n	800831c <__ssvfiscanf_r+0xe8>
 80082fa:	2b25      	cmp	r3, #37	@ 0x25
 80082fc:	d05d      	beq.n	80083ba <__ssvfiscanf_r+0x186>
 80082fe:	d857      	bhi.n	80083b0 <__ssvfiscanf_r+0x17c>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d075      	beq.n	80083f0 <__ssvfiscanf_r+0x1bc>
 8008304:	2303      	movs	r3, #3
 8008306:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008308:	230a      	movs	r3, #10
 800830a:	9342      	str	r3, [sp, #264]	@ 0x108
 800830c:	e088      	b.n	8008420 <__ssvfiscanf_r+0x1ec>
 800830e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008310:	fb02 1103 	mla	r1, r2, r3, r1
 8008314:	3930      	subs	r1, #48	@ 0x30
 8008316:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008318:	4655      	mov	r5, sl
 800831a:	e7d2      	b.n	80082c2 <__ssvfiscanf_r+0x8e>
 800831c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008320:	2a20      	cmp	r2, #32
 8008322:	d8ef      	bhi.n	8008304 <__ssvfiscanf_r+0xd0>
 8008324:	a101      	add	r1, pc, #4	@ (adr r1, 800832c <__ssvfiscanf_r+0xf8>)
 8008326:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800832a:	bf00      	nop
 800832c:	080083ff 	.word	0x080083ff
 8008330:	08008305 	.word	0x08008305
 8008334:	08008305 	.word	0x08008305
 8008338:	08008459 	.word	0x08008459
 800833c:	08008305 	.word	0x08008305
 8008340:	08008305 	.word	0x08008305
 8008344:	08008305 	.word	0x08008305
 8008348:	08008305 	.word	0x08008305
 800834c:	08008305 	.word	0x08008305
 8008350:	08008305 	.word	0x08008305
 8008354:	08008305 	.word	0x08008305
 8008358:	0800846f 	.word	0x0800846f
 800835c:	08008455 	.word	0x08008455
 8008360:	080083b7 	.word	0x080083b7
 8008364:	080083b7 	.word	0x080083b7
 8008368:	080083b7 	.word	0x080083b7
 800836c:	08008305 	.word	0x08008305
 8008370:	08008411 	.word	0x08008411
 8008374:	08008305 	.word	0x08008305
 8008378:	08008305 	.word	0x08008305
 800837c:	08008305 	.word	0x08008305
 8008380:	08008305 	.word	0x08008305
 8008384:	0800847f 	.word	0x0800847f
 8008388:	08008419 	.word	0x08008419
 800838c:	080083f7 	.word	0x080083f7
 8008390:	08008305 	.word	0x08008305
 8008394:	08008305 	.word	0x08008305
 8008398:	0800847b 	.word	0x0800847b
 800839c:	08008305 	.word	0x08008305
 80083a0:	08008455 	.word	0x08008455
 80083a4:	08008305 	.word	0x08008305
 80083a8:	08008305 	.word	0x08008305
 80083ac:	080083ff 	.word	0x080083ff
 80083b0:	3b45      	subs	r3, #69	@ 0x45
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d8a6      	bhi.n	8008304 <__ssvfiscanf_r+0xd0>
 80083b6:	2305      	movs	r3, #5
 80083b8:	e031      	b.n	800841e <__ssvfiscanf_r+0x1ea>
 80083ba:	6863      	ldr	r3, [r4, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dd0d      	ble.n	80083dc <__ssvfiscanf_r+0x1a8>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	781a      	ldrb	r2, [r3, #0]
 80083c4:	454a      	cmp	r2, r9
 80083c6:	f040 80a6 	bne.w	8008516 <__ssvfiscanf_r+0x2e2>
 80083ca:	3301      	adds	r3, #1
 80083cc:	6862      	ldr	r2, [r4, #4]
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80083d2:	3a01      	subs	r2, #1
 80083d4:	3301      	adds	r3, #1
 80083d6:	6062      	str	r2, [r4, #4]
 80083d8:	9345      	str	r3, [sp, #276]	@ 0x114
 80083da:	e753      	b.n	8008284 <__ssvfiscanf_r+0x50>
 80083dc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80083de:	4621      	mov	r1, r4
 80083e0:	4630      	mov	r0, r6
 80083e2:	4798      	blx	r3
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d0eb      	beq.n	80083c0 <__ssvfiscanf_r+0x18c>
 80083e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80083ea:	2800      	cmp	r0, #0
 80083ec:	f040 808b 	bne.w	8008506 <__ssvfiscanf_r+0x2d2>
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	e08b      	b.n	800850e <__ssvfiscanf_r+0x2da>
 80083f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80083f8:	f042 0220 	orr.w	r2, r2, #32
 80083fc:	9241      	str	r2, [sp, #260]	@ 0x104
 80083fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008404:	9241      	str	r2, [sp, #260]	@ 0x104
 8008406:	2210      	movs	r2, #16
 8008408:	2b6e      	cmp	r3, #110	@ 0x6e
 800840a:	9242      	str	r2, [sp, #264]	@ 0x108
 800840c:	d902      	bls.n	8008414 <__ssvfiscanf_r+0x1e0>
 800840e:	e005      	b.n	800841c <__ssvfiscanf_r+0x1e8>
 8008410:	2300      	movs	r3, #0
 8008412:	9342      	str	r3, [sp, #264]	@ 0x108
 8008414:	2303      	movs	r3, #3
 8008416:	e002      	b.n	800841e <__ssvfiscanf_r+0x1ea>
 8008418:	2308      	movs	r3, #8
 800841a:	9342      	str	r3, [sp, #264]	@ 0x108
 800841c:	2304      	movs	r3, #4
 800841e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	dd39      	ble.n	800849a <__ssvfiscanf_r+0x266>
 8008426:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008428:	0659      	lsls	r1, r3, #25
 800842a:	d404      	bmi.n	8008436 <__ssvfiscanf_r+0x202>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	781a      	ldrb	r2, [r3, #0]
 8008430:	5cba      	ldrb	r2, [r7, r2]
 8008432:	0712      	lsls	r2, r2, #28
 8008434:	d438      	bmi.n	80084a8 <__ssvfiscanf_r+0x274>
 8008436:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008438:	2b02      	cmp	r3, #2
 800843a:	dc47      	bgt.n	80084cc <__ssvfiscanf_r+0x298>
 800843c:	466b      	mov	r3, sp
 800843e:	4622      	mov	r2, r4
 8008440:	a941      	add	r1, sp, #260	@ 0x104
 8008442:	4630      	mov	r0, r6
 8008444:	f000 f9f8 	bl	8008838 <_scanf_chars>
 8008448:	2801      	cmp	r0, #1
 800844a:	d064      	beq.n	8008516 <__ssvfiscanf_r+0x2e2>
 800844c:	2802      	cmp	r0, #2
 800844e:	f47f af19 	bne.w	8008284 <__ssvfiscanf_r+0x50>
 8008452:	e7c9      	b.n	80083e8 <__ssvfiscanf_r+0x1b4>
 8008454:	220a      	movs	r2, #10
 8008456:	e7d7      	b.n	8008408 <__ssvfiscanf_r+0x1d4>
 8008458:	4629      	mov	r1, r5
 800845a:	4640      	mov	r0, r8
 800845c:	f000 fb3a 	bl	8008ad4 <__sccl>
 8008460:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008466:	9341      	str	r3, [sp, #260]	@ 0x104
 8008468:	4605      	mov	r5, r0
 800846a:	2301      	movs	r3, #1
 800846c:	e7d7      	b.n	800841e <__ssvfiscanf_r+0x1ea>
 800846e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008474:	9341      	str	r3, [sp, #260]	@ 0x104
 8008476:	2300      	movs	r3, #0
 8008478:	e7d1      	b.n	800841e <__ssvfiscanf_r+0x1ea>
 800847a:	2302      	movs	r3, #2
 800847c:	e7cf      	b.n	800841e <__ssvfiscanf_r+0x1ea>
 800847e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008480:	06c3      	lsls	r3, r0, #27
 8008482:	f53f aeff 	bmi.w	8008284 <__ssvfiscanf_r+0x50>
 8008486:	9b00      	ldr	r3, [sp, #0]
 8008488:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800848a:	1d19      	adds	r1, r3, #4
 800848c:	9100      	str	r1, [sp, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	07c0      	lsls	r0, r0, #31
 8008492:	bf4c      	ite	mi
 8008494:	801a      	strhmi	r2, [r3, #0]
 8008496:	601a      	strpl	r2, [r3, #0]
 8008498:	e6f4      	b.n	8008284 <__ssvfiscanf_r+0x50>
 800849a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800849c:	4621      	mov	r1, r4
 800849e:	4630      	mov	r0, r6
 80084a0:	4798      	blx	r3
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d0bf      	beq.n	8008426 <__ssvfiscanf_r+0x1f2>
 80084a6:	e79f      	b.n	80083e8 <__ssvfiscanf_r+0x1b4>
 80084a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80084aa:	3201      	adds	r2, #1
 80084ac:	9245      	str	r2, [sp, #276]	@ 0x114
 80084ae:	6862      	ldr	r2, [r4, #4]
 80084b0:	3a01      	subs	r2, #1
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	6062      	str	r2, [r4, #4]
 80084b6:	dd02      	ble.n	80084be <__ssvfiscanf_r+0x28a>
 80084b8:	3301      	adds	r3, #1
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	e7b6      	b.n	800842c <__ssvfiscanf_r+0x1f8>
 80084be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80084c0:	4621      	mov	r1, r4
 80084c2:	4630      	mov	r0, r6
 80084c4:	4798      	blx	r3
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d0b0      	beq.n	800842c <__ssvfiscanf_r+0x1f8>
 80084ca:	e78d      	b.n	80083e8 <__ssvfiscanf_r+0x1b4>
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	dc0f      	bgt.n	80084f0 <__ssvfiscanf_r+0x2bc>
 80084d0:	466b      	mov	r3, sp
 80084d2:	4622      	mov	r2, r4
 80084d4:	a941      	add	r1, sp, #260	@ 0x104
 80084d6:	4630      	mov	r0, r6
 80084d8:	f000 fa08 	bl	80088ec <_scanf_i>
 80084dc:	e7b4      	b.n	8008448 <__ssvfiscanf_r+0x214>
 80084de:	bf00      	nop
 80084e0:	08008181 	.word	0x08008181
 80084e4:	080081fb 	.word	0x080081fb
 80084e8:	080095f3 	.word	0x080095f3
 80084ec:	080095aa 	.word	0x080095aa
 80084f0:	4b0a      	ldr	r3, [pc, #40]	@ (800851c <__ssvfiscanf_r+0x2e8>)
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f43f aec6 	beq.w	8008284 <__ssvfiscanf_r+0x50>
 80084f8:	466b      	mov	r3, sp
 80084fa:	4622      	mov	r2, r4
 80084fc:	a941      	add	r1, sp, #260	@ 0x104
 80084fe:	4630      	mov	r0, r6
 8008500:	f3af 8000 	nop.w
 8008504:	e7a0      	b.n	8008448 <__ssvfiscanf_r+0x214>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	065b      	lsls	r3, r3, #25
 800850a:	f53f af71 	bmi.w	80083f0 <__ssvfiscanf_r+0x1bc>
 800850e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008518:	e7f9      	b.n	800850e <__ssvfiscanf_r+0x2da>
 800851a:	bf00      	nop
 800851c:	00000000 	.word	0x00000000

08008520 <_printf_common>:
 8008520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008524:	4616      	mov	r6, r2
 8008526:	4698      	mov	r8, r3
 8008528:	688a      	ldr	r2, [r1, #8]
 800852a:	690b      	ldr	r3, [r1, #16]
 800852c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008530:	4293      	cmp	r3, r2
 8008532:	bfb8      	it	lt
 8008534:	4613      	movlt	r3, r2
 8008536:	6033      	str	r3, [r6, #0]
 8008538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800853c:	4607      	mov	r7, r0
 800853e:	460c      	mov	r4, r1
 8008540:	b10a      	cbz	r2, 8008546 <_printf_common+0x26>
 8008542:	3301      	adds	r3, #1
 8008544:	6033      	str	r3, [r6, #0]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	0699      	lsls	r1, r3, #26
 800854a:	bf42      	ittt	mi
 800854c:	6833      	ldrmi	r3, [r6, #0]
 800854e:	3302      	addmi	r3, #2
 8008550:	6033      	strmi	r3, [r6, #0]
 8008552:	6825      	ldr	r5, [r4, #0]
 8008554:	f015 0506 	ands.w	r5, r5, #6
 8008558:	d106      	bne.n	8008568 <_printf_common+0x48>
 800855a:	f104 0a19 	add.w	sl, r4, #25
 800855e:	68e3      	ldr	r3, [r4, #12]
 8008560:	6832      	ldr	r2, [r6, #0]
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	42ab      	cmp	r3, r5
 8008566:	dc26      	bgt.n	80085b6 <_printf_common+0x96>
 8008568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	3b00      	subs	r3, #0
 8008570:	bf18      	it	ne
 8008572:	2301      	movne	r3, #1
 8008574:	0692      	lsls	r2, r2, #26
 8008576:	d42b      	bmi.n	80085d0 <_printf_common+0xb0>
 8008578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800857c:	4641      	mov	r1, r8
 800857e:	4638      	mov	r0, r7
 8008580:	47c8      	blx	r9
 8008582:	3001      	adds	r0, #1
 8008584:	d01e      	beq.n	80085c4 <_printf_common+0xa4>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	6922      	ldr	r2, [r4, #16]
 800858a:	f003 0306 	and.w	r3, r3, #6
 800858e:	2b04      	cmp	r3, #4
 8008590:	bf02      	ittt	eq
 8008592:	68e5      	ldreq	r5, [r4, #12]
 8008594:	6833      	ldreq	r3, [r6, #0]
 8008596:	1aed      	subeq	r5, r5, r3
 8008598:	68a3      	ldr	r3, [r4, #8]
 800859a:	bf0c      	ite	eq
 800859c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085a0:	2500      	movne	r5, #0
 80085a2:	4293      	cmp	r3, r2
 80085a4:	bfc4      	itt	gt
 80085a6:	1a9b      	subgt	r3, r3, r2
 80085a8:	18ed      	addgt	r5, r5, r3
 80085aa:	2600      	movs	r6, #0
 80085ac:	341a      	adds	r4, #26
 80085ae:	42b5      	cmp	r5, r6
 80085b0:	d11a      	bne.n	80085e8 <_printf_common+0xc8>
 80085b2:	2000      	movs	r0, #0
 80085b4:	e008      	b.n	80085c8 <_printf_common+0xa8>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4652      	mov	r2, sl
 80085ba:	4641      	mov	r1, r8
 80085bc:	4638      	mov	r0, r7
 80085be:	47c8      	blx	r9
 80085c0:	3001      	adds	r0, #1
 80085c2:	d103      	bne.n	80085cc <_printf_common+0xac>
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085cc:	3501      	adds	r5, #1
 80085ce:	e7c6      	b.n	800855e <_printf_common+0x3e>
 80085d0:	18e1      	adds	r1, r4, r3
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	2030      	movs	r0, #48	@ 0x30
 80085d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085da:	4422      	add	r2, r4
 80085dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085e4:	3302      	adds	r3, #2
 80085e6:	e7c7      	b.n	8008578 <_printf_common+0x58>
 80085e8:	2301      	movs	r3, #1
 80085ea:	4622      	mov	r2, r4
 80085ec:	4641      	mov	r1, r8
 80085ee:	4638      	mov	r0, r7
 80085f0:	47c8      	blx	r9
 80085f2:	3001      	adds	r0, #1
 80085f4:	d0e6      	beq.n	80085c4 <_printf_common+0xa4>
 80085f6:	3601      	adds	r6, #1
 80085f8:	e7d9      	b.n	80085ae <_printf_common+0x8e>
	...

080085fc <_printf_i>:
 80085fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	7e0f      	ldrb	r7, [r1, #24]
 8008602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008604:	2f78      	cmp	r7, #120	@ 0x78
 8008606:	4691      	mov	r9, r2
 8008608:	4680      	mov	r8, r0
 800860a:	460c      	mov	r4, r1
 800860c:	469a      	mov	sl, r3
 800860e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008612:	d807      	bhi.n	8008624 <_printf_i+0x28>
 8008614:	2f62      	cmp	r7, #98	@ 0x62
 8008616:	d80a      	bhi.n	800862e <_printf_i+0x32>
 8008618:	2f00      	cmp	r7, #0
 800861a:	f000 80d1 	beq.w	80087c0 <_printf_i+0x1c4>
 800861e:	2f58      	cmp	r7, #88	@ 0x58
 8008620:	f000 80b8 	beq.w	8008794 <_printf_i+0x198>
 8008624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800862c:	e03a      	b.n	80086a4 <_printf_i+0xa8>
 800862e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008632:	2b15      	cmp	r3, #21
 8008634:	d8f6      	bhi.n	8008624 <_printf_i+0x28>
 8008636:	a101      	add	r1, pc, #4	@ (adr r1, 800863c <_printf_i+0x40>)
 8008638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800863c:	08008695 	.word	0x08008695
 8008640:	080086a9 	.word	0x080086a9
 8008644:	08008625 	.word	0x08008625
 8008648:	08008625 	.word	0x08008625
 800864c:	08008625 	.word	0x08008625
 8008650:	08008625 	.word	0x08008625
 8008654:	080086a9 	.word	0x080086a9
 8008658:	08008625 	.word	0x08008625
 800865c:	08008625 	.word	0x08008625
 8008660:	08008625 	.word	0x08008625
 8008664:	08008625 	.word	0x08008625
 8008668:	080087a7 	.word	0x080087a7
 800866c:	080086d3 	.word	0x080086d3
 8008670:	08008761 	.word	0x08008761
 8008674:	08008625 	.word	0x08008625
 8008678:	08008625 	.word	0x08008625
 800867c:	080087c9 	.word	0x080087c9
 8008680:	08008625 	.word	0x08008625
 8008684:	080086d3 	.word	0x080086d3
 8008688:	08008625 	.word	0x08008625
 800868c:	08008625 	.word	0x08008625
 8008690:	08008769 	.word	0x08008769
 8008694:	6833      	ldr	r3, [r6, #0]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6032      	str	r2, [r6, #0]
 800869c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086a4:	2301      	movs	r3, #1
 80086a6:	e09c      	b.n	80087e2 <_printf_i+0x1e6>
 80086a8:	6833      	ldr	r3, [r6, #0]
 80086aa:	6820      	ldr	r0, [r4, #0]
 80086ac:	1d19      	adds	r1, r3, #4
 80086ae:	6031      	str	r1, [r6, #0]
 80086b0:	0606      	lsls	r6, r0, #24
 80086b2:	d501      	bpl.n	80086b8 <_printf_i+0xbc>
 80086b4:	681d      	ldr	r5, [r3, #0]
 80086b6:	e003      	b.n	80086c0 <_printf_i+0xc4>
 80086b8:	0645      	lsls	r5, r0, #25
 80086ba:	d5fb      	bpl.n	80086b4 <_printf_i+0xb8>
 80086bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086c0:	2d00      	cmp	r5, #0
 80086c2:	da03      	bge.n	80086cc <_printf_i+0xd0>
 80086c4:	232d      	movs	r3, #45	@ 0x2d
 80086c6:	426d      	negs	r5, r5
 80086c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086cc:	4858      	ldr	r0, [pc, #352]	@ (8008830 <_printf_i+0x234>)
 80086ce:	230a      	movs	r3, #10
 80086d0:	e011      	b.n	80086f6 <_printf_i+0xfa>
 80086d2:	6821      	ldr	r1, [r4, #0]
 80086d4:	6833      	ldr	r3, [r6, #0]
 80086d6:	0608      	lsls	r0, r1, #24
 80086d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80086dc:	d402      	bmi.n	80086e4 <_printf_i+0xe8>
 80086de:	0649      	lsls	r1, r1, #25
 80086e0:	bf48      	it	mi
 80086e2:	b2ad      	uxthmi	r5, r5
 80086e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80086e6:	4852      	ldr	r0, [pc, #328]	@ (8008830 <_printf_i+0x234>)
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	bf14      	ite	ne
 80086ec:	230a      	movne	r3, #10
 80086ee:	2308      	moveq	r3, #8
 80086f0:	2100      	movs	r1, #0
 80086f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086f6:	6866      	ldr	r6, [r4, #4]
 80086f8:	60a6      	str	r6, [r4, #8]
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	db05      	blt.n	800870a <_printf_i+0x10e>
 80086fe:	6821      	ldr	r1, [r4, #0]
 8008700:	432e      	orrs	r6, r5
 8008702:	f021 0104 	bic.w	r1, r1, #4
 8008706:	6021      	str	r1, [r4, #0]
 8008708:	d04b      	beq.n	80087a2 <_printf_i+0x1a6>
 800870a:	4616      	mov	r6, r2
 800870c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008710:	fb03 5711 	mls	r7, r3, r1, r5
 8008714:	5dc7      	ldrb	r7, [r0, r7]
 8008716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800871a:	462f      	mov	r7, r5
 800871c:	42bb      	cmp	r3, r7
 800871e:	460d      	mov	r5, r1
 8008720:	d9f4      	bls.n	800870c <_printf_i+0x110>
 8008722:	2b08      	cmp	r3, #8
 8008724:	d10b      	bne.n	800873e <_printf_i+0x142>
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	07df      	lsls	r7, r3, #31
 800872a:	d508      	bpl.n	800873e <_printf_i+0x142>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	6861      	ldr	r1, [r4, #4]
 8008730:	4299      	cmp	r1, r3
 8008732:	bfde      	ittt	le
 8008734:	2330      	movle	r3, #48	@ 0x30
 8008736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800873a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800873e:	1b92      	subs	r2, r2, r6
 8008740:	6122      	str	r2, [r4, #16]
 8008742:	f8cd a000 	str.w	sl, [sp]
 8008746:	464b      	mov	r3, r9
 8008748:	aa03      	add	r2, sp, #12
 800874a:	4621      	mov	r1, r4
 800874c:	4640      	mov	r0, r8
 800874e:	f7ff fee7 	bl	8008520 <_printf_common>
 8008752:	3001      	adds	r0, #1
 8008754:	d14a      	bne.n	80087ec <_printf_i+0x1f0>
 8008756:	f04f 30ff 	mov.w	r0, #4294967295
 800875a:	b004      	add	sp, #16
 800875c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	f043 0320 	orr.w	r3, r3, #32
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	4832      	ldr	r0, [pc, #200]	@ (8008834 <_printf_i+0x238>)
 800876a:	2778      	movs	r7, #120	@ 0x78
 800876c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	6831      	ldr	r1, [r6, #0]
 8008774:	061f      	lsls	r7, r3, #24
 8008776:	f851 5b04 	ldr.w	r5, [r1], #4
 800877a:	d402      	bmi.n	8008782 <_printf_i+0x186>
 800877c:	065f      	lsls	r7, r3, #25
 800877e:	bf48      	it	mi
 8008780:	b2ad      	uxthmi	r5, r5
 8008782:	6031      	str	r1, [r6, #0]
 8008784:	07d9      	lsls	r1, r3, #31
 8008786:	bf44      	itt	mi
 8008788:	f043 0320 	orrmi.w	r3, r3, #32
 800878c:	6023      	strmi	r3, [r4, #0]
 800878e:	b11d      	cbz	r5, 8008798 <_printf_i+0x19c>
 8008790:	2310      	movs	r3, #16
 8008792:	e7ad      	b.n	80086f0 <_printf_i+0xf4>
 8008794:	4826      	ldr	r0, [pc, #152]	@ (8008830 <_printf_i+0x234>)
 8008796:	e7e9      	b.n	800876c <_printf_i+0x170>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	f023 0320 	bic.w	r3, r3, #32
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	e7f6      	b.n	8008790 <_printf_i+0x194>
 80087a2:	4616      	mov	r6, r2
 80087a4:	e7bd      	b.n	8008722 <_printf_i+0x126>
 80087a6:	6833      	ldr	r3, [r6, #0]
 80087a8:	6825      	ldr	r5, [r4, #0]
 80087aa:	6961      	ldr	r1, [r4, #20]
 80087ac:	1d18      	adds	r0, r3, #4
 80087ae:	6030      	str	r0, [r6, #0]
 80087b0:	062e      	lsls	r6, r5, #24
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	d501      	bpl.n	80087ba <_printf_i+0x1be>
 80087b6:	6019      	str	r1, [r3, #0]
 80087b8:	e002      	b.n	80087c0 <_printf_i+0x1c4>
 80087ba:	0668      	lsls	r0, r5, #25
 80087bc:	d5fb      	bpl.n	80087b6 <_printf_i+0x1ba>
 80087be:	8019      	strh	r1, [r3, #0]
 80087c0:	2300      	movs	r3, #0
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	4616      	mov	r6, r2
 80087c6:	e7bc      	b.n	8008742 <_printf_i+0x146>
 80087c8:	6833      	ldr	r3, [r6, #0]
 80087ca:	1d1a      	adds	r2, r3, #4
 80087cc:	6032      	str	r2, [r6, #0]
 80087ce:	681e      	ldr	r6, [r3, #0]
 80087d0:	6862      	ldr	r2, [r4, #4]
 80087d2:	2100      	movs	r1, #0
 80087d4:	4630      	mov	r0, r6
 80087d6:	f7f7 fd33 	bl	8000240 <memchr>
 80087da:	b108      	cbz	r0, 80087e0 <_printf_i+0x1e4>
 80087dc:	1b80      	subs	r0, r0, r6
 80087de:	6060      	str	r0, [r4, #4]
 80087e0:	6863      	ldr	r3, [r4, #4]
 80087e2:	6123      	str	r3, [r4, #16]
 80087e4:	2300      	movs	r3, #0
 80087e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ea:	e7aa      	b.n	8008742 <_printf_i+0x146>
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	4632      	mov	r2, r6
 80087f0:	4649      	mov	r1, r9
 80087f2:	4640      	mov	r0, r8
 80087f4:	47d0      	blx	sl
 80087f6:	3001      	adds	r0, #1
 80087f8:	d0ad      	beq.n	8008756 <_printf_i+0x15a>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	079b      	lsls	r3, r3, #30
 80087fe:	d413      	bmi.n	8008828 <_printf_i+0x22c>
 8008800:	68e0      	ldr	r0, [r4, #12]
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	4298      	cmp	r0, r3
 8008806:	bfb8      	it	lt
 8008808:	4618      	movlt	r0, r3
 800880a:	e7a6      	b.n	800875a <_printf_i+0x15e>
 800880c:	2301      	movs	r3, #1
 800880e:	4632      	mov	r2, r6
 8008810:	4649      	mov	r1, r9
 8008812:	4640      	mov	r0, r8
 8008814:	47d0      	blx	sl
 8008816:	3001      	adds	r0, #1
 8008818:	d09d      	beq.n	8008756 <_printf_i+0x15a>
 800881a:	3501      	adds	r5, #1
 800881c:	68e3      	ldr	r3, [r4, #12]
 800881e:	9903      	ldr	r1, [sp, #12]
 8008820:	1a5b      	subs	r3, r3, r1
 8008822:	42ab      	cmp	r3, r5
 8008824:	dcf2      	bgt.n	800880c <_printf_i+0x210>
 8008826:	e7eb      	b.n	8008800 <_printf_i+0x204>
 8008828:	2500      	movs	r5, #0
 800882a:	f104 0619 	add.w	r6, r4, #25
 800882e:	e7f5      	b.n	800881c <_printf_i+0x220>
 8008830:	080095b5 	.word	0x080095b5
 8008834:	080095c6 	.word	0x080095c6

08008838 <_scanf_chars>:
 8008838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800883c:	4615      	mov	r5, r2
 800883e:	688a      	ldr	r2, [r1, #8]
 8008840:	4680      	mov	r8, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b932      	cbnz	r2, 8008854 <_scanf_chars+0x1c>
 8008846:	698a      	ldr	r2, [r1, #24]
 8008848:	2a00      	cmp	r2, #0
 800884a:	bf14      	ite	ne
 800884c:	f04f 32ff 	movne.w	r2, #4294967295
 8008850:	2201      	moveq	r2, #1
 8008852:	608a      	str	r2, [r1, #8]
 8008854:	6822      	ldr	r2, [r4, #0]
 8008856:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80088e8 <_scanf_chars+0xb0>
 800885a:	06d1      	lsls	r1, r2, #27
 800885c:	bf5f      	itttt	pl
 800885e:	681a      	ldrpl	r2, [r3, #0]
 8008860:	1d11      	addpl	r1, r2, #4
 8008862:	6019      	strpl	r1, [r3, #0]
 8008864:	6816      	ldrpl	r6, [r2, #0]
 8008866:	2700      	movs	r7, #0
 8008868:	69a0      	ldr	r0, [r4, #24]
 800886a:	b188      	cbz	r0, 8008890 <_scanf_chars+0x58>
 800886c:	2801      	cmp	r0, #1
 800886e:	d107      	bne.n	8008880 <_scanf_chars+0x48>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	781a      	ldrb	r2, [r3, #0]
 8008874:	6963      	ldr	r3, [r4, #20]
 8008876:	5c9b      	ldrb	r3, [r3, r2]
 8008878:	b953      	cbnz	r3, 8008890 <_scanf_chars+0x58>
 800887a:	2f00      	cmp	r7, #0
 800887c:	d031      	beq.n	80088e2 <_scanf_chars+0xaa>
 800887e:	e022      	b.n	80088c6 <_scanf_chars+0x8e>
 8008880:	2802      	cmp	r0, #2
 8008882:	d120      	bne.n	80088c6 <_scanf_chars+0x8e>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	f819 3003 	ldrb.w	r3, [r9, r3]
 800888c:	071b      	lsls	r3, r3, #28
 800888e:	d41a      	bmi.n	80088c6 <_scanf_chars+0x8e>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	06da      	lsls	r2, r3, #27
 8008894:	bf5e      	ittt	pl
 8008896:	682b      	ldrpl	r3, [r5, #0]
 8008898:	781b      	ldrbpl	r3, [r3, #0]
 800889a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800889e:	682a      	ldr	r2, [r5, #0]
 80088a0:	686b      	ldr	r3, [r5, #4]
 80088a2:	3201      	adds	r2, #1
 80088a4:	602a      	str	r2, [r5, #0]
 80088a6:	68a2      	ldr	r2, [r4, #8]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	3a01      	subs	r2, #1
 80088ac:	606b      	str	r3, [r5, #4]
 80088ae:	3701      	adds	r7, #1
 80088b0:	60a2      	str	r2, [r4, #8]
 80088b2:	b142      	cbz	r2, 80088c6 <_scanf_chars+0x8e>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dcd7      	bgt.n	8008868 <_scanf_chars+0x30>
 80088b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80088bc:	4629      	mov	r1, r5
 80088be:	4640      	mov	r0, r8
 80088c0:	4798      	blx	r3
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0d0      	beq.n	8008868 <_scanf_chars+0x30>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	f013 0310 	ands.w	r3, r3, #16
 80088cc:	d105      	bne.n	80088da <_scanf_chars+0xa2>
 80088ce:	68e2      	ldr	r2, [r4, #12]
 80088d0:	3201      	adds	r2, #1
 80088d2:	60e2      	str	r2, [r4, #12]
 80088d4:	69a2      	ldr	r2, [r4, #24]
 80088d6:	b102      	cbz	r2, 80088da <_scanf_chars+0xa2>
 80088d8:	7033      	strb	r3, [r6, #0]
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	443b      	add	r3, r7
 80088de:	6123      	str	r3, [r4, #16]
 80088e0:	2000      	movs	r0, #0
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	bf00      	nop
 80088e8:	080095f3 	.word	0x080095f3

080088ec <_scanf_i>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	4698      	mov	r8, r3
 80088f2:	4b74      	ldr	r3, [pc, #464]	@ (8008ac4 <_scanf_i+0x1d8>)
 80088f4:	460c      	mov	r4, r1
 80088f6:	4682      	mov	sl, r0
 80088f8:	4616      	mov	r6, r2
 80088fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088fe:	b087      	sub	sp, #28
 8008900:	ab03      	add	r3, sp, #12
 8008902:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008906:	4b70      	ldr	r3, [pc, #448]	@ (8008ac8 <_scanf_i+0x1dc>)
 8008908:	69a1      	ldr	r1, [r4, #24]
 800890a:	4a70      	ldr	r2, [pc, #448]	@ (8008acc <_scanf_i+0x1e0>)
 800890c:	2903      	cmp	r1, #3
 800890e:	bf08      	it	eq
 8008910:	461a      	moveq	r2, r3
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	9201      	str	r2, [sp, #4]
 8008916:	1e5a      	subs	r2, r3, #1
 8008918:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800891c:	bf88      	it	hi
 800891e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008922:	4627      	mov	r7, r4
 8008924:	bf82      	ittt	hi
 8008926:	eb03 0905 	addhi.w	r9, r3, r5
 800892a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800892e:	60a3      	strhi	r3, [r4, #8]
 8008930:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008934:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008938:	bf98      	it	ls
 800893a:	f04f 0900 	movls.w	r9, #0
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	463d      	mov	r5, r7
 8008942:	f04f 0b00 	mov.w	fp, #0
 8008946:	6831      	ldr	r1, [r6, #0]
 8008948:	ab03      	add	r3, sp, #12
 800894a:	7809      	ldrb	r1, [r1, #0]
 800894c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008950:	2202      	movs	r2, #2
 8008952:	f7f7 fc75 	bl	8000240 <memchr>
 8008956:	b328      	cbz	r0, 80089a4 <_scanf_i+0xb8>
 8008958:	f1bb 0f01 	cmp.w	fp, #1
 800895c:	d159      	bne.n	8008a12 <_scanf_i+0x126>
 800895e:	6862      	ldr	r2, [r4, #4]
 8008960:	b92a      	cbnz	r2, 800896e <_scanf_i+0x82>
 8008962:	6822      	ldr	r2, [r4, #0]
 8008964:	2108      	movs	r1, #8
 8008966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800896a:	6061      	str	r1, [r4, #4]
 800896c:	6022      	str	r2, [r4, #0]
 800896e:	6822      	ldr	r2, [r4, #0]
 8008970:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008974:	6022      	str	r2, [r4, #0]
 8008976:	68a2      	ldr	r2, [r4, #8]
 8008978:	1e51      	subs	r1, r2, #1
 800897a:	60a1      	str	r1, [r4, #8]
 800897c:	b192      	cbz	r2, 80089a4 <_scanf_i+0xb8>
 800897e:	6832      	ldr	r2, [r6, #0]
 8008980:	1c51      	adds	r1, r2, #1
 8008982:	6031      	str	r1, [r6, #0]
 8008984:	7812      	ldrb	r2, [r2, #0]
 8008986:	f805 2b01 	strb.w	r2, [r5], #1
 800898a:	6872      	ldr	r2, [r6, #4]
 800898c:	3a01      	subs	r2, #1
 800898e:	2a00      	cmp	r2, #0
 8008990:	6072      	str	r2, [r6, #4]
 8008992:	dc07      	bgt.n	80089a4 <_scanf_i+0xb8>
 8008994:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008998:	4631      	mov	r1, r6
 800899a:	4650      	mov	r0, sl
 800899c:	4790      	blx	r2
 800899e:	2800      	cmp	r0, #0
 80089a0:	f040 8085 	bne.w	8008aae <_scanf_i+0x1c2>
 80089a4:	f10b 0b01 	add.w	fp, fp, #1
 80089a8:	f1bb 0f03 	cmp.w	fp, #3
 80089ac:	d1cb      	bne.n	8008946 <_scanf_i+0x5a>
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	b90b      	cbnz	r3, 80089b6 <_scanf_i+0xca>
 80089b2:	230a      	movs	r3, #10
 80089b4:	6063      	str	r3, [r4, #4]
 80089b6:	6863      	ldr	r3, [r4, #4]
 80089b8:	4945      	ldr	r1, [pc, #276]	@ (8008ad0 <_scanf_i+0x1e4>)
 80089ba:	6960      	ldr	r0, [r4, #20]
 80089bc:	1ac9      	subs	r1, r1, r3
 80089be:	f000 f889 	bl	8008ad4 <__sccl>
 80089c2:	f04f 0b00 	mov.w	fp, #0
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d03d      	beq.n	8008a4a <_scanf_i+0x15e>
 80089ce:	6831      	ldr	r1, [r6, #0]
 80089d0:	6960      	ldr	r0, [r4, #20]
 80089d2:	f891 c000 	ldrb.w	ip, [r1]
 80089d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80089da:	2800      	cmp	r0, #0
 80089dc:	d035      	beq.n	8008a4a <_scanf_i+0x15e>
 80089de:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80089e2:	d124      	bne.n	8008a2e <_scanf_i+0x142>
 80089e4:	0510      	lsls	r0, r2, #20
 80089e6:	d522      	bpl.n	8008a2e <_scanf_i+0x142>
 80089e8:	f10b 0b01 	add.w	fp, fp, #1
 80089ec:	f1b9 0f00 	cmp.w	r9, #0
 80089f0:	d003      	beq.n	80089fa <_scanf_i+0x10e>
 80089f2:	3301      	adds	r3, #1
 80089f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80089f8:	60a3      	str	r3, [r4, #8]
 80089fa:	6873      	ldr	r3, [r6, #4]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	6073      	str	r3, [r6, #4]
 8008a02:	dd1b      	ble.n	8008a3c <_scanf_i+0x150>
 8008a04:	6833      	ldr	r3, [r6, #0]
 8008a06:	3301      	adds	r3, #1
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	60a3      	str	r3, [r4, #8]
 8008a10:	e7d9      	b.n	80089c6 <_scanf_i+0xda>
 8008a12:	f1bb 0f02 	cmp.w	fp, #2
 8008a16:	d1ae      	bne.n	8008976 <_scanf_i+0x8a>
 8008a18:	6822      	ldr	r2, [r4, #0]
 8008a1a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008a1e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008a22:	d1c4      	bne.n	80089ae <_scanf_i+0xc2>
 8008a24:	2110      	movs	r1, #16
 8008a26:	6061      	str	r1, [r4, #4]
 8008a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a2c:	e7a2      	b.n	8008974 <_scanf_i+0x88>
 8008a2e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008a32:	6022      	str	r2, [r4, #0]
 8008a34:	780b      	ldrb	r3, [r1, #0]
 8008a36:	f805 3b01 	strb.w	r3, [r5], #1
 8008a3a:	e7de      	b.n	80089fa <_scanf_i+0x10e>
 8008a3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a40:	4631      	mov	r1, r6
 8008a42:	4650      	mov	r0, sl
 8008a44:	4798      	blx	r3
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d0df      	beq.n	8008a0a <_scanf_i+0x11e>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	05d9      	lsls	r1, r3, #23
 8008a4e:	d50d      	bpl.n	8008a6c <_scanf_i+0x180>
 8008a50:	42bd      	cmp	r5, r7
 8008a52:	d909      	bls.n	8008a68 <_scanf_i+0x17c>
 8008a54:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	4650      	mov	r0, sl
 8008a60:	4798      	blx	r3
 8008a62:	f105 39ff 	add.w	r9, r5, #4294967295
 8008a66:	464d      	mov	r5, r9
 8008a68:	42bd      	cmp	r5, r7
 8008a6a:	d028      	beq.n	8008abe <_scanf_i+0x1d2>
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	f012 0210 	ands.w	r2, r2, #16
 8008a72:	d113      	bne.n	8008a9c <_scanf_i+0x1b0>
 8008a74:	702a      	strb	r2, [r5, #0]
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	9e01      	ldr	r6, [sp, #4]
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	47b0      	blx	r6
 8008a80:	f8d8 3000 	ldr.w	r3, [r8]
 8008a84:	6821      	ldr	r1, [r4, #0]
 8008a86:	1d1a      	adds	r2, r3, #4
 8008a88:	f8c8 2000 	str.w	r2, [r8]
 8008a8c:	f011 0f20 	tst.w	r1, #32
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	d00f      	beq.n	8008ab4 <_scanf_i+0x1c8>
 8008a94:	6018      	str	r0, [r3, #0]
 8008a96:	68e3      	ldr	r3, [r4, #12]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	60e3      	str	r3, [r4, #12]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	1bed      	subs	r5, r5, r7
 8008aa0:	445d      	add	r5, fp
 8008aa2:	442b      	add	r3, r5
 8008aa4:	6123      	str	r3, [r4, #16]
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	b007      	add	sp, #28
 8008aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aae:	f04f 0b00 	mov.w	fp, #0
 8008ab2:	e7ca      	b.n	8008a4a <_scanf_i+0x15e>
 8008ab4:	07ca      	lsls	r2, r1, #31
 8008ab6:	bf4c      	ite	mi
 8008ab8:	8018      	strhmi	r0, [r3, #0]
 8008aba:	6018      	strpl	r0, [r3, #0]
 8008abc:	e7eb      	b.n	8008a96 <_scanf_i+0x1aa>
 8008abe:	2001      	movs	r0, #1
 8008ac0:	e7f2      	b.n	8008aa8 <_scanf_i+0x1bc>
 8008ac2:	bf00      	nop
 8008ac4:	080092c8 	.word	0x080092c8
 8008ac8:	08008d61 	.word	0x08008d61
 8008acc:	08008e41 	.word	0x08008e41
 8008ad0:	080095e7 	.word	0x080095e7

08008ad4 <__sccl>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	780b      	ldrb	r3, [r1, #0]
 8008ad8:	4604      	mov	r4, r0
 8008ada:	2b5e      	cmp	r3, #94	@ 0x5e
 8008adc:	bf0b      	itete	eq
 8008ade:	784b      	ldrbeq	r3, [r1, #1]
 8008ae0:	1c4a      	addne	r2, r1, #1
 8008ae2:	1c8a      	addeq	r2, r1, #2
 8008ae4:	2100      	movne	r1, #0
 8008ae6:	bf08      	it	eq
 8008ae8:	2101      	moveq	r1, #1
 8008aea:	3801      	subs	r0, #1
 8008aec:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008af0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008af4:	42a8      	cmp	r0, r5
 8008af6:	d1fb      	bne.n	8008af0 <__sccl+0x1c>
 8008af8:	b90b      	cbnz	r3, 8008afe <__sccl+0x2a>
 8008afa:	1e50      	subs	r0, r2, #1
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
 8008afe:	f081 0101 	eor.w	r1, r1, #1
 8008b02:	54e1      	strb	r1, [r4, r3]
 8008b04:	4610      	mov	r0, r2
 8008b06:	4602      	mov	r2, r0
 8008b08:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b0c:	2d2d      	cmp	r5, #45	@ 0x2d
 8008b0e:	d005      	beq.n	8008b1c <__sccl+0x48>
 8008b10:	2d5d      	cmp	r5, #93	@ 0x5d
 8008b12:	d016      	beq.n	8008b42 <__sccl+0x6e>
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	d0f1      	beq.n	8008afc <__sccl+0x28>
 8008b18:	462b      	mov	r3, r5
 8008b1a:	e7f2      	b.n	8008b02 <__sccl+0x2e>
 8008b1c:	7846      	ldrb	r6, [r0, #1]
 8008b1e:	2e5d      	cmp	r6, #93	@ 0x5d
 8008b20:	d0fa      	beq.n	8008b18 <__sccl+0x44>
 8008b22:	42b3      	cmp	r3, r6
 8008b24:	dcf8      	bgt.n	8008b18 <__sccl+0x44>
 8008b26:	3002      	adds	r0, #2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	4296      	cmp	r6, r2
 8008b2e:	54a1      	strb	r1, [r4, r2]
 8008b30:	dcfb      	bgt.n	8008b2a <__sccl+0x56>
 8008b32:	1af2      	subs	r2, r6, r3
 8008b34:	3a01      	subs	r2, #1
 8008b36:	1c5d      	adds	r5, r3, #1
 8008b38:	42b3      	cmp	r3, r6
 8008b3a:	bfa8      	it	ge
 8008b3c:	2200      	movge	r2, #0
 8008b3e:	18ab      	adds	r3, r5, r2
 8008b40:	e7e1      	b.n	8008b06 <__sccl+0x32>
 8008b42:	4610      	mov	r0, r2
 8008b44:	e7da      	b.n	8008afc <__sccl+0x28>

08008b46 <__submore>:
 8008b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008b4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b52:	4299      	cmp	r1, r3
 8008b54:	d11d      	bne.n	8008b92 <__submore+0x4c>
 8008b56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008b5a:	f7ff f92d 	bl	8007db8 <_malloc_r>
 8008b5e:	b918      	cbnz	r0, 8008b68 <__submore+0x22>
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b6c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008b6e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008b72:	6360      	str	r0, [r4, #52]	@ 0x34
 8008b74:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008b78:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008b7c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008b80:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008b84:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008b88:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008b8c:	6020      	str	r0, [r4, #0]
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e7e8      	b.n	8008b64 <__submore+0x1e>
 8008b92:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008b94:	0077      	lsls	r7, r6, #1
 8008b96:	463a      	mov	r2, r7
 8008b98:	f000 f83a 	bl	8008c10 <_realloc_r>
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d0de      	beq.n	8008b60 <__submore+0x1a>
 8008ba2:	eb00 0806 	add.w	r8, r0, r6
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	4632      	mov	r2, r6
 8008baa:	4640      	mov	r0, r8
 8008bac:	f7ff f88a 	bl	8007cc4 <memcpy>
 8008bb0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008bb4:	f8c4 8000 	str.w	r8, [r4]
 8008bb8:	e7e9      	b.n	8008b8e <__submore+0x48>

08008bba <memmove>:
 8008bba:	4288      	cmp	r0, r1
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	eb01 0402 	add.w	r4, r1, r2
 8008bc2:	d902      	bls.n	8008bca <memmove+0x10>
 8008bc4:	4284      	cmp	r4, r0
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	d807      	bhi.n	8008bda <memmove+0x20>
 8008bca:	1e43      	subs	r3, r0, #1
 8008bcc:	42a1      	cmp	r1, r4
 8008bce:	d008      	beq.n	8008be2 <memmove+0x28>
 8008bd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bd8:	e7f8      	b.n	8008bcc <memmove+0x12>
 8008bda:	4402      	add	r2, r0
 8008bdc:	4601      	mov	r1, r0
 8008bde:	428a      	cmp	r2, r1
 8008be0:	d100      	bne.n	8008be4 <memmove+0x2a>
 8008be2:	bd10      	pop	{r4, pc}
 8008be4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008be8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bec:	e7f7      	b.n	8008bde <memmove+0x24>
	...

08008bf0 <_sbrk_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d06      	ldr	r5, [pc, #24]	@ (8008c0c <_sbrk_r+0x1c>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f7f8 fcd2 	bl	80015a4 <_sbrk>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_sbrk_r+0x1a>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_sbrk_r+0x1a>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	20004d64 	.word	0x20004d64

08008c10 <_realloc_r>:
 8008c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c14:	4607      	mov	r7, r0
 8008c16:	4614      	mov	r4, r2
 8008c18:	460d      	mov	r5, r1
 8008c1a:	b921      	cbnz	r1, 8008c26 <_realloc_r+0x16>
 8008c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c20:	4611      	mov	r1, r2
 8008c22:	f7ff b8c9 	b.w	8007db8 <_malloc_r>
 8008c26:	b92a      	cbnz	r2, 8008c34 <_realloc_r+0x24>
 8008c28:	f7ff f85a 	bl	8007ce0 <_free_r>
 8008c2c:	4625      	mov	r5, r4
 8008c2e:	4628      	mov	r0, r5
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	f000 f906 	bl	8008e44 <_malloc_usable_size_r>
 8008c38:	4284      	cmp	r4, r0
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	d802      	bhi.n	8008c44 <_realloc_r+0x34>
 8008c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c42:	d8f4      	bhi.n	8008c2e <_realloc_r+0x1e>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4638      	mov	r0, r7
 8008c48:	f7ff f8b6 	bl	8007db8 <_malloc_r>
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	b908      	cbnz	r0, 8008c54 <_realloc_r+0x44>
 8008c50:	4645      	mov	r5, r8
 8008c52:	e7ec      	b.n	8008c2e <_realloc_r+0x1e>
 8008c54:	42b4      	cmp	r4, r6
 8008c56:	4622      	mov	r2, r4
 8008c58:	4629      	mov	r1, r5
 8008c5a:	bf28      	it	cs
 8008c5c:	4632      	movcs	r2, r6
 8008c5e:	f7ff f831 	bl	8007cc4 <memcpy>
 8008c62:	4629      	mov	r1, r5
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff f83b 	bl	8007ce0 <_free_r>
 8008c6a:	e7f1      	b.n	8008c50 <_realloc_r+0x40>

08008c6c <_strtol_l.isra.0>:
 8008c6c:	2b24      	cmp	r3, #36	@ 0x24
 8008c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c72:	4686      	mov	lr, r0
 8008c74:	4690      	mov	r8, r2
 8008c76:	d801      	bhi.n	8008c7c <_strtol_l.isra.0+0x10>
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d106      	bne.n	8008c8a <_strtol_l.isra.0+0x1e>
 8008c7c:	f7fe fff6 	bl	8007c6c <__errno>
 8008c80:	2316      	movs	r3, #22
 8008c82:	6003      	str	r3, [r0, #0]
 8008c84:	2000      	movs	r0, #0
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	4834      	ldr	r0, [pc, #208]	@ (8008d5c <_strtol_l.isra.0+0xf0>)
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	462a      	mov	r2, r5
 8008c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c94:	5d06      	ldrb	r6, [r0, r4]
 8008c96:	f016 0608 	ands.w	r6, r6, #8
 8008c9a:	d1f8      	bne.n	8008c8e <_strtol_l.isra.0+0x22>
 8008c9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c9e:	d110      	bne.n	8008cc2 <_strtol_l.isra.0+0x56>
 8008ca0:	782c      	ldrb	r4, [r5, #0]
 8008ca2:	2601      	movs	r6, #1
 8008ca4:	1c95      	adds	r5, r2, #2
 8008ca6:	f033 0210 	bics.w	r2, r3, #16
 8008caa:	d115      	bne.n	8008cd8 <_strtol_l.isra.0+0x6c>
 8008cac:	2c30      	cmp	r4, #48	@ 0x30
 8008cae:	d10d      	bne.n	8008ccc <_strtol_l.isra.0+0x60>
 8008cb0:	782a      	ldrb	r2, [r5, #0]
 8008cb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cb6:	2a58      	cmp	r2, #88	@ 0x58
 8008cb8:	d108      	bne.n	8008ccc <_strtol_l.isra.0+0x60>
 8008cba:	786c      	ldrb	r4, [r5, #1]
 8008cbc:	3502      	adds	r5, #2
 8008cbe:	2310      	movs	r3, #16
 8008cc0:	e00a      	b.n	8008cd8 <_strtol_l.isra.0+0x6c>
 8008cc2:	2c2b      	cmp	r4, #43	@ 0x2b
 8008cc4:	bf04      	itt	eq
 8008cc6:	782c      	ldrbeq	r4, [r5, #0]
 8008cc8:	1c95      	addeq	r5, r2, #2
 8008cca:	e7ec      	b.n	8008ca6 <_strtol_l.isra.0+0x3a>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1f6      	bne.n	8008cbe <_strtol_l.isra.0+0x52>
 8008cd0:	2c30      	cmp	r4, #48	@ 0x30
 8008cd2:	bf14      	ite	ne
 8008cd4:	230a      	movne	r3, #10
 8008cd6:	2308      	moveq	r3, #8
 8008cd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008cdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	fbbc f9f3 	udiv	r9, ip, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008cec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008cf0:	2f09      	cmp	r7, #9
 8008cf2:	d80f      	bhi.n	8008d14 <_strtol_l.isra.0+0xa8>
 8008cf4:	463c      	mov	r4, r7
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	dd1b      	ble.n	8008d32 <_strtol_l.isra.0+0xc6>
 8008cfa:	1c57      	adds	r7, r2, #1
 8008cfc:	d007      	beq.n	8008d0e <_strtol_l.isra.0+0xa2>
 8008cfe:	4581      	cmp	r9, r0
 8008d00:	d314      	bcc.n	8008d2c <_strtol_l.isra.0+0xc0>
 8008d02:	d101      	bne.n	8008d08 <_strtol_l.isra.0+0x9c>
 8008d04:	45a2      	cmp	sl, r4
 8008d06:	db11      	blt.n	8008d2c <_strtol_l.isra.0+0xc0>
 8008d08:	fb00 4003 	mla	r0, r0, r3, r4
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d12:	e7eb      	b.n	8008cec <_strtol_l.isra.0+0x80>
 8008d14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d18:	2f19      	cmp	r7, #25
 8008d1a:	d801      	bhi.n	8008d20 <_strtol_l.isra.0+0xb4>
 8008d1c:	3c37      	subs	r4, #55	@ 0x37
 8008d1e:	e7ea      	b.n	8008cf6 <_strtol_l.isra.0+0x8a>
 8008d20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d24:	2f19      	cmp	r7, #25
 8008d26:	d804      	bhi.n	8008d32 <_strtol_l.isra.0+0xc6>
 8008d28:	3c57      	subs	r4, #87	@ 0x57
 8008d2a:	e7e4      	b.n	8008cf6 <_strtol_l.isra.0+0x8a>
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	e7ed      	b.n	8008d0e <_strtol_l.isra.0+0xa2>
 8008d32:	1c53      	adds	r3, r2, #1
 8008d34:	d108      	bne.n	8008d48 <_strtol_l.isra.0+0xdc>
 8008d36:	2322      	movs	r3, #34	@ 0x22
 8008d38:	f8ce 3000 	str.w	r3, [lr]
 8008d3c:	4660      	mov	r0, ip
 8008d3e:	f1b8 0f00 	cmp.w	r8, #0
 8008d42:	d0a0      	beq.n	8008c86 <_strtol_l.isra.0+0x1a>
 8008d44:	1e69      	subs	r1, r5, #1
 8008d46:	e006      	b.n	8008d56 <_strtol_l.isra.0+0xea>
 8008d48:	b106      	cbz	r6, 8008d4c <_strtol_l.isra.0+0xe0>
 8008d4a:	4240      	negs	r0, r0
 8008d4c:	f1b8 0f00 	cmp.w	r8, #0
 8008d50:	d099      	beq.n	8008c86 <_strtol_l.isra.0+0x1a>
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d1f6      	bne.n	8008d44 <_strtol_l.isra.0+0xd8>
 8008d56:	f8c8 1000 	str.w	r1, [r8]
 8008d5a:	e794      	b.n	8008c86 <_strtol_l.isra.0+0x1a>
 8008d5c:	080095f3 	.word	0x080095f3

08008d60 <_strtol_r>:
 8008d60:	f7ff bf84 	b.w	8008c6c <_strtol_l.isra.0>

08008d64 <_strtoul_l.isra.0>:
 8008d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d68:	4e34      	ldr	r6, [pc, #208]	@ (8008e3c <_strtoul_l.isra.0+0xd8>)
 8008d6a:	4686      	mov	lr, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d74:	5d37      	ldrb	r7, [r6, r4]
 8008d76:	f017 0708 	ands.w	r7, r7, #8
 8008d7a:	d1f8      	bne.n	8008d6e <_strtoul_l.isra.0+0xa>
 8008d7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d7e:	d110      	bne.n	8008da2 <_strtoul_l.isra.0+0x3e>
 8008d80:	782c      	ldrb	r4, [r5, #0]
 8008d82:	2701      	movs	r7, #1
 8008d84:	1c85      	adds	r5, r0, #2
 8008d86:	f033 0010 	bics.w	r0, r3, #16
 8008d8a:	d115      	bne.n	8008db8 <_strtoul_l.isra.0+0x54>
 8008d8c:	2c30      	cmp	r4, #48	@ 0x30
 8008d8e:	d10d      	bne.n	8008dac <_strtoul_l.isra.0+0x48>
 8008d90:	7828      	ldrb	r0, [r5, #0]
 8008d92:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008d96:	2858      	cmp	r0, #88	@ 0x58
 8008d98:	d108      	bne.n	8008dac <_strtoul_l.isra.0+0x48>
 8008d9a:	786c      	ldrb	r4, [r5, #1]
 8008d9c:	3502      	adds	r5, #2
 8008d9e:	2310      	movs	r3, #16
 8008da0:	e00a      	b.n	8008db8 <_strtoul_l.isra.0+0x54>
 8008da2:	2c2b      	cmp	r4, #43	@ 0x2b
 8008da4:	bf04      	itt	eq
 8008da6:	782c      	ldrbeq	r4, [r5, #0]
 8008da8:	1c85      	addeq	r5, r0, #2
 8008daa:	e7ec      	b.n	8008d86 <_strtoul_l.isra.0+0x22>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1f6      	bne.n	8008d9e <_strtoul_l.isra.0+0x3a>
 8008db0:	2c30      	cmp	r4, #48	@ 0x30
 8008db2:	bf14      	ite	ne
 8008db4:	230a      	movne	r3, #10
 8008db6:	2308      	moveq	r3, #8
 8008db8:	f04f 38ff 	mov.w	r8, #4294967295
 8008dbc:	2600      	movs	r6, #0
 8008dbe:	fbb8 f8f3 	udiv	r8, r8, r3
 8008dc2:	fb03 f908 	mul.w	r9, r3, r8
 8008dc6:	ea6f 0909 	mvn.w	r9, r9
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008dd0:	f1bc 0f09 	cmp.w	ip, #9
 8008dd4:	d810      	bhi.n	8008df8 <_strtoul_l.isra.0+0x94>
 8008dd6:	4664      	mov	r4, ip
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	dd1e      	ble.n	8008e1a <_strtoul_l.isra.0+0xb6>
 8008ddc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008de0:	d007      	beq.n	8008df2 <_strtoul_l.isra.0+0x8e>
 8008de2:	4580      	cmp	r8, r0
 8008de4:	d316      	bcc.n	8008e14 <_strtoul_l.isra.0+0xb0>
 8008de6:	d101      	bne.n	8008dec <_strtoul_l.isra.0+0x88>
 8008de8:	45a1      	cmp	r9, r4
 8008dea:	db13      	blt.n	8008e14 <_strtoul_l.isra.0+0xb0>
 8008dec:	fb00 4003 	mla	r0, r0, r3, r4
 8008df0:	2601      	movs	r6, #1
 8008df2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008df6:	e7e9      	b.n	8008dcc <_strtoul_l.isra.0+0x68>
 8008df8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008dfc:	f1bc 0f19 	cmp.w	ip, #25
 8008e00:	d801      	bhi.n	8008e06 <_strtoul_l.isra.0+0xa2>
 8008e02:	3c37      	subs	r4, #55	@ 0x37
 8008e04:	e7e8      	b.n	8008dd8 <_strtoul_l.isra.0+0x74>
 8008e06:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008e0a:	f1bc 0f19 	cmp.w	ip, #25
 8008e0e:	d804      	bhi.n	8008e1a <_strtoul_l.isra.0+0xb6>
 8008e10:	3c57      	subs	r4, #87	@ 0x57
 8008e12:	e7e1      	b.n	8008dd8 <_strtoul_l.isra.0+0x74>
 8008e14:	f04f 36ff 	mov.w	r6, #4294967295
 8008e18:	e7eb      	b.n	8008df2 <_strtoul_l.isra.0+0x8e>
 8008e1a:	1c73      	adds	r3, r6, #1
 8008e1c:	d106      	bne.n	8008e2c <_strtoul_l.isra.0+0xc8>
 8008e1e:	2322      	movs	r3, #34	@ 0x22
 8008e20:	f8ce 3000 	str.w	r3, [lr]
 8008e24:	4630      	mov	r0, r6
 8008e26:	b932      	cbnz	r2, 8008e36 <_strtoul_l.isra.0+0xd2>
 8008e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e2c:	b107      	cbz	r7, 8008e30 <_strtoul_l.isra.0+0xcc>
 8008e2e:	4240      	negs	r0, r0
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	d0f9      	beq.n	8008e28 <_strtoul_l.isra.0+0xc4>
 8008e34:	b106      	cbz	r6, 8008e38 <_strtoul_l.isra.0+0xd4>
 8008e36:	1e69      	subs	r1, r5, #1
 8008e38:	6011      	str	r1, [r2, #0]
 8008e3a:	e7f5      	b.n	8008e28 <_strtoul_l.isra.0+0xc4>
 8008e3c:	080095f3 	.word	0x080095f3

08008e40 <_strtoul_r>:
 8008e40:	f7ff bf90 	b.w	8008d64 <_strtoul_l.isra.0>

08008e44 <_malloc_usable_size_r>:
 8008e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e48:	1f18      	subs	r0, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bfbc      	itt	lt
 8008e4e:	580b      	ldrlt	r3, [r1, r0]
 8008e50:	18c0      	addlt	r0, r0, r3
 8008e52:	4770      	bx	lr

08008e54 <_init>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	bf00      	nop
 8008e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5a:	bc08      	pop	{r3}
 8008e5c:	469e      	mov	lr, r3
 8008e5e:	4770      	bx	lr

08008e60 <_fini>:
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e62:	bf00      	nop
 8008e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e66:	bc08      	pop	{r3}
 8008e68:	469e      	mov	lr, r3
 8008e6a:	4770      	bx	lr
