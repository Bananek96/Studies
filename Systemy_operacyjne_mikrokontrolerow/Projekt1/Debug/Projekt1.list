
Projekt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c2c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08007dfc  08007dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c0  080080c0  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080080c0  080080c0  000090c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c8  080080c8  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c8  080080c8  000090c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080cc  080080cc  000090cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080080d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c74  2000006c  0800813c  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ce0  0800813c  0000ace0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a14f  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab0  00000000  00000000  000241eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00027ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001137  00000000  00000000  000292d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002553e  00000000  00000000  0002a40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e6c  00000000  00000000  0004f94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dda61  00000000  00000000  000697b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014721a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006620  00000000  00000000  00147260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0014d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007de4 	.word	0x08007de4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007de4 	.word	0x08007de4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <vApplicationMallocFailedHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	2201      	movs	r2, #1
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <__io_putchar+0x20>)
 800063a:	f002 f9db 	bl	80029f4 <HAL_UART_Transmit>
    return 1;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000088 	.word	0x20000088

0800064c <HAL_UART_RxCpltCallback>:

// Odbiór pojedynczego znaku przez przerwanie
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <HAL_UART_RxCpltCallback+0x34>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d10b      	bne.n	8000676 <HAL_UART_RxCpltCallback+0x2a>
    {
        // Przekaż znak do kolejki
        osMessageQueuePut(myQueue01Handle, &uart_rx_char, 0, 0);
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <HAL_UART_RxCpltCallback+0x38>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2200      	movs	r2, #0
 8000666:	4908      	ldr	r1, [pc, #32]	@ (8000688 <HAL_UART_RxCpltCallback+0x3c>)
 8000668:	f003 fb96 	bl	8003d98 <osMessageQueuePut>
        HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	4906      	ldr	r1, [pc, #24]	@ (8000688 <HAL_UART_RxCpltCallback+0x3c>)
 8000670:	4806      	ldr	r0, [pc, #24]	@ (800068c <HAL_UART_RxCpltCallback+0x40>)
 8000672:	f002 fa4a 	bl	8002b0a <HAL_UART_Receive_IT>
    }
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40004400 	.word	0x40004400
 8000684:	200000d8 	.word	0x200000d8
 8000688:	200000dc 	.word	0x200000dc
 800068c:	20000088 	.word	0x20000088

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fcca 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f846 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f8c0 	bl	8000820 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 f894 	bl	80007cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	4915      	ldr	r1, [pc, #84]	@ (80006fc <main+0x6c>)
 80006a8:	4815      	ldr	r0, [pc, #84]	@ (8000700 <main+0x70>)
 80006aa:	f002 fa2e 	bl	8002b0a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006ae:	f003 fa01 	bl	8003ab4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <main+0x74>)
 80006b4:	2102      	movs	r1, #2
 80006b6:	2010      	movs	r0, #16
 80006b8:	f003 fafa 	bl	8003cb0 <osMessageQueueNew>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <main+0x78>)
 80006c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  ledCmdQueueHandle = osMessageQueueNew (4, sizeof(Command_t), NULL);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	2004      	movs	r0, #4
 80006c8:	f003 faf2 	bl	8003cb0 <osMessageQueueNew>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a0f      	ldr	r2, [pc, #60]	@ (800070c <main+0x7c>)
 80006d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartUartTask, NULL, &UartTask_attributes);
 80006d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000710 <main+0x80>)
 80006d4:	2100      	movs	r1, #0
 80006d6:	480f      	ldr	r0, [pc, #60]	@ (8000714 <main+0x84>)
 80006d8:	f003 fa36 	bl	8003b48 <osThreadNew>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <main+0x88>)
 80006e0:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <main+0x8c>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	480e      	ldr	r0, [pc, #56]	@ (8000720 <main+0x90>)
 80006e8:	f003 fa2e 	bl	8003b48 <osThreadNew>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <main+0x94>)
 80006f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f2:	f003 fa03 	bl	8003afc <osKernelStart>
 80006f6:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000dc 	.word	0x200000dc
 8000700:	20000088 	.word	0x20000088
 8000704:	08007f90 	.word	0x08007f90
 8000708:	200000d8 	.word	0x200000d8
 800070c:	200000e0 	.word	0x200000e0
 8000710:	08007f48 	.word	0x08007f48
 8000714:	08000a15 	.word	0x08000a15
 8000718:	200000d0 	.word	0x200000d0
 800071c:	08007f6c 	.word	0x08007f6c
 8000720:	08000b55 	.word	0x08000b55
 8000724:	200000d4 	.word	0x200000d4

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b092      	sub	sp, #72	@ 0x48
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2234      	movs	r2, #52	@ 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 fb29 	bl	8006d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800074a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800074e:	f000 ffd1 	bl	80016f4 <HAL_PWREx_ControlVoltageScaling>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000758:	f000 fa58 	bl	8000c0c <Error_Handler>


  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000774:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077a:	2304      	movs	r3, #4
 800077c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fba8 	bl	8001ee0 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000796:	f000 fa39 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 f817 	bl	80017e8 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007c0:	f000 fa24 	bl	8000c0c <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3748      	adds	r7, #72	@ 0x48
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_USART2_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 8000804:	f002 f8a6 	bl	8002954 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f9fd 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000088 	.word	0x20000088
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a2c      	ldr	r2, [pc, #176]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2120      	movs	r1, #32
 80008aa:	4812      	ldr	r0, [pc, #72]	@ (80008f4 <MX_GPIO_Init+0xd4>)
 80008ac:	f000 ff08 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <MX_GPIO_Init+0xd8>)
 80008c8:	f000 fd66 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008cc:	2320      	movs	r3, #32
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_GPIO_Init+0xd4>)
 80008e4:	f000 fd58 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	@ 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020800 	.word	0x40020800

080008fc <CommandHandler_Parse>:

/* USER CODE BEGIN 4 */
char* CommandHandler_Parse(char* command)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    static char responseBuffer[UART_RESPONSE_SIZE];
    Command_t cmd = CMD_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	72fb      	strb	r3, [r7, #11]

    size_t len = strlen(command);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fc8b 	bl	8000224 <strlen>
 800090e:	60f8      	str	r0, [r7, #12]
    if (len > 0 && command[len - 1] == '\n') command[len - 1] = '\0';
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00c      	beq.n	8000930 <CommandHandler_Parse+0x34>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3b01      	subs	r3, #1
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b0a      	cmp	r3, #10
 8000922:	d105      	bne.n	8000930 <CommandHandler_Parse+0x34>
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3b01      	subs	r3, #1
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	4413      	add	r3, r2
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
    if (len > 0 && command[len - 1] == '\r') command[len - 1] = '\0';
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00c      	beq.n	8000950 <CommandHandler_Parse+0x54>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	3b01      	subs	r3, #1
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b0d      	cmp	r3, #13
 8000942:	d105      	bne.n	8000950 <CommandHandler_Parse+0x54>
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3b01      	subs	r3, #1
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]

    if (strcmp(command, "START LED") == 0) {
 8000950:	4927      	ldr	r1, [pc, #156]	@ (80009f0 <CommandHandler_Parse+0xf4>)
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff fc5c 	bl	8000210 <strcmp>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10f      	bne.n	800097e <CommandHandler_Parse+0x82>
        cmd = CMD_START_LED;
 800095e:	2301      	movs	r3, #1
 8000960:	72fb      	strb	r3, [r7, #11]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Dioda LED zaczyna mrugac z czestotliwoscia 0.5Hz");
 8000962:	4a24      	ldr	r2, [pc, #144]	@ (80009f4 <CommandHandler_Parse+0xf8>)
 8000964:	2178      	movs	r1, #120	@ 0x78
 8000966:	4824      	ldr	r0, [pc, #144]	@ (80009f8 <CommandHandler_Parse+0xfc>)
 8000968:	f006 f998 	bl	8006c9c <sniprintf>
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
 800096c:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <CommandHandler_Parse+0x100>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	f107 010b 	add.w	r1, r7, #11
 8000974:	2300      	movs	r3, #0
 8000976:	2200      	movs	r2, #0
 8000978:	f003 fa0e 	bl	8003d98 <osMessageQueuePut>
 800097c:	e032      	b.n	80009e4 <CommandHandler_Parse+0xe8>
    }
    else if (strcmp(command, "STOP LED") == 0) {
 800097e:	4920      	ldr	r1, [pc, #128]	@ (8000a00 <CommandHandler_Parse+0x104>)
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff fc45 	bl	8000210 <strcmp>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10f      	bne.n	80009ac <CommandHandler_Parse+0xb0>
        cmd = CMD_STOP_LED;
 800098c:	2302      	movs	r3, #2
 800098e:	72fb      	strb	r3, [r7, #11]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Dioda LED zostala wylaczona");
 8000990:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <CommandHandler_Parse+0x108>)
 8000992:	2178      	movs	r1, #120	@ 0x78
 8000994:	4818      	ldr	r0, [pc, #96]	@ (80009f8 <CommandHandler_Parse+0xfc>)
 8000996:	f006 f981 	bl	8006c9c <sniprintf>
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <CommandHandler_Parse+0x100>)
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	f107 010b 	add.w	r1, r7, #11
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	f003 f9f7 	bl	8003d98 <osMessageQueuePut>
 80009aa:	e01b      	b.n	80009e4 <CommandHandler_Parse+0xe8>
    }
    else if (strcmp(command, "EXIT") == 0) {
 80009ac:	4916      	ldr	r1, [pc, #88]	@ (8000a08 <CommandHandler_Parse+0x10c>)
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fc2e 	bl	8000210 <strcmp>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10f      	bne.n	80009da <CommandHandler_Parse+0xde>
        cmd = CMD_EXIT;
 80009ba:	2303      	movs	r3, #3
 80009bc:	72fb      	strb	r3, [r7, #11]
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Zamykanie programu...");
 80009be:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <CommandHandler_Parse+0x110>)
 80009c0:	2178      	movs	r1, #120	@ 0x78
 80009c2:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <CommandHandler_Parse+0xfc>)
 80009c4:	f006 f96a 	bl	8006c9c <sniprintf>
        osMessageQueuePut(ledCmdQueueHandle, &cmd, 0, 0);
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <CommandHandler_Parse+0x100>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	f107 010b 	add.w	r1, r7, #11
 80009d0:	2300      	movs	r3, #0
 80009d2:	2200      	movs	r2, #0
 80009d4:	f003 f9e0 	bl	8003d98 <osMessageQueuePut>
 80009d8:	e004      	b.n	80009e4 <CommandHandler_Parse+0xe8>
    }
    else {
        snprintf(responseBuffer, UART_RESPONSE_SIZE, "Blad: Nieznane polecenie. Dostepne: START LED, STOP LED, EXIT");
 80009da:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <CommandHandler_Parse+0x114>)
 80009dc:	2178      	movs	r1, #120	@ 0x78
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <CommandHandler_Parse+0xfc>)
 80009e0:	f006 f95c 	bl	8006c9c <sniprintf>
    }
    return responseBuffer;
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <CommandHandler_Parse+0xfc>)
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	08007e1c 	.word	0x08007e1c
 80009f4:	08007e28 	.word	0x08007e28
 80009f8:	200000e4 	.word	0x200000e4
 80009fc:	200000e0 	.word	0x200000e0
 8000a00:	08007e5c 	.word	0x08007e5c
 8000a04:	08007e68 	.word	0x08007e68
 8000a08:	08007e84 	.word	0x08007e84
 8000a0c:	08007e8c 	.word	0x08007e8c
 8000a10:	08007ea4 	.word	0x08007ea4

08000a14 <StartUartTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 8000a14:	b5b0      	push	{r4, r5, r7, lr}
 8000a16:	b092      	sub	sp, #72	@ 0x48
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	printf("Start Uart Task");
 8000a1c:	4846      	ldr	r0, [pc, #280]	@ (8000b38 <StartUartTask+0x124>)
 8000a1e:	f006 f92b 	bl	8006c78 <iprintf>
  /* USER CODE BEGIN 5 */
	uint8_t rx_char;
	  uint8_t rx_buf[UART_BUFFER_SIZE];
	  uint16_t rx_idx = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	  HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	22c9      	movs	r2, #201	@ 0xc9
 8000a2e:	4943      	ldr	r1, [pc, #268]	@ (8000b3c <StartUartTask+0x128>)
 8000a30:	4843      	ldr	r0, [pc, #268]	@ (8000b40 <StartUartTask+0x12c>)
 8000a32:	f001 ffdf 	bl	80029f4 <HAL_UART_Transmit>
	  /* Infinite loop */
	  for(;;)
	  {
	     if (osMessageQueueGet(myQueue01Handle, &rx_char, NULL, osWaitForever) == osOK)
 8000a36:	4b43      	ldr	r3, [pc, #268]	@ (8000b44 <StartUartTask+0x130>)
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	2200      	movs	r2, #0
 8000a44:	f003 fa08 	bl	8003e58 <osMessageQueueGet>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d170      	bne.n	8000b30 <StartUartTask+0x11c>
	     {
	         if (rx_char == '\n' || rx_char == '\r') // Detekcja końca komendy
 8000a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	d003      	beq.n	8000a5e <StartUartTask+0x4a>
 8000a56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a5a:	2b0d      	cmp	r3, #13
 8000a5c:	d12d      	bne.n	8000aba <StartUartTask+0xa6>
	         {
	             if (rx_idx > 0)
 8000a5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d064      	beq.n	8000b30 <StartUartTask+0x11c>
	             {
	                 rx_buf[rx_idx] = '\0'; // Zakończenie stringa
 8000a66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a6a:	3348      	adds	r3, #72	@ 0x48
 8000a6c:	443b      	add	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f803 2c20 	strb.w	r2, [r3, #-32]
	                 char* response = CommandHandler_Parse((char*)rx_buf);
 8000a74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff3f 	bl	80008fc <CommandHandler_Parse>
 8000a7e:	6438      	str	r0, [r7, #64]	@ 0x40
	                 HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	2202      	movs	r2, #2
 8000a86:	4930      	ldr	r1, [pc, #192]	@ (8000b48 <StartUartTask+0x134>)
 8000a88:	482d      	ldr	r0, [pc, #180]	@ (8000b40 <StartUartTask+0x12c>)
 8000a8a:	f001 ffb3 	bl	80029f4 <HAL_UART_Transmit>
	                 HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000a8e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000a90:	f7ff fbc8 	bl	8000224 <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000a9e:	4828      	ldr	r0, [pc, #160]	@ (8000b40 <StartUartTask+0x12c>)
 8000aa0:	f001 ffa8 	bl	80029f4 <HAL_UART_Transmit>
	                 HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n> ", 5, HAL_MAX_DELAY);
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	4928      	ldr	r1, [pc, #160]	@ (8000b4c <StartUartTask+0x138>)
 8000aac:	4824      	ldr	r0, [pc, #144]	@ (8000b40 <StartUartTask+0x12c>)
 8000aae:	f001 ffa1 	bl	80029f4 <HAL_UART_Transmit>
	                 rx_idx = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	             if (rx_idx > 0)
 8000ab8:	e03a      	b.n	8000b30 <StartUartTask+0x11c>
	             }
	         }
	         else if (rx_idx < UART_BUFFER_SIZE - 1)
 8000aba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d81b      	bhi.n	8000afa <StartUartTask+0xe6>
	         {
	             // Echo znaku (oprócz znaków specjalnych)
	             if(rx_char != '\r' && rx_char != '\n') {
 8000ac2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ac6:	2b0d      	cmp	r3, #13
 8000ac8:	d00b      	beq.n	8000ae2 <StartUartTask+0xce>
 8000aca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ace:	2b0a      	cmp	r3, #10
 8000ad0:	d007      	beq.n	8000ae2 <StartUartTask+0xce>
	                 HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY);
 8000ad2:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	2201      	movs	r2, #1
 8000adc:	4818      	ldr	r0, [pc, #96]	@ (8000b40 <StartUartTask+0x12c>)
 8000ade:	f001 ff89 	bl	80029f4 <HAL_UART_Transmit>
	             }
	             rx_buf[rx_idx++] = rx_char; // Dodanie znaku do bufora
 8000ae2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	f8a7 2046 	strh.w	r2, [r7, #70]	@ 0x46
 8000aec:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000af0:	3348      	adds	r3, #72	@ 0x48
 8000af2:	443b      	add	r3, r7
 8000af4:	f803 2c20 	strb.w	r2, [r3, #-32]
 8000af8:	e01a      	b.n	8000b30 <StartUartTask+0x11c>
	         }
	         else
	         {
	             char err[] = "\r\nError: Buffer overflow\r\n> ";
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <StartUartTask+0x13c>)
 8000afc:	f107 0408 	add.w	r4, r7, #8
 8000b00:	461d      	mov	r5, r3
 8000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b0a:	c407      	stmia	r4!, {r0, r1, r2}
 8000b0c:	7023      	strb	r3, [r4, #0]
	             HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb86 	bl	8000224 <strlen>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	f107 0108 	add.w	r1, r7, #8
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <StartUartTask+0x12c>)
 8000b26:	f001 ff65 	bl	80029f4 <HAL_UART_Transmit>
	             rx_idx = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	         }
	     }
	     osDelay(1);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f003 f8a2 	bl	8003c7a <osDelay>
	     if (osMessageQueueGet(myQueue01Handle, &rx_char, NULL, osWaitForever) == osOK)
 8000b36:	e77e      	b.n	8000a36 <StartUartTask+0x22>
 8000b38:	08007ee4 	.word	0x08007ee4
 8000b3c:	08007fa8 	.word	0x08007fa8
 8000b40:	20000088 	.word	0x20000088
 8000b44:	200000d8 	.word	0x200000d8
 8000b48:	08007ef4 	.word	0x08007ef4
 8000b4c:	08007ef8 	.word	0x08007ef8
 8000b50:	08007f00 	.word	0x08007f00

08000b54 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	printf("Start Led Task");
 8000b5c:	481f      	ldr	r0, [pc, #124]	@ (8000bdc <StartLedTask+0x88>)
 8000b5e:	f006 f88b 	bl	8006c78 <iprintf>
  /* USER CODE BEGIN StartLedTask */
    Command_t cmd;
    uint8_t led_on = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]

    for(;;)
    {
        if(osMessageQueueGet(ledCmdQueueHandle, &cmd, NULL, 0) == osOK)
 8000b66:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <StartLedTask+0x8c>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f107 010e 	add.w	r1, r7, #14
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	f003 f971 	bl	8003e58 <osMessageQueueGet>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d115      	bne.n	8000ba8 <StartLedTask+0x54>
        {
            if (cmd == CMD_START_LED){
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <StartLedTask+0x34>
                led_on = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	e00f      	b.n	8000ba8 <StartLedTask+0x54>
            }
            else if(cmd == CMD_STOP_LED) {
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d102      	bne.n	8000b94 <StartLedTask+0x40>
                led_on = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e009      	b.n	8000ba8 <StartLedTask+0x54>
            }
            else if(cmd == CMD_EXIT) {
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d106      	bne.n	8000ba8 <StartLedTask+0x54>
                HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4811      	ldr	r0, [pc, #68]	@ (8000be4 <StartLedTask+0x90>)
 8000ba0:	f000 fd8e 	bl	80016c0 <HAL_GPIO_WritePin>
                osThreadExit();  // Zakończ ten wątek
 8000ba4:	f003 f862 	bl	8003c6c <osThreadExit>
            }
        }

        if(led_on){
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d012      	beq.n	8000bd4 <StartLedTask+0x80>
            HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <StartLedTask+0x90>)
 8000bb4:	f000 fd84 	bl	80016c0 <HAL_GPIO_WritePin>
            osDelay(500);
 8000bb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bbc:	f003 f85d 	bl	8003c7a <osDelay>
            HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4807      	ldr	r0, [pc, #28]	@ (8000be4 <StartLedTask+0x90>)
 8000bc6:	f000 fd7b 	bl	80016c0 <HAL_GPIO_WritePin>
            osDelay(500);
 8000bca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bce:	f003 f854 	bl	8003c7a <osDelay>
 8000bd2:	e7c8      	b.n	8000b66 <StartLedTask+0x12>
        } else {
            osDelay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f003 f850 	bl	8003c7a <osDelay>
        if(osMessageQueueGet(ledCmdQueueHandle, &cmd, NULL, 0) == osOK)
 8000bda:	e7c4      	b.n	8000b66 <StartLedTask+0x12>
 8000bdc:	08007f20 	.word	0x08007f20
 8000be0:	200000e0 	.word	0x200000e0
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000bfa:	f000 fa39 	bl	8001070 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40000c00 	.word	0x40000c00

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	4a11      	ldr	r2, [pc, #68]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	f06f 0001 	mvn.w	r0, #1
 8000c62:	f000 fadd 	bl	8001220 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1d      	ldr	r2, [pc, #116]	@ (8000d08 <HAL_UART_MspInit+0x94>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d133      	bne.n	8000cfe <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <HAL_UART_MspInit+0x98>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <HAL_UART_MspInit+0x98>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_UART_MspInit+0x98>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_UART_MspInit+0x98>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <HAL_UART_MspInit+0x98>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_UART_MspInit+0x98>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <HAL_UART_MspInit+0x9c>)
 8000cea:	f000 fb55 	bl	8001398 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	2026      	movs	r0, #38	@ 0x26
 8000cf4:	f000 fa94 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf8:	2026      	movs	r0, #38	@ 0x26
 8000cfa:	f000 faad 	bl	8001258 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	@ 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	@ 0x38
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4b33      	ldr	r3, [pc, #204]	@ (8000df8 <HAL_InitTick+0xe4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	4a32      	ldr	r2, [pc, #200]	@ (8000df8 <HAL_InitTick+0xe4>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d34:	4b30      	ldr	r3, [pc, #192]	@ (8000df8 <HAL_InitTick+0xe4>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d40:	f107 0210 	add.w	r2, r7, #16
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fe66 	bl	8001a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d103      	bne.n	8000d62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d5a:	f000 fe37 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 8000d5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d60:	e004      	b.n	8000d6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d62:	f000 fe33 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 8000d66:	4603      	mov	r3, r0
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d6e:	4a23      	ldr	r2, [pc, #140]	@ (8000dfc <HAL_InitTick+0xe8>)
 8000d70:	fba2 2303 	umull	r2, r3, r2, r3
 8000d74:	0c9b      	lsrs	r3, r3, #18
 8000d76:	3b01      	subs	r3, #1
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <HAL_InitTick+0xec>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <HAL_InitTick+0xf0>)
 8000d7e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <HAL_InitTick+0xec>)
 8000d82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d86:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d88:	4a1d      	ldr	r2, [pc, #116]	@ (8000e00 <HAL_InitTick+0xec>)
 8000d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d8c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <HAL_InitTick+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <HAL_InitTick+0xec>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <HAL_InitTick+0xec>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000da0:	4817      	ldr	r0, [pc, #92]	@ (8000e00 <HAL_InitTick+0xec>)
 8000da2:	f001 fb3b 	bl	800241c <HAL_TIM_Base_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000dac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d11b      	bne.n	8000dec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000db4:	4812      	ldr	r0, [pc, #72]	@ (8000e00 <HAL_InitTick+0xec>)
 8000db6:	f001 fb8b 	bl	80024d0 <HAL_TIM_Base_Start_IT>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d111      	bne.n	8000dec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000dc8:	2032      	movs	r0, #50	@ 0x32
 8000dca:	f000 fa45 	bl	8001258 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d808      	bhi.n	8000de6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2032      	movs	r0, #50	@ 0x32
 8000dda:	f000 fa21 	bl	8001220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_InitTick+0xf4>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e002      	b.n	8000dec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3738      	adds	r7, #56	@ 0x38
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	2000015c 	.word	0x2000015c
 8000e04:	40000c00 	.word	0x40000c00
 8000e08:	20000004 	.word	0x20000004

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <USART2_IRQHandler+0x10>)
 8000e4a:	f001 fe83 	bl	8002b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000088 	.word	0x20000088

08000e58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <TIM5_IRQHandler+0x10>)
 8000e5e:	f001 fba7 	bl	80025b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000015c 	.word	0x2000015c

08000e6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
  }

  return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e009      	b.n	8000ecc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fbb1 	bl	8000628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf1      	blt.n	8000eb8 <_write+0x12>
  }
  return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f005 ffb6 	bl	8006ee8 <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20020000 	.word	0x20020000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	200001a4 	.word	0x200001a4
 8000fb0:	20004ce0 	.word	0x20004ce0

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001010 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fdc:	f7ff ffea 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fe2:	490d      	ldr	r1, [pc, #52]	@ (8001018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8001024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001006:	f005 ff75 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fb41 	bl	8000690 <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800101c:	080080d0 	.word	0x080080d0
  ldr r2, =_sbss
 8001020:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001024:	20004ce0 	.word	0x20004ce0

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	@ (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f8d8 	bl	800120a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	200f      	movs	r0, #15
 800105c:	f7ff fe5a 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fddc 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	200001a8 	.word	0x200001a8

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200001a8 	.word	0x200001a8

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	@ (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	@ (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	@ 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff4c 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001232:	f7ff ff61 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff ffb1 	bl	80011a4 <NVIC_EncodePriority>
 8001242:	4602      	mov	r2, r0
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff80 	bl	8001150 <__NVIC_SetPriority>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff54 	bl	8001114 <__NVIC_EnableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001282:	f7ff ff09 	bl	8001098 <HAL_GetTick>
 8001286:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2280      	movs	r2, #128	@ 0x80
 8001298:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e052      	b.n	800134c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0216 	bic.w	r2, r2, #22
 80012b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <HAL_DMA_Abort+0x62>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0208 	bic.w	r2, r2, #8
 80012e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f6:	e013      	b.n	8001320 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f8:	f7ff fece 	bl	8001098 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b05      	cmp	r3, #5
 8001304:	d90c      	bls.n	8001320 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2220      	movs	r2, #32
 800130a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2203      	movs	r2, #3
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e015      	b.n	800134c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1e4      	bne.n	80012f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001332:	223f      	movs	r2, #63	@ 0x3f
 8001334:	409a      	lsls	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d004      	beq.n	8001372 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2280      	movs	r2, #128	@ 0x80
 800136c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00c      	b.n	800138c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2205      	movs	r2, #5
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e165      	b.n	8001680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 8154 	bne.w	800167a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80ae 	beq.w	800167a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b5d      	ldr	r3, [pc, #372]	@ (8001698 <HAL_GPIO_Init+0x300>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	4a5c      	ldr	r2, [pc, #368]	@ (8001698 <HAL_GPIO_Init+0x300>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152c:	6453      	str	r3, [r2, #68]	@ 0x44
 800152e:	4b5a      	ldr	r3, [pc, #360]	@ (8001698 <HAL_GPIO_Init+0x300>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a58      	ldr	r2, [pc, #352]	@ (800169c <HAL_GPIO_Init+0x304>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4f      	ldr	r2, [pc, #316]	@ (80016a0 <HAL_GPIO_Init+0x308>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4e      	ldr	r2, [pc, #312]	@ (80016a4 <HAL_GPIO_Init+0x30c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4d      	ldr	r2, [pc, #308]	@ (80016a8 <HAL_GPIO_Init+0x310>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4c      	ldr	r2, [pc, #304]	@ (80016ac <HAL_GPIO_Init+0x314>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	@ (80016b0 <HAL_GPIO_Init+0x318>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x20a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <HAL_GPIO_Init+0x31c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x206>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a49      	ldr	r2, [pc, #292]	@ (80016b8 <HAL_GPIO_Init+0x320>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x202>
 8001596:	2306      	movs	r3, #6
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 800159a:	2307      	movs	r3, #7
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	@ (800169c <HAL_GPIO_Init+0x304>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b3a      	ldr	r3, [pc, #232]	@ (80016bc <HAL_GPIO_Init+0x324>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a31      	ldr	r2, [pc, #196]	@ (80016bc <HAL_GPIO_Init+0x324>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	@ (80016bc <HAL_GPIO_Init+0x324>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a26      	ldr	r2, [pc, #152]	@ (80016bc <HAL_GPIO_Init+0x324>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001626:	4b25      	ldr	r3, [pc, #148]	@ (80016bc <HAL_GPIO_Init+0x324>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164a:	4a1c      	ldr	r2, [pc, #112]	@ (80016bc <HAL_GPIO_Init+0x324>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <HAL_GPIO_Init+0x324>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001674:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <HAL_GPIO_Init+0x324>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f ae96 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40021800 	.word	0x40021800
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016dc:	e003      	b.n	80016e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	4a34      	ldr	r2, [pc, #208]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xe8>)
 800170a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171c:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xe8>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d051      	beq.n	80017cc <HAL_PWREx_ControlVoltageScaling+0xd8>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
 8001728:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <HAL_PWREx_ControlVoltageScaling+0xec>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
 800172e:	f7ff fcb3 	bl	8001098 <HAL_GetTick>
 8001732:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001734:	e008      	b.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fcaf 	bl	8001098 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e044      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xe8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x42>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001760:	4920      	ldr	r1, [pc, #128]	@ (80017e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <HAL_PWREx_ControlVoltageScaling+0xec>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177a:	f7ff fc8d 	bl	8001098 <HAL_GetTick>
 800177e:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001780:	e008      	b.n	8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff fc89 	bl	8001098 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>
      {
        return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e01e      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xe8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x8e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a0:	f7ff fc7a 	bl	8001098 <HAL_GetTick>
 80017a4:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80017a6:	e009      	b.n	80017bc <HAL_PWREx_ControlVoltageScaling+0xc8>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 80017a8:	f7ff fc76 	bl	8001098 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017b6:	d901      	bls.n	80017bc <HAL_PWREx_ControlVoltageScaling+0xc8>
      {
        return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e00a      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017c8:	d1ee      	bne.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0xb4>
 80017ca:	e001      	b.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0xdc>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0xde>
  }

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	42470060 	.word	0x42470060
 80017e4:	40007000 	.word	0x40007000

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0cc      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b68      	ldr	r3, [pc, #416]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d90c      	bls.n	8001824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b65      	ldr	r3, [pc, #404]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a58      	ldr	r2, [pc, #352]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a52      	ldr	r2, [pc, #328]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800185e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d044      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d119      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b3f      	ldr	r3, [pc, #252]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e06f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e067      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b37      	ldr	r3, [pc, #220]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4934      	ldr	r1, [pc, #208]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff fbde 	bl	8001098 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff fbda 	bl	8001098 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d20c      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f887 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	490a      	ldr	r1, [pc, #40]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9c0 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08008074 	.word	0x08008074
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000000 	.word	0x20000000

080019cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d0:	f7ff fff0 	bl	80019b4 <HAL_RCC_GetHCLKFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	0a9b      	lsrs	r3, r3, #10
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	4903      	ldr	r1, [pc, #12]	@ (80019f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	08008084 	.word	0x08008084

080019f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019f8:	f7ff ffdc 	bl	80019b4 <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0b5b      	lsrs	r3, r3, #13
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	@ (8001a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	08008084 	.word	0x08008084

08001a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	220f      	movs	r2, #15
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_RCC_GetClockConfig+0x60>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 020f 	and.w	r2, r3, #15
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a84:	b0ae      	sub	sp, #184	@ 0xb8
 8001a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa6:	4bcb      	ldr	r3, [pc, #812]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	f200 8206 	bhi.w	8001ec0 <HAL_RCC_GetSysClockFreq+0x440>
 8001ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aba:	bf00      	nop
 8001abc:	08001af1 	.word	0x08001af1
 8001ac0:	08001ec1 	.word	0x08001ec1
 8001ac4:	08001ec1 	.word	0x08001ec1
 8001ac8:	08001ec1 	.word	0x08001ec1
 8001acc:	08001af9 	.word	0x08001af9
 8001ad0:	08001ec1 	.word	0x08001ec1
 8001ad4:	08001ec1 	.word	0x08001ec1
 8001ad8:	08001ec1 	.word	0x08001ec1
 8001adc:	08001b01 	.word	0x08001b01
 8001ae0:	08001ec1 	.word	0x08001ec1
 8001ae4:	08001ec1 	.word	0x08001ec1
 8001ae8:	08001ec1 	.word	0x08001ec1
 8001aec:	08001cf1 	.word	0x08001cf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4bb9      	ldr	r3, [pc, #740]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001af6:	e1e7      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001af8:	4bb8      	ldr	r3, [pc, #736]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001afe:	e1e3      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b00:	4bb4      	ldr	r3, [pc, #720]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d071      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b18:	4bae      	ldr	r3, [pc, #696]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b24:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b3e:	4622      	mov	r2, r4
 8001b40:	462b      	mov	r3, r5
 8001b42:	f04f 0000 	mov.w	r0, #0
 8001b46:	f04f 0100 	mov.w	r1, #0
 8001b4a:	0159      	lsls	r1, r3, #5
 8001b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b50:	0150      	lsls	r0, r2, #5
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4621      	mov	r1, r4
 8001b58:	1a51      	subs	r1, r2, r1
 8001b5a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001b70:	4649      	mov	r1, r9
 8001b72:	018b      	lsls	r3, r1, #6
 8001b74:	4641      	mov	r1, r8
 8001b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7a:	4641      	mov	r1, r8
 8001b7c:	018a      	lsls	r2, r1, #6
 8001b7e:	4641      	mov	r1, r8
 8001b80:	1a51      	subs	r1, r2, r1
 8001b82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b84:	4649      	mov	r1, r9
 8001b86:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001b98:	4649      	mov	r1, r9
 8001b9a:	00cb      	lsls	r3, r1, #3
 8001b9c:	4641      	mov	r1, r8
 8001b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ba2:	4641      	mov	r1, r8
 8001ba4:	00ca      	lsls	r2, r1, #3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4603      	mov	r3, r0
 8001bac:	4622      	mov	r2, r4
 8001bae:	189b      	adds	r3, r3, r2
 8001bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	eb42 0303 	adc.w	r3, r2, r3
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bc8:	4629      	mov	r1, r5
 8001bca:	024b      	lsls	r3, r1, #9
 8001bcc:	4621      	mov	r1, r4
 8001bce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	024a      	lsls	r2, r1, #9
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bde:	2200      	movs	r2, #0
 8001be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001be4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001be8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bec:	f7fe fb78 	bl	80002e0 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bfa:	e067      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4b75      	ldr	r3, [pc, #468]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	2200      	movs	r2, #0
 8001c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c08:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c16:	2300      	movs	r3, #0
 8001c18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c1e:	4622      	mov	r2, r4
 8001c20:	462b      	mov	r3, r5
 8001c22:	f04f 0000 	mov.w	r0, #0
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	0159      	lsls	r1, r3, #5
 8001c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c30:	0150      	lsls	r0, r2, #5
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4621      	mov	r1, r4
 8001c38:	1a51      	subs	r1, r2, r1
 8001c3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001c50:	4649      	mov	r1, r9
 8001c52:	018b      	lsls	r3, r1, #6
 8001c54:	4641      	mov	r1, r8
 8001c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c5a:	4641      	mov	r1, r8
 8001c5c:	018a      	lsls	r2, r1, #6
 8001c5e:	4641      	mov	r1, r8
 8001c60:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c64:	4649      	mov	r1, r9
 8001c66:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c7e:	4692      	mov	sl, r2
 8001c80:	469b      	mov	fp, r3
 8001c82:	4623      	mov	r3, r4
 8001c84:	eb1a 0303 	adds.w	r3, sl, r3
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	462b      	mov	r3, r5
 8001c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	028b      	lsls	r3, r1, #10
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca8:	4621      	mov	r1, r4
 8001caa:	028a      	lsls	r2, r1, #10
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cb8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001cba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cbe:	f7fe fb0f 	bl	80002e0 <__aeabi_uldivmod>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ccc:	4b41      	ldr	r3, [pc, #260]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cee:	e0eb      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfc:	4b35      	ldr	r3, [pc, #212]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d06b      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d08:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	2200      	movs	r2, #0
 8001d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d24:	4622      	mov	r2, r4
 8001d26:	462b      	mov	r3, r5
 8001d28:	f04f 0000 	mov.w	r0, #0
 8001d2c:	f04f 0100 	mov.w	r1, #0
 8001d30:	0159      	lsls	r1, r3, #5
 8001d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d36:	0150      	lsls	r0, r2, #5
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	1a51      	subs	r1, r2, r1
 8001d40:	61b9      	str	r1, [r7, #24]
 8001d42:	4629      	mov	r1, r5
 8001d44:	eb63 0301 	sbc.w	r3, r3, r1
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d56:	4659      	mov	r1, fp
 8001d58:	018b      	lsls	r3, r1, #6
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d60:	4651      	mov	r1, sl
 8001d62:	018a      	lsls	r2, r1, #6
 8001d64:	4651      	mov	r1, sl
 8001d66:	ebb2 0801 	subs.w	r8, r2, r1
 8001d6a:	4659      	mov	r1, fp
 8001d6c:	eb63 0901 	sbc.w	r9, r3, r1
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d84:	4690      	mov	r8, r2
 8001d86:	4699      	mov	r9, r3
 8001d88:	4623      	mov	r3, r4
 8001d8a:	eb18 0303 	adds.w	r3, r8, r3
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	462b      	mov	r3, r5
 8001d92:	eb49 0303 	adc.w	r3, r9, r3
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001da4:	4629      	mov	r1, r5
 8001da6:	024b      	lsls	r3, r1, #9
 8001da8:	4621      	mov	r1, r4
 8001daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dae:	4621      	mov	r1, r4
 8001db0:	024a      	lsls	r2, r1, #9
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dba:	2200      	movs	r2, #0
 8001dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001dbe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001dc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001dc4:	f7fe fa8c 	bl	80002e0 <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dd2:	e065      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x420>
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	2200      	movs	r2, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	4611      	mov	r1, r2
 8001dec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001df2:	2300      	movs	r3, #0
 8001df4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001df6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	464b      	mov	r3, r9
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	0159      	lsls	r1, r3, #5
 8001e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e0c:	0150      	lsls	r0, r2, #5
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4641      	mov	r1, r8
 8001e14:	1a51      	subs	r1, r2, r1
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	4649      	mov	r1, r9
 8001e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e2c:	4659      	mov	r1, fp
 8001e2e:	018b      	lsls	r3, r1, #6
 8001e30:	4651      	mov	r1, sl
 8001e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e36:	4651      	mov	r1, sl
 8001e38:	018a      	lsls	r2, r1, #6
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	1a54      	subs	r4, r2, r1
 8001e3e:	4659      	mov	r1, fp
 8001e40:	eb63 0501 	sbc.w	r5, r3, r1
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	00eb      	lsls	r3, r5, #3
 8001e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e52:	00e2      	lsls	r2, r4, #3
 8001e54:	4614      	mov	r4, r2
 8001e56:	461d      	mov	r5, r3
 8001e58:	4643      	mov	r3, r8
 8001e5a:	18e3      	adds	r3, r4, r3
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	464b      	mov	r3, r9
 8001e60:	eb45 0303 	adc.w	r3, r5, r3
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e72:	4629      	mov	r1, r5
 8001e74:	028b      	lsls	r3, r1, #10
 8001e76:	4621      	mov	r1, r4
 8001e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	028a      	lsls	r2, r1, #10
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e88:	2200      	movs	r2, #0
 8001e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e92:	f7fe fa25 	bl	80002e0 <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0f1b      	lsrs	r3, r3, #28
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ebe:	e003      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	37b8      	adds	r7, #184	@ 0xb8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	00f42400 	.word	0x00f42400

08001ee0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e28d      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8083 	beq.w	8002006 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f00:	4b94      	ldr	r3, [pc, #592]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d019      	beq.n	8001f40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f0c:	4b91      	ldr	r3, [pc, #580]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f18:	4b8e      	ldr	r3, [pc, #568]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f24:	d00c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4b8b      	ldr	r3, [pc, #556]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b88      	ldr	r3, [pc, #544]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b84      	ldr	r3, [pc, #528]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05b      	beq.n	8002004 <HAL_RCC_OscConfig+0x124>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d157      	bne.n	8002004 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e25a      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0x90>
 8001f62:	4b7c      	ldr	r3, [pc, #496]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7b      	ldr	r2, [pc, #492]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xcc>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0xb4>
 8001f7a:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b73      	ldr	r3, [pc, #460]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a72      	ldr	r2, [pc, #456]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xcc>
 8001f94:	4b6f      	ldr	r3, [pc, #444]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6e      	ldr	r2, [pc, #440]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6b      	ldr	r2, [pc, #428]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f870 	bl	8001098 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff f86c 	bl	8001098 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	@ 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e21f      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b61      	ldr	r3, [pc, #388]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xdc>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f85c 	bl	8001098 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff f858 	bl	8001098 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	@ 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e20b      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b57      	ldr	r3, [pc, #348]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x104>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d06f      	beq.n	80020f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002012:	4b50      	ldr	r3, [pc, #320]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d017      	beq.n	800204e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800201e:	4b4d      	ldr	r3, [pc, #308]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
        || \
 8002026:	2b08      	cmp	r3, #8
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800202a:	4b4a      	ldr	r3, [pc, #296]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b47      	ldr	r3, [pc, #284]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d11c      	bne.n	800207c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002042:	4b44      	ldr	r3, [pc, #272]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	4b41      	ldr	r3, [pc, #260]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x186>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1d3      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4937      	ldr	r1, [pc, #220]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	e03a      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b34      	ldr	r3, [pc, #208]	@ (8002158 <HAL_RCC_OscConfig+0x278>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff f805 	bl	8001098 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002092:	f7ff f801 	bl	8001098 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e1b4      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4925      	ldr	r1, [pc, #148]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
 80020c4:	e015      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c6:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <HAL_RCC_OscConfig+0x278>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffe4 	bl	8001098 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d4:	f7fe ffe0 	bl	8001098 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e193      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d036      	beq.n	800216c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_RCC_OscConfig+0x27c>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7fe ffc4 	bl	8001098 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002114:	f7fe ffc0 	bl	8001098 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e173      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x234>
 8002132:	e01b      	b.n	800216c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002134:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_RCC_OscConfig+0x27c>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe ffad 	bl	8001098 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	e00e      	b.n	8002160 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002142:	f7fe ffa9 	bl	8001098 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d907      	bls.n	8002160 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e15c      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
 8002154:	40023800 	.word	0x40023800
 8002158:	42470000 	.word	0x42470000
 800215c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	4b8a      	ldr	r3, [pc, #552]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ea      	bne.n	8002142 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8097 	beq.w	80022a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b83      	ldr	r3, [pc, #524]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b7f      	ldr	r3, [pc, #508]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	4a7e      	ldr	r2, [pc, #504]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6413      	str	r3, [r2, #64]	@ 0x40
 800219a:	4b7c      	ldr	r3, [pc, #496]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b79      	ldr	r3, [pc, #484]	@ (8002390 <HAL_RCC_OscConfig+0x4b0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b6:	4b76      	ldr	r3, [pc, #472]	@ (8002390 <HAL_RCC_OscConfig+0x4b0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a75      	ldr	r2, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x4b0>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c2:	f7fe ff69 	bl	8001098 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ca:	f7fe ff65 	bl	8001098 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e118      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x4b0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x31e>
 80021f0:	4b66      	ldr	r3, [pc, #408]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	4a65      	ldr	r2, [pc, #404]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fc:	e01c      	b.n	8002238 <HAL_RCC_OscConfig+0x358>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b05      	cmp	r3, #5
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x340>
 8002206:	4b61      	ldr	r3, [pc, #388]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	4a60      	ldr	r2, [pc, #384]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70
 8002212:	4b5e      	ldr	r3, [pc, #376]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002216:	4a5d      	ldr	r2, [pc, #372]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	@ 0x70
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0x358>
 8002220:	4b5a      	ldr	r3, [pc, #360]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	4a59      	ldr	r2, [pc, #356]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	6713      	str	r3, [r2, #112]	@ 0x70
 800222c:	4b57      	ldr	r3, [pc, #348]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	4a56      	ldr	r2, [pc, #344]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002232:	f023 0304 	bic.w	r3, r3, #4
 8002236:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d015      	beq.n	800226c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe ff2a 	bl	8001098 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	e00a      	b.n	800225e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	f7fe ff26 	bl	8001098 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0d7      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ee      	beq.n	8002248 <HAL_RCC_OscConfig+0x368>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7fe ff14 	bl	8001098 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7fe ff10 	bl	8001098 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0c1      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228a:	4b40      	ldr	r3, [pc, #256]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ee      	bne.n	8002274 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229c:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	4a3a      	ldr	r2, [pc, #232]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80ad 	beq.w	800240c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022b2:	4b36      	ldr	r3, [pc, #216]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d060      	beq.n	8002380 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d145      	bne.n	8002352 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <HAL_RCC_OscConfig+0x4b4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fee4 	bl	8001098 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fee0 	bl	8001098 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e093      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	3b01      	subs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	071b      	lsls	r3, r3, #28
 800231e:	491b      	ldr	r1, [pc, #108]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x4b4>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe feb5 	bl	8001098 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe feb1 	bl	8001098 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e064      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x452>
 8002350:	e05c      	b.n	800240c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_RCC_OscConfig+0x4b4>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7fe fe9e 	bl	8001098 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe fe9a 	bl	8001098 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e04d      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x480>
 800237e:	e045      	b.n	800240c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e040      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
 800238c:	40023800 	.word	0x40023800
 8002390:	40007000 	.word	0x40007000
 8002394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_RCC_OscConfig+0x538>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d030      	beq.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d129      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d122      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d119      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	3b01      	subs	r3, #1
 80023e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10f      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e041      	b.n	80024b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f839 	bl	80024ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 f9c0 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d001      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e04e      	b.n	8002586 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a23      	ldr	r2, [pc, #140]	@ (8002594 <HAL_TIM_Base_Start_IT+0xc4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d022      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x80>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002512:	d01d      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x80>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1f      	ldr	r2, [pc, #124]	@ (8002598 <HAL_TIM_Base_Start_IT+0xc8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d018      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x80>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1e      	ldr	r2, [pc, #120]	@ (800259c <HAL_TIM_Base_Start_IT+0xcc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x80>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1c      	ldr	r2, [pc, #112]	@ (80025a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00e      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x80>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1b      	ldr	r2, [pc, #108]	@ (80025a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d009      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x80>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x80>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <HAL_TIM_Base_Start_IT+0xdc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d111      	bne.n	8002574 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b06      	cmp	r3, #6
 8002560:	d010      	beq.n	8002584 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002572:	e007      	b.n	8002584 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40010000 	.word	0x40010000
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800
 80025a0:	40000c00 	.word	0x40000c00
 80025a4:	40010400 	.word	0x40010400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40001800 	.word	0x40001800

080025b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0202 	mvn.w	r2, #2
 80025e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8d2 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8c4 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8d5 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0204 	mvn.w	r2, #4
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f8ac 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f89e 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8af 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d020      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0208 	mvn.w	r2, #8
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f886 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f878 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f889 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d020      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0210 	mvn.w	r2, #16
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2208      	movs	r2, #8
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f860 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f852 	bl	8002790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f863 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0201 	mvn.w	r2, #1
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fa66 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f900 	bl	8002940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f834 	bl	80027cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0220 	mvn.w	r2, #32
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8d2 	bl	800292c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a43      	ldr	r2, [pc, #268]	@ (8002900 <TIM_Base_SetConfig+0x120>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fe:	d00f      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a40      	ldr	r2, [pc, #256]	@ (8002904 <TIM_Base_SetConfig+0x124>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00b      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3f      	ldr	r2, [pc, #252]	@ (8002908 <TIM_Base_SetConfig+0x128>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3e      	ldr	r2, [pc, #248]	@ (800290c <TIM_Base_SetConfig+0x12c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3d      	ldr	r2, [pc, #244]	@ (8002910 <TIM_Base_SetConfig+0x130>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d108      	bne.n	8002832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a32      	ldr	r2, [pc, #200]	@ (8002900 <TIM_Base_SetConfig+0x120>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02b      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002840:	d027      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2f      	ldr	r2, [pc, #188]	@ (8002904 <TIM_Base_SetConfig+0x124>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d023      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2e      	ldr	r2, [pc, #184]	@ (8002908 <TIM_Base_SetConfig+0x128>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01f      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2d      	ldr	r2, [pc, #180]	@ (800290c <TIM_Base_SetConfig+0x12c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01b      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2c      	ldr	r2, [pc, #176]	@ (8002910 <TIM_Base_SetConfig+0x130>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d017      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a2b      	ldr	r2, [pc, #172]	@ (8002914 <TIM_Base_SetConfig+0x134>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a2a      	ldr	r2, [pc, #168]	@ (8002918 <TIM_Base_SetConfig+0x138>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00f      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a29      	ldr	r2, [pc, #164]	@ (800291c <TIM_Base_SetConfig+0x13c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00b      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a28      	ldr	r2, [pc, #160]	@ (8002920 <TIM_Base_SetConfig+0x140>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a27      	ldr	r2, [pc, #156]	@ (8002924 <TIM_Base_SetConfig+0x144>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a26      	ldr	r2, [pc, #152]	@ (8002928 <TIM_Base_SetConfig+0x148>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d108      	bne.n	80028a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002900 <TIM_Base_SetConfig+0x120>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d003      	beq.n	80028d2 <TIM_Base_SetConfig+0xf2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a10      	ldr	r2, [pc, #64]	@ (8002910 <TIM_Base_SetConfig+0x130>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d103      	bne.n	80028da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f043 0204 	orr.w	r2, r3, #4
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40010000 	.word	0x40010000
 8002904:	40000400 	.word	0x40000400
 8002908:	40000800 	.word	0x40000800
 800290c:	40000c00 	.word	0x40000c00
 8002910:	40010400 	.word	0x40010400
 8002914:	40014000 	.word	0x40014000
 8002918:	40014400 	.word	0x40014400
 800291c:	40014800 	.word	0x40014800
 8002920:	40001800 	.word	0x40001800
 8002924:	40001c00 	.word	0x40001c00
 8002928:	40002000 	.word	0x40002000

0800292c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e042      	b.n	80029ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe f97a 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2224      	movs	r2, #36	@ 0x24
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fdd3 	bl	8003544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d175      	bne.n	8002b00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_UART_Transmit+0x2c>
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e06e      	b.n	8002b02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2221      	movs	r2, #33	@ 0x21
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a32:	f7fe fb31 	bl	8001098 <HAL_GetTick>
 8002a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	88fa      	ldrh	r2, [r7, #6]
 8002a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a4c:	d108      	bne.n	8002a60 <HAL_UART_Transmit+0x6c>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d104      	bne.n	8002a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	e003      	b.n	8002a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a68:	e02e      	b.n	8002ac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	@ 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fb37 	bl	80030e8 <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e03a      	b.n	8002b02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e007      	b.n	8002aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1cb      	bne.n	8002a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2140      	movs	r1, #64	@ 0x40
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fb03 	bl	80030e8 <UART_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e006      	b.n	8002b02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d112      	bne.n	8002b4a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_UART_Receive_IT+0x26>
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e00b      	b.n	8002b4c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fb2a 	bl	800319a <UART_Start_Receive_IT>
 8002b46:	4603      	mov	r3, r0
 8002b48:	e000      	b.n	8002b4c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b0ba      	sub	sp, #232	@ 0xe8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_UART_IRQHandler+0x66>
 8002ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fc07 	bl	80033c6 <UART_Receive_IT>
      return;
 8002bb8:	e273      	b.n	80030a2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80de 	beq.w	8002d80 <HAL_UART_IRQHandler+0x22c>
 8002bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80d1 	beq.w	8002d80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_UART_IRQHandler+0xae>
 8002bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_UART_IRQHandler+0xd2>
 8002c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f043 0202 	orr.w	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_UART_IRQHandler+0xf6>
 8002c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f043 0204 	orr.w	r2, r3, #4
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d011      	beq.n	8002c7a <HAL_UART_IRQHandler+0x126>
 8002c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f043 0208 	orr.w	r2, r3, #8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 820a 	beq.w	8003098 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x14e>
 8002c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fb92 	bl	80033c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cac:	2b40      	cmp	r3, #64	@ 0x40
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <HAL_UART_IRQHandler+0x17a>
 8002cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d04f      	beq.n	8002d6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa9d 	bl	800320e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	d141      	bne.n	8002d66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3314      	adds	r3, #20
 8002ce8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3314      	adds	r3, #20
 8002d0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1d9      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d013      	beq.n	8002d5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	4a8a      	ldr	r2, [pc, #552]	@ (8002f64 <HAL_UART_IRQHandler+0x410>)
 8002d3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fb06 	bl	8001354 <HAL_DMA_Abort_IT>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	e00e      	b.n	8002d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9ac 	bl	80030bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	e00a      	b.n	8002d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9a8 	bl	80030bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	e006      	b.n	8002d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f9a4 	bl	80030bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d7a:	e18d      	b.n	8003098 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	bf00      	nop
    return;
 8002d7e:	e18b      	b.n	8003098 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	f040 8167 	bne.w	8003058 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8160 	beq.w	8003058 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8159 	beq.w	8003058 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	2b40      	cmp	r3, #64	@ 0x40
 8002dc8:	f040 80ce 	bne.w	8002f68 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a9 	beq.w	8002f34 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f080 80a2 	bcs.w	8002f34 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002df6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e02:	f000 8088 	beq.w	8002f16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1d9      	bne.n	8002e06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e82:	e841 2300 	strex	r3, r2, [r1]
 8002e86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e1      	bne.n	8002e52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3314      	adds	r3, #20
 8002e94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3314      	adds	r3, #20
 8002eae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002eb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002eb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e3      	bne.n	8002e8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee6:	f023 0310 	bic.w	r3, r3, #16
 8002eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ef8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002efa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002efe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e3      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe f9af 	bl	8001274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f8cf 	bl	80030d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002f32:	e0b3      	b.n	800309c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f040 80ad 	bne.w	800309c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f4c:	f040 80a6 	bne.w	800309c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f8b7 	bl	80030d0 <HAL_UARTEx_RxEventCallback>
      return;
 8002f62:	e09b      	b.n	800309c <HAL_UART_IRQHandler+0x548>
 8002f64:	080032d5 	.word	0x080032d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 808e 	beq.w	80030a0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8089 	beq.w	80030a0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002fb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fba:	e841 2300 	strex	r3, r2, [r1]
 8002fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e3      	bne.n	8002f8e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3314      	adds	r3, #20
 8002fe6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002fea:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e3      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	60fb      	str	r3, [r7, #12]
   return(result);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0310 	bic.w	r3, r3, #16
 8003022:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003030:	61fa      	str	r2, [r7, #28]
 8003032:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	69b9      	ldr	r1, [r7, #24]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	617b      	str	r3, [r7, #20]
   return(result);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e3      	bne.n	800300c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800304a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f83d 	bl	80030d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003056:	e023      	b.n	80030a0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800305c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_UART_IRQHandler+0x524>
 8003064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f940 	bl	80032f6 <UART_Transmit_IT>
    return;
 8003076:	e014      	b.n	80030a2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800307c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <HAL_UART_IRQHandler+0x54e>
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f980 	bl	8003396 <UART_EndTransmit_IT>
    return;
 8003096:	e004      	b.n	80030a2 <HAL_UART_IRQHandler+0x54e>
    return;
 8003098:	bf00      	nop
 800309a:	e002      	b.n	80030a2 <HAL_UART_IRQHandler+0x54e>
      return;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_UART_IRQHandler+0x54e>
      return;
 80030a0:	bf00      	nop
  }
}
 80030a2:	37e8      	adds	r7, #232	@ 0xe8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f8:	e03b      	b.n	8003172 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d037      	beq.n	8003172 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7fd ffc9 	bl	8001098 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <UART_WaitOnFlagUntilTimeout+0x30>
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e03a      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d023      	beq.n	8003172 <UART_WaitOnFlagUntilTimeout+0x8a>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b80      	cmp	r3, #128	@ 0x80
 800312e:	d020      	beq.n	8003172 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b40      	cmp	r3, #64	@ 0x40
 8003134:	d01d      	beq.n	8003172 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b08      	cmp	r3, #8
 8003142:	d116      	bne.n	8003172 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f857 	bl	800320e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2208      	movs	r2, #8
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e00f      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4013      	ands	r3, r2
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	429a      	cmp	r2, r3
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	429a      	cmp	r2, r3
 800318e:	d0b4      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	4613      	mov	r3, r2
 80031a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	88fa      	ldrh	r2, [r7, #6]
 80031b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2222      	movs	r2, #34	@ 0x22
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0220 	orr.w	r2, r2, #32
 80031fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800320e:	b480      	push	{r7}
 8003210:	b095      	sub	sp, #84	@ 0x54
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800322c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003236:	643a      	str	r2, [r7, #64]	@ 0x40
 8003238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800323c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e5      	bne.n	8003216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	61fb      	str	r3, [r7, #28]
   return(result);
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3314      	adds	r3, #20
 8003268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800326a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800326c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	2b01      	cmp	r3, #1
 8003284:	d119      	bne.n	80032ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	60bb      	str	r3, [r7, #8]
   return(result);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f023 0310 	bic.w	r3, r3, #16
 800329c:	647b      	str	r3, [r7, #68]	@ 0x44
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032a6:	61ba      	str	r2, [r7, #24]
 80032a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6979      	ldr	r1, [r7, #20]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	613b      	str	r3, [r7, #16]
   return(result);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e5      	bne.n	8003286 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032c8:	bf00      	nop
 80032ca:	3754      	adds	r7, #84	@ 0x54
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff fee7 	bl	80030bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b085      	sub	sp, #20
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b21      	cmp	r3, #33	@ 0x21
 8003308:	d13e      	bne.n	8003388 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003312:	d114      	bne.n	800333e <UART_Transmit_IT+0x48>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d110      	bne.n	800333e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003330:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	1c9a      	adds	r2, r3, #2
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	621a      	str	r2, [r3, #32]
 800333c:	e008      	b.n	8003350 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6211      	str	r1, [r2, #32]
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29b      	uxth	r3, r3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4619      	mov	r1, r3
 800335e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10f      	bne.n	8003384 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003372:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003382:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fe76 	bl	80030a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08c      	sub	sp, #48	@ 0x30
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b22      	cmp	r3, #34	@ 0x22
 80033e0:	f040 80aa 	bne.w	8003538 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ec:	d115      	bne.n	800341a <UART_Receive_IT+0x54>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d111      	bne.n	800341a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b29b      	uxth	r3, r3
 8003404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003408:	b29a      	uxth	r2, r3
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	@ 0x28
 8003418:	e024      	b.n	8003464 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003428:	d007      	beq.n	800343a <UART_Receive_IT+0x74>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <UART_Receive_IT+0x82>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e008      	b.n	800345a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003454:	b2da      	uxtb	r2, r3
 8003456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003458:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29b      	uxth	r3, r3
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4619      	mov	r1, r3
 8003472:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003474:	2b00      	cmp	r3, #0
 8003476:	d15d      	bne.n	8003534 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0220 	bic.w	r2, r2, #32
 8003486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d135      	bne.n	800352a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	613b      	str	r3, [r7, #16]
   return(result);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f023 0310 	bic.w	r3, r3, #16
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e4:	623a      	str	r2, [r7, #32]
 80034e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69f9      	ldr	r1, [r7, #28]
 80034ea:	6a3a      	ldr	r2, [r7, #32]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b10      	cmp	r3, #16
 8003504:	d10a      	bne.n	800351c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fdd4 	bl	80030d0 <HAL_UARTEx_RxEventCallback>
 8003528:	e002      	b.n	8003530 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd f88e 	bl	800064c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e002      	b.n	800353a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3730      	adds	r7, #48	@ 0x30
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b0c0      	sub	sp, #256	@ 0x100
 800354a:	af00      	add	r7, sp, #0
 800354c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003560:	68d9      	ldr	r1, [r3, #12]
 8003562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	ea40 0301 	orr.w	r3, r0, r1
 800356c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	431a      	orrs	r2, r3
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	431a      	orrs	r2, r3
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800359c:	f021 010c 	bic.w	r1, r1, #12
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035aa:	430b      	orrs	r3, r1
 80035ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035be:	6999      	ldr	r1, [r3, #24]
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	ea40 0301 	orr.w	r3, r0, r1
 80035ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003810 <UART_SetConfig+0x2cc>)
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d005      	beq.n	80035e4 <UART_SetConfig+0xa0>
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b8d      	ldr	r3, [pc, #564]	@ (8003814 <UART_SetConfig+0x2d0>)
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d104      	bne.n	80035ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035e4:	f7fe fa06 	bl	80019f4 <HAL_RCC_GetPCLK2Freq>
 80035e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035ec:	e003      	b.n	80035f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ee:	f7fe f9ed 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 80035f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003600:	f040 810c 	bne.w	800381c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003608:	2200      	movs	r2, #0
 800360a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800360e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003612:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003616:	4622      	mov	r2, r4
 8003618:	462b      	mov	r3, r5
 800361a:	1891      	adds	r1, r2, r2
 800361c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800361e:	415b      	adcs	r3, r3
 8003620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003622:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003626:	4621      	mov	r1, r4
 8003628:	eb12 0801 	adds.w	r8, r2, r1
 800362c:	4629      	mov	r1, r5
 800362e:	eb43 0901 	adc.w	r9, r3, r1
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003646:	4690      	mov	r8, r2
 8003648:	4699      	mov	r9, r3
 800364a:	4623      	mov	r3, r4
 800364c:	eb18 0303 	adds.w	r3, r8, r3
 8003650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003654:	462b      	mov	r3, r5
 8003656:	eb49 0303 	adc.w	r3, r9, r3
 800365a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800366a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800366e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003672:	460b      	mov	r3, r1
 8003674:	18db      	adds	r3, r3, r3
 8003676:	653b      	str	r3, [r7, #80]	@ 0x50
 8003678:	4613      	mov	r3, r2
 800367a:	eb42 0303 	adc.w	r3, r2, r3
 800367e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003680:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003684:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003688:	f7fc fe2a 	bl	80002e0 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4b61      	ldr	r3, [pc, #388]	@ (8003818 <UART_SetConfig+0x2d4>)
 8003692:	fba3 2302 	umull	r2, r3, r3, r2
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	011c      	lsls	r4, r3, #4
 800369a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80036a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	1891      	adds	r1, r2, r2
 80036b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80036b4:	415b      	adcs	r3, r3
 80036b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036bc:	4641      	mov	r1, r8
 80036be:	eb12 0a01 	adds.w	sl, r2, r1
 80036c2:	4649      	mov	r1, r9
 80036c4:	eb43 0b01 	adc.w	fp, r3, r1
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036dc:	4692      	mov	sl, r2
 80036de:	469b      	mov	fp, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	eb1a 0303 	adds.w	r3, sl, r3
 80036e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036ea:	464b      	mov	r3, r9
 80036ec:	eb4b 0303 	adc.w	r3, fp, r3
 80036f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003700:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003704:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003708:	460b      	mov	r3, r1
 800370a:	18db      	adds	r3, r3, r3
 800370c:	643b      	str	r3, [r7, #64]	@ 0x40
 800370e:	4613      	mov	r3, r2
 8003710:	eb42 0303 	adc.w	r3, r2, r3
 8003714:	647b      	str	r3, [r7, #68]	@ 0x44
 8003716:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800371a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800371e:	f7fc fddf 	bl	80002e0 <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4611      	mov	r1, r2
 8003728:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <UART_SetConfig+0x2d4>)
 800372a:	fba3 2301 	umull	r2, r3, r3, r1
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2264      	movs	r2, #100	@ 0x64
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	1acb      	subs	r3, r1, r3
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800373e:	4b36      	ldr	r3, [pc, #216]	@ (8003818 <UART_SetConfig+0x2d4>)
 8003740:	fba3 2302 	umull	r2, r3, r3, r2
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800374c:	441c      	add	r4, r3
 800374e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003758:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800375c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003760:	4642      	mov	r2, r8
 8003762:	464b      	mov	r3, r9
 8003764:	1891      	adds	r1, r2, r2
 8003766:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003768:	415b      	adcs	r3, r3
 800376a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800376c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003770:	4641      	mov	r1, r8
 8003772:	1851      	adds	r1, r2, r1
 8003774:	6339      	str	r1, [r7, #48]	@ 0x30
 8003776:	4649      	mov	r1, r9
 8003778:	414b      	adcs	r3, r1
 800377a:	637b      	str	r3, [r7, #52]	@ 0x34
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003788:	4659      	mov	r1, fp
 800378a:	00cb      	lsls	r3, r1, #3
 800378c:	4651      	mov	r1, sl
 800378e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003792:	4651      	mov	r1, sl
 8003794:	00ca      	lsls	r2, r1, #3
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	4603      	mov	r3, r0
 800379c:	4642      	mov	r2, r8
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037a4:	464b      	mov	r3, r9
 80037a6:	460a      	mov	r2, r1
 80037a8:	eb42 0303 	adc.w	r3, r2, r3
 80037ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037c4:	460b      	mov	r3, r1
 80037c6:	18db      	adds	r3, r3, r3
 80037c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ca:	4613      	mov	r3, r2
 80037cc:	eb42 0303 	adc.w	r3, r2, r3
 80037d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037da:	f7fc fd81 	bl	80002e0 <__aeabi_uldivmod>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <UART_SetConfig+0x2d4>)
 80037e4:	fba3 1302 	umull	r1, r3, r3, r2
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	2164      	movs	r1, #100	@ 0x64
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	3332      	adds	r3, #50	@ 0x32
 80037f6:	4a08      	ldr	r2, [pc, #32]	@ (8003818 <UART_SetConfig+0x2d4>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	f003 0207 	and.w	r2, r3, #7
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4422      	add	r2, r4
 800380a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800380c:	e106      	b.n	8003a1c <UART_SetConfig+0x4d8>
 800380e:	bf00      	nop
 8003810:	40011000 	.word	0x40011000
 8003814:	40011400 	.word	0x40011400
 8003818:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800381c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003826:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800382a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800382e:	4642      	mov	r2, r8
 8003830:	464b      	mov	r3, r9
 8003832:	1891      	adds	r1, r2, r2
 8003834:	6239      	str	r1, [r7, #32]
 8003836:	415b      	adcs	r3, r3
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
 800383a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800383e:	4641      	mov	r1, r8
 8003840:	1854      	adds	r4, r2, r1
 8003842:	4649      	mov	r1, r9
 8003844:	eb43 0501 	adc.w	r5, r3, r1
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	00eb      	lsls	r3, r5, #3
 8003852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003856:	00e2      	lsls	r2, r4, #3
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	4643      	mov	r3, r8
 800385e:	18e3      	adds	r3, r4, r3
 8003860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003864:	464b      	mov	r3, r9
 8003866:	eb45 0303 	adc.w	r3, r5, r3
 800386a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800387a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800388a:	4629      	mov	r1, r5
 800388c:	008b      	lsls	r3, r1, #2
 800388e:	4621      	mov	r1, r4
 8003890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003894:	4621      	mov	r1, r4
 8003896:	008a      	lsls	r2, r1, #2
 8003898:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800389c:	f7fc fd20 	bl	80002e0 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4b60      	ldr	r3, [pc, #384]	@ (8003a28 <UART_SetConfig+0x4e4>)
 80038a6:	fba3 2302 	umull	r2, r3, r3, r2
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	011c      	lsls	r4, r3, #4
 80038ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	1891      	adds	r1, r2, r2
 80038c6:	61b9      	str	r1, [r7, #24]
 80038c8:	415b      	adcs	r3, r3
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d0:	4641      	mov	r1, r8
 80038d2:	1851      	adds	r1, r2, r1
 80038d4:	6139      	str	r1, [r7, #16]
 80038d6:	4649      	mov	r1, r9
 80038d8:	414b      	adcs	r3, r1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038e8:	4659      	mov	r1, fp
 80038ea:	00cb      	lsls	r3, r1, #3
 80038ec:	4651      	mov	r1, sl
 80038ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f2:	4651      	mov	r1, sl
 80038f4:	00ca      	lsls	r2, r1, #3
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	4642      	mov	r2, r8
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003904:	464b      	mov	r3, r9
 8003906:	460a      	mov	r2, r1
 8003908:	eb42 0303 	adc.w	r3, r2, r3
 800390c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800391a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003928:	4649      	mov	r1, r9
 800392a:	008b      	lsls	r3, r1, #2
 800392c:	4641      	mov	r1, r8
 800392e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003932:	4641      	mov	r1, r8
 8003934:	008a      	lsls	r2, r1, #2
 8003936:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800393a:	f7fc fcd1 	bl	80002e0 <__aeabi_uldivmod>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4611      	mov	r1, r2
 8003944:	4b38      	ldr	r3, [pc, #224]	@ (8003a28 <UART_SetConfig+0x4e4>)
 8003946:	fba3 2301 	umull	r2, r3, r3, r1
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2264      	movs	r2, #100	@ 0x64
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	1acb      	subs	r3, r1, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	@ 0x32
 8003958:	4a33      	ldr	r2, [pc, #204]	@ (8003a28 <UART_SetConfig+0x4e4>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003964:	441c      	add	r4, r3
 8003966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800396a:	2200      	movs	r2, #0
 800396c:	673b      	str	r3, [r7, #112]	@ 0x70
 800396e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003970:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003974:	4642      	mov	r2, r8
 8003976:	464b      	mov	r3, r9
 8003978:	1891      	adds	r1, r2, r2
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	415b      	adcs	r3, r3
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003984:	4641      	mov	r1, r8
 8003986:	1851      	adds	r1, r2, r1
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	4649      	mov	r1, r9
 800398c:	414b      	adcs	r3, r1
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800399c:	4659      	mov	r1, fp
 800399e:	00cb      	lsls	r3, r1, #3
 80039a0:	4651      	mov	r1, sl
 80039a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a6:	4651      	mov	r1, sl
 80039a8:	00ca      	lsls	r2, r1, #3
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	4642      	mov	r2, r8
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039b6:	464b      	mov	r3, r9
 80039b8:	460a      	mov	r2, r1
 80039ba:	eb42 0303 	adc.w	r3, r2, r3
 80039be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80039ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039d8:	4649      	mov	r1, r9
 80039da:	008b      	lsls	r3, r1, #2
 80039dc:	4641      	mov	r1, r8
 80039de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e2:	4641      	mov	r1, r8
 80039e4:	008a      	lsls	r2, r1, #2
 80039e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039ea:	f7fc fc79 	bl	80002e0 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <UART_SetConfig+0x4e4>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	@ 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	3332      	adds	r3, #50	@ 0x32
 8003a06:	4a08      	ldr	r2, [pc, #32]	@ (8003a28 <UART_SetConfig+0x4e4>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 020f 	and.w	r2, r3, #15
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4422      	add	r2, r4
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a22:	46bd      	mov	sp, r7
 8003a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a28:	51eb851f 	.word	0x51eb851f

08003a2c <__NVIC_SetPriority>:
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	db0a      	blt.n	8003a56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	490c      	ldr	r1, [pc, #48]	@ (8003a78 <__NVIC_SetPriority+0x4c>)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a54:	e00a      	b.n	8003a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4908      	ldr	r1, [pc, #32]	@ (8003a7c <__NVIC_SetPriority+0x50>)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3b04      	subs	r3, #4
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	440b      	add	r3, r1
 8003a6a:	761a      	strb	r2, [r3, #24]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000e100 	.word	0xe000e100
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <SysTick_Handler+0x1c>)
 8003a86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a88:	f001 ffb2 	bl	80059f0 <xTaskGetSchedulerState>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a92:	f002 fda9 	bl	80065e8 <xPortSysTickHandler>
  }
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	e000e010 	.word	0xe000e010

08003aa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f06f 0004 	mvn.w	r0, #4
 8003aaa:	f7ff ffbf 	bl	8003a2c <__NVIC_SetPriority>
#endif
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aba:	f3ef 8305 	mrs	r3, IPSR
 8003abe:	603b      	str	r3, [r7, #0]
  return(result);
 8003ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ac6:	f06f 0305 	mvn.w	r3, #5
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	e00c      	b.n	8003ae8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ace:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <osKernelInitialize+0x44>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ad6:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <osKernelInitialize+0x44>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	e002      	b.n	8003ae8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ae8:	687b      	ldr	r3, [r7, #4]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	200001ac 	.word	0x200001ac

08003afc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b02:	f3ef 8305 	mrs	r3, IPSR
 8003b06:	603b      	str	r3, [r7, #0]
  return(result);
 8003b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b0e:	f06f 0305 	mvn.w	r3, #5
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e010      	b.n	8003b38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <osKernelStart+0x48>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d109      	bne.n	8003b32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b1e:	f7ff ffbf 	bl	8003aa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <osKernelStart+0x48>)
 8003b24:	2202      	movs	r2, #2
 8003b26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b28:	f001 fafc 	bl	8005124 <vTaskStartScheduler>
      stat = osOK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	e002      	b.n	8003b38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b38:	687b      	ldr	r3, [r7, #4]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200001ac 	.word	0x200001ac

08003b48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08e      	sub	sp, #56	@ 0x38
 8003b4c:	af04      	add	r7, sp, #16
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b58:	f3ef 8305 	mrs	r3, IPSR
 8003b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d17e      	bne.n	8003c62 <osThreadNew+0x11a>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d07b      	beq.n	8003c62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b6a:	2380      	movs	r3, #128	@ 0x80
 8003b6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b6e:	2318      	movs	r3, #24
 8003b70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d045      	beq.n	8003c0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <osThreadNew+0x48>
        name = attr->name;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <osThreadNew+0x6e>
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	2b38      	cmp	r3, #56	@ 0x38
 8003ba8:	d805      	bhi.n	8003bb6 <osThreadNew+0x6e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <osThreadNew+0x72>
        return (NULL);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e054      	b.n	8003c64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00e      	beq.n	8003bf0 <osThreadNew+0xa8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2ba7      	cmp	r3, #167	@ 0xa7
 8003bd8:	d90a      	bls.n	8003bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <osThreadNew+0xa8>
        mem = 1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e010      	b.n	8003c12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10c      	bne.n	8003c12 <osThreadNew+0xca>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d108      	bne.n	8003c12 <osThreadNew+0xca>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <osThreadNew+0xca>
          mem = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e001      	b.n	8003c12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d110      	bne.n	8003c3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c20:	9202      	str	r2, [sp, #8]
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6a3a      	ldr	r2, [r7, #32]
 8003c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f001 f810 	bl	8004c54 <xTaskCreateStatic>
 8003c34:	4603      	mov	r3, r0
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e013      	b.n	8003c62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d110      	bne.n	8003c62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f001 f85e 	bl	8004d14 <xTaskCreate>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <osThreadNew+0x11a>
            hTask = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c62:	693b      	ldr	r3, [r7, #16]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3728      	adds	r7, #40	@ 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f001 f9ad 	bl	8004fd0 <vTaskDelete>
#endif
  for (;;);
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <osThreadExit+0xa>

08003c7a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c82:	f3ef 8305 	mrs	r3, IPSR
 8003c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <osDelay+0x1c>
    stat = osErrorISR;
 8003c8e:	f06f 0305 	mvn.w	r3, #5
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e007      	b.n	8003ca6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f001 fa09 	bl	80050b8 <vTaskDelay>
    }
  }

  return (stat);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc0:	f3ef 8305 	mrs	r3, IPSR
 8003cc4:	613b      	str	r3, [r7, #16]
  return(result);
 8003cc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d15f      	bne.n	8003d8c <osMessageQueueNew+0xdc>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d05c      	beq.n	8003d8c <osMessageQueueNew+0xdc>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d059      	beq.n	8003d8c <osMessageQueueNew+0xdc>
    mem = -1;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d029      	beq.n	8003d38 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <osMessageQueueNew+0x62>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b4f      	cmp	r3, #79	@ 0x4f
 8003cf2:	d90e      	bls.n	8003d12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <osMessageQueueNew+0x62>
        mem = 1;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	e014      	b.n	8003d3c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d110      	bne.n	8003d3c <osMessageQueueNew+0x8c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d108      	bne.n	8003d3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <osMessageQueueNew+0x8c>
          mem = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	e001      	b.n	8003d3c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10b      	bne.n	8003d5a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	9100      	str	r1, [sp, #0]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fa31 	bl	80041b8 <xQueueGenericCreateStatic>
 8003d56:	61f8      	str	r0, [r7, #28]
 8003d58:	e008      	b.n	8003d6c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003d60:	2200      	movs	r2, #0
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 faa4 	bl	80042b2 <xQueueGenericCreate>
 8003d6a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e001      	b.n	8003d84 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003d84:	6979      	ldr	r1, [r7, #20]
 8003d86:	69f8      	ldr	r0, [r7, #28]
 8003d88:	f000 ff06 	bl	8004b98 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003d8c:	69fb      	ldr	r3, [r7, #28]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003db0:	f3ef 8305 	mrs	r3, IPSR
 8003db4:	617b      	str	r3, [r7, #20]
  return(result);
 8003db6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d028      	beq.n	8003e0e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <osMessageQueuePut+0x36>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <osMessageQueuePut+0x36>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003dce:	f06f 0303 	mvn.w	r3, #3
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e038      	b.n	8003e48 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003dda:	f107 0210 	add.w	r2, r7, #16
 8003dde:	2300      	movs	r3, #0
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	69b8      	ldr	r0, [r7, #24]
 8003de4:	f000 fbc6 	bl	8004574 <xQueueGenericSendFromISR>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d003      	beq.n	8003df6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003dee:	f06f 0302 	mvn.w	r3, #2
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	e028      	b.n	8003e48 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d025      	beq.n	8003e48 <osMessageQueuePut+0xb0>
 8003dfc:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <osMessageQueuePut+0xbc>)
 8003dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	e01c      	b.n	8003e48 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <osMessageQueuePut+0x82>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d103      	bne.n	8003e22 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003e1a:	f06f 0303 	mvn.w	r3, #3
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e012      	b.n	8003e48 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e22:	2300      	movs	r3, #0
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	69b8      	ldr	r0, [r7, #24]
 8003e2a:	f000 faa1 	bl	8004370 <xQueueGenericSend>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d009      	beq.n	8003e48 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003e3a:	f06f 0301 	mvn.w	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e002      	b.n	8003e48 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003e42:	f06f 0302 	mvn.w	r3, #2
 8003e46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003e48:	69fb      	ldr	r3, [r7, #28]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e6e:	f3ef 8305 	mrs	r3, IPSR
 8003e72:	617b      	str	r3, [r7, #20]
  return(result);
 8003e74:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d028      	beq.n	8003ecc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <osMessageQueueGet+0x34>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <osMessageQueueGet+0x34>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003e8c:	f06f 0303 	mvn.w	r3, #3
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	e037      	b.n	8003f04 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003e98:	f107 0310 	add.w	r3, r7, #16
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	69b8      	ldr	r0, [r7, #24]
 8003ea2:	f000 fce7 	bl	8004874 <xQueueReceiveFromISR>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d003      	beq.n	8003eb4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003eac:	f06f 0302 	mvn.w	r3, #2
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e027      	b.n	8003f04 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d024      	beq.n	8003f04 <osMessageQueueGet+0xac>
 8003eba:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <osMessageQueueGet+0xb8>)
 8003ebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	e01b      	b.n	8003f04 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <osMessageQueueGet+0x80>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d103      	bne.n	8003ee0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003ed8:	f06f 0303 	mvn.w	r3, #3
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e011      	b.n	8003f04 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	69b8      	ldr	r0, [r7, #24]
 8003ee6:	f000 fbe3 	bl	80046b0 <xQueueReceive>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d009      	beq.n	8003f04 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003ef6:	f06f 0301 	mvn.w	r3, #1
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	e002      	b.n	8003f04 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003efe:	f06f 0302 	mvn.w	r3, #2
 8003f02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003f04:	69fb      	ldr	r3, [r7, #28]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a07      	ldr	r2, [pc, #28]	@ (8003f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4a06      	ldr	r2, [pc, #24]	@ (8003f44 <vApplicationGetIdleTaskMemory+0x30>)
 8003f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2280      	movs	r2, #128	@ 0x80
 8003f30:	601a      	str	r2, [r3, #0]
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	200001b0 	.word	0x200001b0
 8003f44:	20000258 	.word	0x20000258

08003f48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4a07      	ldr	r2, [pc, #28]	@ (8003f74 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4a06      	ldr	r2, [pc, #24]	@ (8003f78 <vApplicationGetTimerTaskMemory+0x30>)
 8003f5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f66:	601a      	str	r2, [r3, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20000458 	.word	0x20000458
 8003f78:	20000500 	.word	0x20000500

08003f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f103 0208 	add.w	r2, r3, #8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f04f 32ff 	mov.w	r2, #4294967295
 8003f94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f103 0208 	add.w	r2, r3, #8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f103 0208 	add.w	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d103      	bne.n	800403e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e00c      	b.n	8004058 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3308      	adds	r3, #8
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e002      	b.n	800404c <vListInsert+0x2e>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	d2f6      	bcs.n	8004046 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	601a      	str	r2, [r3, #0]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6892      	ldr	r2, [r2, #8]
 80040a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6852      	ldr	r2, [r2, #4]
 80040b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d103      	bne.n	80040c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	1e5a      	subs	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004110:	f002 f9da 	bl	80064c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411c:	68f9      	ldr	r1, [r7, #12]
 800411e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	441a      	add	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004140:	3b01      	subs	r3, #1
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	441a      	add	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	22ff      	movs	r2, #255	@ 0xff
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	22ff      	movs	r2, #255	@ 0xff
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d114      	bne.n	8004190 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01a      	beq.n	80041a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3310      	adds	r3, #16
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fa74 	bl	8005660 <xTaskRemoveFromEventList>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d012      	beq.n	80041a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <xQueueGenericReset+0xd0>)
 8004180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	e009      	b.n	80041a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3310      	adds	r3, #16
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fef1 	bl	8003f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3324      	adds	r3, #36	@ 0x24
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff feec 	bl	8003f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041a4:	f002 f9c2 	bl	800652c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041a8:	2301      	movs	r3, #1
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08e      	sub	sp, #56	@ 0x38
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	e7fd      	b.n	80041fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <xQueueGenericCreateStatic+0x56>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <xQueueGenericCreateStatic+0x5a>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <xQueueGenericCreateStatic+0x5c>
 8004212:	2300      	movs	r3, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	623b      	str	r3, [r7, #32]
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d102      	bne.n	800423c <xQueueGenericCreateStatic+0x84>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <xQueueGenericCreateStatic+0x88>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <xQueueGenericCreateStatic+0x8a>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	61fb      	str	r3, [r7, #28]
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800425e:	2350      	movs	r3, #80	@ 0x50
 8004260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b50      	cmp	r3, #80	@ 0x50
 8004266:	d00b      	beq.n	8004280 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61bb      	str	r3, [r7, #24]
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004280:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004294:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f840 	bl	8004328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3730      	adds	r7, #48	@ 0x30
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b08a      	sub	sp, #40	@ 0x28
 80042b6:	af02      	add	r7, sp, #8
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	4613      	mov	r3, r2
 80042be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <xQueueGenericCreate+0x2c>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	613b      	str	r3, [r7, #16]
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	e7fd      	b.n	80042da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	3350      	adds	r3, #80	@ 0x50
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 fa0d 	bl	800670c <pvPortMalloc>
 80042f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d011      	beq.n	800431e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	3350      	adds	r3, #80	@ 0x50
 8004302:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800430c:	79fa      	ldrb	r2, [r7, #7]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f805 	bl	8004328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800431e:	69bb      	ldr	r3, [r7, #24]
	}
 8004320:	4618      	mov	r0, r3
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d103      	bne.n	8004344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e002      	b.n	800434a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004356:	2101      	movs	r1, #1
 8004358:	69b8      	ldr	r0, [r7, #24]
 800435a:	f7ff fec3 	bl	80040e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	@ 0x38
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800437e:	2300      	movs	r3, #0
 8004380:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <xQueueGenericSend+0x34>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <xQueueGenericSend+0x42>
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xQueueGenericSend+0x46>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueGenericSend+0x48>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <xQueueGenericSend+0x64>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d103      	bne.n	80043e2 <xQueueGenericSend+0x72>
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <xQueueGenericSend+0x76>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <xQueueGenericSend+0x78>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <xQueueGenericSend+0x94>
	__asm volatile
 80043ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	623b      	str	r3, [r7, #32]
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004404:	f001 faf4 	bl	80059f0 <xTaskGetSchedulerState>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <xQueueGenericSend+0xa4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <xQueueGenericSend+0xa8>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <xQueueGenericSend+0xaa>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <xQueueGenericSend+0xc6>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	61fb      	str	r3, [r7, #28]
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004436:	f002 f847 	bl	80064c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <xQueueGenericSend+0xdc>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d129      	bne.n	80044a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004452:	f000 fa91 	bl	8004978 <prvCopyDataToQueue>
 8004456:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	d010      	beq.n	8004482 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	3324      	adds	r3, #36	@ 0x24
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f8fb 	bl	8005660 <xTaskRemoveFromEventList>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d013      	beq.n	8004498 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004470:	4b3f      	ldr	r3, [pc, #252]	@ (8004570 <xQueueGenericSend+0x200>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	e00a      	b.n	8004498 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004488:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <xQueueGenericSend+0x200>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004498:	f002 f848 	bl	800652c <vPortExitCritical>
				return pdPASS;
 800449c:	2301      	movs	r3, #1
 800449e:	e063      	b.n	8004568 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044a6:	f002 f841 	bl	800652c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e05c      	b.n	8004568 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044b4:	f107 0314 	add.w	r3, r7, #20
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f935 	bl	8005728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044be:	2301      	movs	r3, #1
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044c2:	f002 f833 	bl	800652c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044c6:	f000 fe9d 	bl	8005204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ca:	f001 fffd 	bl	80064c8 <vPortEnterCritical>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044d4:	b25b      	sxtb	r3, r3
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d103      	bne.n	80044e4 <xQueueGenericSend+0x174>
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044ea:	b25b      	sxtb	r3, r3
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d103      	bne.n	80044fa <xQueueGenericSend+0x18a>
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044fa:	f002 f817 	bl	800652c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044fe:	1d3a      	adds	r2, r7, #4
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f001 f924 	bl	8005754 <xTaskCheckForTimeOut>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d124      	bne.n	800455c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004512:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004514:	f000 fb28 	bl	8004b68 <prvIsQueueFull>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d018      	beq.n	8004550 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	3310      	adds	r3, #16
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f001 f848 	bl	80055bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800452c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800452e:	f000 fab3 	bl	8004a98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004532:	f000 fe75 	bl	8005220 <xTaskResumeAll>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f47f af7c 	bne.w	8004436 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800453e:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <xQueueGenericSend+0x200>)
 8004540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	e772      	b.n	8004436 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004550:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004552:	f000 faa1 	bl	8004a98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004556:	f000 fe63 	bl	8005220 <xTaskResumeAll>
 800455a:	e76c      	b.n	8004436 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800455c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800455e:	f000 fa9b 	bl	8004a98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004562:	f000 fe5d 	bl	8005220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004566:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004568:	4618      	mov	r0, r3
 800456a:	3738      	adds	r7, #56	@ 0x38
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b090      	sub	sp, #64	@ 0x40
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10b      	bne.n	80045a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <xQueueGenericSendFromISR+0x3e>
 80045aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <xQueueGenericSendFromISR+0x42>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueGenericSendFromISR+0x44>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d103      	bne.n	80045e2 <xQueueGenericSendFromISR+0x6e>
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <xQueueGenericSendFromISR+0x72>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <xQueueGenericSendFromISR+0x74>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	623b      	str	r3, [r7, #32]
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004604:	f002 f840 	bl	8006688 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004608:	f3ef 8211 	mrs	r2, BASEPRI
 800460c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	61fa      	str	r2, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004620:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <xQueueGenericSendFromISR+0xc2>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d12f      	bne.n	8004696 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800463c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800464c:	f000 f994 	bl	8004978 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004650:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d112      	bne.n	8004680 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	3324      	adds	r3, #36	@ 0x24
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fffa 	bl	8005660 <xTaskRemoveFromEventList>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00e      	beq.n	8004690 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e007      	b.n	8004690 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004680:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004684:	3301      	adds	r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	b25a      	sxtb	r2, r3
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004690:	2301      	movs	r3, #1
 8004692:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004694:	e001      	b.n	800469a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004696:	2300      	movs	r3, #0
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3740      	adds	r7, #64	@ 0x40
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	@ 0x30
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046bc:	2300      	movs	r3, #0
 80046be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <xQueueReceive+0x32>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	623b      	str	r3, [r7, #32]
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <xQueueReceive+0x40>
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <xQueueReceive+0x44>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <xQueueReceive+0x46>
 80046f4:	2300      	movs	r3, #0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <xQueueReceive+0x62>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	61fb      	str	r3, [r7, #28]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004712:	f001 f96d 	bl	80059f0 <xTaskGetSchedulerState>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <xQueueReceive+0x72>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <xQueueReceive+0x76>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <xQueueReceive+0x78>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <xQueueReceive+0x94>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61bb      	str	r3, [r7, #24]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004744:	f001 fec0 	bl	80064c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01f      	beq.n	8004794 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004758:	f000 f978 	bl	8004a4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	1e5a      	subs	r2, r3, #1
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00f      	beq.n	800478c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800476c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476e:	3310      	adds	r3, #16
 8004770:	4618      	mov	r0, r3
 8004772:	f000 ff75 	bl	8005660 <xTaskRemoveFromEventList>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800477c:	4b3c      	ldr	r3, [pc, #240]	@ (8004870 <xQueueReceive+0x1c0>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800478c:	f001 fece 	bl	800652c <vPortExitCritical>
				return pdPASS;
 8004790:	2301      	movs	r3, #1
 8004792:	e069      	b.n	8004868 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800479a:	f001 fec7 	bl	800652c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800479e:	2300      	movs	r3, #0
 80047a0:	e062      	b.n	8004868 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 ffbb 	bl	8005728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047b6:	f001 feb9 	bl	800652c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ba:	f000 fd23 	bl	8005204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047be:	f001 fe83 	bl	80064c8 <vPortEnterCritical>
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d103      	bne.n	80047d8 <xQueueReceive+0x128>
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d103      	bne.n	80047ee <xQueueReceive+0x13e>
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047ee:	f001 fe9d 	bl	800652c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f2:	1d3a      	adds	r2, r7, #4
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 ffaa 	bl	8005754 <xTaskCheckForTimeOut>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d123      	bne.n	800484e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004808:	f000 f998 	bl	8004b3c <prvIsQueueEmpty>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d017      	beq.n	8004842 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004814:	3324      	adds	r3, #36	@ 0x24
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fece 	bl	80055bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004820:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004822:	f000 f939 	bl	8004a98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004826:	f000 fcfb 	bl	8005220 <xTaskResumeAll>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d189      	bne.n	8004744 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004830:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <xQueueReceive+0x1c0>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	e780      	b.n	8004744 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004844:	f000 f928 	bl	8004a98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004848:	f000 fcea 	bl	8005220 <xTaskResumeAll>
 800484c:	e77a      	b.n	8004744 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800484e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004850:	f000 f922 	bl	8004a98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004854:	f000 fce4 	bl	8005220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800485a:	f000 f96f 	bl	8004b3c <prvIsQueueEmpty>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	f43f af6f 	beq.w	8004744 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004866:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004868:	4618      	mov	r0, r3
 800486a:	3730      	adds	r7, #48	@ 0x30
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08e      	sub	sp, #56	@ 0x38
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	623b      	str	r3, [r7, #32]
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d103      	bne.n	80048b0 <xQueueReceiveFromISR+0x3c>
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <xQueueReceiveFromISR+0x40>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <xQueueReceiveFromISR+0x42>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10b      	bne.n	80048d2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	61fb      	str	r3, [r7, #28]
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	e7fd      	b.n	80048ce <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048d2:	f001 fed9 	bl	8006688 <vPortValidateInterruptPriority>
	__asm volatile
 80048d6:	f3ef 8211 	mrs	r2, BASEPRI
 80048da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	61ba      	str	r2, [r7, #24]
 80048ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80048ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d02f      	beq.n	800495e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800490c:	f000 f89e 	bl	8004a4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004918:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d112      	bne.n	8004948 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	3310      	adds	r3, #16
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fe96 	bl	8005660 <xTaskRemoveFromEventList>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e007      	b.n	8004958 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800494c:	3301      	adds	r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	b25a      	sxtb	r2, r3
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004958:	2301      	movs	r3, #1
 800495a:	637b      	str	r3, [r7, #52]	@ 0x34
 800495c:	e001      	b.n	8004962 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800495e:	2300      	movs	r3, #0
 8004960:	637b      	str	r3, [r7, #52]	@ 0x34
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f383 8811 	msr	BASEPRI, r3
}
 800496c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800496e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004970:	4618      	mov	r0, r3
 8004972:	3738      	adds	r7, #56	@ 0x38
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d14d      	bne.n	8004a3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 f842 	bl	8005a2c <xTaskPriorityDisinherit>
 80049a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	e043      	b.n	8004a3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d119      	bne.n	80049ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6858      	ldr	r0, [r3, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	461a      	mov	r2, r3
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	f002 fabd 	bl	8006f42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	441a      	add	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d32b      	bcc.n	8004a3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	e026      	b.n	8004a3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68d8      	ldr	r0, [r3, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	461a      	mov	r2, r3
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	f002 faa3 	bl	8006f42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	425b      	negs	r3, r3
 8004a06:	441a      	add	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d207      	bcs.n	8004a28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	425b      	negs	r3, r3
 8004a22:	441a      	add	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d105      	bne.n	8004a3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a42:	697b      	ldr	r3, [r7, #20]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d018      	beq.n	8004a90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	441a      	add	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d303      	bcc.n	8004a80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68d9      	ldr	r1, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6838      	ldr	r0, [r7, #0]
 8004a8c:	f002 fa59 	bl	8006f42 <memcpy>
	}
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004aa0:	f001 fd12 	bl	80064c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aac:	e011      	b.n	8004ad2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d012      	beq.n	8004adc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3324      	adds	r3, #36	@ 0x24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fdd0 	bl	8005660 <xTaskRemoveFromEventList>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ac6:	f000 fea9 	bl	800581c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	dce9      	bgt.n	8004aae <prvUnlockQueue+0x16>
 8004ada:	e000      	b.n	8004ade <prvUnlockQueue+0x46>
					break;
 8004adc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	22ff      	movs	r2, #255	@ 0xff
 8004ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ae6:	f001 fd21 	bl	800652c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004aea:	f001 fced 	bl	80064c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004af4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004af6:	e011      	b.n	8004b1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3310      	adds	r3, #16
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fdab 	bl	8005660 <xTaskRemoveFromEventList>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b10:	f000 fe84 	bl	800581c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b14:	7bbb      	ldrb	r3, [r7, #14]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dce9      	bgt.n	8004af8 <prvUnlockQueue+0x60>
 8004b24:	e000      	b.n	8004b28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	22ff      	movs	r2, #255	@ 0xff
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b30:	f001 fcfc 	bl	800652c <vPortExitCritical>
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b44:	f001 fcc0 	bl	80064c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e001      	b.n	8004b5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b5a:	f001 fce7 	bl	800652c <vPortExitCritical>

	return xReturn;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b70:	f001 fcaa 	bl	80064c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d102      	bne.n	8004b86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e001      	b.n	8004b8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b8a:	f001 fccf 	bl	800652c <vPortExitCritical>

	return xReturn;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e014      	b.n	8004bd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8004be8 <vQueueAddToRegistry+0x50>)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bb4:	490c      	ldr	r1, [pc, #48]	@ (8004be8 <vQueueAddToRegistry+0x50>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004be8 <vQueueAddToRegistry+0x50>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bca:	e006      	b.n	8004bda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b07      	cmp	r3, #7
 8004bd6:	d9e7      	bls.n	8004ba8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000900 	.word	0x20000900

08004bec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bfc:	f001 fc64 	bl	80064c8 <vPortEnterCritical>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d103      	bne.n	8004c16 <vQueueWaitForMessageRestricted+0x2a>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c1c:	b25b      	sxtb	r3, r3
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d103      	bne.n	8004c2c <vQueueWaitForMessageRestricted+0x40>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c2c:	f001 fc7e 	bl	800652c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	3324      	adds	r3, #36	@ 0x24
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fce1 	bl	8005608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f7ff ff26 	bl	8004a98 <prvUnlockQueue>
	}
 8004c4c:	bf00      	nop
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08e      	sub	sp, #56	@ 0x38
 8004c58:	af04      	add	r7, sp, #16
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	623b      	str	r3, [r7, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	61fb      	str	r3, [r7, #28]
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c9e:	23a8      	movs	r3, #168	@ 0xa8
 8004ca0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2ba8      	cmp	r3, #168	@ 0xa8
 8004ca6:	d00b      	beq.n	8004cc0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	61bb      	str	r3, [r7, #24]
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	e7fd      	b.n	8004cbc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01e      	beq.n	8004d06 <xTaskCreateStatic+0xb2>
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01b      	beq.n	8004d06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9303      	str	r3, [sp, #12]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	f107 0314 	add.w	r3, r7, #20
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f851 	bl	8004da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d00:	f000 f8f6 	bl	8004ef0 <prvAddNewTaskToReadyList>
 8004d04:	e001      	b.n	8004d0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d0a:	697b      	ldr	r3, [r7, #20]
	}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3728      	adds	r7, #40	@ 0x28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08c      	sub	sp, #48	@ 0x30
 8004d18:	af04      	add	r7, sp, #16
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fcef 	bl	800670c <pvPortMalloc>
 8004d2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00e      	beq.n	8004d54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d36:	20a8      	movs	r0, #168	@ 0xa8
 8004d38:	f001 fce8 	bl	800670c <pvPortMalloc>
 8004d3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d4a:	e005      	b.n	8004d58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d4c:	6978      	ldr	r0, [r7, #20]
 8004d4e:	f001 fdb1 	bl	80068b4 <vPortFree>
 8004d52:	e001      	b.n	8004d58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d017      	beq.n	8004d8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9303      	str	r3, [sp, #12]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	9302      	str	r3, [sp, #8]
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f80f 	bl	8004da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d82:	69f8      	ldr	r0, [r7, #28]
 8004d84:	f000 f8b4 	bl	8004ef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	e002      	b.n	8004d94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d94:	69bb      	ldr	r3, [r7, #24]
	}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	461a      	mov	r2, r3
 8004db8:	21a5      	movs	r1, #165	@ 0xa5
 8004dba:	f001 ffe8 	bl	8006d8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f023 0307 	bic.w	r3, r3, #7
 8004dd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	617b      	str	r3, [r7, #20]
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	e7fd      	b.n	8004df6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01f      	beq.n	8004e40 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e012      	b.n	8004e2c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	7819      	ldrb	r1, [r3, #0]
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	3334      	adds	r3, #52	@ 0x34
 8004e16:	460a      	mov	r2, r1
 8004e18:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	d9e9      	bls.n	8004e06 <prvInitialiseNewTask+0x66>
 8004e32:	e000      	b.n	8004e36 <prvInitialiseNewTask+0x96>
			{
				break;
 8004e34:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e3e:	e003      	b.n	8004e48 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4a:	2b37      	cmp	r3, #55	@ 0x37
 8004e4c:	d901      	bls.n	8004e52 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e4e:	2337      	movs	r3, #55	@ 0x37
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e56:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	2200      	movs	r2, #0
 8004e62:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff f8a7 	bl	8003fbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	3318      	adds	r3, #24
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff f8a2 	bl	8003fbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	3354      	adds	r3, #84	@ 0x54
 8004ea2:	224c      	movs	r2, #76	@ 0x4c
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 ff71 	bl	8006d8e <memset>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	4a0d      	ldr	r2, [pc, #52]	@ (8004ee4 <prvInitialiseNewTask+0x144>)
 8004eb0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee8 <prvInitialiseNewTask+0x148>)
 8004eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eba:	4a0c      	ldr	r2, [pc, #48]	@ (8004eec <prvInitialiseNewTask+0x14c>)
 8004ebc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	69b8      	ldr	r0, [r7, #24]
 8004ec4:	f001 f9d0 	bl	8006268 <pxPortInitialiseStack>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eda:	bf00      	nop
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20004b94 	.word	0x20004b94
 8004ee8:	20004bfc 	.word	0x20004bfc
 8004eec:	20004c64 	.word	0x20004c64

08004ef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ef8:	f001 fae6 	bl	80064c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004efc:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb4 <prvAddNewTaskToReadyList+0xc4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3301      	adds	r3, #1
 8004f02:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb4 <prvAddNewTaskToReadyList+0xc4>)
 8004f04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f06:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb8 <prvAddNewTaskToReadyList+0xc8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <prvAddNewTaskToReadyList+0xc8>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f14:	4b27      	ldr	r3, [pc, #156]	@ (8004fb4 <prvAddNewTaskToReadyList+0xc4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d110      	bne.n	8004f3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f1c:	f000 fca4 	bl	8005868 <prvInitialiseTaskLists>
 8004f20:	e00d      	b.n	8004f3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f22:	4b26      	ldr	r3, [pc, #152]	@ (8004fbc <prvAddNewTaskToReadyList+0xcc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f2a:	4b23      	ldr	r3, [pc, #140]	@ (8004fb8 <prvAddNewTaskToReadyList+0xc8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d802      	bhi.n	8004f3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f38:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb8 <prvAddNewTaskToReadyList+0xc8>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <prvAddNewTaskToReadyList+0xd0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc0 <prvAddNewTaskToReadyList+0xd0>)
 8004f46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f48:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc0 <prvAddNewTaskToReadyList+0xd0>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f54:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc4 <prvAddNewTaskToReadyList+0xd4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d903      	bls.n	8004f64 <prvAddNewTaskToReadyList+0x74>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	4a18      	ldr	r2, [pc, #96]	@ (8004fc4 <prvAddNewTaskToReadyList+0xd4>)
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4a15      	ldr	r2, [pc, #84]	@ (8004fc8 <prvAddNewTaskToReadyList+0xd8>)
 8004f72:	441a      	add	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7ff f82b 	bl	8003fd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f80:	f001 fad4 	bl	800652c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f84:	4b0d      	ldr	r3, [pc, #52]	@ (8004fbc <prvAddNewTaskToReadyList+0xcc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <prvAddNewTaskToReadyList+0xc8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d207      	bcs.n	8004faa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <prvAddNewTaskToReadyList+0xdc>)
 8004f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000e14 	.word	0x20000e14
 8004fb8:	20000940 	.word	0x20000940
 8004fbc:	20000e20 	.word	0x20000e20
 8004fc0:	20000e30 	.word	0x20000e30
 8004fc4:	20000e1c 	.word	0x20000e1c
 8004fc8:	20000944 	.word	0x20000944
 8004fcc:	e000ed04 	.word	0xe000ed04

08004fd0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004fd8:	f001 fa76 	bl	80064c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <vTaskDelete+0x18>
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8005098 <vTaskDelete+0xc8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	e000      	b.n	8004fea <vTaskDelete+0x1a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff f84d 	bl	8004090 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3318      	adds	r3, #24
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff f844 	bl	8004090 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005008:	4b24      	ldr	r3, [pc, #144]	@ (800509c <vTaskDelete+0xcc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	4a23      	ldr	r2, [pc, #140]	@ (800509c <vTaskDelete+0xcc>)
 8005010:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005012:	4b21      	ldr	r3, [pc, #132]	@ (8005098 <vTaskDelete+0xc8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	429a      	cmp	r2, r3
 800501a:	d10b      	bne.n	8005034 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	481f      	ldr	r0, [pc, #124]	@ (80050a0 <vTaskDelete+0xd0>)
 8005024:	f7fe ffd7 	bl	8003fd6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005028:	4b1e      	ldr	r3, [pc, #120]	@ (80050a4 <vTaskDelete+0xd4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3301      	adds	r3, #1
 800502e:	4a1d      	ldr	r2, [pc, #116]	@ (80050a4 <vTaskDelete+0xd4>)
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e009      	b.n	8005048 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005034:	4b1c      	ldr	r3, [pc, #112]	@ (80050a8 <vTaskDelete+0xd8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3b01      	subs	r3, #1
 800503a:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <vTaskDelete+0xd8>)
 800503c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fc80 	bl	8005944 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005044:	f000 fcb4 	bl	80059b0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005048:	f001 fa70 	bl	800652c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800504c:	4b17      	ldr	r3, [pc, #92]	@ (80050ac <vTaskDelete+0xdc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01c      	beq.n	800508e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8005054:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <vTaskDelete+0xc8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	429a      	cmp	r2, r3
 800505c:	d117      	bne.n	800508e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800505e:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <vTaskDelete+0xe0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <vTaskDelete+0xae>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60bb      	str	r3, [r7, #8]
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	e7fd      	b.n	800507a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <vTaskDelete+0xe4>)
 8005080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000940 	.word	0x20000940
 800509c:	20000e30 	.word	0x20000e30
 80050a0:	20000de8 	.word	0x20000de8
 80050a4:	20000dfc 	.word	0x20000dfc
 80050a8:	20000e14 	.word	0x20000e14
 80050ac:	20000e20 	.word	0x20000e20
 80050b0:	20000e3c 	.word	0x20000e3c
 80050b4:	e000ed04 	.word	0xe000ed04

080050b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d018      	beq.n	80050fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050ca:	4b14      	ldr	r3, [pc, #80]	@ (800511c <vTaskDelay+0x64>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00b      	beq.n	80050ea <vTaskDelay+0x32>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	60bb      	str	r3, [r7, #8]
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050ea:	f000 f88b 	bl	8005204 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050ee:	2100      	movs	r1, #0
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fd0b 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050f6:	f000 f893 	bl	8005220 <xTaskResumeAll>
 80050fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005102:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <vTaskDelay+0x68>)
 8005104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000e3c 	.word	0x20000e3c
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	@ 0x28
 8005128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005132:	463a      	mov	r2, r7
 8005134:	1d39      	adds	r1, r7, #4
 8005136:	f107 0308 	add.w	r3, r7, #8
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe feea 	bl	8003f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	9202      	str	r2, [sp, #8]
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	2300      	movs	r3, #0
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	460a      	mov	r2, r1
 8005152:	4924      	ldr	r1, [pc, #144]	@ (80051e4 <vTaskStartScheduler+0xc0>)
 8005154:	4824      	ldr	r0, [pc, #144]	@ (80051e8 <vTaskStartScheduler+0xc4>)
 8005156:	f7ff fd7d 	bl	8004c54 <xTaskCreateStatic>
 800515a:	4603      	mov	r3, r0
 800515c:	4a23      	ldr	r2, [pc, #140]	@ (80051ec <vTaskStartScheduler+0xc8>)
 800515e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005160:	4b22      	ldr	r3, [pc, #136]	@ (80051ec <vTaskStartScheduler+0xc8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005168:	2301      	movs	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e001      	b.n	8005172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d102      	bne.n	800517e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005178:	f000 fd1c 	bl	8005bb4 <xTimerCreateTimerTask>
 800517c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d11b      	bne.n	80051bc <vTaskStartScheduler+0x98>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	613b      	str	r3, [r7, #16]
}
 8005196:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005198:	4b15      	ldr	r3, [pc, #84]	@ (80051f0 <vTaskStartScheduler+0xcc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3354      	adds	r3, #84	@ 0x54
 800519e:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <vTaskStartScheduler+0xd0>)
 80051a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051a2:	4b15      	ldr	r3, [pc, #84]	@ (80051f8 <vTaskStartScheduler+0xd4>)
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295
 80051a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051aa:	4b14      	ldr	r3, [pc, #80]	@ (80051fc <vTaskStartScheduler+0xd8>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051b0:	4b13      	ldr	r3, [pc, #76]	@ (8005200 <vTaskStartScheduler+0xdc>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051b6:	f001 f8e3 	bl	8006380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ba:	e00f      	b.n	80051dc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d10b      	bne.n	80051dc <vTaskStartScheduler+0xb8>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60fb      	str	r3, [r7, #12]
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <vTaskStartScheduler+0xb4>
}
 80051dc:	bf00      	nop
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	08007f30 	.word	0x08007f30
 80051e8:	08005835 	.word	0x08005835
 80051ec:	20000e38 	.word	0x20000e38
 80051f0:	20000940 	.word	0x20000940
 80051f4:	2000001c 	.word	0x2000001c
 80051f8:	20000e34 	.word	0x20000e34
 80051fc:	20000e20 	.word	0x20000e20
 8005200:	20000e18 	.word	0x20000e18

08005204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005208:	4b04      	ldr	r3, [pc, #16]	@ (800521c <vTaskSuspendAll+0x18>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	4a03      	ldr	r2, [pc, #12]	@ (800521c <vTaskSuspendAll+0x18>)
 8005210:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000e3c 	.word	0x20000e3c

08005220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800522e:	4b42      	ldr	r3, [pc, #264]	@ (8005338 <xTaskResumeAll+0x118>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <xTaskResumeAll+0x2e>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	603b      	str	r3, [r7, #0]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800524e:	f001 f93b 	bl	80064c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005252:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <xTaskResumeAll+0x118>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3b01      	subs	r3, #1
 8005258:	4a37      	ldr	r2, [pc, #220]	@ (8005338 <xTaskResumeAll+0x118>)
 800525a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525c:	4b36      	ldr	r3, [pc, #216]	@ (8005338 <xTaskResumeAll+0x118>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d162      	bne.n	800532a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005264:	4b35      	ldr	r3, [pc, #212]	@ (800533c <xTaskResumeAll+0x11c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d05e      	beq.n	800532a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800526c:	e02f      	b.n	80052ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526e:	4b34      	ldr	r3, [pc, #208]	@ (8005340 <xTaskResumeAll+0x120>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3318      	adds	r3, #24
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe ff08 	bl	8004090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe ff03 	bl	8004090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528e:	4b2d      	ldr	r3, [pc, #180]	@ (8005344 <xTaskResumeAll+0x124>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d903      	bls.n	800529e <xTaskResumeAll+0x7e>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	4a2a      	ldr	r2, [pc, #168]	@ (8005344 <xTaskResumeAll+0x124>)
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4a27      	ldr	r2, [pc, #156]	@ (8005348 <xTaskResumeAll+0x128>)
 80052ac:	441a      	add	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f7fe fe8e 	bl	8003fd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052be:	4b23      	ldr	r3, [pc, #140]	@ (800534c <xTaskResumeAll+0x12c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d302      	bcc.n	80052ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80052c8:	4b21      	ldr	r3, [pc, #132]	@ (8005350 <xTaskResumeAll+0x130>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005340 <xTaskResumeAll+0x120>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1cb      	bne.n	800526e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052dc:	f000 fb68 	bl	80059b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005354 <xTaskResumeAll+0x134>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052ec:	f000 f846 	bl	800537c <xTaskIncrementTick>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80052f6:	4b16      	ldr	r3, [pc, #88]	@ (8005350 <xTaskResumeAll+0x130>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3b01      	subs	r3, #1
 8005300:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f1      	bne.n	80052ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005308:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <xTaskResumeAll+0x134>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800530e:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <xTaskResumeAll+0x130>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005316:	2301      	movs	r3, #1
 8005318:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800531a:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <xTaskResumeAll+0x138>)
 800531c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800532a:	f001 f8ff 	bl	800652c <vPortExitCritical>

	return xAlreadyYielded;
 800532e:	68bb      	ldr	r3, [r7, #8]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000e3c 	.word	0x20000e3c
 800533c:	20000e14 	.word	0x20000e14
 8005340:	20000dd4 	.word	0x20000dd4
 8005344:	20000e1c 	.word	0x20000e1c
 8005348:	20000944 	.word	0x20000944
 800534c:	20000940 	.word	0x20000940
 8005350:	20000e28 	.word	0x20000e28
 8005354:	20000e24 	.word	0x20000e24
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005362:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <xTaskGetTickCount+0x1c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005368:	687b      	ldr	r3, [r7, #4]
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000e18 	.word	0x20000e18

0800537c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005386:	4b4f      	ldr	r3, [pc, #316]	@ (80054c4 <xTaskIncrementTick+0x148>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f040 8090 	bne.w	80054b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005390:	4b4d      	ldr	r3, [pc, #308]	@ (80054c8 <xTaskIncrementTick+0x14c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005398:	4a4b      	ldr	r2, [pc, #300]	@ (80054c8 <xTaskIncrementTick+0x14c>)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d121      	bne.n	80053e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80053a4:	4b49      	ldr	r3, [pc, #292]	@ (80054cc <xTaskIncrementTick+0x150>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	603b      	str	r3, [r7, #0]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xTaskIncrementTick+0x46>
 80053c6:	4b41      	ldr	r3, [pc, #260]	@ (80054cc <xTaskIncrementTick+0x150>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	4b40      	ldr	r3, [pc, #256]	@ (80054d0 <xTaskIncrementTick+0x154>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a3e      	ldr	r2, [pc, #248]	@ (80054cc <xTaskIncrementTick+0x150>)
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	4a3e      	ldr	r2, [pc, #248]	@ (80054d0 <xTaskIncrementTick+0x154>)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b3e      	ldr	r3, [pc, #248]	@ (80054d4 <xTaskIncrementTick+0x158>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3301      	adds	r3, #1
 80053e0:	4a3c      	ldr	r2, [pc, #240]	@ (80054d4 <xTaskIncrementTick+0x158>)
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	f000 fae4 	bl	80059b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053e8:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <xTaskIncrementTick+0x15c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d349      	bcc.n	8005486 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053f2:	4b36      	ldr	r3, [pc, #216]	@ (80054cc <xTaskIncrementTick+0x150>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d104      	bne.n	8005406 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fc:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <xTaskIncrementTick+0x15c>)
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005402:	601a      	str	r2, [r3, #0]
					break;
 8005404:	e03f      	b.n	8005486 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <xTaskIncrementTick+0x150>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d203      	bcs.n	8005426 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800541e:	4a2e      	ldr	r2, [pc, #184]	@ (80054d8 <xTaskIncrementTick+0x15c>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005424:	e02f      	b.n	8005486 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	3304      	adds	r3, #4
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fe30 	bl	8004090 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	3318      	adds	r3, #24
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fe27 	bl	8004090 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005446:	4b25      	ldr	r3, [pc, #148]	@ (80054dc <xTaskIncrementTick+0x160>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d903      	bls.n	8005456 <xTaskIncrementTick+0xda>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	4a22      	ldr	r2, [pc, #136]	@ (80054dc <xTaskIncrementTick+0x160>)
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <xTaskIncrementTick+0x164>)
 8005464:	441a      	add	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7fe fdb2 	bl	8003fd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005476:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <xTaskIncrementTick+0x168>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	429a      	cmp	r2, r3
 800547e:	d3b8      	bcc.n	80053f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005484:	e7b5      	b.n	80053f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005486:	4b17      	ldr	r3, [pc, #92]	@ (80054e4 <xTaskIncrementTick+0x168>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548c:	4914      	ldr	r1, [pc, #80]	@ (80054e0 <xTaskIncrementTick+0x164>)
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d901      	bls.n	80054a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054a2:	4b11      	ldr	r3, [pc, #68]	@ (80054e8 <xTaskIncrementTick+0x16c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80054aa:	2301      	movs	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	e004      	b.n	80054ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054b0:	4b0e      	ldr	r3, [pc, #56]	@ (80054ec <xTaskIncrementTick+0x170>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	4a0d      	ldr	r2, [pc, #52]	@ (80054ec <xTaskIncrementTick+0x170>)
 80054b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054ba:	697b      	ldr	r3, [r7, #20]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000e3c 	.word	0x20000e3c
 80054c8:	20000e18 	.word	0x20000e18
 80054cc:	20000dcc 	.word	0x20000dcc
 80054d0:	20000dd0 	.word	0x20000dd0
 80054d4:	20000e2c 	.word	0x20000e2c
 80054d8:	20000e34 	.word	0x20000e34
 80054dc:	20000e1c 	.word	0x20000e1c
 80054e0:	20000944 	.word	0x20000944
 80054e4:	20000940 	.word	0x20000940
 80054e8:	20000e28 	.word	0x20000e28
 80054ec:	20000e24 	.word	0x20000e24

080054f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054f6:	4b2b      	ldr	r3, [pc, #172]	@ (80055a4 <vTaskSwitchContext+0xb4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054fe:	4b2a      	ldr	r3, [pc, #168]	@ (80055a8 <vTaskSwitchContext+0xb8>)
 8005500:	2201      	movs	r2, #1
 8005502:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005504:	e047      	b.n	8005596 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005506:	4b28      	ldr	r3, [pc, #160]	@ (80055a8 <vTaskSwitchContext+0xb8>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800550c:	4b27      	ldr	r3, [pc, #156]	@ (80055ac <vTaskSwitchContext+0xbc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e011      	b.n	8005538 <vTaskSwitchContext+0x48>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <vTaskSwitchContext+0x42>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	607b      	str	r3, [r7, #4]
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <vTaskSwitchContext+0x3e>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b01      	subs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	491d      	ldr	r1, [pc, #116]	@ (80055b0 <vTaskSwitchContext+0xc0>)
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0e3      	beq.n	8005514 <vTaskSwitchContext+0x24>
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a16      	ldr	r2, [pc, #88]	@ (80055b0 <vTaskSwitchContext+0xc0>)
 8005558:	4413      	add	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3308      	adds	r3, #8
 800556e:	429a      	cmp	r2, r3
 8005570:	d104      	bne.n	800557c <vTaskSwitchContext+0x8c>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	605a      	str	r2, [r3, #4]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	4a0c      	ldr	r2, [pc, #48]	@ (80055b4 <vTaskSwitchContext+0xc4>)
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4a09      	ldr	r2, [pc, #36]	@ (80055ac <vTaskSwitchContext+0xbc>)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800558c:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <vTaskSwitchContext+0xc4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3354      	adds	r3, #84	@ 0x54
 8005592:	4a09      	ldr	r2, [pc, #36]	@ (80055b8 <vTaskSwitchContext+0xc8>)
 8005594:	6013      	str	r3, [r2, #0]
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000e3c 	.word	0x20000e3c
 80055a8:	20000e28 	.word	0x20000e28
 80055ac:	20000e1c 	.word	0x20000e1c
 80055b0:	20000944 	.word	0x20000944
 80055b4:	20000940 	.word	0x20000940
 80055b8:	2000001c 	.word	0x2000001c

080055bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60fb      	str	r3, [r7, #12]
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055e4:	4b07      	ldr	r3, [pc, #28]	@ (8005604 <vTaskPlaceOnEventList+0x48>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3318      	adds	r3, #24
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fe fd16 	bl	800401e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055f2:	2101      	movs	r1, #1
 80055f4:	6838      	ldr	r0, [r7, #0]
 80055f6:	f000 fa89 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000940 	.word	0x20000940

08005608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10b      	bne.n	8005632 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	617b      	str	r3, [r7, #20]
}
 800562c:	bf00      	nop
 800562e:	bf00      	nop
 8005630:	e7fd      	b.n	800562e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005632:	4b0a      	ldr	r3, [pc, #40]	@ (800565c <vTaskPlaceOnEventListRestricted+0x54>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3318      	adds	r3, #24
 8005638:	4619      	mov	r1, r3
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7fe fccb 	bl	8003fd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295
 800564a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	68b8      	ldr	r0, [r7, #8]
 8005650:	f000 fa5c 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
	}
 8005654:	bf00      	nop
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000940 	.word	0x20000940

08005660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	60fb      	str	r3, [r7, #12]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	3318      	adds	r3, #24
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fcfc 	bl	8004090 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005698:	4b1d      	ldr	r3, [pc, #116]	@ (8005710 <xTaskRemoveFromEventList+0xb0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d11d      	bne.n	80056dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fcf3 	bl	8004090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ae:	4b19      	ldr	r3, [pc, #100]	@ (8005714 <xTaskRemoveFromEventList+0xb4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d903      	bls.n	80056be <xTaskRemoveFromEventList+0x5e>
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	4a16      	ldr	r2, [pc, #88]	@ (8005714 <xTaskRemoveFromEventList+0xb4>)
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4a13      	ldr	r2, [pc, #76]	@ (8005718 <xTaskRemoveFromEventList+0xb8>)
 80056cc:	441a      	add	r2, r3
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f7fe fc7e 	bl	8003fd6 <vListInsertEnd>
 80056da:	e005      	b.n	80056e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	3318      	adds	r3, #24
 80056e0:	4619      	mov	r1, r3
 80056e2:	480e      	ldr	r0, [pc, #56]	@ (800571c <xTaskRemoveFromEventList+0xbc>)
 80056e4:	f7fe fc77 	bl	8003fd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005720 <xTaskRemoveFromEventList+0xc0>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d905      	bls.n	8005702 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005724 <xTaskRemoveFromEventList+0xc4>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e001      	b.n	8005706 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005706:	697b      	ldr	r3, [r7, #20]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000e3c 	.word	0x20000e3c
 8005714:	20000e1c 	.word	0x20000e1c
 8005718:	20000944 	.word	0x20000944
 800571c:	20000dd4 	.word	0x20000dd4
 8005720:	20000940 	.word	0x20000940
 8005724:	20000e28 	.word	0x20000e28

08005728 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005730:	4b06      	ldr	r3, [pc, #24]	@ (800574c <vTaskInternalSetTimeOutState+0x24>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <vTaskInternalSetTimeOutState+0x28>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	605a      	str	r2, [r3, #4]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	20000e2c 	.word	0x20000e2c
 8005750:	20000e18 	.word	0x20000e18

08005754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	613b      	str	r3, [r7, #16]
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10b      	bne.n	800579a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60fb      	str	r3, [r7, #12]
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	e7fd      	b.n	8005796 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800579a:	f000 fe95 	bl	80064c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800579e:	4b1d      	ldr	r3, [pc, #116]	@ (8005814 <xTaskCheckForTimeOut+0xc0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d102      	bne.n	80057be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	e023      	b.n	8005806 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b15      	ldr	r3, [pc, #84]	@ (8005818 <xTaskCheckForTimeOut+0xc4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d007      	beq.n	80057da <xTaskCheckForTimeOut+0x86>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057d4:	2301      	movs	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e015      	b.n	8005806 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d20b      	bcs.n	80057fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ff99 	bl	8005728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	e004      	b.n	8005806 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005802:	2301      	movs	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005806:	f000 fe91 	bl	800652c <vPortExitCritical>

	return xReturn;
 800580a:	69fb      	ldr	r3, [r7, #28]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000e18 	.word	0x20000e18
 8005818:	20000e2c 	.word	0x20000e2c

0800581c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005820:	4b03      	ldr	r3, [pc, #12]	@ (8005830 <vTaskMissedYield+0x14>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	20000e28 	.word	0x20000e28

08005834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800583c:	f000 f854 	bl	80058e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005840:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <prvIdleTask+0x2c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d907      	bls.n	8005858 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005848:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <prvIdleTask+0x30>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005858:	f7fa fed8 	bl	800060c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800585c:	e7ee      	b.n	800583c <prvIdleTask+0x8>
 800585e:	bf00      	nop
 8005860:	20000944 	.word	0x20000944
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	e00c      	b.n	800588e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a12      	ldr	r2, [pc, #72]	@ (80058c8 <prvInitialiseTaskLists+0x60>)
 8005880:	4413      	add	r3, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fb7a 	bl	8003f7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3301      	adds	r3, #1
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b37      	cmp	r3, #55	@ 0x37
 8005892:	d9ef      	bls.n	8005874 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005894:	480d      	ldr	r0, [pc, #52]	@ (80058cc <prvInitialiseTaskLists+0x64>)
 8005896:	f7fe fb71 	bl	8003f7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800589a:	480d      	ldr	r0, [pc, #52]	@ (80058d0 <prvInitialiseTaskLists+0x68>)
 800589c:	f7fe fb6e 	bl	8003f7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058a0:	480c      	ldr	r0, [pc, #48]	@ (80058d4 <prvInitialiseTaskLists+0x6c>)
 80058a2:	f7fe fb6b 	bl	8003f7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058a6:	480c      	ldr	r0, [pc, #48]	@ (80058d8 <prvInitialiseTaskLists+0x70>)
 80058a8:	f7fe fb68 	bl	8003f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058ac:	480b      	ldr	r0, [pc, #44]	@ (80058dc <prvInitialiseTaskLists+0x74>)
 80058ae:	f7fe fb65 	bl	8003f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058b2:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <prvInitialiseTaskLists+0x78>)
 80058b4:	4a05      	ldr	r2, [pc, #20]	@ (80058cc <prvInitialiseTaskLists+0x64>)
 80058b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058b8:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <prvInitialiseTaskLists+0x7c>)
 80058ba:	4a05      	ldr	r2, [pc, #20]	@ (80058d0 <prvInitialiseTaskLists+0x68>)
 80058bc:	601a      	str	r2, [r3, #0]
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000944 	.word	0x20000944
 80058cc:	20000da4 	.word	0x20000da4
 80058d0:	20000db8 	.word	0x20000db8
 80058d4:	20000dd4 	.word	0x20000dd4
 80058d8:	20000de8 	.word	0x20000de8
 80058dc:	20000e00 	.word	0x20000e00
 80058e0:	20000dcc 	.word	0x20000dcc
 80058e4:	20000dd0 	.word	0x20000dd0

080058e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ee:	e019      	b.n	8005924 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058f0:	f000 fdea 	bl	80064c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f4:	4b10      	ldr	r3, [pc, #64]	@ (8005938 <prvCheckTasksWaitingTermination+0x50>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe fbc5 	bl	8004090 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005906:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <prvCheckTasksWaitingTermination+0x54>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	4a0b      	ldr	r2, [pc, #44]	@ (800593c <prvCheckTasksWaitingTermination+0x54>)
 800590e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005910:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <prvCheckTasksWaitingTermination+0x58>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3b01      	subs	r3, #1
 8005916:	4a0a      	ldr	r2, [pc, #40]	@ (8005940 <prvCheckTasksWaitingTermination+0x58>)
 8005918:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800591a:	f000 fe07 	bl	800652c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f810 	bl	8005944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <prvCheckTasksWaitingTermination+0x58>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e1      	bne.n	80058f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000de8 	.word	0x20000de8
 800593c:	20000e14 	.word	0x20000e14
 8005940:	20000dfc 	.word	0x20000dfc

08005944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3354      	adds	r3, #84	@ 0x54
 8005950:	4618      	mov	r0, r3
 8005952:	f001 fa35 	bl	8006dc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005964:	4618      	mov	r0, r3
 8005966:	f000 ffa5 	bl	80068b4 <vPortFree>
				vPortFree( pxTCB );
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 ffa2 	bl	80068b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005970:	e019      	b.n	80059a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005978:	2b01      	cmp	r3, #1
 800597a:	d103      	bne.n	8005984 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 ff99 	bl	80068b4 <vPortFree>
	}
 8005982:	e010      	b.n	80059a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800598a:	2b02      	cmp	r3, #2
 800598c:	d00b      	beq.n	80059a6 <prvDeleteTCB+0x62>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60fb      	str	r3, [r7, #12]
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	e7fd      	b.n	80059a2 <prvDeleteTCB+0x5e>
	}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059b6:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <prvResetNextTaskUnblockTime+0x38>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059c0:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <prvResetNextTaskUnblockTime+0x3c>)
 80059c2:	f04f 32ff 	mov.w	r2, #4294967295
 80059c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059c8:	e008      	b.n	80059dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ca:	4b07      	ldr	r3, [pc, #28]	@ (80059e8 <prvResetNextTaskUnblockTime+0x38>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a04      	ldr	r2, [pc, #16]	@ (80059ec <prvResetNextTaskUnblockTime+0x3c>)
 80059da:	6013      	str	r3, [r2, #0]
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	20000dcc 	.word	0x20000dcc
 80059ec:	20000e34 	.word	0x20000e34

080059f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a24 <xTaskGetSchedulerState+0x34>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059fe:	2301      	movs	r3, #1
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	e008      	b.n	8005a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a04:	4b08      	ldr	r3, [pc, #32]	@ (8005a28 <xTaskGetSchedulerState+0x38>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	e001      	b.n	8005a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a16:	687b      	ldr	r3, [r7, #4]
	}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	20000e20 	.word	0x20000e20
 8005a28:	20000e3c 	.word	0x20000e3c

08005a2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d058      	beq.n	8005af4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a42:	4b2f      	ldr	r3, [pc, #188]	@ (8005b00 <xTaskPriorityDisinherit+0xd4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d00b      	beq.n	8005a64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	60bb      	str	r3, [r7, #8]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a88:	1e5a      	subs	r2, r3, #1
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d02c      	beq.n	8005af4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d128      	bne.n	8005af4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe faf2 	bl	8004090 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <xTaskPriorityDisinherit+0xd8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d903      	bls.n	8005ad4 <xTaskPriorityDisinherit+0xa8>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8005b04 <xTaskPriorityDisinherit+0xd8>)
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4a09      	ldr	r2, [pc, #36]	@ (8005b08 <xTaskPriorityDisinherit+0xdc>)
 8005ae2:	441a      	add	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f7fe fa73 	bl	8003fd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005af0:	2301      	movs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005af4:	697b      	ldr	r3, [r7, #20]
	}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000940 	.word	0x20000940
 8005b04:	20000e1c 	.word	0x20000e1c
 8005b08:	20000944 	.word	0x20000944

08005b0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b16:	4b21      	ldr	r3, [pc, #132]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b1c:	4b20      	ldr	r3, [pc, #128]	@ (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fab4 	bl	8004090 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d10a      	bne.n	8005b46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4819      	ldr	r0, [pc, #100]	@ (8005ba4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b40:	f7fe fa49 	bl	8003fd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b44:	e026      	b.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b4e:	4b14      	ldr	r3, [pc, #80]	@ (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d209      	bcs.n	8005b72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ba8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f7fe fa57 	bl	800401e <vListInsert>
}
 8005b70:	e010      	b.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b72:	4b0e      	ldr	r3, [pc, #56]	@ (8005bac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fe fa4d 	bl	800401e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b84:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d202      	bcs.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b8e:	4a08      	ldr	r2, [pc, #32]	@ (8005bb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000e18 	.word	0x20000e18
 8005ba0:	20000940 	.word	0x20000940
 8005ba4:	20000e00 	.word	0x20000e00
 8005ba8:	20000dd0 	.word	0x20000dd0
 8005bac:	20000dcc 	.word	0x20000dcc
 8005bb0:	20000e34 	.word	0x20000e34

08005bb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	@ 0x28
 8005bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bbe:	f000 fb13 	bl	80061e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005c38 <xTimerCreateTimerTask+0x84>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d021      	beq.n	8005c0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bd2:	1d3a      	adds	r2, r7, #4
 8005bd4:	f107 0108 	add.w	r1, r7, #8
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe f9b3 	bl	8003f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	9202      	str	r2, [sp, #8]
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	2302      	movs	r3, #2
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	460a      	mov	r2, r1
 8005bf4:	4911      	ldr	r1, [pc, #68]	@ (8005c3c <xTimerCreateTimerTask+0x88>)
 8005bf6:	4812      	ldr	r0, [pc, #72]	@ (8005c40 <xTimerCreateTimerTask+0x8c>)
 8005bf8:	f7ff f82c 	bl	8004c54 <xTaskCreateStatic>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	4a11      	ldr	r2, [pc, #68]	@ (8005c44 <xTimerCreateTimerTask+0x90>)
 8005c00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c02:	4b10      	ldr	r3, [pc, #64]	@ (8005c44 <xTimerCreateTimerTask+0x90>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	613b      	str	r3, [r7, #16]
}
 8005c26:	bf00      	nop
 8005c28:	bf00      	nop
 8005c2a:	e7fd      	b.n	8005c28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c2c:	697b      	ldr	r3, [r7, #20]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000e70 	.word	0x20000e70
 8005c3c:	08007f38 	.word	0x08007f38
 8005c40:	08005d81 	.word	0x08005d81
 8005c44:	20000e74 	.word	0x20000e74

08005c48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	@ 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <xTimerGenericCommand+0x30>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	623b      	str	r3, [r7, #32]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c78:	4b19      	ldr	r3, [pc, #100]	@ (8005ce0 <xTimerGenericCommand+0x98>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02a      	beq.n	8005cd6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	dc18      	bgt.n	8005cc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c92:	f7ff fead 	bl	80059f0 <xTaskGetSchedulerState>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d109      	bne.n	8005cb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ce0 <xTimerGenericCommand+0x98>)
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	f107 0110 	add.w	r1, r7, #16
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca8:	f7fe fb62 	bl	8004370 <xQueueGenericSend>
 8005cac:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cae:	e012      	b.n	8005cd6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce0 <xTimerGenericCommand+0x98>)
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	f107 0110 	add.w	r1, r7, #16
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f7fe fb58 	bl	8004370 <xQueueGenericSend>
 8005cc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cc2:	e008      	b.n	8005cd6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cc4:	4b06      	ldr	r3, [pc, #24]	@ (8005ce0 <xTimerGenericCommand+0x98>)
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	f107 0110 	add.w	r1, r7, #16
 8005ccc:	2300      	movs	r3, #0
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	f7fe fc50 	bl	8004574 <xQueueGenericSendFromISR>
 8005cd4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3728      	adds	r7, #40	@ 0x28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000e70 	.word	0x20000e70

08005ce4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cee:	4b23      	ldr	r3, [pc, #140]	@ (8005d7c <prvProcessExpiredTimer+0x98>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe f9c7 	bl	8004090 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d023      	beq.n	8005d58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	18d1      	adds	r1, r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	6978      	ldr	r0, [r7, #20]
 8005d1e:	f000 f8d5 	bl	8005ecc <prvInsertTimerInActiveList>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	2100      	movs	r1, #0
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	f7ff ff88 	bl	8005c48 <xTimerGenericCommand>
 8005d38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d114      	bne.n	8005d6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	60fb      	str	r3, [r7, #12]
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	6978      	ldr	r0, [r7, #20]
 8005d70:	4798      	blx	r3
}
 8005d72:	bf00      	nop
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000e68 	.word	0x20000e68

08005d80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d88:	f107 0308 	add.w	r3, r7, #8
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 f859 	bl	8005e44 <prvGetNextExpireTime>
 8005d92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4619      	mov	r1, r3
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f805 	bl	8005da8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d9e:	f000 f8d7 	bl	8005f50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005da2:	bf00      	nop
 8005da4:	e7f0      	b.n	8005d88 <prvTimerTask+0x8>
	...

08005da8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005db2:	f7ff fa27 	bl	8005204 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f866 	bl	8005e8c <prvSampleTimeNow>
 8005dc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d130      	bne.n	8005e2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <prvProcessTimerOrBlockTask+0x3c>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d806      	bhi.n	8005de4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005dd6:	f7ff fa23 	bl	8005220 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff81 	bl	8005ce4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005de2:	e024      	b.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005dea:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <prvProcessTimerOrBlockTask+0x90>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <prvProcessTimerOrBlockTask+0x50>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <prvProcessTimerOrBlockTask+0x52>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e3c <prvProcessTimerOrBlockTask+0x94>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f7fe feef 	bl	8004bec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e0e:	f7ff fa07 	bl	8005220 <xTaskResumeAll>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e18:	4b09      	ldr	r3, [pc, #36]	@ (8005e40 <prvProcessTimerOrBlockTask+0x98>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
}
 8005e28:	e001      	b.n	8005e2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e2a:	f7ff f9f9 	bl	8005220 <xTaskResumeAll>
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000e6c 	.word	0x20000e6c
 8005e3c:	20000e70 	.word	0x20000e70
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005e88 <prvGetNextExpireTime+0x44>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <prvGetNextExpireTime+0x16>
 8005e56:	2201      	movs	r2, #1
 8005e58:	e000      	b.n	8005e5c <prvGetNextExpireTime+0x18>
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e68:	4b07      	ldr	r3, [pc, #28]	@ (8005e88 <prvGetNextExpireTime+0x44>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e001      	b.n	8005e78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e78:	68fb      	ldr	r3, [r7, #12]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000e68 	.word	0x20000e68

08005e8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e94:	f7ff fa62 	bl	800535c <xTaskGetTickCount>
 8005e98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec8 <prvSampleTimeNow+0x3c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d205      	bcs.n	8005eb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ea4:	f000 f93a 	bl	800611c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eb6:	4a04      	ldr	r2, [pc, #16]	@ (8005ec8 <prvSampleTimeNow+0x3c>)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000e78 	.word	0x20000e78

08005ecc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d812      	bhi.n	8005f18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e01b      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f06:	4b10      	ldr	r3, [pc, #64]	@ (8005f48 <prvInsertTimerInActiveList+0x7c>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7fe f884 	bl	800401e <vListInsert>
 8005f16:	e012      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d206      	bcs.n	8005f2e <prvInsertTimerInActiveList+0x62>
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d302      	bcc.n	8005f2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e007      	b.n	8005f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2e:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <prvInsertTimerInActiveList+0x80>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4619      	mov	r1, r3
 8005f38:	4610      	mov	r0, r2
 8005f3a:	f7fe f870 	bl	800401e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f3e:	697b      	ldr	r3, [r7, #20]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000e6c 	.word	0x20000e6c
 8005f4c:	20000e68 	.word	0x20000e68

08005f50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08e      	sub	sp, #56	@ 0x38
 8005f54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f56:	e0ce      	b.n	80060f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da19      	bge.n	8005f92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f5e:	1d3b      	adds	r3, r7, #4
 8005f60:	3304      	adds	r3, #4
 8005f62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	61fb      	str	r3, [r7, #28]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f88:	6850      	ldr	r0, [r2, #4]
 8005f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f8c:	6892      	ldr	r2, [r2, #8]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f2c0 80ae 	blt.w	80060f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d004      	beq.n	8005fb0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe f870 	bl	8004090 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff ff6a 	bl	8005e8c <prvSampleTimeNow>
 8005fb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	f200 8097 	bhi.w	80060f0 <prvProcessReceivedCommands+0x1a0>
 8005fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc8 <prvProcessReceivedCommands+0x78>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	08005ff1 	.word	0x08005ff1
 8005fd4:	08006067 	.word	0x08006067
 8005fd8:	0800607b 	.word	0x0800607b
 8005fdc:	080060c7 	.word	0x080060c7
 8005fe0:	08005ff1 	.word	0x08005ff1
 8005fe4:	08005ff1 	.word	0x08005ff1
 8005fe8:	08006067 	.word	0x08006067
 8005fec:	0800607b 	.word	0x0800607b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	18d1      	adds	r1, r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006010:	f7ff ff5c 	bl	8005ecc <prvInsertTimerInActiveList>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d06c      	beq.n	80060f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800601a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006020:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d061      	beq.n	80060f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	441a      	add	r2, r3
 8006038:	2300      	movs	r3, #0
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2300      	movs	r3, #0
 800603e:	2100      	movs	r1, #0
 8006040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006042:	f7ff fe01 	bl	8005c48 <xTimerGenericCommand>
 8006046:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d152      	bne.n	80060f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	61bb      	str	r3, [r7, #24]
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	e7fd      	b.n	8006062 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	b2da      	uxtb	r2, r3
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006078:	e03d      	b.n	80060f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	b2da      	uxtb	r2, r3
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	617b      	str	r3, [r7, #20]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	18d1      	adds	r1, r2, r3
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060c0:	f7ff ff04 	bl	8005ecc <prvInsertTimerInActiveList>
					break;
 80060c4:	e017      	b.n	80060f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80060d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060d6:	f000 fbed 	bl	80068b4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060da:	e00c      	b.n	80060f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80060ee:	e002      	b.n	80060f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80060f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060f6:	4b08      	ldr	r3, [pc, #32]	@ (8006118 <prvProcessReceivedCommands+0x1c8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	1d39      	adds	r1, r7, #4
 80060fc:	2200      	movs	r2, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe fad6 	bl	80046b0 <xQueueReceive>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f47f af26 	bne.w	8005f58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	3730      	adds	r7, #48	@ 0x30
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000e70 	.word	0x20000e70

0800611c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006122:	e049      	b.n	80061b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006124:	4b2e      	ldr	r3, [pc, #184]	@ (80061e0 <prvSwitchTimerLists+0xc4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800612e:	4b2c      	ldr	r3, [pc, #176]	@ (80061e0 <prvSwitchTimerLists+0xc4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3304      	adds	r3, #4
 800613c:	4618      	mov	r0, r3
 800613e:	f7fd ffa7 	bl	8004090 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d02f      	beq.n	80061b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4413      	add	r3, r2
 8006160:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	429a      	cmp	r2, r3
 8006168:	d90e      	bls.n	8006188 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006176:	4b1a      	ldr	r3, [pc, #104]	@ (80061e0 <prvSwitchTimerLists+0xc4>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f7fd ff4c 	bl	800401e <vListInsert>
 8006186:	e017      	b.n	80061b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006188:	2300      	movs	r3, #0
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	2100      	movs	r1, #0
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff fd58 	bl	8005c48 <xTimerGenericCommand>
 8006198:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	603b      	str	r3, [r7, #0]
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061b8:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <prvSwitchTimerLists+0xc4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1b0      	bne.n	8006124 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061c2:	4b07      	ldr	r3, [pc, #28]	@ (80061e0 <prvSwitchTimerLists+0xc4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <prvSwitchTimerLists+0xc8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a04      	ldr	r2, [pc, #16]	@ (80061e0 <prvSwitchTimerLists+0xc4>)
 80061ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061d0:	4a04      	ldr	r2, [pc, #16]	@ (80061e4 <prvSwitchTimerLists+0xc8>)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	6013      	str	r3, [r2, #0]
}
 80061d6:	bf00      	nop
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000e68 	.word	0x20000e68
 80061e4:	20000e6c 	.word	0x20000e6c

080061e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061ee:	f000 f96b 	bl	80064c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061f2:	4b15      	ldr	r3, [pc, #84]	@ (8006248 <prvCheckForValidListAndQueue+0x60>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d120      	bne.n	800623c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061fa:	4814      	ldr	r0, [pc, #80]	@ (800624c <prvCheckForValidListAndQueue+0x64>)
 80061fc:	f7fd febe 	bl	8003f7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006200:	4813      	ldr	r0, [pc, #76]	@ (8006250 <prvCheckForValidListAndQueue+0x68>)
 8006202:	f7fd febb 	bl	8003f7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006206:	4b13      	ldr	r3, [pc, #76]	@ (8006254 <prvCheckForValidListAndQueue+0x6c>)
 8006208:	4a10      	ldr	r2, [pc, #64]	@ (800624c <prvCheckForValidListAndQueue+0x64>)
 800620a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800620c:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <prvCheckForValidListAndQueue+0x70>)
 800620e:	4a10      	ldr	r2, [pc, #64]	@ (8006250 <prvCheckForValidListAndQueue+0x68>)
 8006210:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	4b11      	ldr	r3, [pc, #68]	@ (800625c <prvCheckForValidListAndQueue+0x74>)
 8006218:	4a11      	ldr	r2, [pc, #68]	@ (8006260 <prvCheckForValidListAndQueue+0x78>)
 800621a:	2110      	movs	r1, #16
 800621c:	200a      	movs	r0, #10
 800621e:	f7fd ffcb 	bl	80041b8 <xQueueGenericCreateStatic>
 8006222:	4603      	mov	r3, r0
 8006224:	4a08      	ldr	r2, [pc, #32]	@ (8006248 <prvCheckForValidListAndQueue+0x60>)
 8006226:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006228:	4b07      	ldr	r3, [pc, #28]	@ (8006248 <prvCheckForValidListAndQueue+0x60>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006230:	4b05      	ldr	r3, [pc, #20]	@ (8006248 <prvCheckForValidListAndQueue+0x60>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	490b      	ldr	r1, [pc, #44]	@ (8006264 <prvCheckForValidListAndQueue+0x7c>)
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fcae 	bl	8004b98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800623c:	f000 f976 	bl	800652c <vPortExitCritical>
}
 8006240:	bf00      	nop
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000e70 	.word	0x20000e70
 800624c:	20000e40 	.word	0x20000e40
 8006250:	20000e54 	.word	0x20000e54
 8006254:	20000e68 	.word	0x20000e68
 8006258:	20000e6c 	.word	0x20000e6c
 800625c:	20000f1c 	.word	0x20000f1c
 8006260:	20000e7c 	.word	0x20000e7c
 8006264:	08007f40 	.word	0x08007f40

08006268 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3b04      	subs	r3, #4
 8006278:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3b04      	subs	r3, #4
 8006286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f023 0201 	bic.w	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3b04      	subs	r3, #4
 8006296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006298:	4a0c      	ldr	r2, [pc, #48]	@ (80062cc <pxPortInitialiseStack+0x64>)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3b14      	subs	r3, #20
 80062a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f06f 0202 	mvn.w	r2, #2
 80062b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3b20      	subs	r3, #32
 80062bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	080062d1 	.word	0x080062d1

080062d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062da:	4b13      	ldr	r3, [pc, #76]	@ (8006328 <prvTaskExitError+0x58>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d00b      	beq.n	80062fc <prvTaskExitError+0x2c>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	60fb      	str	r3, [r7, #12]
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	e7fd      	b.n	80062f8 <prvTaskExitError+0x28>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60bb      	str	r3, [r7, #8]
}
 800630e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006310:	bf00      	nop
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0fc      	beq.n	8006312 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	2000000c 	.word	0x2000000c
 800632c:	00000000 	.word	0x00000000

08006330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006330:	4b07      	ldr	r3, [pc, #28]	@ (8006350 <pxCurrentTCBConst2>)
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	6808      	ldr	r0, [r1, #0]
 8006336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633a:	f380 8809 	msr	PSP, r0
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8811 	msr	BASEPRI, r0
 800634a:	4770      	bx	lr
 800634c:	f3af 8000 	nop.w

08006350 <pxCurrentTCBConst2>:
 8006350:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006358:	4808      	ldr	r0, [pc, #32]	@ (800637c <prvPortStartFirstTask+0x24>)
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	6800      	ldr	r0, [r0, #0]
 800635e:	f380 8808 	msr	MSP, r0
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f380 8814 	msr	CONTROL, r0
 800636a:	b662      	cpsie	i
 800636c:	b661      	cpsie	f
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	df00      	svc	0
 8006378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800637a:	bf00      	nop
 800637c:	e000ed08 	.word	0xe000ed08

08006380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006386:	4b47      	ldr	r3, [pc, #284]	@ (80064a4 <xPortStartScheduler+0x124>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a47      	ldr	r2, [pc, #284]	@ (80064a8 <xPortStartScheduler+0x128>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d10b      	bne.n	80063a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	60fb      	str	r3, [r7, #12]
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063a8:	4b3e      	ldr	r3, [pc, #248]	@ (80064a4 <xPortStartScheduler+0x124>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a3f      	ldr	r2, [pc, #252]	@ (80064ac <xPortStartScheduler+0x12c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10b      	bne.n	80063ca <xPortStartScheduler+0x4a>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	613b      	str	r3, [r7, #16]
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063ca:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <xPortStartScheduler+0x130>)
 80063cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	22ff      	movs	r2, #255	@ 0xff
 80063da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	4b31      	ldr	r3, [pc, #196]	@ (80064b4 <xPortStartScheduler+0x134>)
 80063f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063f2:	4b31      	ldr	r3, [pc, #196]	@ (80064b8 <xPortStartScheduler+0x138>)
 80063f4:	2207      	movs	r2, #7
 80063f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063f8:	e009      	b.n	800640e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80063fa:	4b2f      	ldr	r3, [pc, #188]	@ (80064b8 <xPortStartScheduler+0x138>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3b01      	subs	r3, #1
 8006400:	4a2d      	ldr	r2, [pc, #180]	@ (80064b8 <xPortStartScheduler+0x138>)
 8006402:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006416:	2b80      	cmp	r3, #128	@ 0x80
 8006418:	d0ef      	beq.n	80063fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800641a:	4b27      	ldr	r3, [pc, #156]	@ (80064b8 <xPortStartScheduler+0x138>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1c3 0307 	rsb	r3, r3, #7
 8006422:	2b04      	cmp	r3, #4
 8006424:	d00b      	beq.n	800643e <xPortStartScheduler+0xbe>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60bb      	str	r3, [r7, #8]
}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	e7fd      	b.n	800643a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800643e:	4b1e      	ldr	r3, [pc, #120]	@ (80064b8 <xPortStartScheduler+0x138>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	4a1c      	ldr	r2, [pc, #112]	@ (80064b8 <xPortStartScheduler+0x138>)
 8006446:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006448:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <xPortStartScheduler+0x138>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006450:	4a19      	ldr	r2, [pc, #100]	@ (80064b8 <xPortStartScheduler+0x138>)
 8006452:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800645c:	4b17      	ldr	r3, [pc, #92]	@ (80064bc <xPortStartScheduler+0x13c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <xPortStartScheduler+0x13c>)
 8006462:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006466:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006468:	4b14      	ldr	r3, [pc, #80]	@ (80064bc <xPortStartScheduler+0x13c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a13      	ldr	r2, [pc, #76]	@ (80064bc <xPortStartScheduler+0x13c>)
 800646e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006472:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006474:	f000 f8da 	bl	800662c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006478:	4b11      	ldr	r3, [pc, #68]	@ (80064c0 <xPortStartScheduler+0x140>)
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800647e:	f000 f8f9 	bl	8006674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006482:	4b10      	ldr	r3, [pc, #64]	@ (80064c4 <xPortStartScheduler+0x144>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a0f      	ldr	r2, [pc, #60]	@ (80064c4 <xPortStartScheduler+0x144>)
 8006488:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800648c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800648e:	f7ff ff63 	bl	8006358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006492:	f7ff f82d 	bl	80054f0 <vTaskSwitchContext>
	prvTaskExitError();
 8006496:	f7ff ff1b 	bl	80062d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	e000ed00 	.word	0xe000ed00
 80064a8:	410fc271 	.word	0x410fc271
 80064ac:	410fc270 	.word	0x410fc270
 80064b0:	e000e400 	.word	0xe000e400
 80064b4:	20000f6c 	.word	0x20000f6c
 80064b8:	20000f70 	.word	0x20000f70
 80064bc:	e000ed20 	.word	0xe000ed20
 80064c0:	2000000c 	.word	0x2000000c
 80064c4:	e000ef34 	.word	0xe000ef34

080064c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	607b      	str	r3, [r7, #4]
}
 80064e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064e2:	4b10      	ldr	r3, [pc, #64]	@ (8006524 <vPortEnterCritical+0x5c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3301      	adds	r3, #1
 80064e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006524 <vPortEnterCritical+0x5c>)
 80064ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <vPortEnterCritical+0x5c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d110      	bne.n	8006516 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <vPortEnterCritical+0x60>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <vPortEnterCritical+0x4e>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	603b      	str	r3, [r7, #0]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <vPortEnterCritical+0x4a>
	}
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	2000000c 	.word	0x2000000c
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006532:	4b12      	ldr	r3, [pc, #72]	@ (800657c <vPortExitCritical+0x50>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <vPortExitCritical+0x26>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	607b      	str	r3, [r7, #4]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006552:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <vPortExitCritical+0x50>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3b01      	subs	r3, #1
 8006558:	4a08      	ldr	r2, [pc, #32]	@ (800657c <vPortExitCritical+0x50>)
 800655a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800655c:	4b07      	ldr	r3, [pc, #28]	@ (800657c <vPortExitCritical+0x50>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d105      	bne.n	8006570 <vPortExitCritical+0x44>
 8006564:	2300      	movs	r3, #0
 8006566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f383 8811 	msr	BASEPRI, r3
}
 800656e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	2000000c 	.word	0x2000000c

08006580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006580:	f3ef 8009 	mrs	r0, PSP
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	4b15      	ldr	r3, [pc, #84]	@ (80065e0 <pxCurrentTCBConst>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f01e 0f10 	tst.w	lr, #16
 8006590:	bf08      	it	eq
 8006592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	6010      	str	r0, [r2, #0]
 800659c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065a4:	f380 8811 	msr	BASEPRI, r0
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f7fe ff9e 	bl	80054f0 <vTaskSwitchContext>
 80065b4:	f04f 0000 	mov.w	r0, #0
 80065b8:	f380 8811 	msr	BASEPRI, r0
 80065bc:	bc09      	pop	{r0, r3}
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	6808      	ldr	r0, [r1, #0]
 80065c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c6:	f01e 0f10 	tst.w	lr, #16
 80065ca:	bf08      	it	eq
 80065cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065d0:	f380 8809 	msr	PSP, r0
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst>:
 80065e0:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006602:	f7fe febb 	bl	800537c <xTaskIncrementTick>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800660c:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <xPortSysTickHandler+0x40>)
 800660e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	f383 8811 	msr	BASEPRI, r3
}
 800661e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006630:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <vPortSetupTimerInterrupt+0x34>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006636:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <vPortSetupTimerInterrupt+0x38>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800663c:	4b0a      	ldr	r3, [pc, #40]	@ (8006668 <vPortSetupTimerInterrupt+0x3c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a0a      	ldr	r2, [pc, #40]	@ (800666c <vPortSetupTimerInterrupt+0x40>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	4a09      	ldr	r2, [pc, #36]	@ (8006670 <vPortSetupTimerInterrupt+0x44>)
 800664a:	3b01      	subs	r3, #1
 800664c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800664e:	4b04      	ldr	r3, [pc, #16]	@ (8006660 <vPortSetupTimerInterrupt+0x34>)
 8006650:	2207      	movs	r2, #7
 8006652:	601a      	str	r2, [r3, #0]
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	e000e010 	.word	0xe000e010
 8006664:	e000e018 	.word	0xe000e018
 8006668:	20000000 	.word	0x20000000
 800666c:	10624dd3 	.word	0x10624dd3
 8006670:	e000e014 	.word	0xe000e014

08006674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006674:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006684 <vPortEnableVFP+0x10>
 8006678:	6801      	ldr	r1, [r0, #0]
 800667a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800667e:	6001      	str	r1, [r0, #0]
 8006680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006682:	bf00      	nop
 8006684:	e000ed88 	.word	0xe000ed88

08006688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800668e:	f3ef 8305 	mrs	r3, IPSR
 8006692:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	d915      	bls.n	80066c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800669a:	4a18      	ldr	r2, [pc, #96]	@ (80066fc <vPortValidateInterruptPriority+0x74>)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066a4:	4b16      	ldr	r3, [pc, #88]	@ (8006700 <vPortValidateInterruptPriority+0x78>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	7afa      	ldrb	r2, [r7, #11]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d20b      	bcs.n	80066c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	607b      	str	r3, [r7, #4]
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	e7fd      	b.n	80066c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006704 <vPortValidateInterruptPriority+0x7c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006708 <vPortValidateInterruptPriority+0x80>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d90b      	bls.n	80066ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	603b      	str	r3, [r7, #0]
}
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	e7fd      	b.n	80066ea <vPortValidateInterruptPriority+0x62>
	}
 80066ee:	bf00      	nop
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	e000e3f0 	.word	0xe000e3f0
 8006700:	20000f6c 	.word	0x20000f6c
 8006704:	e000ed0c 	.word	0xe000ed0c
 8006708:	20000f70 	.word	0x20000f70

0800670c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08a      	sub	sp, #40	@ 0x28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006718:	f7fe fd74 	bl	8005204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800671c:	4b5f      	ldr	r3, [pc, #380]	@ (800689c <pvPortMalloc+0x190>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006724:	f000 f92a 	bl	800697c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006728:	4b5d      	ldr	r3, [pc, #372]	@ (80068a0 <pvPortMalloc+0x194>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4013      	ands	r3, r2
 8006730:	2b00      	cmp	r3, #0
 8006732:	f040 8095 	bne.w	8006860 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01e      	beq.n	800677a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800673c:	2208      	movs	r2, #8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4413      	add	r3, r2
 8006742:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	2b00      	cmp	r3, #0
 800674c:	d015      	beq.n	800677a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f023 0307 	bic.w	r3, r3, #7
 8006754:	3308      	adds	r3, #8
 8006756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00b      	beq.n	800677a <pvPortMalloc+0x6e>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	617b      	str	r3, [r7, #20]
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d06f      	beq.n	8006860 <pvPortMalloc+0x154>
 8006780:	4b48      	ldr	r3, [pc, #288]	@ (80068a4 <pvPortMalloc+0x198>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	d86a      	bhi.n	8006860 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800678a:	4b47      	ldr	r3, [pc, #284]	@ (80068a8 <pvPortMalloc+0x19c>)
 800678c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800678e:	4b46      	ldr	r3, [pc, #280]	@ (80068a8 <pvPortMalloc+0x19c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006794:	e004      	b.n	80067a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d903      	bls.n	80067b2 <pvPortMalloc+0xa6>
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f1      	bne.n	8006796 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067b2:	4b3a      	ldr	r3, [pc, #232]	@ (800689c <pvPortMalloc+0x190>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d051      	beq.n	8006860 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2208      	movs	r2, #8
 80067c2:	4413      	add	r3, r2
 80067c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	1ad2      	subs	r2, r2, r3
 80067d6:	2308      	movs	r3, #8
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	429a      	cmp	r2, r3
 80067dc:	d920      	bls.n	8006820 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <pvPortMalloc+0xfc>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	613b      	str	r3, [r7, #16]
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	e7fd      	b.n	8006804 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	1ad2      	subs	r2, r2, r3
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800681a:	69b8      	ldr	r0, [r7, #24]
 800681c:	f000 f910 	bl	8006a40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006820:	4b20      	ldr	r3, [pc, #128]	@ (80068a4 <pvPortMalloc+0x198>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	4a1e      	ldr	r2, [pc, #120]	@ (80068a4 <pvPortMalloc+0x198>)
 800682c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800682e:	4b1d      	ldr	r3, [pc, #116]	@ (80068a4 <pvPortMalloc+0x198>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b1e      	ldr	r3, [pc, #120]	@ (80068ac <pvPortMalloc+0x1a0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d203      	bcs.n	8006842 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800683a:	4b1a      	ldr	r3, [pc, #104]	@ (80068a4 <pvPortMalloc+0x198>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1b      	ldr	r2, [pc, #108]	@ (80068ac <pvPortMalloc+0x1a0>)
 8006840:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4b16      	ldr	r3, [pc, #88]	@ (80068a0 <pvPortMalloc+0x194>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	431a      	orrs	r2, r3
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006856:	4b16      	ldr	r3, [pc, #88]	@ (80068b0 <pvPortMalloc+0x1a4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3301      	adds	r3, #1
 800685c:	4a14      	ldr	r2, [pc, #80]	@ (80068b0 <pvPortMalloc+0x1a4>)
 800685e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006860:	f7fe fcde 	bl	8005220 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800686a:	f7f9 fed6 	bl	800061a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <pvPortMalloc+0x184>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
}
 800688a:	bf00      	nop
 800688c:	bf00      	nop
 800688e:	e7fd      	b.n	800688c <pvPortMalloc+0x180>
	return pvReturn;
 8006890:	69fb      	ldr	r3, [r7, #28]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3728      	adds	r7, #40	@ 0x28
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20004b7c 	.word	0x20004b7c
 80068a0:	20004b90 	.word	0x20004b90
 80068a4:	20004b80 	.word	0x20004b80
 80068a8:	20004b74 	.word	0x20004b74
 80068ac:	20004b84 	.word	0x20004b84
 80068b0:	20004b88 	.word	0x20004b88

080068b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d04f      	beq.n	8006966 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068c6:	2308      	movs	r3, #8
 80068c8:	425b      	negs	r3, r3
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4413      	add	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4b25      	ldr	r3, [pc, #148]	@ (8006970 <vPortFree+0xbc>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10b      	bne.n	80068fa <vPortFree+0x46>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	60fb      	str	r3, [r7, #12]
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <vPortFree+0x66>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	60bb      	str	r3, [r7, #8]
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	e7fd      	b.n	8006916 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	4b14      	ldr	r3, [pc, #80]	@ (8006970 <vPortFree+0xbc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4013      	ands	r3, r2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01e      	beq.n	8006966 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d11a      	bne.n	8006966 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	4b0e      	ldr	r3, [pc, #56]	@ (8006970 <vPortFree+0xbc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	43db      	mvns	r3, r3
 800693a:	401a      	ands	r2, r3
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006940:	f7fe fc60 	bl	8005204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	4b0a      	ldr	r3, [pc, #40]	@ (8006974 <vPortFree+0xc0>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4413      	add	r3, r2
 800694e:	4a09      	ldr	r2, [pc, #36]	@ (8006974 <vPortFree+0xc0>)
 8006950:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006952:	6938      	ldr	r0, [r7, #16]
 8006954:	f000 f874 	bl	8006a40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006958:	4b07      	ldr	r3, [pc, #28]	@ (8006978 <vPortFree+0xc4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	4a06      	ldr	r2, [pc, #24]	@ (8006978 <vPortFree+0xc4>)
 8006960:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006962:	f7fe fc5d 	bl	8005220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006966:	bf00      	nop
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20004b90 	.word	0x20004b90
 8006974:	20004b80 	.word	0x20004b80
 8006978:	20004b8c 	.word	0x20004b8c

0800697c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006982:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006986:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006988:	4b27      	ldr	r3, [pc, #156]	@ (8006a28 <prvHeapInit+0xac>)
 800698a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00c      	beq.n	80069b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3307      	adds	r3, #7
 800699a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f023 0307 	bic.w	r3, r3, #7
 80069a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006a28 <prvHeapInit+0xac>)
 80069ac:	4413      	add	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069b4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a2c <prvHeapInit+0xb0>)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069ba:	4b1c      	ldr	r3, [pc, #112]	@ (8006a2c <prvHeapInit+0xb0>)
 80069bc:	2200      	movs	r2, #0
 80069be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	4413      	add	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069c8:	2208      	movs	r2, #8
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0307 	bic.w	r3, r3, #7
 80069d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4a15      	ldr	r2, [pc, #84]	@ (8006a30 <prvHeapInit+0xb4>)
 80069dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069de:	4b14      	ldr	r3, [pc, #80]	@ (8006a30 <prvHeapInit+0xb4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069e6:	4b12      	ldr	r3, [pc, #72]	@ (8006a30 <prvHeapInit+0xb4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <prvHeapInit+0xb4>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4a0a      	ldr	r2, [pc, #40]	@ (8006a34 <prvHeapInit+0xb8>)
 8006a0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a09      	ldr	r2, [pc, #36]	@ (8006a38 <prvHeapInit+0xbc>)
 8006a12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a14:	4b09      	ldr	r3, [pc, #36]	@ (8006a3c <prvHeapInit+0xc0>)
 8006a16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a1a:	601a      	str	r2, [r3, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	20000f74 	.word	0x20000f74
 8006a2c:	20004b74 	.word	0x20004b74
 8006a30:	20004b7c 	.word	0x20004b7c
 8006a34:	20004b84 	.word	0x20004b84
 8006a38:	20004b80 	.word	0x20004b80
 8006a3c:	20004b90 	.word	0x20004b90

08006a40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a48:	4b28      	ldr	r3, [pc, #160]	@ (8006aec <prvInsertBlockIntoFreeList+0xac>)
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e002      	b.n	8006a54 <prvInsertBlockIntoFreeList+0x14>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d8f7      	bhi.n	8006a4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	4413      	add	r3, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d108      	bne.n	8006a82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	441a      	add	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d118      	bne.n	8006ac8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b15      	ldr	r3, [pc, #84]	@ (8006af0 <prvInsertBlockIntoFreeList+0xb0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d00d      	beq.n	8006abe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	441a      	add	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e008      	b.n	8006ad0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006abe:	4b0c      	ldr	r3, [pc, #48]	@ (8006af0 <prvInsertBlockIntoFreeList+0xb0>)
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e003      	b.n	8006ad0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d002      	beq.n	8006ade <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	20004b74 	.word	0x20004b74
 8006af0:	20004b7c 	.word	0x20004b7c

08006af4 <std>:
 8006af4:	2300      	movs	r3, #0
 8006af6:	b510      	push	{r4, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	e9c0 3300 	strd	r3, r3, [r0]
 8006afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b02:	6083      	str	r3, [r0, #8]
 8006b04:	8181      	strh	r1, [r0, #12]
 8006b06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b08:	81c2      	strh	r2, [r0, #14]
 8006b0a:	6183      	str	r3, [r0, #24]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	2208      	movs	r2, #8
 8006b10:	305c      	adds	r0, #92	@ 0x5c
 8006b12:	f000 f93c 	bl	8006d8e <memset>
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <std+0x58>)
 8006b18:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <std+0x5c>)
 8006b1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <std+0x60>)
 8006b20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b22:	4b0d      	ldr	r3, [pc, #52]	@ (8006b58 <std+0x64>)
 8006b24:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <std+0x68>)
 8006b28:	6224      	str	r4, [r4, #32]
 8006b2a:	429c      	cmp	r4, r3
 8006b2c:	d006      	beq.n	8006b3c <std+0x48>
 8006b2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b32:	4294      	cmp	r4, r2
 8006b34:	d002      	beq.n	8006b3c <std+0x48>
 8006b36:	33d0      	adds	r3, #208	@ 0xd0
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	d105      	bne.n	8006b48 <std+0x54>
 8006b3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b44:	f000 b9fa 	b.w	8006f3c <__retarget_lock_init_recursive>
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	bf00      	nop
 8006b4c:	08006d09 	.word	0x08006d09
 8006b50:	08006d2b 	.word	0x08006d2b
 8006b54:	08006d63 	.word	0x08006d63
 8006b58:	08006d87 	.word	0x08006d87
 8006b5c:	20004b94 	.word	0x20004b94

08006b60 <stdio_exit_handler>:
 8006b60:	4a02      	ldr	r2, [pc, #8]	@ (8006b6c <stdio_exit_handler+0xc>)
 8006b62:	4903      	ldr	r1, [pc, #12]	@ (8006b70 <stdio_exit_handler+0x10>)
 8006b64:	4803      	ldr	r0, [pc, #12]	@ (8006b74 <stdio_exit_handler+0x14>)
 8006b66:	f000 b869 	b.w	8006c3c <_fwalk_sglue>
 8006b6a:	bf00      	nop
 8006b6c:	20000010 	.word	0x20000010
 8006b70:	08007aa5 	.word	0x08007aa5
 8006b74:	20000020 	.word	0x20000020

08006b78 <cleanup_stdio>:
 8006b78:	6841      	ldr	r1, [r0, #4]
 8006b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <cleanup_stdio+0x34>)
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	4604      	mov	r4, r0
 8006b82:	d001      	beq.n	8006b88 <cleanup_stdio+0x10>
 8006b84:	f000 ff8e 	bl	8007aa4 <_fflush_r>
 8006b88:	68a1      	ldr	r1, [r4, #8]
 8006b8a:	4b09      	ldr	r3, [pc, #36]	@ (8006bb0 <cleanup_stdio+0x38>)
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	d002      	beq.n	8006b96 <cleanup_stdio+0x1e>
 8006b90:	4620      	mov	r0, r4
 8006b92:	f000 ff87 	bl	8007aa4 <_fflush_r>
 8006b96:	68e1      	ldr	r1, [r4, #12]
 8006b98:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <cleanup_stdio+0x3c>)
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	d004      	beq.n	8006ba8 <cleanup_stdio+0x30>
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba4:	f000 bf7e 	b.w	8007aa4 <_fflush_r>
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	bf00      	nop
 8006bac:	20004b94 	.word	0x20004b94
 8006bb0:	20004bfc 	.word	0x20004bfc
 8006bb4:	20004c64 	.word	0x20004c64

08006bb8 <global_stdio_init.part.0>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <global_stdio_init.part.0+0x30>)
 8006bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8006bec <global_stdio_init.part.0+0x34>)
 8006bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006bf0 <global_stdio_init.part.0+0x38>)
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	f7ff ff94 	bl	8006af4 <std>
 8006bcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	2109      	movs	r1, #9
 8006bd4:	f7ff ff8e 	bl	8006af4 <std>
 8006bd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bdc:	2202      	movs	r2, #2
 8006bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be2:	2112      	movs	r1, #18
 8006be4:	f7ff bf86 	b.w	8006af4 <std>
 8006be8:	20004ccc 	.word	0x20004ccc
 8006bec:	20004b94 	.word	0x20004b94
 8006bf0:	08006b61 	.word	0x08006b61

08006bf4 <__sfp_lock_acquire>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	@ (8006bfc <__sfp_lock_acquire+0x8>)
 8006bf6:	f000 b9a2 	b.w	8006f3e <__retarget_lock_acquire_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	20004cd5 	.word	0x20004cd5

08006c00 <__sfp_lock_release>:
 8006c00:	4801      	ldr	r0, [pc, #4]	@ (8006c08 <__sfp_lock_release+0x8>)
 8006c02:	f000 b99d 	b.w	8006f40 <__retarget_lock_release_recursive>
 8006c06:	bf00      	nop
 8006c08:	20004cd5 	.word	0x20004cd5

08006c0c <__sinit>:
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	4604      	mov	r4, r0
 8006c10:	f7ff fff0 	bl	8006bf4 <__sfp_lock_acquire>
 8006c14:	6a23      	ldr	r3, [r4, #32]
 8006c16:	b11b      	cbz	r3, 8006c20 <__sinit+0x14>
 8006c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1c:	f7ff bff0 	b.w	8006c00 <__sfp_lock_release>
 8006c20:	4b04      	ldr	r3, [pc, #16]	@ (8006c34 <__sinit+0x28>)
 8006c22:	6223      	str	r3, [r4, #32]
 8006c24:	4b04      	ldr	r3, [pc, #16]	@ (8006c38 <__sinit+0x2c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f5      	bne.n	8006c18 <__sinit+0xc>
 8006c2c:	f7ff ffc4 	bl	8006bb8 <global_stdio_init.part.0>
 8006c30:	e7f2      	b.n	8006c18 <__sinit+0xc>
 8006c32:	bf00      	nop
 8006c34:	08006b79 	.word	0x08006b79
 8006c38:	20004ccc 	.word	0x20004ccc

08006c3c <_fwalk_sglue>:
 8006c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	4607      	mov	r7, r0
 8006c42:	4688      	mov	r8, r1
 8006c44:	4614      	mov	r4, r2
 8006c46:	2600      	movs	r6, #0
 8006c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c50:	d505      	bpl.n	8006c5e <_fwalk_sglue+0x22>
 8006c52:	6824      	ldr	r4, [r4, #0]
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	d1f7      	bne.n	8006c48 <_fwalk_sglue+0xc>
 8006c58:	4630      	mov	r0, r6
 8006c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d907      	bls.n	8006c74 <_fwalk_sglue+0x38>
 8006c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	d003      	beq.n	8006c74 <_fwalk_sglue+0x38>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c0      	blx	r8
 8006c72:	4306      	orrs	r6, r0
 8006c74:	3568      	adds	r5, #104	@ 0x68
 8006c76:	e7e9      	b.n	8006c4c <_fwalk_sglue+0x10>

08006c78 <iprintf>:
 8006c78:	b40f      	push	{r0, r1, r2, r3}
 8006c7a:	b507      	push	{r0, r1, r2, lr}
 8006c7c:	4906      	ldr	r1, [pc, #24]	@ (8006c98 <iprintf+0x20>)
 8006c7e:	ab04      	add	r3, sp, #16
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c86:	6881      	ldr	r1, [r0, #8]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	f000 fbe3 	bl	8007454 <_vfiprintf_r>
 8006c8e:	b003      	add	sp, #12
 8006c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c94:	b004      	add	sp, #16
 8006c96:	4770      	bx	lr
 8006c98:	2000001c 	.word	0x2000001c

08006c9c <sniprintf>:
 8006c9c:	b40c      	push	{r2, r3}
 8006c9e:	b530      	push	{r4, r5, lr}
 8006ca0:	4b18      	ldr	r3, [pc, #96]	@ (8006d04 <sniprintf+0x68>)
 8006ca2:	1e0c      	subs	r4, r1, #0
 8006ca4:	681d      	ldr	r5, [r3, #0]
 8006ca6:	b09d      	sub	sp, #116	@ 0x74
 8006ca8:	da08      	bge.n	8006cbc <sniprintf+0x20>
 8006caa:	238b      	movs	r3, #139	@ 0x8b
 8006cac:	602b      	str	r3, [r5, #0]
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb2:	b01d      	add	sp, #116	@ 0x74
 8006cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cb8:	b002      	add	sp, #8
 8006cba:	4770      	bx	lr
 8006cbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006cc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006cca:	bf14      	ite	ne
 8006ccc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006cd0:	4623      	moveq	r3, r4
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	9307      	str	r3, [sp, #28]
 8006cd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cda:	9002      	str	r0, [sp, #8]
 8006cdc:	9006      	str	r0, [sp, #24]
 8006cde:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ce2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ce4:	ab21      	add	r3, sp, #132	@ 0x84
 8006ce6:	a902      	add	r1, sp, #8
 8006ce8:	4628      	mov	r0, r5
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	f000 fa8c 	bl	8007208 <_svfiprintf_r>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	bfbc      	itt	lt
 8006cf4:	238b      	movlt	r3, #139	@ 0x8b
 8006cf6:	602b      	strlt	r3, [r5, #0]
 8006cf8:	2c00      	cmp	r4, #0
 8006cfa:	d0da      	beq.n	8006cb2 <sniprintf+0x16>
 8006cfc:	9b02      	ldr	r3, [sp, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	e7d6      	b.n	8006cb2 <sniprintf+0x16>
 8006d04:	2000001c 	.word	0x2000001c

08006d08 <__sread>:
 8006d08:	b510      	push	{r4, lr}
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d10:	f000 f8c6 	bl	8006ea0 <_read_r>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	bfab      	itete	ge
 8006d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d1c:	181b      	addge	r3, r3, r0
 8006d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d22:	bfac      	ite	ge
 8006d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d26:	81a3      	strhlt	r3, [r4, #12]
 8006d28:	bd10      	pop	{r4, pc}

08006d2a <__swrite>:
 8006d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2e:	461f      	mov	r7, r3
 8006d30:	898b      	ldrh	r3, [r1, #12]
 8006d32:	05db      	lsls	r3, r3, #23
 8006d34:	4605      	mov	r5, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	4616      	mov	r6, r2
 8006d3a:	d505      	bpl.n	8006d48 <__swrite+0x1e>
 8006d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d40:	2302      	movs	r3, #2
 8006d42:	2200      	movs	r2, #0
 8006d44:	f000 f89a 	bl	8006e7c <_lseek_r>
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d52:	81a3      	strh	r3, [r4, #12]
 8006d54:	4632      	mov	r2, r6
 8006d56:	463b      	mov	r3, r7
 8006d58:	4628      	mov	r0, r5
 8006d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5e:	f000 b8b1 	b.w	8006ec4 <_write_r>

08006d62 <__sseek>:
 8006d62:	b510      	push	{r4, lr}
 8006d64:	460c      	mov	r4, r1
 8006d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6a:	f000 f887 	bl	8006e7c <_lseek_r>
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	bf15      	itete	ne
 8006d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d7e:	81a3      	strheq	r3, [r4, #12]
 8006d80:	bf18      	it	ne
 8006d82:	81a3      	strhne	r3, [r4, #12]
 8006d84:	bd10      	pop	{r4, pc}

08006d86 <__sclose>:
 8006d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d8a:	f000 b809 	b.w	8006da0 <_close_r>

08006d8e <memset>:
 8006d8e:	4402      	add	r2, r0
 8006d90:	4603      	mov	r3, r0
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d100      	bne.n	8006d98 <memset+0xa>
 8006d96:	4770      	bx	lr
 8006d98:	f803 1b01 	strb.w	r1, [r3], #1
 8006d9c:	e7f9      	b.n	8006d92 <memset+0x4>
	...

08006da0 <_close_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d06      	ldr	r5, [pc, #24]	@ (8006dbc <_close_r+0x1c>)
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	f7fa f897 	bl	8000ede <_close>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_close_r+0x1a>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_close_r+0x1a>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20004cd0 	.word	0x20004cd0

08006dc0 <_reclaim_reent>:
 8006dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e78 <_reclaim_reent+0xb8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4283      	cmp	r3, r0
 8006dc6:	b570      	push	{r4, r5, r6, lr}
 8006dc8:	4604      	mov	r4, r0
 8006dca:	d053      	beq.n	8006e74 <_reclaim_reent+0xb4>
 8006dcc:	69c3      	ldr	r3, [r0, #28]
 8006dce:	b31b      	cbz	r3, 8006e18 <_reclaim_reent+0x58>
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	b163      	cbz	r3, 8006dee <_reclaim_reent+0x2e>
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	69e3      	ldr	r3, [r4, #28]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	5959      	ldr	r1, [r3, r5]
 8006ddc:	b9b1      	cbnz	r1, 8006e0c <_reclaim_reent+0x4c>
 8006dde:	3504      	adds	r5, #4
 8006de0:	2d80      	cmp	r5, #128	@ 0x80
 8006de2:	d1f8      	bne.n	8006dd6 <_reclaim_reent+0x16>
 8006de4:	69e3      	ldr	r3, [r4, #28]
 8006de6:	4620      	mov	r0, r4
 8006de8:	68d9      	ldr	r1, [r3, #12]
 8006dea:	f000 f8b9 	bl	8006f60 <_free_r>
 8006dee:	69e3      	ldr	r3, [r4, #28]
 8006df0:	6819      	ldr	r1, [r3, #0]
 8006df2:	b111      	cbz	r1, 8006dfa <_reclaim_reent+0x3a>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f8b3 	bl	8006f60 <_free_r>
 8006dfa:	69e3      	ldr	r3, [r4, #28]
 8006dfc:	689d      	ldr	r5, [r3, #8]
 8006dfe:	b15d      	cbz	r5, 8006e18 <_reclaim_reent+0x58>
 8006e00:	4629      	mov	r1, r5
 8006e02:	4620      	mov	r0, r4
 8006e04:	682d      	ldr	r5, [r5, #0]
 8006e06:	f000 f8ab 	bl	8006f60 <_free_r>
 8006e0a:	e7f8      	b.n	8006dfe <_reclaim_reent+0x3e>
 8006e0c:	680e      	ldr	r6, [r1, #0]
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 f8a6 	bl	8006f60 <_free_r>
 8006e14:	4631      	mov	r1, r6
 8006e16:	e7e1      	b.n	8006ddc <_reclaim_reent+0x1c>
 8006e18:	6961      	ldr	r1, [r4, #20]
 8006e1a:	b111      	cbz	r1, 8006e22 <_reclaim_reent+0x62>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f89f 	bl	8006f60 <_free_r>
 8006e22:	69e1      	ldr	r1, [r4, #28]
 8006e24:	b111      	cbz	r1, 8006e2c <_reclaim_reent+0x6c>
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f89a 	bl	8006f60 <_free_r>
 8006e2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e2e:	b111      	cbz	r1, 8006e36 <_reclaim_reent+0x76>
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 f895 	bl	8006f60 <_free_r>
 8006e36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e38:	b111      	cbz	r1, 8006e40 <_reclaim_reent+0x80>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 f890 	bl	8006f60 <_free_r>
 8006e40:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e42:	b111      	cbz	r1, 8006e4a <_reclaim_reent+0x8a>
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 f88b 	bl	8006f60 <_free_r>
 8006e4a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e4c:	b111      	cbz	r1, 8006e54 <_reclaim_reent+0x94>
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 f886 	bl	8006f60 <_free_r>
 8006e54:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e56:	b111      	cbz	r1, 8006e5e <_reclaim_reent+0x9e>
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 f881 	bl	8006f60 <_free_r>
 8006e5e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e60:	b111      	cbz	r1, 8006e68 <_reclaim_reent+0xa8>
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f87c 	bl	8006f60 <_free_r>
 8006e68:	6a23      	ldr	r3, [r4, #32]
 8006e6a:	b11b      	cbz	r3, 8006e74 <_reclaim_reent+0xb4>
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e72:	4718      	bx	r3
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
 8006e76:	bf00      	nop
 8006e78:	2000001c 	.word	0x2000001c

08006e7c <_lseek_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	@ (8006e9c <_lseek_r+0x20>)
 8006e80:	4604      	mov	r4, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	4611      	mov	r1, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f7fa f84e 	bl	8000f2c <_lseek>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_lseek_r+0x1e>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_lseek_r+0x1e>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	20004cd0 	.word	0x20004cd0

08006ea0 <_read_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d07      	ldr	r5, [pc, #28]	@ (8006ec0 <_read_r+0x20>)
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	602a      	str	r2, [r5, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f7f9 ffdc 	bl	8000e6c <_read>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_read_r+0x1e>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_read_r+0x1e>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	20004cd0 	.word	0x20004cd0

08006ec4 <_write_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	@ (8006ee4 <_write_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7f9 ffe7 	bl	8000ea6 <_write>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_write_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_write_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20004cd0 	.word	0x20004cd0

08006ee8 <__errno>:
 8006ee8:	4b01      	ldr	r3, [pc, #4]	@ (8006ef0 <__errno+0x8>)
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	2000001c 	.word	0x2000001c

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2600      	movs	r6, #0
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4d0b      	ldr	r5, [pc, #44]	@ (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	@ (8006f38 <__libc_init_array+0x44>)
 8006f08:	f000 ff6c 	bl	8007de4 <_init>
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2600      	movs	r6, #0
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1c:	4798      	blx	r3
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f26:	4798      	blx	r3
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	080080c8 	.word	0x080080c8
 8006f30:	080080c8 	.word	0x080080c8
 8006f34:	080080c8 	.word	0x080080c8
 8006f38:	080080cc 	.word	0x080080cc

08006f3c <__retarget_lock_init_recursive>:
 8006f3c:	4770      	bx	lr

08006f3e <__retarget_lock_acquire_recursive>:
 8006f3e:	4770      	bx	lr

08006f40 <__retarget_lock_release_recursive>:
 8006f40:	4770      	bx	lr

08006f42 <memcpy>:
 8006f42:	440a      	add	r2, r1
 8006f44:	4291      	cmp	r1, r2
 8006f46:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f4a:	d100      	bne.n	8006f4e <memcpy+0xc>
 8006f4c:	4770      	bx	lr
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f58:	4291      	cmp	r1, r2
 8006f5a:	d1f9      	bne.n	8006f50 <memcpy+0xe>
 8006f5c:	bd10      	pop	{r4, pc}
	...

08006f60 <_free_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4605      	mov	r5, r0
 8006f64:	2900      	cmp	r1, #0
 8006f66:	d041      	beq.n	8006fec <_free_r+0x8c>
 8006f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6c:	1f0c      	subs	r4, r1, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bfb8      	it	lt
 8006f72:	18e4      	addlt	r4, r4, r3
 8006f74:	f000 f8e0 	bl	8007138 <__malloc_lock>
 8006f78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff0 <_free_r+0x90>)
 8006f7a:	6813      	ldr	r3, [r2, #0]
 8006f7c:	b933      	cbnz	r3, 8006f8c <_free_r+0x2c>
 8006f7e:	6063      	str	r3, [r4, #4]
 8006f80:	6014      	str	r4, [r2, #0]
 8006f82:	4628      	mov	r0, r5
 8006f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f88:	f000 b8dc 	b.w	8007144 <__malloc_unlock>
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	d908      	bls.n	8006fa2 <_free_r+0x42>
 8006f90:	6820      	ldr	r0, [r4, #0]
 8006f92:	1821      	adds	r1, r4, r0
 8006f94:	428b      	cmp	r3, r1
 8006f96:	bf01      	itttt	eq
 8006f98:	6819      	ldreq	r1, [r3, #0]
 8006f9a:	685b      	ldreq	r3, [r3, #4]
 8006f9c:	1809      	addeq	r1, r1, r0
 8006f9e:	6021      	streq	r1, [r4, #0]
 8006fa0:	e7ed      	b.n	8006f7e <_free_r+0x1e>
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	b10b      	cbz	r3, 8006fac <_free_r+0x4c>
 8006fa8:	42a3      	cmp	r3, r4
 8006faa:	d9fa      	bls.n	8006fa2 <_free_r+0x42>
 8006fac:	6811      	ldr	r1, [r2, #0]
 8006fae:	1850      	adds	r0, r2, r1
 8006fb0:	42a0      	cmp	r0, r4
 8006fb2:	d10b      	bne.n	8006fcc <_free_r+0x6c>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	4401      	add	r1, r0
 8006fb8:	1850      	adds	r0, r2, r1
 8006fba:	4283      	cmp	r3, r0
 8006fbc:	6011      	str	r1, [r2, #0]
 8006fbe:	d1e0      	bne.n	8006f82 <_free_r+0x22>
 8006fc0:	6818      	ldr	r0, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	6053      	str	r3, [r2, #4]
 8006fc6:	4408      	add	r0, r1
 8006fc8:	6010      	str	r0, [r2, #0]
 8006fca:	e7da      	b.n	8006f82 <_free_r+0x22>
 8006fcc:	d902      	bls.n	8006fd4 <_free_r+0x74>
 8006fce:	230c      	movs	r3, #12
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	e7d6      	b.n	8006f82 <_free_r+0x22>
 8006fd4:	6820      	ldr	r0, [r4, #0]
 8006fd6:	1821      	adds	r1, r4, r0
 8006fd8:	428b      	cmp	r3, r1
 8006fda:	bf04      	itt	eq
 8006fdc:	6819      	ldreq	r1, [r3, #0]
 8006fde:	685b      	ldreq	r3, [r3, #4]
 8006fe0:	6063      	str	r3, [r4, #4]
 8006fe2:	bf04      	itt	eq
 8006fe4:	1809      	addeq	r1, r1, r0
 8006fe6:	6021      	streq	r1, [r4, #0]
 8006fe8:	6054      	str	r4, [r2, #4]
 8006fea:	e7ca      	b.n	8006f82 <_free_r+0x22>
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
 8006fee:	bf00      	nop
 8006ff0:	20004cdc 	.word	0x20004cdc

08006ff4 <sbrk_aligned>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8007034 <sbrk_aligned+0x40>)
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	6831      	ldr	r1, [r6, #0]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	b911      	cbnz	r1, 8007006 <sbrk_aligned+0x12>
 8007000:	f000 fe26 	bl	8007c50 <_sbrk_r>
 8007004:	6030      	str	r0, [r6, #0]
 8007006:	4621      	mov	r1, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f000 fe21 	bl	8007c50 <_sbrk_r>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d103      	bne.n	800701a <sbrk_aligned+0x26>
 8007012:	f04f 34ff 	mov.w	r4, #4294967295
 8007016:	4620      	mov	r0, r4
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	1cc4      	adds	r4, r0, #3
 800701c:	f024 0403 	bic.w	r4, r4, #3
 8007020:	42a0      	cmp	r0, r4
 8007022:	d0f8      	beq.n	8007016 <sbrk_aligned+0x22>
 8007024:	1a21      	subs	r1, r4, r0
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fe12 	bl	8007c50 <_sbrk_r>
 800702c:	3001      	adds	r0, #1
 800702e:	d1f2      	bne.n	8007016 <sbrk_aligned+0x22>
 8007030:	e7ef      	b.n	8007012 <sbrk_aligned+0x1e>
 8007032:	bf00      	nop
 8007034:	20004cd8 	.word	0x20004cd8

08007038 <_malloc_r>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	1ccd      	adds	r5, r1, #3
 800703e:	f025 0503 	bic.w	r5, r5, #3
 8007042:	3508      	adds	r5, #8
 8007044:	2d0c      	cmp	r5, #12
 8007046:	bf38      	it	cc
 8007048:	250c      	movcc	r5, #12
 800704a:	2d00      	cmp	r5, #0
 800704c:	4606      	mov	r6, r0
 800704e:	db01      	blt.n	8007054 <_malloc_r+0x1c>
 8007050:	42a9      	cmp	r1, r5
 8007052:	d904      	bls.n	800705e <_malloc_r+0x26>
 8007054:	230c      	movs	r3, #12
 8007056:	6033      	str	r3, [r6, #0]
 8007058:	2000      	movs	r0, #0
 800705a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007134 <_malloc_r+0xfc>
 8007062:	f000 f869 	bl	8007138 <__malloc_lock>
 8007066:	f8d8 3000 	ldr.w	r3, [r8]
 800706a:	461c      	mov	r4, r3
 800706c:	bb44      	cbnz	r4, 80070c0 <_malloc_r+0x88>
 800706e:	4629      	mov	r1, r5
 8007070:	4630      	mov	r0, r6
 8007072:	f7ff ffbf 	bl	8006ff4 <sbrk_aligned>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	4604      	mov	r4, r0
 800707a:	d158      	bne.n	800712e <_malloc_r+0xf6>
 800707c:	f8d8 4000 	ldr.w	r4, [r8]
 8007080:	4627      	mov	r7, r4
 8007082:	2f00      	cmp	r7, #0
 8007084:	d143      	bne.n	800710e <_malloc_r+0xd6>
 8007086:	2c00      	cmp	r4, #0
 8007088:	d04b      	beq.n	8007122 <_malloc_r+0xea>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	4639      	mov	r1, r7
 800708e:	4630      	mov	r0, r6
 8007090:	eb04 0903 	add.w	r9, r4, r3
 8007094:	f000 fddc 	bl	8007c50 <_sbrk_r>
 8007098:	4581      	cmp	r9, r0
 800709a:	d142      	bne.n	8007122 <_malloc_r+0xea>
 800709c:	6821      	ldr	r1, [r4, #0]
 800709e:	1a6d      	subs	r5, r5, r1
 80070a0:	4629      	mov	r1, r5
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ffa6 	bl	8006ff4 <sbrk_aligned>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d03a      	beq.n	8007122 <_malloc_r+0xea>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	442b      	add	r3, r5
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	f8d8 3000 	ldr.w	r3, [r8]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	bb62      	cbnz	r2, 8007114 <_malloc_r+0xdc>
 80070ba:	f8c8 7000 	str.w	r7, [r8]
 80070be:	e00f      	b.n	80070e0 <_malloc_r+0xa8>
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	1b52      	subs	r2, r2, r5
 80070c4:	d420      	bmi.n	8007108 <_malloc_r+0xd0>
 80070c6:	2a0b      	cmp	r2, #11
 80070c8:	d917      	bls.n	80070fa <_malloc_r+0xc2>
 80070ca:	1961      	adds	r1, r4, r5
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	6025      	str	r5, [r4, #0]
 80070d0:	bf18      	it	ne
 80070d2:	6059      	strne	r1, [r3, #4]
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	bf08      	it	eq
 80070d8:	f8c8 1000 	streq.w	r1, [r8]
 80070dc:	5162      	str	r2, [r4, r5]
 80070de:	604b      	str	r3, [r1, #4]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f82f 	bl	8007144 <__malloc_unlock>
 80070e6:	f104 000b 	add.w	r0, r4, #11
 80070ea:	1d23      	adds	r3, r4, #4
 80070ec:	f020 0007 	bic.w	r0, r0, #7
 80070f0:	1ac2      	subs	r2, r0, r3
 80070f2:	bf1c      	itt	ne
 80070f4:	1a1b      	subne	r3, r3, r0
 80070f6:	50a3      	strne	r3, [r4, r2]
 80070f8:	e7af      	b.n	800705a <_malloc_r+0x22>
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	bf0c      	ite	eq
 8007100:	f8c8 2000 	streq.w	r2, [r8]
 8007104:	605a      	strne	r2, [r3, #4]
 8007106:	e7eb      	b.n	80070e0 <_malloc_r+0xa8>
 8007108:	4623      	mov	r3, r4
 800710a:	6864      	ldr	r4, [r4, #4]
 800710c:	e7ae      	b.n	800706c <_malloc_r+0x34>
 800710e:	463c      	mov	r4, r7
 8007110:	687f      	ldr	r7, [r7, #4]
 8007112:	e7b6      	b.n	8007082 <_malloc_r+0x4a>
 8007114:	461a      	mov	r2, r3
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	42a3      	cmp	r3, r4
 800711a:	d1fb      	bne.n	8007114 <_malloc_r+0xdc>
 800711c:	2300      	movs	r3, #0
 800711e:	6053      	str	r3, [r2, #4]
 8007120:	e7de      	b.n	80070e0 <_malloc_r+0xa8>
 8007122:	230c      	movs	r3, #12
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	4630      	mov	r0, r6
 8007128:	f000 f80c 	bl	8007144 <__malloc_unlock>
 800712c:	e794      	b.n	8007058 <_malloc_r+0x20>
 800712e:	6005      	str	r5, [r0, #0]
 8007130:	e7d6      	b.n	80070e0 <_malloc_r+0xa8>
 8007132:	bf00      	nop
 8007134:	20004cdc 	.word	0x20004cdc

08007138 <__malloc_lock>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__malloc_lock+0x8>)
 800713a:	f7ff bf00 	b.w	8006f3e <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	20004cd4 	.word	0x20004cd4

08007144 <__malloc_unlock>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__malloc_unlock+0x8>)
 8007146:	f7ff befb 	b.w	8006f40 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	20004cd4 	.word	0x20004cd4

08007150 <__ssputs_r>:
 8007150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	688e      	ldr	r6, [r1, #8]
 8007156:	461f      	mov	r7, r3
 8007158:	42be      	cmp	r6, r7
 800715a:	680b      	ldr	r3, [r1, #0]
 800715c:	4682      	mov	sl, r0
 800715e:	460c      	mov	r4, r1
 8007160:	4690      	mov	r8, r2
 8007162:	d82d      	bhi.n	80071c0 <__ssputs_r+0x70>
 8007164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007168:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800716c:	d026      	beq.n	80071bc <__ssputs_r+0x6c>
 800716e:	6965      	ldr	r5, [r4, #20]
 8007170:	6909      	ldr	r1, [r1, #16]
 8007172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007176:	eba3 0901 	sub.w	r9, r3, r1
 800717a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800717e:	1c7b      	adds	r3, r7, #1
 8007180:	444b      	add	r3, r9
 8007182:	106d      	asrs	r5, r5, #1
 8007184:	429d      	cmp	r5, r3
 8007186:	bf38      	it	cc
 8007188:	461d      	movcc	r5, r3
 800718a:	0553      	lsls	r3, r2, #21
 800718c:	d527      	bpl.n	80071de <__ssputs_r+0x8e>
 800718e:	4629      	mov	r1, r5
 8007190:	f7ff ff52 	bl	8007038 <_malloc_r>
 8007194:	4606      	mov	r6, r0
 8007196:	b360      	cbz	r0, 80071f2 <__ssputs_r+0xa2>
 8007198:	6921      	ldr	r1, [r4, #16]
 800719a:	464a      	mov	r2, r9
 800719c:	f7ff fed1 	bl	8006f42 <memcpy>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	6126      	str	r6, [r4, #16]
 80071ae:	6165      	str	r5, [r4, #20]
 80071b0:	444e      	add	r6, r9
 80071b2:	eba5 0509 	sub.w	r5, r5, r9
 80071b6:	6026      	str	r6, [r4, #0]
 80071b8:	60a5      	str	r5, [r4, #8]
 80071ba:	463e      	mov	r6, r7
 80071bc:	42be      	cmp	r6, r7
 80071be:	d900      	bls.n	80071c2 <__ssputs_r+0x72>
 80071c0:	463e      	mov	r6, r7
 80071c2:	6820      	ldr	r0, [r4, #0]
 80071c4:	4632      	mov	r2, r6
 80071c6:	4641      	mov	r1, r8
 80071c8:	f000 fd28 	bl	8007c1c <memmove>
 80071cc:	68a3      	ldr	r3, [r4, #8]
 80071ce:	1b9b      	subs	r3, r3, r6
 80071d0:	60a3      	str	r3, [r4, #8]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	4433      	add	r3, r6
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	2000      	movs	r0, #0
 80071da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071de:	462a      	mov	r2, r5
 80071e0:	f000 fd46 	bl	8007c70 <_realloc_r>
 80071e4:	4606      	mov	r6, r0
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d1e0      	bne.n	80071ac <__ssputs_r+0x5c>
 80071ea:	6921      	ldr	r1, [r4, #16]
 80071ec:	4650      	mov	r0, sl
 80071ee:	f7ff feb7 	bl	8006f60 <_free_r>
 80071f2:	230c      	movs	r3, #12
 80071f4:	f8ca 3000 	str.w	r3, [sl]
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e7e9      	b.n	80071da <__ssputs_r+0x8a>
	...

08007208 <_svfiprintf_r>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	4698      	mov	r8, r3
 800720e:	898b      	ldrh	r3, [r1, #12]
 8007210:	061b      	lsls	r3, r3, #24
 8007212:	b09d      	sub	sp, #116	@ 0x74
 8007214:	4607      	mov	r7, r0
 8007216:	460d      	mov	r5, r1
 8007218:	4614      	mov	r4, r2
 800721a:	d510      	bpl.n	800723e <_svfiprintf_r+0x36>
 800721c:	690b      	ldr	r3, [r1, #16]
 800721e:	b973      	cbnz	r3, 800723e <_svfiprintf_r+0x36>
 8007220:	2140      	movs	r1, #64	@ 0x40
 8007222:	f7ff ff09 	bl	8007038 <_malloc_r>
 8007226:	6028      	str	r0, [r5, #0]
 8007228:	6128      	str	r0, [r5, #16]
 800722a:	b930      	cbnz	r0, 800723a <_svfiprintf_r+0x32>
 800722c:	230c      	movs	r3, #12
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	b01d      	add	sp, #116	@ 0x74
 8007236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723a:	2340      	movs	r3, #64	@ 0x40
 800723c:	616b      	str	r3, [r5, #20]
 800723e:	2300      	movs	r3, #0
 8007240:	9309      	str	r3, [sp, #36]	@ 0x24
 8007242:	2320      	movs	r3, #32
 8007244:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007248:	f8cd 800c 	str.w	r8, [sp, #12]
 800724c:	2330      	movs	r3, #48	@ 0x30
 800724e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073ec <_svfiprintf_r+0x1e4>
 8007252:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007256:	f04f 0901 	mov.w	r9, #1
 800725a:	4623      	mov	r3, r4
 800725c:	469a      	mov	sl, r3
 800725e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007262:	b10a      	cbz	r2, 8007268 <_svfiprintf_r+0x60>
 8007264:	2a25      	cmp	r2, #37	@ 0x25
 8007266:	d1f9      	bne.n	800725c <_svfiprintf_r+0x54>
 8007268:	ebba 0b04 	subs.w	fp, sl, r4
 800726c:	d00b      	beq.n	8007286 <_svfiprintf_r+0x7e>
 800726e:	465b      	mov	r3, fp
 8007270:	4622      	mov	r2, r4
 8007272:	4629      	mov	r1, r5
 8007274:	4638      	mov	r0, r7
 8007276:	f7ff ff6b 	bl	8007150 <__ssputs_r>
 800727a:	3001      	adds	r0, #1
 800727c:	f000 80a7 	beq.w	80073ce <_svfiprintf_r+0x1c6>
 8007280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007282:	445a      	add	r2, fp
 8007284:	9209      	str	r2, [sp, #36]	@ 0x24
 8007286:	f89a 3000 	ldrb.w	r3, [sl]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 809f 	beq.w	80073ce <_svfiprintf_r+0x1c6>
 8007290:	2300      	movs	r3, #0
 8007292:	f04f 32ff 	mov.w	r2, #4294967295
 8007296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800729a:	f10a 0a01 	add.w	sl, sl, #1
 800729e:	9304      	str	r3, [sp, #16]
 80072a0:	9307      	str	r3, [sp, #28]
 80072a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80072a8:	4654      	mov	r4, sl
 80072aa:	2205      	movs	r2, #5
 80072ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b0:	484e      	ldr	r0, [pc, #312]	@ (80073ec <_svfiprintf_r+0x1e4>)
 80072b2:	f7f8 ffc5 	bl	8000240 <memchr>
 80072b6:	9a04      	ldr	r2, [sp, #16]
 80072b8:	b9d8      	cbnz	r0, 80072f2 <_svfiprintf_r+0xea>
 80072ba:	06d0      	lsls	r0, r2, #27
 80072bc:	bf44      	itt	mi
 80072be:	2320      	movmi	r3, #32
 80072c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072c4:	0711      	lsls	r1, r2, #28
 80072c6:	bf44      	itt	mi
 80072c8:	232b      	movmi	r3, #43	@ 0x2b
 80072ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ce:	f89a 3000 	ldrb.w	r3, [sl]
 80072d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80072d4:	d015      	beq.n	8007302 <_svfiprintf_r+0xfa>
 80072d6:	9a07      	ldr	r2, [sp, #28]
 80072d8:	4654      	mov	r4, sl
 80072da:	2000      	movs	r0, #0
 80072dc:	f04f 0c0a 	mov.w	ip, #10
 80072e0:	4621      	mov	r1, r4
 80072e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e6:	3b30      	subs	r3, #48	@ 0x30
 80072e8:	2b09      	cmp	r3, #9
 80072ea:	d94b      	bls.n	8007384 <_svfiprintf_r+0x17c>
 80072ec:	b1b0      	cbz	r0, 800731c <_svfiprintf_r+0x114>
 80072ee:	9207      	str	r2, [sp, #28]
 80072f0:	e014      	b.n	800731c <_svfiprintf_r+0x114>
 80072f2:	eba0 0308 	sub.w	r3, r0, r8
 80072f6:	fa09 f303 	lsl.w	r3, r9, r3
 80072fa:	4313      	orrs	r3, r2
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	46a2      	mov	sl, r4
 8007300:	e7d2      	b.n	80072a8 <_svfiprintf_r+0xa0>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	1d19      	adds	r1, r3, #4
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	9103      	str	r1, [sp, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfbb      	ittet	lt
 800730e:	425b      	neglt	r3, r3
 8007310:	f042 0202 	orrlt.w	r2, r2, #2
 8007314:	9307      	strge	r3, [sp, #28]
 8007316:	9307      	strlt	r3, [sp, #28]
 8007318:	bfb8      	it	lt
 800731a:	9204      	strlt	r2, [sp, #16]
 800731c:	7823      	ldrb	r3, [r4, #0]
 800731e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007320:	d10a      	bne.n	8007338 <_svfiprintf_r+0x130>
 8007322:	7863      	ldrb	r3, [r4, #1]
 8007324:	2b2a      	cmp	r3, #42	@ 0x2a
 8007326:	d132      	bne.n	800738e <_svfiprintf_r+0x186>
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	9203      	str	r2, [sp, #12]
 8007330:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007334:	3402      	adds	r4, #2
 8007336:	9305      	str	r3, [sp, #20]
 8007338:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073fc <_svfiprintf_r+0x1f4>
 800733c:	7821      	ldrb	r1, [r4, #0]
 800733e:	2203      	movs	r2, #3
 8007340:	4650      	mov	r0, sl
 8007342:	f7f8 ff7d 	bl	8000240 <memchr>
 8007346:	b138      	cbz	r0, 8007358 <_svfiprintf_r+0x150>
 8007348:	9b04      	ldr	r3, [sp, #16]
 800734a:	eba0 000a 	sub.w	r0, r0, sl
 800734e:	2240      	movs	r2, #64	@ 0x40
 8007350:	4082      	lsls	r2, r0
 8007352:	4313      	orrs	r3, r2
 8007354:	3401      	adds	r4, #1
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735c:	4824      	ldr	r0, [pc, #144]	@ (80073f0 <_svfiprintf_r+0x1e8>)
 800735e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007362:	2206      	movs	r2, #6
 8007364:	f7f8 ff6c 	bl	8000240 <memchr>
 8007368:	2800      	cmp	r0, #0
 800736a:	d036      	beq.n	80073da <_svfiprintf_r+0x1d2>
 800736c:	4b21      	ldr	r3, [pc, #132]	@ (80073f4 <_svfiprintf_r+0x1ec>)
 800736e:	bb1b      	cbnz	r3, 80073b8 <_svfiprintf_r+0x1b0>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	3307      	adds	r3, #7
 8007374:	f023 0307 	bic.w	r3, r3, #7
 8007378:	3308      	adds	r3, #8
 800737a:	9303      	str	r3, [sp, #12]
 800737c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800737e:	4433      	add	r3, r6
 8007380:	9309      	str	r3, [sp, #36]	@ 0x24
 8007382:	e76a      	b.n	800725a <_svfiprintf_r+0x52>
 8007384:	fb0c 3202 	mla	r2, ip, r2, r3
 8007388:	460c      	mov	r4, r1
 800738a:	2001      	movs	r0, #1
 800738c:	e7a8      	b.n	80072e0 <_svfiprintf_r+0xd8>
 800738e:	2300      	movs	r3, #0
 8007390:	3401      	adds	r4, #1
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	4619      	mov	r1, r3
 8007396:	f04f 0c0a 	mov.w	ip, #10
 800739a:	4620      	mov	r0, r4
 800739c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a0:	3a30      	subs	r2, #48	@ 0x30
 80073a2:	2a09      	cmp	r2, #9
 80073a4:	d903      	bls.n	80073ae <_svfiprintf_r+0x1a6>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0c6      	beq.n	8007338 <_svfiprintf_r+0x130>
 80073aa:	9105      	str	r1, [sp, #20]
 80073ac:	e7c4      	b.n	8007338 <_svfiprintf_r+0x130>
 80073ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b2:	4604      	mov	r4, r0
 80073b4:	2301      	movs	r3, #1
 80073b6:	e7f0      	b.n	800739a <_svfiprintf_r+0x192>
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	462a      	mov	r2, r5
 80073be:	4b0e      	ldr	r3, [pc, #56]	@ (80073f8 <_svfiprintf_r+0x1f0>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4638      	mov	r0, r7
 80073c4:	f3af 8000 	nop.w
 80073c8:	1c42      	adds	r2, r0, #1
 80073ca:	4606      	mov	r6, r0
 80073cc:	d1d6      	bne.n	800737c <_svfiprintf_r+0x174>
 80073ce:	89ab      	ldrh	r3, [r5, #12]
 80073d0:	065b      	lsls	r3, r3, #25
 80073d2:	f53f af2d 	bmi.w	8007230 <_svfiprintf_r+0x28>
 80073d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073d8:	e72c      	b.n	8007234 <_svfiprintf_r+0x2c>
 80073da:	ab03      	add	r3, sp, #12
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	462a      	mov	r2, r5
 80073e0:	4b05      	ldr	r3, [pc, #20]	@ (80073f8 <_svfiprintf_r+0x1f0>)
 80073e2:	a904      	add	r1, sp, #16
 80073e4:	4638      	mov	r0, r7
 80073e6:	f000 f9bb 	bl	8007760 <_printf_i>
 80073ea:	e7ed      	b.n	80073c8 <_svfiprintf_r+0x1c0>
 80073ec:	0800808c 	.word	0x0800808c
 80073f0:	08008096 	.word	0x08008096
 80073f4:	00000000 	.word	0x00000000
 80073f8:	08007151 	.word	0x08007151
 80073fc:	08008092 	.word	0x08008092

08007400 <__sfputc_r>:
 8007400:	6893      	ldr	r3, [r2, #8]
 8007402:	3b01      	subs	r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	b410      	push	{r4}
 8007408:	6093      	str	r3, [r2, #8]
 800740a:	da08      	bge.n	800741e <__sfputc_r+0x1e>
 800740c:	6994      	ldr	r4, [r2, #24]
 800740e:	42a3      	cmp	r3, r4
 8007410:	db01      	blt.n	8007416 <__sfputc_r+0x16>
 8007412:	290a      	cmp	r1, #10
 8007414:	d103      	bne.n	800741e <__sfputc_r+0x1e>
 8007416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800741a:	f000 bb6b 	b.w	8007af4 <__swbuf_r>
 800741e:	6813      	ldr	r3, [r2, #0]
 8007420:	1c58      	adds	r0, r3, #1
 8007422:	6010      	str	r0, [r2, #0]
 8007424:	7019      	strb	r1, [r3, #0]
 8007426:	4608      	mov	r0, r1
 8007428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800742c:	4770      	bx	lr

0800742e <__sfputs_r>:
 800742e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007430:	4606      	mov	r6, r0
 8007432:	460f      	mov	r7, r1
 8007434:	4614      	mov	r4, r2
 8007436:	18d5      	adds	r5, r2, r3
 8007438:	42ac      	cmp	r4, r5
 800743a:	d101      	bne.n	8007440 <__sfputs_r+0x12>
 800743c:	2000      	movs	r0, #0
 800743e:	e007      	b.n	8007450 <__sfputs_r+0x22>
 8007440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007444:	463a      	mov	r2, r7
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ffda 	bl	8007400 <__sfputc_r>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d1f3      	bne.n	8007438 <__sfputs_r+0xa>
 8007450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007454 <_vfiprintf_r>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	460d      	mov	r5, r1
 800745a:	b09d      	sub	sp, #116	@ 0x74
 800745c:	4614      	mov	r4, r2
 800745e:	4698      	mov	r8, r3
 8007460:	4606      	mov	r6, r0
 8007462:	b118      	cbz	r0, 800746c <_vfiprintf_r+0x18>
 8007464:	6a03      	ldr	r3, [r0, #32]
 8007466:	b90b      	cbnz	r3, 800746c <_vfiprintf_r+0x18>
 8007468:	f7ff fbd0 	bl	8006c0c <__sinit>
 800746c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800746e:	07d9      	lsls	r1, r3, #31
 8007470:	d405      	bmi.n	800747e <_vfiprintf_r+0x2a>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	059a      	lsls	r2, r3, #22
 8007476:	d402      	bmi.n	800747e <_vfiprintf_r+0x2a>
 8007478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800747a:	f7ff fd60 	bl	8006f3e <__retarget_lock_acquire_recursive>
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	071b      	lsls	r3, r3, #28
 8007482:	d501      	bpl.n	8007488 <_vfiprintf_r+0x34>
 8007484:	692b      	ldr	r3, [r5, #16]
 8007486:	b99b      	cbnz	r3, 80074b0 <_vfiprintf_r+0x5c>
 8007488:	4629      	mov	r1, r5
 800748a:	4630      	mov	r0, r6
 800748c:	f000 fb70 	bl	8007b70 <__swsetup_r>
 8007490:	b170      	cbz	r0, 80074b0 <_vfiprintf_r+0x5c>
 8007492:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007494:	07dc      	lsls	r4, r3, #31
 8007496:	d504      	bpl.n	80074a2 <_vfiprintf_r+0x4e>
 8007498:	f04f 30ff 	mov.w	r0, #4294967295
 800749c:	b01d      	add	sp, #116	@ 0x74
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	0598      	lsls	r0, r3, #22
 80074a6:	d4f7      	bmi.n	8007498 <_vfiprintf_r+0x44>
 80074a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074aa:	f7ff fd49 	bl	8006f40 <__retarget_lock_release_recursive>
 80074ae:	e7f3      	b.n	8007498 <_vfiprintf_r+0x44>
 80074b0:	2300      	movs	r3, #0
 80074b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b4:	2320      	movs	r3, #32
 80074b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80074be:	2330      	movs	r3, #48	@ 0x30
 80074c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007670 <_vfiprintf_r+0x21c>
 80074c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074c8:	f04f 0901 	mov.w	r9, #1
 80074cc:	4623      	mov	r3, r4
 80074ce:	469a      	mov	sl, r3
 80074d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d4:	b10a      	cbz	r2, 80074da <_vfiprintf_r+0x86>
 80074d6:	2a25      	cmp	r2, #37	@ 0x25
 80074d8:	d1f9      	bne.n	80074ce <_vfiprintf_r+0x7a>
 80074da:	ebba 0b04 	subs.w	fp, sl, r4
 80074de:	d00b      	beq.n	80074f8 <_vfiprintf_r+0xa4>
 80074e0:	465b      	mov	r3, fp
 80074e2:	4622      	mov	r2, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	4630      	mov	r0, r6
 80074e8:	f7ff ffa1 	bl	800742e <__sfputs_r>
 80074ec:	3001      	adds	r0, #1
 80074ee:	f000 80a7 	beq.w	8007640 <_vfiprintf_r+0x1ec>
 80074f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f4:	445a      	add	r2, fp
 80074f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80074f8:	f89a 3000 	ldrb.w	r3, [sl]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 809f 	beq.w	8007640 <_vfiprintf_r+0x1ec>
 8007502:	2300      	movs	r3, #0
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800750c:	f10a 0a01 	add.w	sl, sl, #1
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	9307      	str	r3, [sp, #28]
 8007514:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007518:	931a      	str	r3, [sp, #104]	@ 0x68
 800751a:	4654      	mov	r4, sl
 800751c:	2205      	movs	r2, #5
 800751e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007522:	4853      	ldr	r0, [pc, #332]	@ (8007670 <_vfiprintf_r+0x21c>)
 8007524:	f7f8 fe8c 	bl	8000240 <memchr>
 8007528:	9a04      	ldr	r2, [sp, #16]
 800752a:	b9d8      	cbnz	r0, 8007564 <_vfiprintf_r+0x110>
 800752c:	06d1      	lsls	r1, r2, #27
 800752e:	bf44      	itt	mi
 8007530:	2320      	movmi	r3, #32
 8007532:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007536:	0713      	lsls	r3, r2, #28
 8007538:	bf44      	itt	mi
 800753a:	232b      	movmi	r3, #43	@ 0x2b
 800753c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007540:	f89a 3000 	ldrb.w	r3, [sl]
 8007544:	2b2a      	cmp	r3, #42	@ 0x2a
 8007546:	d015      	beq.n	8007574 <_vfiprintf_r+0x120>
 8007548:	9a07      	ldr	r2, [sp, #28]
 800754a:	4654      	mov	r4, sl
 800754c:	2000      	movs	r0, #0
 800754e:	f04f 0c0a 	mov.w	ip, #10
 8007552:	4621      	mov	r1, r4
 8007554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007558:	3b30      	subs	r3, #48	@ 0x30
 800755a:	2b09      	cmp	r3, #9
 800755c:	d94b      	bls.n	80075f6 <_vfiprintf_r+0x1a2>
 800755e:	b1b0      	cbz	r0, 800758e <_vfiprintf_r+0x13a>
 8007560:	9207      	str	r2, [sp, #28]
 8007562:	e014      	b.n	800758e <_vfiprintf_r+0x13a>
 8007564:	eba0 0308 	sub.w	r3, r0, r8
 8007568:	fa09 f303 	lsl.w	r3, r9, r3
 800756c:	4313      	orrs	r3, r2
 800756e:	9304      	str	r3, [sp, #16]
 8007570:	46a2      	mov	sl, r4
 8007572:	e7d2      	b.n	800751a <_vfiprintf_r+0xc6>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	1d19      	adds	r1, r3, #4
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	9103      	str	r1, [sp, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	bfbb      	ittet	lt
 8007580:	425b      	neglt	r3, r3
 8007582:	f042 0202 	orrlt.w	r2, r2, #2
 8007586:	9307      	strge	r3, [sp, #28]
 8007588:	9307      	strlt	r3, [sp, #28]
 800758a:	bfb8      	it	lt
 800758c:	9204      	strlt	r2, [sp, #16]
 800758e:	7823      	ldrb	r3, [r4, #0]
 8007590:	2b2e      	cmp	r3, #46	@ 0x2e
 8007592:	d10a      	bne.n	80075aa <_vfiprintf_r+0x156>
 8007594:	7863      	ldrb	r3, [r4, #1]
 8007596:	2b2a      	cmp	r3, #42	@ 0x2a
 8007598:	d132      	bne.n	8007600 <_vfiprintf_r+0x1ac>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	1d1a      	adds	r2, r3, #4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	9203      	str	r2, [sp, #12]
 80075a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075a6:	3402      	adds	r4, #2
 80075a8:	9305      	str	r3, [sp, #20]
 80075aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007680 <_vfiprintf_r+0x22c>
 80075ae:	7821      	ldrb	r1, [r4, #0]
 80075b0:	2203      	movs	r2, #3
 80075b2:	4650      	mov	r0, sl
 80075b4:	f7f8 fe44 	bl	8000240 <memchr>
 80075b8:	b138      	cbz	r0, 80075ca <_vfiprintf_r+0x176>
 80075ba:	9b04      	ldr	r3, [sp, #16]
 80075bc:	eba0 000a 	sub.w	r0, r0, sl
 80075c0:	2240      	movs	r2, #64	@ 0x40
 80075c2:	4082      	lsls	r2, r0
 80075c4:	4313      	orrs	r3, r2
 80075c6:	3401      	adds	r4, #1
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ce:	4829      	ldr	r0, [pc, #164]	@ (8007674 <_vfiprintf_r+0x220>)
 80075d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075d4:	2206      	movs	r2, #6
 80075d6:	f7f8 fe33 	bl	8000240 <memchr>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d03f      	beq.n	800765e <_vfiprintf_r+0x20a>
 80075de:	4b26      	ldr	r3, [pc, #152]	@ (8007678 <_vfiprintf_r+0x224>)
 80075e0:	bb1b      	cbnz	r3, 800762a <_vfiprintf_r+0x1d6>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	3307      	adds	r3, #7
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	3308      	adds	r3, #8
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f0:	443b      	add	r3, r7
 80075f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f4:	e76a      	b.n	80074cc <_vfiprintf_r+0x78>
 80075f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80075fa:	460c      	mov	r4, r1
 80075fc:	2001      	movs	r0, #1
 80075fe:	e7a8      	b.n	8007552 <_vfiprintf_r+0xfe>
 8007600:	2300      	movs	r3, #0
 8007602:	3401      	adds	r4, #1
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	4619      	mov	r1, r3
 8007608:	f04f 0c0a 	mov.w	ip, #10
 800760c:	4620      	mov	r0, r4
 800760e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007612:	3a30      	subs	r2, #48	@ 0x30
 8007614:	2a09      	cmp	r2, #9
 8007616:	d903      	bls.n	8007620 <_vfiprintf_r+0x1cc>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0c6      	beq.n	80075aa <_vfiprintf_r+0x156>
 800761c:	9105      	str	r1, [sp, #20]
 800761e:	e7c4      	b.n	80075aa <_vfiprintf_r+0x156>
 8007620:	fb0c 2101 	mla	r1, ip, r1, r2
 8007624:	4604      	mov	r4, r0
 8007626:	2301      	movs	r3, #1
 8007628:	e7f0      	b.n	800760c <_vfiprintf_r+0x1b8>
 800762a:	ab03      	add	r3, sp, #12
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	462a      	mov	r2, r5
 8007630:	4b12      	ldr	r3, [pc, #72]	@ (800767c <_vfiprintf_r+0x228>)
 8007632:	a904      	add	r1, sp, #16
 8007634:	4630      	mov	r0, r6
 8007636:	f3af 8000 	nop.w
 800763a:	4607      	mov	r7, r0
 800763c:	1c78      	adds	r0, r7, #1
 800763e:	d1d6      	bne.n	80075ee <_vfiprintf_r+0x19a>
 8007640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007642:	07d9      	lsls	r1, r3, #31
 8007644:	d405      	bmi.n	8007652 <_vfiprintf_r+0x1fe>
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	059a      	lsls	r2, r3, #22
 800764a:	d402      	bmi.n	8007652 <_vfiprintf_r+0x1fe>
 800764c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800764e:	f7ff fc77 	bl	8006f40 <__retarget_lock_release_recursive>
 8007652:	89ab      	ldrh	r3, [r5, #12]
 8007654:	065b      	lsls	r3, r3, #25
 8007656:	f53f af1f 	bmi.w	8007498 <_vfiprintf_r+0x44>
 800765a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800765c:	e71e      	b.n	800749c <_vfiprintf_r+0x48>
 800765e:	ab03      	add	r3, sp, #12
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	462a      	mov	r2, r5
 8007664:	4b05      	ldr	r3, [pc, #20]	@ (800767c <_vfiprintf_r+0x228>)
 8007666:	a904      	add	r1, sp, #16
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f879 	bl	8007760 <_printf_i>
 800766e:	e7e4      	b.n	800763a <_vfiprintf_r+0x1e6>
 8007670:	0800808c 	.word	0x0800808c
 8007674:	08008096 	.word	0x08008096
 8007678:	00000000 	.word	0x00000000
 800767c:	0800742f 	.word	0x0800742f
 8007680:	08008092 	.word	0x08008092

08007684 <_printf_common>:
 8007684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	4616      	mov	r6, r2
 800768a:	4698      	mov	r8, r3
 800768c:	688a      	ldr	r2, [r1, #8]
 800768e:	690b      	ldr	r3, [r1, #16]
 8007690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007694:	4293      	cmp	r3, r2
 8007696:	bfb8      	it	lt
 8007698:	4613      	movlt	r3, r2
 800769a:	6033      	str	r3, [r6, #0]
 800769c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076a0:	4607      	mov	r7, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	b10a      	cbz	r2, 80076aa <_printf_common+0x26>
 80076a6:	3301      	adds	r3, #1
 80076a8:	6033      	str	r3, [r6, #0]
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	0699      	lsls	r1, r3, #26
 80076ae:	bf42      	ittt	mi
 80076b0:	6833      	ldrmi	r3, [r6, #0]
 80076b2:	3302      	addmi	r3, #2
 80076b4:	6033      	strmi	r3, [r6, #0]
 80076b6:	6825      	ldr	r5, [r4, #0]
 80076b8:	f015 0506 	ands.w	r5, r5, #6
 80076bc:	d106      	bne.n	80076cc <_printf_common+0x48>
 80076be:	f104 0a19 	add.w	sl, r4, #25
 80076c2:	68e3      	ldr	r3, [r4, #12]
 80076c4:	6832      	ldr	r2, [r6, #0]
 80076c6:	1a9b      	subs	r3, r3, r2
 80076c8:	42ab      	cmp	r3, r5
 80076ca:	dc26      	bgt.n	800771a <_printf_common+0x96>
 80076cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076d0:	6822      	ldr	r2, [r4, #0]
 80076d2:	3b00      	subs	r3, #0
 80076d4:	bf18      	it	ne
 80076d6:	2301      	movne	r3, #1
 80076d8:	0692      	lsls	r2, r2, #26
 80076da:	d42b      	bmi.n	8007734 <_printf_common+0xb0>
 80076dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076e0:	4641      	mov	r1, r8
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c8      	blx	r9
 80076e6:	3001      	adds	r0, #1
 80076e8:	d01e      	beq.n	8007728 <_printf_common+0xa4>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	f003 0306 	and.w	r3, r3, #6
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	bf02      	ittt	eq
 80076f6:	68e5      	ldreq	r5, [r4, #12]
 80076f8:	6833      	ldreq	r3, [r6, #0]
 80076fa:	1aed      	subeq	r5, r5, r3
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	bf0c      	ite	eq
 8007700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007704:	2500      	movne	r5, #0
 8007706:	4293      	cmp	r3, r2
 8007708:	bfc4      	itt	gt
 800770a:	1a9b      	subgt	r3, r3, r2
 800770c:	18ed      	addgt	r5, r5, r3
 800770e:	2600      	movs	r6, #0
 8007710:	341a      	adds	r4, #26
 8007712:	42b5      	cmp	r5, r6
 8007714:	d11a      	bne.n	800774c <_printf_common+0xc8>
 8007716:	2000      	movs	r0, #0
 8007718:	e008      	b.n	800772c <_printf_common+0xa8>
 800771a:	2301      	movs	r3, #1
 800771c:	4652      	mov	r2, sl
 800771e:	4641      	mov	r1, r8
 8007720:	4638      	mov	r0, r7
 8007722:	47c8      	blx	r9
 8007724:	3001      	adds	r0, #1
 8007726:	d103      	bne.n	8007730 <_printf_common+0xac>
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
 800772c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007730:	3501      	adds	r5, #1
 8007732:	e7c6      	b.n	80076c2 <_printf_common+0x3e>
 8007734:	18e1      	adds	r1, r4, r3
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	2030      	movs	r0, #48	@ 0x30
 800773a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800773e:	4422      	add	r2, r4
 8007740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007744:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007748:	3302      	adds	r3, #2
 800774a:	e7c7      	b.n	80076dc <_printf_common+0x58>
 800774c:	2301      	movs	r3, #1
 800774e:	4622      	mov	r2, r4
 8007750:	4641      	mov	r1, r8
 8007752:	4638      	mov	r0, r7
 8007754:	47c8      	blx	r9
 8007756:	3001      	adds	r0, #1
 8007758:	d0e6      	beq.n	8007728 <_printf_common+0xa4>
 800775a:	3601      	adds	r6, #1
 800775c:	e7d9      	b.n	8007712 <_printf_common+0x8e>
	...

08007760 <_printf_i>:
 8007760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	7e0f      	ldrb	r7, [r1, #24]
 8007766:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007768:	2f78      	cmp	r7, #120	@ 0x78
 800776a:	4691      	mov	r9, r2
 800776c:	4680      	mov	r8, r0
 800776e:	460c      	mov	r4, r1
 8007770:	469a      	mov	sl, r3
 8007772:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007776:	d807      	bhi.n	8007788 <_printf_i+0x28>
 8007778:	2f62      	cmp	r7, #98	@ 0x62
 800777a:	d80a      	bhi.n	8007792 <_printf_i+0x32>
 800777c:	2f00      	cmp	r7, #0
 800777e:	f000 80d1 	beq.w	8007924 <_printf_i+0x1c4>
 8007782:	2f58      	cmp	r7, #88	@ 0x58
 8007784:	f000 80b8 	beq.w	80078f8 <_printf_i+0x198>
 8007788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800778c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007790:	e03a      	b.n	8007808 <_printf_i+0xa8>
 8007792:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007796:	2b15      	cmp	r3, #21
 8007798:	d8f6      	bhi.n	8007788 <_printf_i+0x28>
 800779a:	a101      	add	r1, pc, #4	@ (adr r1, 80077a0 <_printf_i+0x40>)
 800779c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077a0:	080077f9 	.word	0x080077f9
 80077a4:	0800780d 	.word	0x0800780d
 80077a8:	08007789 	.word	0x08007789
 80077ac:	08007789 	.word	0x08007789
 80077b0:	08007789 	.word	0x08007789
 80077b4:	08007789 	.word	0x08007789
 80077b8:	0800780d 	.word	0x0800780d
 80077bc:	08007789 	.word	0x08007789
 80077c0:	08007789 	.word	0x08007789
 80077c4:	08007789 	.word	0x08007789
 80077c8:	08007789 	.word	0x08007789
 80077cc:	0800790b 	.word	0x0800790b
 80077d0:	08007837 	.word	0x08007837
 80077d4:	080078c5 	.word	0x080078c5
 80077d8:	08007789 	.word	0x08007789
 80077dc:	08007789 	.word	0x08007789
 80077e0:	0800792d 	.word	0x0800792d
 80077e4:	08007789 	.word	0x08007789
 80077e8:	08007837 	.word	0x08007837
 80077ec:	08007789 	.word	0x08007789
 80077f0:	08007789 	.word	0x08007789
 80077f4:	080078cd 	.word	0x080078cd
 80077f8:	6833      	ldr	r3, [r6, #0]
 80077fa:	1d1a      	adds	r2, r3, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6032      	str	r2, [r6, #0]
 8007800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007804:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007808:	2301      	movs	r3, #1
 800780a:	e09c      	b.n	8007946 <_printf_i+0x1e6>
 800780c:	6833      	ldr	r3, [r6, #0]
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	1d19      	adds	r1, r3, #4
 8007812:	6031      	str	r1, [r6, #0]
 8007814:	0606      	lsls	r6, r0, #24
 8007816:	d501      	bpl.n	800781c <_printf_i+0xbc>
 8007818:	681d      	ldr	r5, [r3, #0]
 800781a:	e003      	b.n	8007824 <_printf_i+0xc4>
 800781c:	0645      	lsls	r5, r0, #25
 800781e:	d5fb      	bpl.n	8007818 <_printf_i+0xb8>
 8007820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007824:	2d00      	cmp	r5, #0
 8007826:	da03      	bge.n	8007830 <_printf_i+0xd0>
 8007828:	232d      	movs	r3, #45	@ 0x2d
 800782a:	426d      	negs	r5, r5
 800782c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007830:	4858      	ldr	r0, [pc, #352]	@ (8007994 <_printf_i+0x234>)
 8007832:	230a      	movs	r3, #10
 8007834:	e011      	b.n	800785a <_printf_i+0xfa>
 8007836:	6821      	ldr	r1, [r4, #0]
 8007838:	6833      	ldr	r3, [r6, #0]
 800783a:	0608      	lsls	r0, r1, #24
 800783c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007840:	d402      	bmi.n	8007848 <_printf_i+0xe8>
 8007842:	0649      	lsls	r1, r1, #25
 8007844:	bf48      	it	mi
 8007846:	b2ad      	uxthmi	r5, r5
 8007848:	2f6f      	cmp	r7, #111	@ 0x6f
 800784a:	4852      	ldr	r0, [pc, #328]	@ (8007994 <_printf_i+0x234>)
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	bf14      	ite	ne
 8007850:	230a      	movne	r3, #10
 8007852:	2308      	moveq	r3, #8
 8007854:	2100      	movs	r1, #0
 8007856:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800785a:	6866      	ldr	r6, [r4, #4]
 800785c:	60a6      	str	r6, [r4, #8]
 800785e:	2e00      	cmp	r6, #0
 8007860:	db05      	blt.n	800786e <_printf_i+0x10e>
 8007862:	6821      	ldr	r1, [r4, #0]
 8007864:	432e      	orrs	r6, r5
 8007866:	f021 0104 	bic.w	r1, r1, #4
 800786a:	6021      	str	r1, [r4, #0]
 800786c:	d04b      	beq.n	8007906 <_printf_i+0x1a6>
 800786e:	4616      	mov	r6, r2
 8007870:	fbb5 f1f3 	udiv	r1, r5, r3
 8007874:	fb03 5711 	mls	r7, r3, r1, r5
 8007878:	5dc7      	ldrb	r7, [r0, r7]
 800787a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800787e:	462f      	mov	r7, r5
 8007880:	42bb      	cmp	r3, r7
 8007882:	460d      	mov	r5, r1
 8007884:	d9f4      	bls.n	8007870 <_printf_i+0x110>
 8007886:	2b08      	cmp	r3, #8
 8007888:	d10b      	bne.n	80078a2 <_printf_i+0x142>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	07df      	lsls	r7, r3, #31
 800788e:	d508      	bpl.n	80078a2 <_printf_i+0x142>
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	6861      	ldr	r1, [r4, #4]
 8007894:	4299      	cmp	r1, r3
 8007896:	bfde      	ittt	le
 8007898:	2330      	movle	r3, #48	@ 0x30
 800789a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800789e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078a2:	1b92      	subs	r2, r2, r6
 80078a4:	6122      	str	r2, [r4, #16]
 80078a6:	f8cd a000 	str.w	sl, [sp]
 80078aa:	464b      	mov	r3, r9
 80078ac:	aa03      	add	r2, sp, #12
 80078ae:	4621      	mov	r1, r4
 80078b0:	4640      	mov	r0, r8
 80078b2:	f7ff fee7 	bl	8007684 <_printf_common>
 80078b6:	3001      	adds	r0, #1
 80078b8:	d14a      	bne.n	8007950 <_printf_i+0x1f0>
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	b004      	add	sp, #16
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	f043 0320 	orr.w	r3, r3, #32
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	4832      	ldr	r0, [pc, #200]	@ (8007998 <_printf_i+0x238>)
 80078ce:	2778      	movs	r7, #120	@ 0x78
 80078d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	6831      	ldr	r1, [r6, #0]
 80078d8:	061f      	lsls	r7, r3, #24
 80078da:	f851 5b04 	ldr.w	r5, [r1], #4
 80078de:	d402      	bmi.n	80078e6 <_printf_i+0x186>
 80078e0:	065f      	lsls	r7, r3, #25
 80078e2:	bf48      	it	mi
 80078e4:	b2ad      	uxthmi	r5, r5
 80078e6:	6031      	str	r1, [r6, #0]
 80078e8:	07d9      	lsls	r1, r3, #31
 80078ea:	bf44      	itt	mi
 80078ec:	f043 0320 	orrmi.w	r3, r3, #32
 80078f0:	6023      	strmi	r3, [r4, #0]
 80078f2:	b11d      	cbz	r5, 80078fc <_printf_i+0x19c>
 80078f4:	2310      	movs	r3, #16
 80078f6:	e7ad      	b.n	8007854 <_printf_i+0xf4>
 80078f8:	4826      	ldr	r0, [pc, #152]	@ (8007994 <_printf_i+0x234>)
 80078fa:	e7e9      	b.n	80078d0 <_printf_i+0x170>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	f023 0320 	bic.w	r3, r3, #32
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	e7f6      	b.n	80078f4 <_printf_i+0x194>
 8007906:	4616      	mov	r6, r2
 8007908:	e7bd      	b.n	8007886 <_printf_i+0x126>
 800790a:	6833      	ldr	r3, [r6, #0]
 800790c:	6825      	ldr	r5, [r4, #0]
 800790e:	6961      	ldr	r1, [r4, #20]
 8007910:	1d18      	adds	r0, r3, #4
 8007912:	6030      	str	r0, [r6, #0]
 8007914:	062e      	lsls	r6, r5, #24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	d501      	bpl.n	800791e <_printf_i+0x1be>
 800791a:	6019      	str	r1, [r3, #0]
 800791c:	e002      	b.n	8007924 <_printf_i+0x1c4>
 800791e:	0668      	lsls	r0, r5, #25
 8007920:	d5fb      	bpl.n	800791a <_printf_i+0x1ba>
 8007922:	8019      	strh	r1, [r3, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	4616      	mov	r6, r2
 800792a:	e7bc      	b.n	80078a6 <_printf_i+0x146>
 800792c:	6833      	ldr	r3, [r6, #0]
 800792e:	1d1a      	adds	r2, r3, #4
 8007930:	6032      	str	r2, [r6, #0]
 8007932:	681e      	ldr	r6, [r3, #0]
 8007934:	6862      	ldr	r2, [r4, #4]
 8007936:	2100      	movs	r1, #0
 8007938:	4630      	mov	r0, r6
 800793a:	f7f8 fc81 	bl	8000240 <memchr>
 800793e:	b108      	cbz	r0, 8007944 <_printf_i+0x1e4>
 8007940:	1b80      	subs	r0, r0, r6
 8007942:	6060      	str	r0, [r4, #4]
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	2300      	movs	r3, #0
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800794e:	e7aa      	b.n	80078a6 <_printf_i+0x146>
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	4632      	mov	r2, r6
 8007954:	4649      	mov	r1, r9
 8007956:	4640      	mov	r0, r8
 8007958:	47d0      	blx	sl
 800795a:	3001      	adds	r0, #1
 800795c:	d0ad      	beq.n	80078ba <_printf_i+0x15a>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	079b      	lsls	r3, r3, #30
 8007962:	d413      	bmi.n	800798c <_printf_i+0x22c>
 8007964:	68e0      	ldr	r0, [r4, #12]
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	4298      	cmp	r0, r3
 800796a:	bfb8      	it	lt
 800796c:	4618      	movlt	r0, r3
 800796e:	e7a6      	b.n	80078be <_printf_i+0x15e>
 8007970:	2301      	movs	r3, #1
 8007972:	4632      	mov	r2, r6
 8007974:	4649      	mov	r1, r9
 8007976:	4640      	mov	r0, r8
 8007978:	47d0      	blx	sl
 800797a:	3001      	adds	r0, #1
 800797c:	d09d      	beq.n	80078ba <_printf_i+0x15a>
 800797e:	3501      	adds	r5, #1
 8007980:	68e3      	ldr	r3, [r4, #12]
 8007982:	9903      	ldr	r1, [sp, #12]
 8007984:	1a5b      	subs	r3, r3, r1
 8007986:	42ab      	cmp	r3, r5
 8007988:	dcf2      	bgt.n	8007970 <_printf_i+0x210>
 800798a:	e7eb      	b.n	8007964 <_printf_i+0x204>
 800798c:	2500      	movs	r5, #0
 800798e:	f104 0619 	add.w	r6, r4, #25
 8007992:	e7f5      	b.n	8007980 <_printf_i+0x220>
 8007994:	0800809d 	.word	0x0800809d
 8007998:	080080ae 	.word	0x080080ae

0800799c <__sflush_r>:
 800799c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	0716      	lsls	r6, r2, #28
 80079a6:	4605      	mov	r5, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	d454      	bmi.n	8007a56 <__sflush_r+0xba>
 80079ac:	684b      	ldr	r3, [r1, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dc02      	bgt.n	80079b8 <__sflush_r+0x1c>
 80079b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dd48      	ble.n	8007a4a <__sflush_r+0xae>
 80079b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	d045      	beq.n	8007a4a <__sflush_r+0xae>
 80079be:	2300      	movs	r3, #0
 80079c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079c4:	682f      	ldr	r7, [r5, #0]
 80079c6:	6a21      	ldr	r1, [r4, #32]
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	d030      	beq.n	8007a2e <__sflush_r+0x92>
 80079cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	0759      	lsls	r1, r3, #29
 80079d2:	d505      	bpl.n	80079e0 <__sflush_r+0x44>
 80079d4:	6863      	ldr	r3, [r4, #4]
 80079d6:	1ad2      	subs	r2, r2, r3
 80079d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079da:	b10b      	cbz	r3, 80079e0 <__sflush_r+0x44>
 80079dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079de:	1ad2      	subs	r2, r2, r3
 80079e0:	2300      	movs	r3, #0
 80079e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079e4:	6a21      	ldr	r1, [r4, #32]
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b0      	blx	r6
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	d106      	bne.n	80079fe <__sflush_r+0x62>
 80079f0:	6829      	ldr	r1, [r5, #0]
 80079f2:	291d      	cmp	r1, #29
 80079f4:	d82b      	bhi.n	8007a4e <__sflush_r+0xb2>
 80079f6:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa0 <__sflush_r+0x104>)
 80079f8:	40ca      	lsrs	r2, r1
 80079fa:	07d6      	lsls	r6, r2, #31
 80079fc:	d527      	bpl.n	8007a4e <__sflush_r+0xb2>
 80079fe:	2200      	movs	r2, #0
 8007a00:	6062      	str	r2, [r4, #4]
 8007a02:	04d9      	lsls	r1, r3, #19
 8007a04:	6922      	ldr	r2, [r4, #16]
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	d504      	bpl.n	8007a14 <__sflush_r+0x78>
 8007a0a:	1c42      	adds	r2, r0, #1
 8007a0c:	d101      	bne.n	8007a12 <__sflush_r+0x76>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	b903      	cbnz	r3, 8007a14 <__sflush_r+0x78>
 8007a12:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a16:	602f      	str	r7, [r5, #0]
 8007a18:	b1b9      	cbz	r1, 8007a4a <__sflush_r+0xae>
 8007a1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a1e:	4299      	cmp	r1, r3
 8007a20:	d002      	beq.n	8007a28 <__sflush_r+0x8c>
 8007a22:	4628      	mov	r0, r5
 8007a24:	f7ff fa9c 	bl	8006f60 <_free_r>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a2c:	e00d      	b.n	8007a4a <__sflush_r+0xae>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b0      	blx	r6
 8007a34:	4602      	mov	r2, r0
 8007a36:	1c50      	adds	r0, r2, #1
 8007a38:	d1c9      	bne.n	80079ce <__sflush_r+0x32>
 8007a3a:	682b      	ldr	r3, [r5, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d0c6      	beq.n	80079ce <__sflush_r+0x32>
 8007a40:	2b1d      	cmp	r3, #29
 8007a42:	d001      	beq.n	8007a48 <__sflush_r+0xac>
 8007a44:	2b16      	cmp	r3, #22
 8007a46:	d11e      	bne.n	8007a86 <__sflush_r+0xea>
 8007a48:	602f      	str	r7, [r5, #0]
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e022      	b.n	8007a94 <__sflush_r+0xf8>
 8007a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a52:	b21b      	sxth	r3, r3
 8007a54:	e01b      	b.n	8007a8e <__sflush_r+0xf2>
 8007a56:	690f      	ldr	r7, [r1, #16]
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	d0f6      	beq.n	8007a4a <__sflush_r+0xae>
 8007a5c:	0793      	lsls	r3, r2, #30
 8007a5e:	680e      	ldr	r6, [r1, #0]
 8007a60:	bf08      	it	eq
 8007a62:	694b      	ldreq	r3, [r1, #20]
 8007a64:	600f      	str	r7, [r1, #0]
 8007a66:	bf18      	it	ne
 8007a68:	2300      	movne	r3, #0
 8007a6a:	eba6 0807 	sub.w	r8, r6, r7
 8007a6e:	608b      	str	r3, [r1, #8]
 8007a70:	f1b8 0f00 	cmp.w	r8, #0
 8007a74:	dde9      	ble.n	8007a4a <__sflush_r+0xae>
 8007a76:	6a21      	ldr	r1, [r4, #32]
 8007a78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a7a:	4643      	mov	r3, r8
 8007a7c:	463a      	mov	r2, r7
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b0      	blx	r6
 8007a82:	2800      	cmp	r0, #0
 8007a84:	dc08      	bgt.n	8007a98 <__sflush_r+0xfc>
 8007a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a8e:	81a3      	strh	r3, [r4, #12]
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a98:	4407      	add	r7, r0
 8007a9a:	eba8 0800 	sub.w	r8, r8, r0
 8007a9e:	e7e7      	b.n	8007a70 <__sflush_r+0xd4>
 8007aa0:	20400001 	.word	0x20400001

08007aa4 <_fflush_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	b913      	cbnz	r3, 8007ab4 <_fflush_r+0x10>
 8007aae:	2500      	movs	r5, #0
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	b118      	cbz	r0, 8007abe <_fflush_r+0x1a>
 8007ab6:	6a03      	ldr	r3, [r0, #32]
 8007ab8:	b90b      	cbnz	r3, 8007abe <_fflush_r+0x1a>
 8007aba:	f7ff f8a7 	bl	8006c0c <__sinit>
 8007abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f3      	beq.n	8007aae <_fflush_r+0xa>
 8007ac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ac8:	07d0      	lsls	r0, r2, #31
 8007aca:	d404      	bmi.n	8007ad6 <_fflush_r+0x32>
 8007acc:	0599      	lsls	r1, r3, #22
 8007ace:	d402      	bmi.n	8007ad6 <_fflush_r+0x32>
 8007ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ad2:	f7ff fa34 	bl	8006f3e <__retarget_lock_acquire_recursive>
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	4621      	mov	r1, r4
 8007ada:	f7ff ff5f 	bl	800799c <__sflush_r>
 8007ade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ae0:	07da      	lsls	r2, r3, #31
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	d4e4      	bmi.n	8007ab0 <_fflush_r+0xc>
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	059b      	lsls	r3, r3, #22
 8007aea:	d4e1      	bmi.n	8007ab0 <_fflush_r+0xc>
 8007aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aee:	f7ff fa27 	bl	8006f40 <__retarget_lock_release_recursive>
 8007af2:	e7dd      	b.n	8007ab0 <_fflush_r+0xc>

08007af4 <__swbuf_r>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	460e      	mov	r6, r1
 8007af8:	4614      	mov	r4, r2
 8007afa:	4605      	mov	r5, r0
 8007afc:	b118      	cbz	r0, 8007b06 <__swbuf_r+0x12>
 8007afe:	6a03      	ldr	r3, [r0, #32]
 8007b00:	b90b      	cbnz	r3, 8007b06 <__swbuf_r+0x12>
 8007b02:	f7ff f883 	bl	8006c0c <__sinit>
 8007b06:	69a3      	ldr	r3, [r4, #24]
 8007b08:	60a3      	str	r3, [r4, #8]
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	071a      	lsls	r2, r3, #28
 8007b0e:	d501      	bpl.n	8007b14 <__swbuf_r+0x20>
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	b943      	cbnz	r3, 8007b26 <__swbuf_r+0x32>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 f82a 	bl	8007b70 <__swsetup_r>
 8007b1c:	b118      	cbz	r0, 8007b26 <__swbuf_r+0x32>
 8007b1e:	f04f 37ff 	mov.w	r7, #4294967295
 8007b22:	4638      	mov	r0, r7
 8007b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	6922      	ldr	r2, [r4, #16]
 8007b2a:	1a98      	subs	r0, r3, r2
 8007b2c:	6963      	ldr	r3, [r4, #20]
 8007b2e:	b2f6      	uxtb	r6, r6
 8007b30:	4283      	cmp	r3, r0
 8007b32:	4637      	mov	r7, r6
 8007b34:	dc05      	bgt.n	8007b42 <__swbuf_r+0x4e>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f7ff ffb3 	bl	8007aa4 <_fflush_r>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d1ed      	bne.n	8007b1e <__swbuf_r+0x2a>
 8007b42:	68a3      	ldr	r3, [r4, #8]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	60a3      	str	r3, [r4, #8]
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	6022      	str	r2, [r4, #0]
 8007b4e:	701e      	strb	r6, [r3, #0]
 8007b50:	6962      	ldr	r2, [r4, #20]
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d004      	beq.n	8007b62 <__swbuf_r+0x6e>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d5e1      	bpl.n	8007b22 <__swbuf_r+0x2e>
 8007b5e:	2e0a      	cmp	r6, #10
 8007b60:	d1df      	bne.n	8007b22 <__swbuf_r+0x2e>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4628      	mov	r0, r5
 8007b66:	f7ff ff9d 	bl	8007aa4 <_fflush_r>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d0d9      	beq.n	8007b22 <__swbuf_r+0x2e>
 8007b6e:	e7d6      	b.n	8007b1e <__swbuf_r+0x2a>

08007b70 <__swsetup_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4b29      	ldr	r3, [pc, #164]	@ (8007c18 <__swsetup_r+0xa8>)
 8007b74:	4605      	mov	r5, r0
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	460c      	mov	r4, r1
 8007b7a:	b118      	cbz	r0, 8007b84 <__swsetup_r+0x14>
 8007b7c:	6a03      	ldr	r3, [r0, #32]
 8007b7e:	b90b      	cbnz	r3, 8007b84 <__swsetup_r+0x14>
 8007b80:	f7ff f844 	bl	8006c0c <__sinit>
 8007b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	d422      	bmi.n	8007bd2 <__swsetup_r+0x62>
 8007b8c:	06da      	lsls	r2, r3, #27
 8007b8e:	d407      	bmi.n	8007ba0 <__swsetup_r+0x30>
 8007b90:	2209      	movs	r2, #9
 8007b92:	602a      	str	r2, [r5, #0]
 8007b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9e:	e033      	b.n	8007c08 <__swsetup_r+0x98>
 8007ba0:	0758      	lsls	r0, r3, #29
 8007ba2:	d512      	bpl.n	8007bca <__swsetup_r+0x5a>
 8007ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ba6:	b141      	cbz	r1, 8007bba <__swsetup_r+0x4a>
 8007ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bac:	4299      	cmp	r1, r3
 8007bae:	d002      	beq.n	8007bb6 <__swsetup_r+0x46>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f7ff f9d5 	bl	8006f60 <_free_r>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6063      	str	r3, [r4, #4]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f043 0308 	orr.w	r3, r3, #8
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	b94b      	cbnz	r3, 8007bea <__swsetup_r+0x7a>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be0:	d003      	beq.n	8007bea <__swsetup_r+0x7a>
 8007be2:	4621      	mov	r1, r4
 8007be4:	4628      	mov	r0, r5
 8007be6:	f000 f897 	bl	8007d18 <__smakebuf_r>
 8007bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bee:	f013 0201 	ands.w	r2, r3, #1
 8007bf2:	d00a      	beq.n	8007c0a <__swsetup_r+0x9a>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	60a2      	str	r2, [r4, #8]
 8007bf8:	6962      	ldr	r2, [r4, #20]
 8007bfa:	4252      	negs	r2, r2
 8007bfc:	61a2      	str	r2, [r4, #24]
 8007bfe:	6922      	ldr	r2, [r4, #16]
 8007c00:	b942      	cbnz	r2, 8007c14 <__swsetup_r+0xa4>
 8007c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c06:	d1c5      	bne.n	8007b94 <__swsetup_r+0x24>
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
 8007c0a:	0799      	lsls	r1, r3, #30
 8007c0c:	bf58      	it	pl
 8007c0e:	6962      	ldrpl	r2, [r4, #20]
 8007c10:	60a2      	str	r2, [r4, #8]
 8007c12:	e7f4      	b.n	8007bfe <__swsetup_r+0x8e>
 8007c14:	2000      	movs	r0, #0
 8007c16:	e7f7      	b.n	8007c08 <__swsetup_r+0x98>
 8007c18:	2000001c 	.word	0x2000001c

08007c1c <memmove>:
 8007c1c:	4288      	cmp	r0, r1
 8007c1e:	b510      	push	{r4, lr}
 8007c20:	eb01 0402 	add.w	r4, r1, r2
 8007c24:	d902      	bls.n	8007c2c <memmove+0x10>
 8007c26:	4284      	cmp	r4, r0
 8007c28:	4623      	mov	r3, r4
 8007c2a:	d807      	bhi.n	8007c3c <memmove+0x20>
 8007c2c:	1e43      	subs	r3, r0, #1
 8007c2e:	42a1      	cmp	r1, r4
 8007c30:	d008      	beq.n	8007c44 <memmove+0x28>
 8007c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c3a:	e7f8      	b.n	8007c2e <memmove+0x12>
 8007c3c:	4402      	add	r2, r0
 8007c3e:	4601      	mov	r1, r0
 8007c40:	428a      	cmp	r2, r1
 8007c42:	d100      	bne.n	8007c46 <memmove+0x2a>
 8007c44:	bd10      	pop	{r4, pc}
 8007c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c4e:	e7f7      	b.n	8007c40 <memmove+0x24>

08007c50 <_sbrk_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d06      	ldr	r5, [pc, #24]	@ (8007c6c <_sbrk_r+0x1c>)
 8007c54:	2300      	movs	r3, #0
 8007c56:	4604      	mov	r4, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	f7f9 f974 	bl	8000f48 <_sbrk>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_sbrk_r+0x1a>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_sbrk_r+0x1a>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	20004cd0 	.word	0x20004cd0

08007c70 <_realloc_r>:
 8007c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c74:	4607      	mov	r7, r0
 8007c76:	4614      	mov	r4, r2
 8007c78:	460d      	mov	r5, r1
 8007c7a:	b921      	cbnz	r1, 8007c86 <_realloc_r+0x16>
 8007c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	4611      	mov	r1, r2
 8007c82:	f7ff b9d9 	b.w	8007038 <_malloc_r>
 8007c86:	b92a      	cbnz	r2, 8007c94 <_realloc_r+0x24>
 8007c88:	f7ff f96a 	bl	8006f60 <_free_r>
 8007c8c:	4625      	mov	r5, r4
 8007c8e:	4628      	mov	r0, r5
 8007c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c94:	f000 f89e 	bl	8007dd4 <_malloc_usable_size_r>
 8007c98:	4284      	cmp	r4, r0
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	d802      	bhi.n	8007ca4 <_realloc_r+0x34>
 8007c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ca2:	d8f4      	bhi.n	8007c8e <_realloc_r+0x1e>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	f7ff f9c6 	bl	8007038 <_malloc_r>
 8007cac:	4680      	mov	r8, r0
 8007cae:	b908      	cbnz	r0, 8007cb4 <_realloc_r+0x44>
 8007cb0:	4645      	mov	r5, r8
 8007cb2:	e7ec      	b.n	8007c8e <_realloc_r+0x1e>
 8007cb4:	42b4      	cmp	r4, r6
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	bf28      	it	cs
 8007cbc:	4632      	movcs	r2, r6
 8007cbe:	f7ff f940 	bl	8006f42 <memcpy>
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff f94b 	bl	8006f60 <_free_r>
 8007cca:	e7f1      	b.n	8007cb0 <_realloc_r+0x40>

08007ccc <__swhatbuf_r>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	460c      	mov	r4, r1
 8007cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	b096      	sub	sp, #88	@ 0x58
 8007cd8:	4615      	mov	r5, r2
 8007cda:	461e      	mov	r6, r3
 8007cdc:	da0d      	bge.n	8007cfa <__swhatbuf_r+0x2e>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ce4:	f04f 0100 	mov.w	r1, #0
 8007ce8:	bf14      	ite	ne
 8007cea:	2340      	movne	r3, #64	@ 0x40
 8007cec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	6031      	str	r1, [r6, #0]
 8007cf4:	602b      	str	r3, [r5, #0]
 8007cf6:	b016      	add	sp, #88	@ 0x58
 8007cf8:	bd70      	pop	{r4, r5, r6, pc}
 8007cfa:	466a      	mov	r2, sp
 8007cfc:	f000 f848 	bl	8007d90 <_fstat_r>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	dbec      	blt.n	8007cde <__swhatbuf_r+0x12>
 8007d04:	9901      	ldr	r1, [sp, #4]
 8007d06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d0e:	4259      	negs	r1, r3
 8007d10:	4159      	adcs	r1, r3
 8007d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d16:	e7eb      	b.n	8007cf0 <__swhatbuf_r+0x24>

08007d18 <__smakebuf_r>:
 8007d18:	898b      	ldrh	r3, [r1, #12]
 8007d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d1c:	079d      	lsls	r5, r3, #30
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460c      	mov	r4, r1
 8007d22:	d507      	bpl.n	8007d34 <__smakebuf_r+0x1c>
 8007d24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	6163      	str	r3, [r4, #20]
 8007d30:	b003      	add	sp, #12
 8007d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d34:	ab01      	add	r3, sp, #4
 8007d36:	466a      	mov	r2, sp
 8007d38:	f7ff ffc8 	bl	8007ccc <__swhatbuf_r>
 8007d3c:	9f00      	ldr	r7, [sp, #0]
 8007d3e:	4605      	mov	r5, r0
 8007d40:	4639      	mov	r1, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff f978 	bl	8007038 <_malloc_r>
 8007d48:	b948      	cbnz	r0, 8007d5e <__smakebuf_r+0x46>
 8007d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4e:	059a      	lsls	r2, r3, #22
 8007d50:	d4ee      	bmi.n	8007d30 <__smakebuf_r+0x18>
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	f043 0302 	orr.w	r3, r3, #2
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	e7e2      	b.n	8007d24 <__smakebuf_r+0xc>
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	6020      	str	r0, [r4, #0]
 8007d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d6e:	b15b      	cbz	r3, 8007d88 <__smakebuf_r+0x70>
 8007d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d74:	4630      	mov	r0, r6
 8007d76:	f000 f81d 	bl	8007db4 <_isatty_r>
 8007d7a:	b128      	cbz	r0, 8007d88 <__smakebuf_r+0x70>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f023 0303 	bic.w	r3, r3, #3
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	81a3      	strh	r3, [r4, #12]
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	431d      	orrs	r5, r3
 8007d8c:	81a5      	strh	r5, [r4, #12]
 8007d8e:	e7cf      	b.n	8007d30 <__smakebuf_r+0x18>

08007d90 <_fstat_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d07      	ldr	r5, [pc, #28]	@ (8007db0 <_fstat_r+0x20>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	602b      	str	r3, [r5, #0]
 8007d9e:	f7f9 f8aa 	bl	8000ef6 <_fstat>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d102      	bne.n	8007dac <_fstat_r+0x1c>
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	b103      	cbz	r3, 8007dac <_fstat_r+0x1c>
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	bf00      	nop
 8007db0:	20004cd0 	.word	0x20004cd0

08007db4 <_isatty_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d06      	ldr	r5, [pc, #24]	@ (8007dd0 <_isatty_r+0x1c>)
 8007db8:	2300      	movs	r3, #0
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	602b      	str	r3, [r5, #0]
 8007dc0:	f7f9 f8a9 	bl	8000f16 <_isatty>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_isatty_r+0x1a>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_isatty_r+0x1a>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20004cd0 	.word	0x20004cd0

08007dd4 <_malloc_usable_size_r>:
 8007dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd8:	1f18      	subs	r0, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bfbc      	itt	lt
 8007dde:	580b      	ldrlt	r3, [r1, r0]
 8007de0:	18c0      	addlt	r0, r0, r3
 8007de2:	4770      	bx	lr

08007de4 <_init>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr

08007df0 <_fini>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr
