
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080072b0  080072b0  000082b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800741c  0800741c  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007424  08007424  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007424  08007424  00008424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007428  08007428  00008428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800742c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bfc  2000006c  08007498  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c68  08007498  00009c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dc9  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b5  00000000  00000000  00022e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00026820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c2  00000000  00000000  00027dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000482c  00000000  00000000  00028e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018841  00000000  00000000  0002d6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd85c  00000000  00000000  00045eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012374b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b0  00000000  00000000  00123790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00129a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007298 	.word	0x08007298

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007298 	.word	0x08007298

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	ITM_SendChar(chr);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffd1 	bl	80005dc <ITM_SendChar>
	return 1;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fbe4 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f848 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 f8de 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f8b2 	bl	80007bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000658:	f002 fad4 	bl	8002c04 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of abcQueue01 */
  abcQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &abcQueue01_attributes);
 800065c:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <main+0x6c>)
 800065e:	2102      	movs	r1, #2
 8000660:	2010      	movs	r0, #16
 8000662:	f002 fcac 	bl	8002fbe <osMessageQueueNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <main+0x70>)
 800066a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ProducerTask */
  ProducerTaskHandle = osThreadNew(StartProducerTask, NULL, &ProducerTask_attributes);
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <main+0x74>)
 800066e:	2100      	movs	r1, #0
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <main+0x78>)
 8000672:	f002 fb11 	bl	8002c98 <osThreadNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a11      	ldr	r2, [pc, #68]	@ (80006c0 <main+0x7c>)
 800067a:	6013      	str	r3, [r2, #0]

  /* creation of ConsumerTask */
  ConsumerTaskHandle = osThreadNew(StartConsumerTask, NULL, &ConsumerTask_attributes);
 800067c:	4a11      	ldr	r2, [pc, #68]	@ (80006c4 <main+0x80>)
 800067e:	2100      	movs	r1, #0
 8000680:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <main+0x84>)
 8000682:	f002 fb09 	bl	8002c98 <osThreadNew>
 8000686:	4603      	mov	r3, r0
 8000688:	4a10      	ldr	r2, [pc, #64]	@ (80006cc <main+0x88>)
 800068a:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 800068c:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <main+0x8c>)
 800068e:	2100      	movs	r1, #0
 8000690:	4810      	ldr	r0, [pc, #64]	@ (80006d4 <main+0x90>)
 8000692:	f002 fb01 	bl	8002c98 <osThreadNew>
 8000696:	4603      	mov	r3, r0
 8000698:	4a0f      	ldr	r2, [pc, #60]	@ (80006d8 <main+0x94>)
 800069a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  myEventFlags = osEventFlagsNew(NULL);
 800069c:	2000      	movs	r0, #0
 800069e:	f002 fba8 	bl	8002df2 <osEventFlagsNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <main+0x98>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a8:	f002 fad0 	bl	8002c4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <main+0x68>
 80006b0:	080073b8 	.word	0x080073b8
 80006b4:	200000dc 	.word	0x200000dc
 80006b8:	0800734c 	.word	0x0800734c
 80006bc:	080008e1 	.word	0x080008e1
 80006c0:	200000d0 	.word	0x200000d0
 80006c4:	08007370 	.word	0x08007370
 80006c8:	08000949 	.word	0x08000949
 80006cc:	200000d4 	.word	0x200000d4
 80006d0:	08007394 	.word	0x08007394
 80006d4:	0800098d 	.word	0x0800098d
 80006d8:	200000d8 	.word	0x200000d8
 80006dc:	200000e0 	.word	0x200000e0

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2234      	movs	r2, #52	@ 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 ffe4 	bl	80066bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <SystemClock_Config+0xd4>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <SystemClock_Config+0xd4>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemClock_Config+0xd4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072c:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <SystemClock_Config+0xd8>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <SystemClock_Config+0xd8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000754:	2310      	movs	r3, #16
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000758:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800075c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800075e:	2304      	movs	r3, #4
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fa00 	bl	8001b74 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800077a:	f000 f93f 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2102      	movs	r1, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fe6e 	bl	800147c <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007a6:	f000 f929 	bl	80009fc <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	@ 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f001 fefe 	bl	80025f4 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f8fd 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000088 	.word	0x20000088
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a29      	ldr	r2, [pc, #164]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a22      	ldr	r2, [pc, #136]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a1b      	ldr	r2, [pc, #108]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_GPIO_Init+0xc4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <MX_GPIO_Init+0xc8>)
 8000880:	f000 fda4 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4810      	ldr	r0, [pc, #64]	@ (80008dc <MX_GPIO_Init+0xcc>)
 800089c:	f000 fc02 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	4808      	ldr	r0, [pc, #32]	@ (80008d8 <MX_GPIO_Init+0xc8>)
 80008b8:	f000 fbf4 	bl	80010a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2105      	movs	r1, #5
 80008c0:	2028      	movs	r0, #40	@ 0x28
 80008c2:	f000 fbc5 	bl	8001050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c6:	2028      	movs	r0, #40	@ 0x28
 80008c8:	f000 fbde 	bl	8001088 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800

080008e0 <StartProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProducerTask */
void StartProducerTask(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint16_t value =0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	817b      	strh	r3, [r7, #10]
  osStatus_t statusSender =0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	printf("ProducerTask Start\r\n");
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <StartProducerTask+0x58>)
 80008f2:	f005 fe03 	bl	80064fc <puts>
	printf("Sending: %d \r\n", value);
 80008f6:	897b      	ldrh	r3, [r7, #10]
 80008f8:	4619      	mov	r1, r3
 80008fa:	4810      	ldr	r0, [pc, #64]	@ (800093c <StartProducerTask+0x5c>)
 80008fc:	f005 fd96 	bl	800642c <iprintf>
	statusSender = osMessageQueuePut(abcQueue01Handle, &value, 0, osWaitForever);
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <StartProducerTask+0x60>)
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	f107 010a 	add.w	r1, r7, #10
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	2200      	movs	r2, #0
 800090e:	f002 fbc9 	bl	80030a4 <osMessageQueuePut>
 8000912:	60f8      	str	r0, [r7, #12]
	if(++value > 20)
 8000914:	897b      	ldrh	r3, [r7, #10]
 8000916:	3301      	adds	r3, #1
 8000918:	b29b      	uxth	r3, r3
 800091a:	817b      	strh	r3, [r7, #10]
 800091c:	897b      	ldrh	r3, [r7, #10]
 800091e:	2b14      	cmp	r3, #20
 8000920:	d901      	bls.n	8000926 <StartProducerTask+0x46>
	{
		value = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	817b      	strh	r3, [r7, #10]
	}
	printf("statusSender: %d \r\n", statusSender);
 8000926:	68f9      	ldr	r1, [r7, #12]
 8000928:	4806      	ldr	r0, [pc, #24]	@ (8000944 <StartProducerTask+0x64>)
 800092a:	f005 fd7f 	bl	800642c <iprintf>
    osDelay(1000);
 800092e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000932:	f002 fa43 	bl	8002dbc <osDelay>
	printf("ProducerTask Start\r\n");
 8000936:	e7db      	b.n	80008f0 <StartProducerTask+0x10>
 8000938:	080072e4 	.word	0x080072e4
 800093c:	080072f8 	.word	0x080072f8
 8000940:	200000dc 	.word	0x200000dc
 8000944:	08007308 	.word	0x08007308

08000948 <StartConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsumerTask */
void StartConsumerTask(void *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConsumerTask */
  uint16_t valueRec = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	817b      	strh	r3, [r7, #10]
  osStatus_t statusReceiver = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  statusReceiver = osMessageQueueGet(abcQueue01Handle, &valueRec, NULL, osWaitForever);
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <StartConsumerTask+0x3c>)
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	f107 010a 	add.w	r1, r7, #10
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	2200      	movs	r2, #0
 8000966:	f002 fbfd 	bl	8003164 <osMessageQueueGet>
 800096a:	60f8      	str	r0, [r7, #12]
	printf("Received value: %d \r\n", valueRec);
 800096c:	897b      	ldrh	r3, [r7, #10]
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <StartConsumerTask+0x40>)
 8000972:	f005 fd5b 	bl	800642c <iprintf>
    osDelay(1000);
 8000976:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097a:	f002 fa1f 	bl	8002dbc <osDelay>
	  statusReceiver = osMessageQueueGet(abcQueue01Handle, &valueRec, NULL, osWaitForever);
 800097e:	bf00      	nop
 8000980:	e7ea      	b.n	8000958 <StartConsumerTask+0x10>
 8000982:	bf00      	nop
 8000984:	200000dc 	.word	0x200000dc
 8000988:	0800731c 	.word	0x0800731c

0800098c <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(myEventFlags, 0x1, osFlagsWaitAll, osWaitForever);
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <StartLedTask+0x44>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	f002 faa8 	bl	8002ef4 <osEventFlagsWait>
	  for(int i = 0; i<10; i++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e009      	b.n	80009be <StartLedTask+0x32>
	  {
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009aa:	2120      	movs	r1, #32
 80009ac:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <StartLedTask+0x48>)
 80009ae:	f000 fd26 	bl	80013fe <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 80009b2:	2032      	movs	r0, #50	@ 0x32
 80009b4:	f000 fa70 	bl	8000e98 <HAL_Delay>
	  for(int i = 0; i<10; i++)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b09      	cmp	r3, #9
 80009c2:	ddf2      	ble.n	80009aa <StartLedTask+0x1e>
	  }
    osDelay(1000);
 80009c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c8:	f002 f9f8 	bl	8002dbc <osDelay>
	  osEventFlagsWait(myEventFlags, 0x1, osFlagsWaitAll, osWaitForever);
 80009cc:	e7e2      	b.n	8000994 <StartLedTask+0x8>
 80009ce:	bf00      	nop
 80009d0:	200000e0 	.word	0x200000e0
 80009d4:	40020000 	.word	0x40020000

080009d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009ea:	f000 fa35 	bl	8000e58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40000c00 	.word	0x40000c00

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a11      	ldr	r2, [pc, #68]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_MspInit+0x54>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210f      	movs	r1, #15
 8000a4a:	f06f 0001 	mvn.w	r0, #1
 8000a4e:	f000 faff 	bl	8001050 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	@ (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12b      	bne.n	8000ada <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a10      	ldr	r2, [pc, #64]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aba:	230c      	movs	r3, #12
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aca:	2307      	movs	r3, #7
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <HAL_UART_MspInit+0x8c>)
 8000ad6:	f000 fae5 	bl	80010a4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	@ 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	@ 0x38
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b33      	ldr	r3, [pc, #204]	@ (8000bd4 <HAL_InitTick+0xe4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a32      	ldr	r2, [pc, #200]	@ (8000bd4 <HAL_InitTick+0xe4>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b30      	ldr	r3, [pc, #192]	@ (8000bd4 <HAL_InitTick+0xe4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fdc2 	bl	80016b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b36:	f000 fd93 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8000b3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b3c:	e004      	b.n	8000b48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b3e:	f000 fd8f 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8000b42:	4603      	mov	r3, r0
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b4a:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <HAL_InitTick+0xe8>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	0c9b      	lsrs	r3, r3, #18
 8000b52:	3b01      	subs	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b58:	4a21      	ldr	r2, [pc, #132]	@ (8000be0 <HAL_InitTick+0xf0>)
 8000b5a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b62:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b64:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b68:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b7c:	4817      	ldr	r0, [pc, #92]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b7e:	f001 fa97 	bl	80020b0 <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d11b      	bne.n	8000bc8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b90:	4812      	ldr	r0, [pc, #72]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b92:	f001 fae7 	bl	8002164 <HAL_TIM_Base_Start_IT>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d111      	bne.n	8000bc8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ba4:	2032      	movs	r0, #50	@ 0x32
 8000ba6:	f000 fa6f 	bl	8001088 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d808      	bhi.n	8000bc2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2032      	movs	r0, #50	@ 0x32
 8000bb6:	f000 fa4b 	bl	8001050 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <HAL_InitTick+0xf4>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e002      	b.n	8000bc8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3738      	adds	r7, #56	@ 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	431bde83 	.word	0x431bde83
 8000bdc:	200000e4 	.word	0x200000e4
 8000be0:	40000c00 	.word	0x40000c00
 8000be4:	20000004 	.word	0x20000004

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  osEventFlagsSet(myEventFlags, 0x1);
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <EXTI15_10_IRQHandler+0x1c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 f920 	bl	8002e70 <osEventFlagsSet>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000c30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c34:	f000 fbfe 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000e0 	.word	0x200000e0

08000c40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <TIM5_IRQHandler+0x10>)
 8000c46:	f001 fafd 	bl	8002244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000e4 	.word	0x200000e4

08000c54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
  }

  return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e009      	b.n	8000cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fcbe 	bl	800062a <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf1      	blt.n	8000ca0 <_write+0x12>
  }
  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f005 fd58 	bl	8006814 <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20020000 	.word	0x20020000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	2000012c 	.word	0x2000012c
 8000d98:	20004c68 	.word	0x20004c68

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc4:	f7ff ffea 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f005 fd17 	bl	8006820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fc27 	bl	8000644 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e04:	0800742c 	.word	0x0800742c
  ldr r2, =_sbss
 8000e08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e0c:	20004c68 	.word	0x20004c68

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	@ (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f8fc 	bl	800103a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff fe54 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fdde 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000130 	.word	0x20000130

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000130 	.word	0x20000130

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	@ (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff4c 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001062:	f7ff ff61 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 8001066:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f7ff ffb1 	bl	8000fd4 <NVIC_EncodePriority>
 8001072:	4602      	mov	r2, r0
 8001074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff80 	bl	8000f80 <__NVIC_SetPriority>
}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff54 	bl	8000f44 <__NVIC_EnableIRQ>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e165      	b.n	800138c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8154 	bne.w	8001386 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d130      	bne.n	8001158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80ae 	beq.w	8001386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b5d      	ldr	r3, [pc, #372]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	4a5c      	ldr	r2, [pc, #368]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001238:	6453      	str	r3, [r2, #68]	@ 0x44
 800123a:	4b5a      	ldr	r3, [pc, #360]	@ (80013a4 <HAL_GPIO_Init+0x300>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a58      	ldr	r2, [pc, #352]	@ (80013a8 <HAL_GPIO_Init+0x304>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4f      	ldr	r2, [pc, #316]	@ (80013ac <HAL_GPIO_Init+0x308>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d025      	beq.n	80012be <HAL_GPIO_Init+0x21a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4e      	ldr	r2, [pc, #312]	@ (80013b0 <HAL_GPIO_Init+0x30c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01f      	beq.n	80012ba <HAL_GPIO_Init+0x216>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4d      	ldr	r2, [pc, #308]	@ (80013b4 <HAL_GPIO_Init+0x310>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x212>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4c      	ldr	r2, [pc, #304]	@ (80013b8 <HAL_GPIO_Init+0x314>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x20e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4b      	ldr	r2, [pc, #300]	@ (80013bc <HAL_GPIO_Init+0x318>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x20a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4a      	ldr	r2, [pc, #296]	@ (80013c0 <HAL_GPIO_Init+0x31c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x206>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a49      	ldr	r2, [pc, #292]	@ (80013c4 <HAL_GPIO_Init+0x320>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x202>
 80012a2:	2306      	movs	r3, #6
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012a6:	2307      	movs	r3, #7
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x21c>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	@ (80013a8 <HAL_GPIO_Init+0x304>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b3a      	ldr	r3, [pc, #232]	@ (80013c8 <HAL_GPIO_Init+0x324>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a31      	ldr	r2, [pc, #196]	@ (80013c8 <HAL_GPIO_Init+0x324>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <HAL_GPIO_Init+0x324>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a26      	ldr	r2, [pc, #152]	@ (80013c8 <HAL_GPIO_Init+0x324>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <HAL_GPIO_Init+0x324>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1c      	ldr	r2, [pc, #112]	@ (80013c8 <HAL_GPIO_Init+0x324>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <HAL_GPIO_Init+0x324>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a11      	ldr	r2, [pc, #68]	@ (80013c8 <HAL_GPIO_Init+0x324>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae96 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	041a      	lsls	r2, r3, #16
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43d9      	mvns	r1, r3
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	400b      	ands	r3, r1
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144a:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f806 	bl	8001464 <HAL_GPIO_EXTI_Callback>
  }
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0cc      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4b68      	ldr	r3, [pc, #416]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d90c      	bls.n	80014b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b65      	ldr	r3, [pc, #404]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b63      	ldr	r3, [pc, #396]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b8      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d0:	4b59      	ldr	r3, [pc, #356]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e8:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a52      	ldr	r2, [pc, #328]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f4:	4b50      	ldr	r3, [pc, #320]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	494d      	ldr	r1, [pc, #308]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d044      	beq.n	800159c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d119      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e07f      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d003      	beq.n	800153a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001536:	2b03      	cmp	r3, #3
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06f      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e067      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155a:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f023 0203 	bic.w	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4934      	ldr	r1, [pc, #208]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800156c:	f7ff fc88 	bl	8000e80 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	e00a      	b.n	800158a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f7ff fc84 	bl	8000e80 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e04f      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 020c 	and.w	r2, r3, #12
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	429a      	cmp	r2, r3
 800159a:	d1eb      	bne.n	8001574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800159c:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d20c      	bcs.n	80015c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e032      	b.n	800162a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4916      	ldr	r1, [pc, #88]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	490e      	ldr	r1, [pc, #56]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001602:	f000 f887 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 8001606:	4602      	mov	r2, r0
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	490a      	ldr	r1, [pc, #40]	@ (800163c <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	5ccb      	ldrb	r3, [r1, r3]
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_RCC_ClockConfig+0x1c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fa64 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023c00 	.word	0x40023c00
 8001638:	40023800 	.word	0x40023800
 800163c:	080073d0 	.word	0x080073d0
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_RCC_GetHCLKFreq+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000

08001660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001664:	f7ff fff0 	bl	8001648 <HAL_RCC_GetHCLKFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	0a9b      	lsrs	r3, r3, #10
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	4903      	ldr	r1, [pc, #12]	@ (8001684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	080073e0 	.word	0x080073e0

08001688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800168c:	f7ff ffdc 	bl	8001648 <HAL_RCC_GetHCLKFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	0b5b      	lsrs	r3, r3, #13
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	4903      	ldr	r1, [pc, #12]	@ (80016ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	080073e0 	.word	0x080073e0

080016b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	220f      	movs	r2, #15
 80016be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_RCC_GetClockConfig+0x5c>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_RCC_GetClockConfig+0x5c>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_RCC_GetClockConfig+0x5c>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_RCC_GetClockConfig+0x5c>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016f2:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <HAL_RCC_GetClockConfig+0x60>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 020f 	and.w	r2, r3, #15
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	601a      	str	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001718:	b0ae      	sub	sp, #184	@ 0xb8
 800171a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173a:	4bcb      	ldr	r3, [pc, #812]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b0c      	cmp	r3, #12
 8001744:	f200 8206 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x440>
 8001748:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <HAL_RCC_GetSysClockFreq+0x3c>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001785 	.word	0x08001785
 8001754:	08001b55 	.word	0x08001b55
 8001758:	08001b55 	.word	0x08001b55
 800175c:	08001b55 	.word	0x08001b55
 8001760:	0800178d 	.word	0x0800178d
 8001764:	08001b55 	.word	0x08001b55
 8001768:	08001b55 	.word	0x08001b55
 800176c:	08001b55 	.word	0x08001b55
 8001770:	08001795 	.word	0x08001795
 8001774:	08001b55 	.word	0x08001b55
 8001778:	08001b55 	.word	0x08001b55
 800177c:	08001b55 	.word	0x08001b55
 8001780:	08001985 	.word	0x08001985
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4bb9      	ldr	r3, [pc, #740]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x358>)
 8001786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800178a:	e1e7      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178c:	4bb8      	ldr	r3, [pc, #736]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x35c>)
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001792:	e1e3      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001794:	4bb4      	ldr	r3, [pc, #720]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800179c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a0:	4bb1      	ldr	r3, [pc, #708]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d071      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ac:	4bae      	ldr	r3, [pc, #696]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80017b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80017bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0159      	lsls	r1, r3, #5
 80017e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e4:	0150      	lsls	r0, r2, #5
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4621      	mov	r1, r4
 80017ec:	1a51      	subs	r1, r2, r1
 80017ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80017f0:	4629      	mov	r1, r5
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001804:	4649      	mov	r1, r9
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	4641      	mov	r1, r8
 800180a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180e:	4641      	mov	r1, r8
 8001810:	018a      	lsls	r2, r1, #6
 8001812:	4641      	mov	r1, r8
 8001814:	1a51      	subs	r1, r2, r1
 8001816:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001818:	4649      	mov	r1, r9
 800181a:	eb63 0301 	sbc.w	r3, r3, r1
 800181e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800182c:	4649      	mov	r1, r9
 800182e:	00cb      	lsls	r3, r1, #3
 8001830:	4641      	mov	r1, r8
 8001832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001836:	4641      	mov	r1, r8
 8001838:	00ca      	lsls	r2, r1, #3
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	4603      	mov	r3, r0
 8001840:	4622      	mov	r2, r4
 8001842:	189b      	adds	r3, r3, r2
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
 8001846:	462b      	mov	r3, r5
 8001848:	460a      	mov	r2, r1
 800184a:	eb42 0303 	adc.w	r3, r2, r3
 800184e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800185c:	4629      	mov	r1, r5
 800185e:	024b      	lsls	r3, r1, #9
 8001860:	4621      	mov	r1, r4
 8001862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001866:	4621      	mov	r1, r4
 8001868:	024a      	lsls	r2, r1, #9
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001872:	2200      	movs	r2, #0
 8001874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800187c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001880:	f7fe fd16 	bl	80002b0 <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4613      	mov	r3, r2
 800188a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800188e:	e067      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001890:	4b75      	ldr	r3, [pc, #468]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	2200      	movs	r2, #0
 8001898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800189c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018aa:	2300      	movs	r3, #0
 80018ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018b2:	4622      	mov	r2, r4
 80018b4:	462b      	mov	r3, r5
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	0159      	lsls	r1, r3, #5
 80018c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c4:	0150      	lsls	r0, r2, #5
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4621      	mov	r1, r4
 80018cc:	1a51      	subs	r1, r2, r1
 80018ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80018d0:	4629      	mov	r1, r5
 80018d2:	eb63 0301 	sbc.w	r3, r3, r1
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80018e4:	4649      	mov	r1, r9
 80018e6:	018b      	lsls	r3, r1, #6
 80018e8:	4641      	mov	r1, r8
 80018ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ee:	4641      	mov	r1, r8
 80018f0:	018a      	lsls	r2, r1, #6
 80018f2:	4641      	mov	r1, r8
 80018f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80018f8:	4649      	mov	r1, r9
 80018fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800190a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800190e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001912:	4692      	mov	sl, r2
 8001914:	469b      	mov	fp, r3
 8001916:	4623      	mov	r3, r4
 8001918:	eb1a 0303 	adds.w	r3, sl, r3
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	462b      	mov	r3, r5
 8001920:	eb4b 0303 	adc.w	r3, fp, r3
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001932:	4629      	mov	r1, r5
 8001934:	028b      	lsls	r3, r1, #10
 8001936:	4621      	mov	r1, r4
 8001938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800193c:	4621      	mov	r1, r4
 800193e:	028a      	lsls	r2, r1, #10
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001948:	2200      	movs	r2, #0
 800194a:	673b      	str	r3, [r7, #112]	@ 0x70
 800194c:	677a      	str	r2, [r7, #116]	@ 0x74
 800194e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001952:	f7fe fcad 	bl	80002b0 <__aeabi_uldivmod>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4613      	mov	r3, r2
 800195c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001960:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	3301      	adds	r3, #1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001982:	e0eb      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800198c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001990:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d06b      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	2200      	movs	r2, #0
 80019a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80019b0:	2300      	movs	r3, #0
 80019b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80019b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019b8:	4622      	mov	r2, r4
 80019ba:	462b      	mov	r3, r5
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	0159      	lsls	r1, r3, #5
 80019c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ca:	0150      	lsls	r0, r2, #5
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4621      	mov	r1, r4
 80019d2:	1a51      	subs	r1, r2, r1
 80019d4:	61b9      	str	r1, [r7, #24]
 80019d6:	4629      	mov	r1, r5
 80019d8:	eb63 0301 	sbc.w	r3, r3, r1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019ea:	4659      	mov	r1, fp
 80019ec:	018b      	lsls	r3, r1, #6
 80019ee:	4651      	mov	r1, sl
 80019f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f4:	4651      	mov	r1, sl
 80019f6:	018a      	lsls	r2, r1, #6
 80019f8:	4651      	mov	r1, sl
 80019fa:	ebb2 0801 	subs.w	r8, r2, r1
 80019fe:	4659      	mov	r1, fp
 8001a00:	eb63 0901 	sbc.w	r9, r3, r1
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a18:	4690      	mov	r8, r2
 8001a1a:	4699      	mov	r9, r3
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	eb18 0303 	adds.w	r3, r8, r3
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	462b      	mov	r3, r5
 8001a26:	eb49 0303 	adc.w	r3, r9, r3
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a38:	4629      	mov	r1, r5
 8001a3a:	024b      	lsls	r3, r1, #9
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a42:	4621      	mov	r1, r4
 8001a44:	024a      	lsls	r2, r1, #9
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a4e:	2200      	movs	r2, #0
 8001a50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a58:	f7fe fc2a 	bl	80002b0 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a66:	e065      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x420>
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a74:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4611      	mov	r1, r2
 8001a80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a84:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a86:	2300      	movs	r3, #0
 8001a88:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001a8e:	4642      	mov	r2, r8
 8001a90:	464b      	mov	r3, r9
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0159      	lsls	r1, r3, #5
 8001a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa0:	0150      	lsls	r0, r2, #5
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4641      	mov	r1, r8
 8001aa8:	1a51      	subs	r1, r2, r1
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	4649      	mov	r1, r9
 8001aae:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ac0:	4659      	mov	r1, fp
 8001ac2:	018b      	lsls	r3, r1, #6
 8001ac4:	4651      	mov	r1, sl
 8001ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aca:	4651      	mov	r1, sl
 8001acc:	018a      	lsls	r2, r1, #6
 8001ace:	4651      	mov	r1, sl
 8001ad0:	1a54      	subs	r4, r2, r1
 8001ad2:	4659      	mov	r1, fp
 8001ad4:	eb63 0501 	sbc.w	r5, r3, r1
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	00eb      	lsls	r3, r5, #3
 8001ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	4643      	mov	r3, r8
 8001aee:	18e3      	adds	r3, r4, r3
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	464b      	mov	r3, r9
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b06:	4629      	mov	r1, r5
 8001b08:	028b      	lsls	r3, r1, #10
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b10:	4621      	mov	r1, r4
 8001b12:	028a      	lsls	r2, r1, #10
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b26:	f7fe fbc3 	bl	80002b0 <__aeabi_uldivmod>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4613      	mov	r3, r2
 8001b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0f1b      	lsrs	r3, r3, #28
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b52:	e003      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	37b8      	adds	r7, #184	@ 0xb8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	00f42400 	.word	0x00f42400

08001b74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e28d      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8083 	beq.w	8001c9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b94:	4b94      	ldr	r3, [pc, #592]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ba0:	4b91      	ldr	r3, [pc, #580]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bac:	4b8e      	ldr	r3, [pc, #568]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4b8b      	ldr	r3, [pc, #556]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d112      	bne.n	8001bec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4b88      	ldr	r3, [pc, #544]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bd2:	d10b      	bne.n	8001bec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	4b84      	ldr	r3, [pc, #528]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x124>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d157      	bne.n	8001c98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e25a      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_OscConfig+0x90>
 8001bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7b      	ldr	r2, [pc, #492]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xcc>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0xb4>
 8001c0e:	4b76      	ldr	r3, [pc, #472]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a75      	ldr	r2, [pc, #468]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b73      	ldr	r3, [pc, #460]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a72      	ldr	r2, [pc, #456]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xcc>
 8001c28:	4b6f      	ldr	r3, [pc, #444]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b6c      	ldr	r3, [pc, #432]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a6b      	ldr	r2, [pc, #428]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f91a 	bl	8000e80 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff f916 	bl	8000e80 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e21f      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b61      	ldr	r3, [pc, #388]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xdc>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f906 	bl	8000e80 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f902 	bl	8000e80 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e20b      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b57      	ldr	r3, [pc, #348]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x104>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d06f      	beq.n	8001d86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ca6:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d017      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d105      	bne.n	8001cca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b47      	ldr	r3, [pc, #284]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d11c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd6:	4b44      	ldr	r3, [pc, #272]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d116      	bne.n	8001d10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x186>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e1d3      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4937      	ldr	r1, [pc, #220]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	e03a      	b.n	8001d86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d18:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <HAL_RCC_OscConfig+0x278>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f8af 	bl	8000e80 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d26:	f7ff f8ab 	bl	8000e80 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e1b4      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4925      	ldr	r1, [pc, #148]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5a:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <HAL_RCC_OscConfig+0x278>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff f88e 	bl	8000e80 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff f88a 	bl	8000e80 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e193      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d036      	beq.n	8001e00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d016      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff f86e 	bl	8000e80 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7ff f86a 	bl	8000e80 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e173      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x234>
 8001dc6:	e01b      	b.n	8001e00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff f857 	bl	8000e80 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	e00e      	b.n	8001df4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f853 	bl	8000e80 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d907      	bls.n	8001df4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e15c      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
 8001de8:	40023800 	.word	0x40023800
 8001dec:	42470000 	.word	0x42470000
 8001df0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	4b8a      	ldr	r3, [pc, #552]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ea      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8097 	beq.w	8001f3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b83      	ldr	r3, [pc, #524]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b7f      	ldr	r3, [pc, #508]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a7e      	ldr	r2, [pc, #504]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b79      	ldr	r3, [pc, #484]	@ (8002024 <HAL_RCC_OscConfig+0x4b0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d118      	bne.n	8001e7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4a:	4b76      	ldr	r3, [pc, #472]	@ (8002024 <HAL_RCC_OscConfig+0x4b0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	@ (8002024 <HAL_RCC_OscConfig+0x4b0>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e56:	f7ff f813 	bl	8000e80 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5e:	f7ff f80f 	bl	8000e80 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e118      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	4b6c      	ldr	r3, [pc, #432]	@ (8002024 <HAL_RCC_OscConfig+0x4b0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x31e>
 8001e84:	4b66      	ldr	r3, [pc, #408]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a65      	ldr	r2, [pc, #404]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e90:	e01c      	b.n	8001ecc <HAL_RCC_OscConfig+0x358>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x340>
 8001e9a:	4b61      	ldr	r3, [pc, #388]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	4a60      	ldr	r2, [pc, #384]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	4a5d      	ldr	r2, [pc, #372]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0x358>
 8001eb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb8:	4a59      	ldr	r2, [pc, #356]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec0:	4b57      	ldr	r3, [pc, #348]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec4:	4a56      	ldr	r2, [pc, #344]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d015      	beq.n	8001f00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7fe ffd4 	bl	8000e80 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7fe ffd0 	bl	8000e80 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0d7      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0ee      	beq.n	8001edc <HAL_RCC_OscConfig+0x368>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe ffbe 	bl	8000e80 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe ffba 	bl	8000e80 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e0c1      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	4b40      	ldr	r3, [pc, #256]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1ee      	bne.n	8001f08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f30:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	4a3a      	ldr	r2, [pc, #232]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80ad 	beq.w	80020a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f46:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d060      	beq.n	8002014 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d145      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b33      	ldr	r3, [pc, #204]	@ (8002028 <HAL_RCC_OscConfig+0x4b4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe ff8e 	bl	8000e80 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe ff8a 	bl	8000e80 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e093      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69da      	ldr	r2, [r3, #28]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	071b      	lsls	r3, r3, #28
 8001fb2:	491b      	ldr	r1, [pc, #108]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x4b4>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7fe ff5f 	bl	8000e80 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe ff5b 	bl	8000e80 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e064      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x452>
 8001fe4:	e05c      	b.n	80020a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_RCC_OscConfig+0x4b4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe ff48 	bl	8000e80 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe ff44 	bl	8000e80 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e04d      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x480>
 8002012:	e045      	b.n	80020a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e040      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
 8002020:	40023800 	.word	0x40023800
 8002024:	40007000 	.word	0x40007000
 8002028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_OscConfig+0x538>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d030      	beq.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d129      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d122      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	4293      	cmp	r3, r2
 8002066:	d119      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	3b01      	subs	r3, #1
 8002076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d10f      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e041      	b.n	8002146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f839 	bl	800214e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 f9c0 	bl	8002474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d001      	beq.n	800217c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e04e      	b.n	800221a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <HAL_TIM_Base_Start_IT+0xc4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d022      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a6:	d01d      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1f      	ldr	r2, [pc, #124]	@ (800222c <HAL_TIM_Base_Start_IT+0xc8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d018      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002230 <HAL_TIM_Base_Start_IT+0xcc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002234 <HAL_TIM_Base_Start_IT+0xd0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00e      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002238 <HAL_TIM_Base_Start_IT+0xd4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <HAL_TIM_Base_Start_IT+0xd8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x80>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a18      	ldr	r2, [pc, #96]	@ (8002240 <HAL_TIM_Base_Start_IT+0xdc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d010      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	e007      	b.n	8002218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000
 800222c:	40000400 	.word	0x40000400
 8002230:	40000800 	.word	0x40000800
 8002234:	40000c00 	.word	0x40000c00
 8002238:	40010400 	.word	0x40010400
 800223c:	40014000 	.word	0x40014000
 8002240:	40001800 	.word	0x40001800

08002244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d020      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0202 	mvn.w	r2, #2
 8002278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8d2 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8c4 	bl	8002424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8d5 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d020      	beq.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0204 	mvn.w	r2, #4
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8ac 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f89e 	bl	8002424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f8af 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d020      	beq.n	8002340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0208 	mvn.w	r2, #8
 8002310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2204      	movs	r2, #4
 8002316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f886 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f878 	bl	8002424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f889 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d020      	beq.n	800238c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0210 	mvn.w	r2, #16
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2208      	movs	r2, #8
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f860 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f852 	bl	8002424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f863 	bl	800244c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0201 	mvn.w	r2, #1
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fb14 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f906 	bl	80025e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f834 	bl	8002460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0220 	mvn.w	r2, #32
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8d8 	bl	80025cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a46      	ldr	r2, [pc, #280]	@ (80025a0 <TIM_Base_SetConfig+0x12c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d013      	beq.n	80024b4 <TIM_Base_SetConfig+0x40>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002492:	d00f      	beq.n	80024b4 <TIM_Base_SetConfig+0x40>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a43      	ldr	r2, [pc, #268]	@ (80025a4 <TIM_Base_SetConfig+0x130>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00b      	beq.n	80024b4 <TIM_Base_SetConfig+0x40>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a42      	ldr	r2, [pc, #264]	@ (80025a8 <TIM_Base_SetConfig+0x134>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <TIM_Base_SetConfig+0x40>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a41      	ldr	r2, [pc, #260]	@ (80025ac <TIM_Base_SetConfig+0x138>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d003      	beq.n	80024b4 <TIM_Base_SetConfig+0x40>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a40      	ldr	r2, [pc, #256]	@ (80025b0 <TIM_Base_SetConfig+0x13c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d108      	bne.n	80024c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a35      	ldr	r2, [pc, #212]	@ (80025a0 <TIM_Base_SetConfig+0x12c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02b      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d4:	d027      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a32      	ldr	r2, [pc, #200]	@ (80025a4 <TIM_Base_SetConfig+0x130>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d023      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a31      	ldr	r2, [pc, #196]	@ (80025a8 <TIM_Base_SetConfig+0x134>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a30      	ldr	r2, [pc, #192]	@ (80025ac <TIM_Base_SetConfig+0x138>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01b      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a2f      	ldr	r2, [pc, #188]	@ (80025b0 <TIM_Base_SetConfig+0x13c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d017      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a2e      	ldr	r2, [pc, #184]	@ (80025b4 <TIM_Base_SetConfig+0x140>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a2d      	ldr	r2, [pc, #180]	@ (80025b8 <TIM_Base_SetConfig+0x144>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00f      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a2c      	ldr	r2, [pc, #176]	@ (80025bc <TIM_Base_SetConfig+0x148>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00b      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a2b      	ldr	r2, [pc, #172]	@ (80025c0 <TIM_Base_SetConfig+0x14c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d007      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a2a      	ldr	r2, [pc, #168]	@ (80025c4 <TIM_Base_SetConfig+0x150>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d003      	beq.n	8002526 <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a29      	ldr	r2, [pc, #164]	@ (80025c8 <TIM_Base_SetConfig+0x154>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d108      	bne.n	8002538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <TIM_Base_SetConfig+0x12c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d003      	beq.n	800256c <TIM_Base_SetConfig+0xf8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a12      	ldr	r2, [pc, #72]	@ (80025b0 <TIM_Base_SetConfig+0x13c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d103      	bne.n	8002574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f023 0201 	bic.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]
  }
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800
 80025ac:	40000c00 	.word	0x40000c00
 80025b0:	40010400 	.word	0x40010400
 80025b4:	40014000 	.word	0x40014000
 80025b8:	40014400 	.word	0x40014400
 80025bc:	40014800 	.word	0x40014800
 80025c0:	40001800 	.word	0x40001800
 80025c4:	40001c00 	.word	0x40001c00
 80025c8:	40002000 	.word	0x40002000

080025cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e042      	b.n	800268c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fa20 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	@ 0x24
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f82b 	bl	8002694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800264c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800265c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800266c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002698:	b0c0      	sub	sp, #256	@ 0x100
 800269a:	af00      	add	r7, sp, #0
 800269c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	ea40 0301 	orr.w	r3, r0, r1
 80026bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026ec:	f021 010c 	bic.w	r1, r1, #12
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026fa:	430b      	orrs	r3, r1
 80026fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800270a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270e:	6999      	ldr	r1, [r3, #24]
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	ea40 0301 	orr.w	r3, r0, r1
 800271a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b8f      	ldr	r3, [pc, #572]	@ (8002960 <UART_SetConfig+0x2cc>)
 8002724:	429a      	cmp	r2, r3
 8002726:	d005      	beq.n	8002734 <UART_SetConfig+0xa0>
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b8d      	ldr	r3, [pc, #564]	@ (8002964 <UART_SetConfig+0x2d0>)
 8002730:	429a      	cmp	r2, r3
 8002732:	d104      	bne.n	800273e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002734:	f7fe ffa8 	bl	8001688 <HAL_RCC_GetPCLK2Freq>
 8002738:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800273c:	e003      	b.n	8002746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800273e:	f7fe ff8f 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8002742:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002750:	f040 810c 	bne.w	800296c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002758:	2200      	movs	r2, #0
 800275a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800275e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002766:	4622      	mov	r2, r4
 8002768:	462b      	mov	r3, r5
 800276a:	1891      	adds	r1, r2, r2
 800276c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800276e:	415b      	adcs	r3, r3
 8002770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002776:	4621      	mov	r1, r4
 8002778:	eb12 0801 	adds.w	r8, r2, r1
 800277c:	4629      	mov	r1, r5
 800277e:	eb43 0901 	adc.w	r9, r3, r1
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002796:	4690      	mov	r8, r2
 8002798:	4699      	mov	r9, r3
 800279a:	4623      	mov	r3, r4
 800279c:	eb18 0303 	adds.w	r3, r8, r3
 80027a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027a4:	462b      	mov	r3, r5
 80027a6:	eb49 0303 	adc.w	r3, r9, r3
 80027aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027c2:	460b      	mov	r3, r1
 80027c4:	18db      	adds	r3, r3, r3
 80027c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80027c8:	4613      	mov	r3, r2
 80027ca:	eb42 0303 	adc.w	r3, r2, r3
 80027ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80027d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027d8:	f7fd fd6a 	bl	80002b0 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4b61      	ldr	r3, [pc, #388]	@ (8002968 <UART_SetConfig+0x2d4>)
 80027e2:	fba3 2302 	umull	r2, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	011c      	lsls	r4, r3, #4
 80027ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	1891      	adds	r1, r2, r2
 8002802:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002804:	415b      	adcs	r3, r3
 8002806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800280c:	4641      	mov	r1, r8
 800280e:	eb12 0a01 	adds.w	sl, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb43 0b01 	adc.w	fp, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282c:	4692      	mov	sl, r2
 800282e:	469b      	mov	fp, r3
 8002830:	4643      	mov	r3, r8
 8002832:	eb1a 0303 	adds.w	r3, sl, r3
 8002836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800283a:	464b      	mov	r3, r9
 800283c:	eb4b 0303 	adc.w	r3, fp, r3
 8002840:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002850:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002858:	460b      	mov	r3, r1
 800285a:	18db      	adds	r3, r3, r3
 800285c:	643b      	str	r3, [r7, #64]	@ 0x40
 800285e:	4613      	mov	r3, r2
 8002860:	eb42 0303 	adc.w	r3, r2, r3
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
 8002866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800286a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800286e:	f7fd fd1f 	bl	80002b0 <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4611      	mov	r1, r2
 8002878:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <UART_SetConfig+0x2d4>)
 800287a:	fba3 2301 	umull	r2, r3, r3, r1
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2264      	movs	r2, #100	@ 0x64
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	1acb      	subs	r3, r1, r3
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800288e:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002890:	fba3 2302 	umull	r2, r3, r3, r2
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800289c:	441c      	add	r4, r3
 800289e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	1891      	adds	r1, r2, r2
 80028b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028b8:	415b      	adcs	r3, r3
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028c0:	4641      	mov	r1, r8
 80028c2:	1851      	adds	r1, r2, r1
 80028c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80028c6:	4649      	mov	r1, r9
 80028c8:	414b      	adcs	r3, r1
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028d8:	4659      	mov	r1, fp
 80028da:	00cb      	lsls	r3, r1, #3
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e2:	4651      	mov	r1, sl
 80028e4:	00ca      	lsls	r2, r1, #3
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	4642      	mov	r2, r8
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028f4:	464b      	mov	r3, r9
 80028f6:	460a      	mov	r2, r1
 80028f8:	eb42 0303 	adc.w	r3, r2, r3
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800290c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002914:	460b      	mov	r3, r1
 8002916:	18db      	adds	r3, r3, r3
 8002918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800291a:	4613      	mov	r3, r2
 800291c:	eb42 0303 	adc.w	r3, r2, r3
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800292a:	f7fd fcc1 	bl	80002b0 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	@ 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3332      	adds	r3, #50	@ 0x32
 8002946:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 0207 	and.w	r2, r3, #7
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4422      	add	r2, r4
 800295a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800295c:	e106      	b.n	8002b6c <UART_SetConfig+0x4d8>
 800295e:	bf00      	nop
 8002960:	40011000 	.word	0x40011000
 8002964:	40011400 	.word	0x40011400
 8002968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800296c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002970:	2200      	movs	r2, #0
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800297a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800297e:	4642      	mov	r2, r8
 8002980:	464b      	mov	r3, r9
 8002982:	1891      	adds	r1, r2, r2
 8002984:	6239      	str	r1, [r7, #32]
 8002986:	415b      	adcs	r3, r3
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
 800298a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800298e:	4641      	mov	r1, r8
 8002990:	1854      	adds	r4, r2, r1
 8002992:	4649      	mov	r1, r9
 8002994:	eb43 0501 	adc.w	r5, r3, r1
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	00eb      	lsls	r3, r5, #3
 80029a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a6:	00e2      	lsls	r2, r4, #3
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	4643      	mov	r3, r8
 80029ae:	18e3      	adds	r3, r4, r3
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029b4:	464b      	mov	r3, r9
 80029b6:	eb45 0303 	adc.w	r3, r5, r3
 80029ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029da:	4629      	mov	r1, r5
 80029dc:	008b      	lsls	r3, r1, #2
 80029de:	4621      	mov	r1, r4
 80029e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e4:	4621      	mov	r1, r4
 80029e6:	008a      	lsls	r2, r1, #2
 80029e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029ec:	f7fd fc60 	bl	80002b0 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4b60      	ldr	r3, [pc, #384]	@ (8002b78 <UART_SetConfig+0x4e4>)
 80029f6:	fba3 2302 	umull	r2, r3, r3, r2
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	011c      	lsls	r4, r3, #4
 80029fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	1891      	adds	r1, r2, r2
 8002a16:	61b9      	str	r1, [r7, #24]
 8002a18:	415b      	adcs	r3, r3
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a20:	4641      	mov	r1, r8
 8002a22:	1851      	adds	r1, r2, r1
 8002a24:	6139      	str	r1, [r7, #16]
 8002a26:	4649      	mov	r1, r9
 8002a28:	414b      	adcs	r3, r1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a38:	4659      	mov	r1, fp
 8002a3a:	00cb      	lsls	r3, r1, #3
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a42:	4651      	mov	r1, sl
 8002a44:	00ca      	lsls	r2, r1, #3
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	189b      	adds	r3, r3, r2
 8002a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a54:	464b      	mov	r3, r9
 8002a56:	460a      	mov	r2, r1
 8002a58:	eb42 0303 	adc.w	r3, r2, r3
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a78:	4649      	mov	r1, r9
 8002a7a:	008b      	lsls	r3, r1, #2
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a82:	4641      	mov	r1, r8
 8002a84:	008a      	lsls	r2, r1, #2
 8002a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a8a:	f7fd fc11 	bl	80002b0 <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002a96:	fba3 2301 	umull	r2, r3, r3, r1
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2264      	movs	r2, #100	@ 0x64
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	1acb      	subs	r3, r1, r3
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	3332      	adds	r3, #50	@ 0x32
 8002aa8:	4a33      	ldr	r2, [pc, #204]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab4:	441c      	add	r4, r3
 8002ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aba:	2200      	movs	r2, #0
 8002abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002abe:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	1891      	adds	r1, r2, r2
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	415b      	adcs	r3, r3
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	1851      	adds	r1, r2, r1
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	4649      	mov	r1, r9
 8002adc:	414b      	adcs	r3, r1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aec:	4659      	mov	r1, fp
 8002aee:	00cb      	lsls	r3, r1, #3
 8002af0:	4651      	mov	r1, sl
 8002af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af6:	4651      	mov	r1, sl
 8002af8:	00ca      	lsls	r2, r1, #3
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	4642      	mov	r2, r8
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b06:	464b      	mov	r3, r9
 8002b08:	460a      	mov	r2, r1
 8002b0a:	eb42 0303 	adc.w	r3, r2, r3
 8002b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b28:	4649      	mov	r1, r9
 8002b2a:	008b      	lsls	r3, r1, #2
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b32:	4641      	mov	r1, r8
 8002b34:	008a      	lsls	r2, r1, #2
 8002b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b3a:	f7fd fbb9 	bl	80002b0 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002b44:	fba3 1302 	umull	r1, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	2164      	movs	r1, #100	@ 0x64
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	3332      	adds	r3, #50	@ 0x32
 8002b56:	4a08      	ldr	r2, [pc, #32]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4422      	add	r2, r4
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b72:	46bd      	mov	sp, r7
 8002b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b78:	51eb851f 	.word	0x51eb851f

08002b7c <__NVIC_SetPriority>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	@ (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	@ (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <SysTick_Handler+0x1c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bd8:	f002 fab2 	bl	8005140 <xTaskGetSchedulerState>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002be2:	f003 f8e1 	bl	8005da8 <xPortSysTickHandler>
  }
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	e000e010 	.word	0xe000e010

08002bf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	f06f 0004 	mvn.w	r0, #4
 8002bfa:	f7ff ffbf 	bl	8002b7c <__NVIC_SetPriority>
#endif
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c0a:	f3ef 8305 	mrs	r3, IPSR
 8002c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c16:	f06f 0305 	mvn.w	r3, #5
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	e00c      	b.n	8002c38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <osKernelInitialize+0x44>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c26:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <osKernelInitialize+0x44>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	e002      	b.n	8002c38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000134 	.word	0x20000134

08002c4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c52:	f3ef 8305 	mrs	r3, IPSR
 8002c56:	603b      	str	r3, [r7, #0]
  return(result);
 8002c58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c5e:	f06f 0305 	mvn.w	r3, #5
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	e010      	b.n	8002c88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c66:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <osKernelStart+0x48>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d109      	bne.n	8002c82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c6e:	f7ff ffbf 	bl	8002bf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <osKernelStart+0x48>)
 8002c74:	2202      	movs	r2, #2
 8002c76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c78:	f001 fd5c 	bl	8004734 <vTaskStartScheduler>
      stat = osOK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	e002      	b.n	8002c88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c88:	687b      	ldr	r3, [r7, #4]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000134 	.word	0x20000134

08002c98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	@ 0x38
 8002c9c:	af04      	add	r7, sp, #16
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ca8:	f3ef 8305 	mrs	r3, IPSR
 8002cac:	617b      	str	r3, [r7, #20]
  return(result);
 8002cae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d17e      	bne.n	8002db2 <osThreadNew+0x11a>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d07b      	beq.n	8002db2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002cbe:	2318      	movs	r3, #24
 8002cc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d045      	beq.n	8002d5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <osThreadNew+0x48>
        name = attr->name;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <osThreadNew+0x6e>
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b38      	cmp	r3, #56	@ 0x38
 8002cf8:	d805      	bhi.n	8002d06 <osThreadNew+0x6e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <osThreadNew+0x72>
        return (NULL);
 8002d06:	2300      	movs	r3, #0
 8002d08:	e054      	b.n	8002db4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00e      	beq.n	8002d40 <osThreadNew+0xa8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2ba7      	cmp	r3, #167	@ 0xa7
 8002d28:	d90a      	bls.n	8002d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <osThreadNew+0xa8>
        mem = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	e010      	b.n	8002d62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <osThreadNew+0xca>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <osThreadNew+0xca>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d104      	bne.n	8002d62 <osThreadNew+0xca>
          mem = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	e001      	b.n	8002d62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d110      	bne.n	8002d8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d70:	9202      	str	r2, [sp, #8]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6a3a      	ldr	r2, [r7, #32]
 8002d7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f001 fae4 	bl	800434c <xTaskCreateStatic>
 8002d84:	4603      	mov	r3, r0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e013      	b.n	8002db2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d110      	bne.n	8002db2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f001 fb32 	bl	800440c <xTaskCreate>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <osThreadNew+0x11a>
            hTask = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002db2:	693b      	ldr	r3, [r7, #16]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3728      	adds	r7, #40	@ 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc4:	f3ef 8305 	mrs	r3, IPSR
 8002dc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <osDelay+0x1c>
    stat = osErrorISR;
 8002dd0:	f06f 0305 	mvn.w	r3, #5
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e007      	b.n	8002de8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f001 fc70 	bl	80046c8 <vTaskDelay>
    }
  }

  return (stat);
 8002de8:	68fb      	ldr	r3, [r7, #12]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dfe:	f3ef 8305 	mrs	r3, IPSR
 8002e02:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e04:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d12d      	bne.n	8002e66 <osEventFlagsNew+0x74>
    mem = -1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <osEventFlagsNew+0x3a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b1f      	cmp	r3, #31
 8002e24:	d902      	bls.n	8002e2c <osEventFlagsNew+0x3a>
        mem = 1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	e00c      	b.n	8002e46 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d108      	bne.n	8002e46 <osEventFlagsNew+0x54>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <osEventFlagsNew+0x54>
          mem = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e001      	b.n	8002e46 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fa19 	bl	8003288 <xEventGroupCreateStatic>
 8002e56:	6178      	str	r0, [r7, #20]
 8002e58:	e005      	b.n	8002e66 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002e60:	f000 fa4b 	bl	80032fa <xEventGroupCreate>
 8002e64:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002e66:	697b      	ldr	r3, [r7, #20]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <osEventFlagsSet+0x1c>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e8a:	d303      	bcc.n	8002e94 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8002e8c:	f06f 0303 	mvn.w	r3, #3
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e028      	b.n	8002ee6 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e94:	f3ef 8305 	mrs	r3, IPSR
 8002e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01d      	beq.n	8002edc <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002ea4:	f107 0308 	add.w	r3, r7, #8
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	6938      	ldr	r0, [r7, #16]
 8002eae:	f000 fbcd 	bl	800364c <xEventGroupSetBitsFromISR>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8002eb8:	f06f 0302 	mvn.w	r3, #2
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e012      	b.n	8002ee6 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <osEventFlagsSet+0x76>
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <osEventFlagsSet+0x80>)
 8002ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	e004      	b.n	8002ee6 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	6938      	ldr	r0, [r7, #16]
 8002ee0:	f000 faf8 	bl	80034d4 <xEventGroupSetBits>
 8002ee4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002ee6:	697b      	ldr	r3, [r7, #20]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	e000ed04 	.word	0xe000ed04

08002ef4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	@ 0x30
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <osEventFlagsWait+0x20>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f12:	d303      	bcc.n	8002f1c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8002f14:	f06f 0303 	mvn.w	r3, #3
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e04b      	b.n	8002fb4 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f1c:	f3ef 8305 	mrs	r3, IPSR
 8002f20:	617b      	str	r3, [r7, #20]
  return(result);
 8002f22:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8002f28:	f06f 0305 	mvn.w	r3, #5
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e041      	b.n	8002fb4 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3e:	e001      	b.n	8002f44 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	e001      	b.n	8002f58 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	6a3a      	ldr	r2, [r7, #32]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	69b8      	ldr	r0, [r7, #24]
 8002f64:	f000 f9e4 	bl	8003330 <xEventGroupWaitBits>
 8002f68:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d019      	beq.n	8002fb4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8002f86:	f06f 0301 	mvn.w	r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	e012      	b.n	8002fb4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002f8e:	f06f 0302 	mvn.w	r3, #2
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	e00e      	b.n	8002fb4 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8002fa6:	f06f 0301 	mvn.w	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	e002      	b.n	8002fb4 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002fae:	f06f 0302 	mvn.w	r3, #2
 8002fb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3728      	adds	r7, #40	@ 0x28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08a      	sub	sp, #40	@ 0x28
 8002fc2:	af02      	add	r7, sp, #8
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fce:	f3ef 8305 	mrs	r3, IPSR
 8002fd2:	613b      	str	r3, [r7, #16]
  return(result);
 8002fd4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d15f      	bne.n	800309a <osMessageQueueNew+0xdc>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d05c      	beq.n	800309a <osMessageQueueNew+0xdc>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d059      	beq.n	800309a <osMessageQueueNew+0xdc>
    mem = -1;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d029      	beq.n	8003046 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <osMessageQueueNew+0x62>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b4f      	cmp	r3, #79	@ 0x4f
 8003000:	d90e      	bls.n	8003020 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	429a      	cmp	r2, r3
 8003018:	d302      	bcc.n	8003020 <osMessageQueueNew+0x62>
        mem = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e014      	b.n	800304a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d110      	bne.n	800304a <osMessageQueueNew+0x8c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10c      	bne.n	800304a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003034:	2b00      	cmp	r3, #0
 8003036:	d108      	bne.n	800304a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <osMessageQueueNew+0x8c>
          mem = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e001      	b.n	800304a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10b      	bne.n	8003068 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2100      	movs	r1, #0
 800305a:	9100      	str	r1, [sp, #0]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fc26 	bl	80038b0 <xQueueGenericCreateStatic>
 8003064:	61f8      	str	r0, [r7, #28]
 8003066:	e008      	b.n	800307a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800306e:	2200      	movs	r2, #0
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fc99 	bl	80039aa <xQueueGenericCreate>
 8003078:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00c      	beq.n	800309a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <osMessageQueueNew+0xd0>
        name = attr->name;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e001      	b.n	8003092 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	69f8      	ldr	r0, [r7, #28]
 8003096:	f001 f8fb 	bl	8004290 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800309a:	69fb      	ldr	r3, [r7, #28]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030bc:	f3ef 8305 	mrs	r3, IPSR
 80030c0:	617b      	str	r3, [r7, #20]
  return(result);
 80030c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d028      	beq.n	800311a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <osMessageQueuePut+0x36>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <osMessageQueuePut+0x36>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80030da:	f06f 0303 	mvn.w	r3, #3
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	e038      	b.n	8003154 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80030e6:	f107 0210 	add.w	r2, r7, #16
 80030ea:	2300      	movs	r3, #0
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	69b8      	ldr	r0, [r7, #24]
 80030f0:	f000 fdbc 	bl	8003c6c <xQueueGenericSendFromISR>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d003      	beq.n	8003102 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80030fa:	f06f 0302 	mvn.w	r3, #2
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	e028      	b.n	8003154 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d025      	beq.n	8003154 <osMessageQueuePut+0xb0>
 8003108:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <osMessageQueuePut+0xbc>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	e01c      	b.n	8003154 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <osMessageQueuePut+0x82>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003126:	f06f 0303 	mvn.w	r3, #3
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	e012      	b.n	8003154 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800312e:	2300      	movs	r3, #0
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	69b8      	ldr	r0, [r7, #24]
 8003136:	f000 fc97 	bl	8003a68 <xQueueGenericSend>
 800313a:	4603      	mov	r3, r0
 800313c:	2b01      	cmp	r3, #1
 800313e:	d009      	beq.n	8003154 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003146:	f06f 0301 	mvn.w	r3, #1
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	e002      	b.n	8003154 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800314e:	f06f 0302 	mvn.w	r3, #2
 8003152:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003154:	69fb      	ldr	r3, [r7, #28]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800317a:	f3ef 8305 	mrs	r3, IPSR
 800317e:	617b      	str	r3, [r7, #20]
  return(result);
 8003180:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003182:	2b00      	cmp	r3, #0
 8003184:	d028      	beq.n	80031d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <osMessageQueueGet+0x34>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <osMessageQueueGet+0x34>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003198:	f06f 0303 	mvn.w	r3, #3
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	e037      	b.n	8003210 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	461a      	mov	r2, r3
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	69b8      	ldr	r0, [r7, #24]
 80031ae:	f000 fedd 	bl	8003f6c <xQueueReceiveFromISR>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d003      	beq.n	80031c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80031b8:	f06f 0302 	mvn.w	r3, #2
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e027      	b.n	8003210 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d024      	beq.n	8003210 <osMessageQueueGet+0xac>
 80031c6:	4b15      	ldr	r3, [pc, #84]	@ (800321c <osMessageQueueGet+0xb8>)
 80031c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	e01b      	b.n	8003210 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <osMessageQueueGet+0x80>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80031e4:	f06f 0303 	mvn.w	r3, #3
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	e011      	b.n	8003210 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	69b8      	ldr	r0, [r7, #24]
 80031f2:	f000 fdd9 	bl	8003da8 <xQueueReceive>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d009      	beq.n	8003210 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003202:	f06f 0301 	mvn.w	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	e002      	b.n	8003210 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800320a:	f06f 0302 	mvn.w	r3, #2
 800320e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003210:	69fb      	ldr	r3, [r7, #28]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a07      	ldr	r2, [pc, #28]	@ (800324c <vApplicationGetIdleTaskMemory+0x2c>)
 8003230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4a06      	ldr	r2, [pc, #24]	@ (8003250 <vApplicationGetIdleTaskMemory+0x30>)
 8003236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	601a      	str	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000138 	.word	0x20000138
 8003250:	200001e0 	.word	0x200001e0

08003254 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a07      	ldr	r2, [pc, #28]	@ (8003280 <vApplicationGetTimerTaskMemory+0x2c>)
 8003264:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4a06      	ldr	r2, [pc, #24]	@ (8003284 <vApplicationGetTimerTaskMemory+0x30>)
 800326a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003272:	601a      	str	r2, [r3, #0]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	200003e0 	.word	0x200003e0
 8003284:	20000488 	.word	0x20000488

08003288 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	e7fd      	b.n	80032aa <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80032ae:	2320      	movs	r3, #32
 80032b0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d00b      	beq.n	80032d0 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	60fb      	str	r3, [r7, #12]
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	e7fd      	b.n	80032cc <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f9c5 	bl	8003674 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80032f0:	697b      	ldr	r3, [r7, #20]
	}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003300:	2020      	movs	r0, #32
 8003302:	f002 fde3 	bl	8005ecc <pvPortMalloc>
 8003306:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f9ab 	bl	8003674 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003324:	687b      	ldr	r3, [r7, #4]
	}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b090      	sub	sp, #64	@ 0x40
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003346:	2300      	movs	r3, #0
 8003348:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <xEventGroupWaitBits+0x38>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	623b      	str	r3, [r7, #32]
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800336e:	d30b      	bcc.n	8003388 <xEventGroupWaitBits+0x58>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	61fb      	str	r3, [r7, #28]
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <xEventGroupWaitBits+0x76>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	61bb      	str	r3, [r7, #24]
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033a6:	f001 fecb 	bl	8005140 <xTaskGetSchedulerState>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <xEventGroupWaitBits+0x86>
 80033b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <xEventGroupWaitBits+0x8a>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <xEventGroupWaitBits+0x8c>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	617b      	str	r3, [r7, #20]
}
 80033d2:	bf00      	nop
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80033d8:	f001 fa1c 	bl	8004814 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80033dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80033e8:	f000 f90d 	bl	8003606 <prvTestWaitCondition>
 80033ec:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80033ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00e      	beq.n	8003412 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80033f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d028      	beq.n	8003454 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e020      	b.n	8003454 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003420:	e018      	b.n	8003454 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800342e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003438:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800343e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003440:	1d18      	adds	r0, r3, #4
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003446:	4313      	orrs	r3, r2
 8003448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800344a:	4619      	mov	r1, r3
 800344c:	f001 fbe4 	bl	8004c18 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003454:	f001 f9ec 	bl	8004830 <xTaskResumeAll>
 8003458:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800345a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345c:	2b00      	cmp	r3, #0
 800345e:	d031      	beq.n	80034c4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8003466:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <xEventGroupWaitBits+0x1a0>)
 8003468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003476:	f001 fef1 	bl	800525c <uxTaskResetEventItemValue>
 800347a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800347c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d11a      	bne.n	80034bc <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8003486:	f002 fbff 	bl	8005c88 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800348a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003496:	f000 f8b6 	bl	8003606 <prvTestWaitCondition>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80034a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80034b8:	f002 fc18 	bl	8005cec <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80034bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80034c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3740      	adds	r7, #64	@ 0x40
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000ed04 	.word	0xe000ed04

080034d4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08e      	sub	sp, #56	@ 0x38
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80034de:	2300      	movs	r3, #0
 80034e0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <xEventGroupSetBits+0x34>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	613b      	str	r3, [r7, #16]
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800350e:	d30b      	bcc.n	8003528 <xEventGroupSetBits+0x54>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	60fb      	str	r3, [r7, #12]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	3304      	adds	r3, #4
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	3308      	adds	r3, #8
 8003532:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003534:	f001 f96e 	bl	8004814 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	431a      	orrs	r2, r3
 8003546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003548:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800354a:	e03c      	b.n	80035c6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800354c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003558:	2300      	movs	r3, #0
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003562:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800356a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8003582:	2301      	movs	r3, #1
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003586:	e008      	b.n	800359a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d101      	bne.n	800359a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003596:	2301      	movs	r3, #1
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d010      	beq.n	80035c2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80035aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80035b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	4619      	mov	r1, r3
 80035bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035be:	f001 fbf9 	bl	8004db4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80035c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d1be      	bne.n	800354c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80035ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	43db      	mvns	r3, r3
 80035d6:	401a      	ands	r2, r3
 80035d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035da:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80035dc:	f001 f928 	bl	8004830 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80035e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3738      	adds	r7, #56	@ 0x38
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff6b 	bl	80034d4 <xEventGroupSetBits>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003606:	b480      	push	{r7}
 8003608:	b087      	sub	sp, #28
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d107      	bne.n	800362c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003626:	2301      	movs	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e007      	b.n	800363c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d101      	bne.n	800363c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003638:	2301      	movs	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800363c:	697b      	ldr	r3, [r7, #20]
}
 800363e:	4618      	mov	r0, r3
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	68f9      	ldr	r1, [r7, #12]
 800365e:	4804      	ldr	r0, [pc, #16]	@ (8003670 <xEventGroupSetBitsFromISR+0x24>)
 8003660:	f002 f9c2 	bl	80059e8 <xTimerPendFunctionCallFromISR>
 8003664:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003666:	697b      	ldr	r3, [r7, #20]
	}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	080035ed 	.word	0x080035ed

08003674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f103 0208 	add.w	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f04f 32ff 	mov.w	r2, #4294967295
 800368c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f103 0208 	add.w	r2, r3, #8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f103 0208 	add.w	r2, r3, #8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d103      	bne.n	8003736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	e00c      	b.n	8003750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3308      	adds	r3, #8
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e002      	b.n	8003744 <vListInsert+0x2e>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	d2f6      	bcs.n	800373e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6852      	ldr	r2, [r2, #4]
 80037a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d103      	bne.n	80037bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1e5a      	subs	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10b      	bne.n	8003808 <xQueueGenericReset+0x2c>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	60bb      	str	r3, [r7, #8]
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003808:	f002 fa3e 	bl	8005c88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003814:	68f9      	ldr	r1, [r7, #12]
 8003816:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	441a      	add	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	3b01      	subs	r3, #1
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	441a      	add	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	22ff      	movs	r2, #255	@ 0xff
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	22ff      	movs	r2, #255	@ 0xff
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d114      	bne.n	8003888 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01a      	beq.n	800389c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3310      	adds	r3, #16
 800386a:	4618      	mov	r0, r3
 800386c:	f001 fa3e 	bl	8004cec <xTaskRemoveFromEventList>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <xQueueGenericReset+0xd0>)
 8003878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	e009      	b.n	800389c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3310      	adds	r3, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fef1 	bl	8003674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3324      	adds	r3, #36	@ 0x24
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff feec 	bl	8003674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800389c:	f002 fa26 	bl	8005cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038a0:	2301      	movs	r3, #1
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	e000ed04 	.word	0xe000ed04

080038b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	@ 0x38
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038d6:	bf00      	nop
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10b      	bne.n	80038fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	e7fd      	b.n	80038f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <xQueueGenericCreateStatic+0x56>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <xQueueGenericCreateStatic+0x5a>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <xQueueGenericCreateStatic+0x5c>
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	623b      	str	r3, [r7, #32]
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <xQueueGenericCreateStatic+0x84>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <xQueueGenericCreateStatic+0x88>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <xQueueGenericCreateStatic+0x8a>
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	61fb      	str	r3, [r7, #28]
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	e7fd      	b.n	8003952 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003956:	2350      	movs	r3, #80	@ 0x50
 8003958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b50      	cmp	r3, #80	@ 0x50
 800395e:	d00b      	beq.n	8003978 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	61bb      	str	r3, [r7, #24]
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003978:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800398c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f840 	bl	8003a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3730      	adds	r7, #48	@ 0x30
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b08a      	sub	sp, #40	@ 0x28
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	4613      	mov	r3, r2
 80039b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	613b      	str	r3, [r7, #16]
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	3350      	adds	r3, #80	@ 0x50
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 fa71 	bl	8005ecc <pvPortMalloc>
 80039ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d011      	beq.n	8003a16 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3350      	adds	r3, #80	@ 0x50
 80039fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a04:	79fa      	ldrb	r2, [r7, #7]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f805 	bl	8003a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a16:	69bb      	ldr	r3, [r7, #24]
	}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3720      	adds	r7, #32
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e002      	b.n	8003a42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a4e:	2101      	movs	r1, #1
 8003a50:	69b8      	ldr	r0, [r7, #24]
 8003a52:	f7ff fec3 	bl	80037dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	@ 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <xQueueGenericSend+0x34>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <xQueueGenericSend+0x42>
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <xQueueGenericSend+0x46>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <xQueueGenericSend+0x48>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <xQueueGenericSend+0x64>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d103      	bne.n	8003ada <xQueueGenericSend+0x72>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <xQueueGenericSend+0x76>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <xQueueGenericSend+0x78>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <xQueueGenericSend+0x94>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	623b      	str	r3, [r7, #32]
}
 8003af6:	bf00      	nop
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003afc:	f001 fb20 	bl	8005140 <xTaskGetSchedulerState>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <xQueueGenericSend+0xa4>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <xQueueGenericSend+0xa8>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <xQueueGenericSend+0xaa>
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <xQueueGenericSend+0xc6>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	61fb      	str	r3, [r7, #28]
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	e7fd      	b.n	8003b2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b2e:	f002 f8ab 	bl	8005c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <xQueueGenericSend+0xdc>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d129      	bne.n	8003b98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b4a:	f000 fa91 	bl	8004070 <prvCopyDataToQueue>
 8003b4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5a:	3324      	adds	r3, #36	@ 0x24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f8c5 	bl	8004cec <xTaskRemoveFromEventList>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b68:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <xQueueGenericSend+0x200>)
 8003b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	e00a      	b.n	8003b90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b80:	4b39      	ldr	r3, [pc, #228]	@ (8003c68 <xQueueGenericSend+0x200>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b90:	f002 f8ac 	bl	8005cec <vPortExitCritical>
				return pdPASS;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e063      	b.n	8003c60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b9e:	f002 f8a5 	bl	8005cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e05c      	b.n	8003c60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 f963 	bl	8004e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bba:	f002 f897 	bl	8005cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bbe:	f000 fe29 	bl	8004814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bc2:	f002 f861 	bl	8005c88 <vPortEnterCritical>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d103      	bne.n	8003bdc <xQueueGenericSend+0x174>
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d103      	bne.n	8003bf2 <xQueueGenericSend+0x18a>
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bf2:	f002 f87b 	bl	8005cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf6:	1d3a      	adds	r2, r7, #4
 8003bf8:	f107 0314 	add.w	r3, r7, #20
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f952 	bl	8004ea8 <xTaskCheckForTimeOut>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d124      	bne.n	8003c54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c0c:	f000 fb28 	bl	8004260 <prvIsQueueFull>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	3310      	adds	r3, #16
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 ffd4 	bl	8004bcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c26:	f000 fab3 	bl	8004190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c2a:	f000 fe01 	bl	8004830 <xTaskResumeAll>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f af7c 	bne.w	8003b2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003c36:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <xQueueGenericSend+0x200>)
 8003c38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	e772      	b.n	8003b2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c4a:	f000 faa1 	bl	8004190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c4e:	f000 fdef 	bl	8004830 <xTaskResumeAll>
 8003c52:	e76c      	b.n	8003b2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c56:	f000 fa9b 	bl	8004190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c5a:	f000 fde9 	bl	8004830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3738      	adds	r7, #56	@ 0x38
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b090      	sub	sp, #64	@ 0x40
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <xQueueGenericSendFromISR+0x3e>
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <xQueueGenericSendFromISR+0x42>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <xQueueGenericSendFromISR+0x44>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d103      	bne.n	8003cda <xQueueGenericSendFromISR+0x6e>
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <xQueueGenericSendFromISR+0x72>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueGenericSendFromISR+0x74>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cfc:	f002 f8a4 	bl	8005e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d00:	f3ef 8211 	mrs	r2, BASEPRI
 8003d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	61fa      	str	r2, [r7, #28]
 8003d16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d18:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d1a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d302      	bcc.n	8003d2e <xQueueGenericSendFromISR+0xc2>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d12f      	bne.n	8003d8e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d44:	f000 f994 	bl	8004070 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d112      	bne.n	8003d78 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	3324      	adds	r3, #36	@ 0x24
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 ffc4 	bl	8004cec <xTaskRemoveFromEventList>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00e      	beq.n	8003d88 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00b      	beq.n	8003d88 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e007      	b.n	8003d88 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	b25a      	sxtb	r2, r3
 8003d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003d8c:	e001      	b.n	8003d92 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d94:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3740      	adds	r7, #64	@ 0x40
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	@ 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <xQueueReceive+0x32>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	623b      	str	r3, [r7, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	e7fd      	b.n	8003dd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <xQueueReceive+0x40>
 8003de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <xQueueReceive+0x44>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <xQueueReceive+0x46>
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <xQueueReceive+0x62>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	61fb      	str	r3, [r7, #28]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0a:	f001 f999 	bl	8005140 <xTaskGetSchedulerState>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xQueueReceive+0x72>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <xQueueReceive+0x76>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <xQueueReceive+0x78>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <xQueueReceive+0x94>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	61bb      	str	r3, [r7, #24]
}
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e3c:	f001 ff24 	bl	8005c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01f      	beq.n	8003e8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e50:	f000 f978 	bl	8004144 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00f      	beq.n	8003e84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	3310      	adds	r3, #16
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 ff3f 	bl	8004cec <xTaskRemoveFromEventList>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e74:	4b3c      	ldr	r3, [pc, #240]	@ (8003f68 <xQueueReceive+0x1c0>)
 8003e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e84:	f001 ff32 	bl	8005cec <vPortExitCritical>
				return pdPASS;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e069      	b.n	8003f60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e92:	f001 ff2b 	bl	8005cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e062      	b.n	8003f60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ea0:	f107 0310 	add.w	r3, r7, #16
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 ffe9 	bl	8004e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eae:	f001 ff1d 	bl	8005cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eb2:	f000 fcaf 	bl	8004814 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb6:	f001 fee7 	bl	8005c88 <vPortEnterCritical>
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d103      	bne.n	8003ed0 <xQueueReceive+0x128>
 8003ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ed6:	b25b      	sxtb	r3, r3
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d103      	bne.n	8003ee6 <xQueueReceive+0x13e>
 8003ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ee6:	f001 ff01 	bl	8005cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eea:	1d3a      	adds	r2, r7, #4
 8003eec:	f107 0310 	add.w	r3, r7, #16
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 ffd8 	bl	8004ea8 <xTaskCheckForTimeOut>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d123      	bne.n	8003f46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f00:	f000 f998 	bl	8004234 <prvIsQueueEmpty>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d017      	beq.n	8003f3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	3324      	adds	r3, #36	@ 0x24
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fe5a 	bl	8004bcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f1a:	f000 f939 	bl	8004190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f1e:	f000 fc87 	bl	8004830 <xTaskResumeAll>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d189      	bne.n	8003e3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f28:	4b0f      	ldr	r3, [pc, #60]	@ (8003f68 <xQueueReceive+0x1c0>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	e780      	b.n	8003e3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f3c:	f000 f928 	bl	8004190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f40:	f000 fc76 	bl	8004830 <xTaskResumeAll>
 8003f44:	e77a      	b.n	8003e3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f48:	f000 f922 	bl	8004190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f4c:	f000 fc70 	bl	8004830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f52:	f000 f96f 	bl	8004234 <prvIsQueueEmpty>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f43f af6f 	beq.w	8003e3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3730      	adds	r7, #48	@ 0x30
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08e      	sub	sp, #56	@ 0x38
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	623b      	str	r3, [r7, #32]
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d103      	bne.n	8003fa8 <xQueueReceiveFromISR+0x3c>
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <xQueueReceiveFromISR+0x40>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <xQueueReceiveFromISR+0x42>
 8003fac:	2300      	movs	r3, #0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	61fb      	str	r3, [r7, #28]
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	e7fd      	b.n	8003fc6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fca:	f001 ff3d 	bl	8005e48 <vPortValidateInterruptPriority>
	__asm volatile
 8003fce:	f3ef 8211 	mrs	r2, BASEPRI
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	61ba      	str	r2, [r7, #24]
 8003fe4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003fe6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02f      	beq.n	8004056 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004004:	f000 f89e 	bl	8004144 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400a:	1e5a      	subs	r2, r3, #1
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004010:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d112      	bne.n	8004040 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	3310      	adds	r3, #16
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fe60 	bl	8004cec <xTaskRemoveFromEventList>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00e      	beq.n	8004050 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e007      	b.n	8004050 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004044:	3301      	adds	r3, #1
 8004046:	b2db      	uxtb	r3, r3
 8004048:	b25a      	sxtb	r2, r3
 800404a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004050:	2301      	movs	r3, #1
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
 8004054:	e001      	b.n	800405a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004056:	2300      	movs	r3, #0
 8004058:	637b      	str	r3, [r7, #52]	@ 0x34
 800405a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f383 8811 	msr	BASEPRI, r3
}
 8004064:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004068:	4618      	mov	r0, r3
 800406a:	3738      	adds	r7, #56	@ 0x38
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d14d      	bne.n	8004132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4618      	mov	r0, r3
 800409c:	f001 f86e 	bl	800517c <xTaskPriorityDisinherit>
 80040a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	e043      	b.n	8004132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d119      	bne.n	80040e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6858      	ldr	r0, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	461a      	mov	r2, r3
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	f002 fbd7 	bl	800686e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	441a      	add	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d32b      	bcc.n	8004132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	e026      	b.n	8004132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68d8      	ldr	r0, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	461a      	mov	r2, r3
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	f002 fbbd 	bl	800686e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	425b      	negs	r3, r3
 80040fe:	441a      	add	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d207      	bcs.n	8004120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	425b      	negs	r3, r3
 800411a:	441a      	add	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d105      	bne.n	8004132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3b01      	subs	r3, #1
 8004130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800413a:	697b      	ldr	r3, [r7, #20]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	441a      	add	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	429a      	cmp	r2, r3
 800416e:	d303      	bcc.n	8004178 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68d9      	ldr	r1, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	461a      	mov	r2, r3
 8004182:	6838      	ldr	r0, [r7, #0]
 8004184:	f002 fb73 	bl	800686e <memcpy>
	}
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004198:	f001 fd76 	bl	8005c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a4:	e011      	b.n	80041ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d012      	beq.n	80041d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3324      	adds	r3, #36	@ 0x24
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fd9a 	bl	8004cec <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041be:	f000 fed7 	bl	8004f70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dce9      	bgt.n	80041a6 <prvUnlockQueue+0x16>
 80041d2:	e000      	b.n	80041d6 <prvUnlockQueue+0x46>
					break;
 80041d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	22ff      	movs	r2, #255	@ 0xff
 80041da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80041de:	f001 fd85 	bl	8005cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041e2:	f001 fd51 	bl	8005c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ee:	e011      	b.n	8004214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d012      	beq.n	800421e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3310      	adds	r3, #16
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fd75 	bl	8004cec <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004208:	f000 feb2 	bl	8004f70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	3b01      	subs	r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004218:	2b00      	cmp	r3, #0
 800421a:	dce9      	bgt.n	80041f0 <prvUnlockQueue+0x60>
 800421c:	e000      	b.n	8004220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800421e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	22ff      	movs	r2, #255	@ 0xff
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004228:	f001 fd60 	bl	8005cec <vPortExitCritical>
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800423c:	f001 fd24 	bl	8005c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e001      	b.n	8004252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004252:	f001 fd4b 	bl	8005cec <vPortExitCritical>

	return xReturn;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004268:	f001 fd0e 	bl	8005c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	429a      	cmp	r2, r3
 8004276:	d102      	bne.n	800427e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e001      	b.n	8004282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004282:	f001 fd33 	bl	8005cec <vPortExitCritical>

	return xReturn;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e014      	b.n	80042ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042a0:	4a0f      	ldr	r2, [pc, #60]	@ (80042e0 <vQueueAddToRegistry+0x50>)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042ac:	490c      	ldr	r1, [pc, #48]	@ (80042e0 <vQueueAddToRegistry+0x50>)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042b6:	4a0a      	ldr	r2, [pc, #40]	@ (80042e0 <vQueueAddToRegistry+0x50>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042c2:	e006      	b.n	80042d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b07      	cmp	r3, #7
 80042ce:	d9e7      	bls.n	80042a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000888 	.word	0x20000888

080042e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042f4:	f001 fcc8 	bl	8005c88 <vPortEnterCritical>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042fe:	b25b      	sxtb	r3, r3
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004304:	d103      	bne.n	800430e <vQueueWaitForMessageRestricted+0x2a>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004314:	b25b      	sxtb	r3, r3
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d103      	bne.n	8004324 <vQueueWaitForMessageRestricted+0x40>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004324:	f001 fce2 	bl	8005cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3324      	adds	r3, #36	@ 0x24
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fcab 	bl	8004c94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800433e:	6978      	ldr	r0, [r7, #20]
 8004340:	f7ff ff26 	bl	8004190 <prvUnlockQueue>
	}
 8004344:	bf00      	nop
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08e      	sub	sp, #56	@ 0x38
 8004350:	af04      	add	r7, sp, #16
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800435a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	623b      	str	r3, [r7, #32]
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <xTaskCreateStatic+0x4a>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	61fb      	str	r3, [r7, #28]
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	e7fd      	b.n	8004392 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004396:	23a8      	movs	r3, #168	@ 0xa8
 8004398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2ba8      	cmp	r3, #168	@ 0xa8
 800439e:	d00b      	beq.n	80043b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	61bb      	str	r3, [r7, #24]
}
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	e7fd      	b.n	80043b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01e      	beq.n	80043fe <xTaskCreateStatic+0xb2>
 80043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01b      	beq.n	80043fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043d8:	2300      	movs	r3, #0
 80043da:	9303      	str	r3, [sp, #12]
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	9302      	str	r3, [sp, #8]
 80043e0:	f107 0314 	add.w	r3, r7, #20
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f851 	bl	8004498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043f8:	f000 f8f6 	bl	80045e8 <prvAddNewTaskToReadyList>
 80043fc:	e001      	b.n	8004402 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004402:	697b      	ldr	r3, [r7, #20]
	}
 8004404:	4618      	mov	r0, r3
 8004406:	3728      	adds	r7, #40	@ 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	@ 0x30
 8004410:	af04      	add	r7, sp, #16
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4618      	mov	r0, r3
 8004422:	f001 fd53 	bl	8005ecc <pvPortMalloc>
 8004426:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00e      	beq.n	800444c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800442e:	20a8      	movs	r0, #168	@ 0xa8
 8004430:	f001 fd4c 	bl	8005ecc <pvPortMalloc>
 8004434:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
 8004442:	e005      	b.n	8004450 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004444:	6978      	ldr	r0, [r7, #20]
 8004446:	f001 fe0f 	bl	8006068 <vPortFree>
 800444a:	e001      	b.n	8004450 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d017      	beq.n	8004486 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	2300      	movs	r3, #0
 8004462:	9303      	str	r3, [sp, #12]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	9302      	str	r3, [sp, #8]
 8004468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f80f 	bl	8004498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800447a:	69f8      	ldr	r0, [r7, #28]
 800447c:	f000 f8b4 	bl	80045e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004480:	2301      	movs	r3, #1
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	e002      	b.n	800448c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800448c:	69bb      	ldr	r3, [r7, #24]
	}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	21a5      	movs	r1, #165	@ 0xa5
 80044b2:	f002 f903 	bl	80066bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044c0:	3b01      	subs	r3, #1
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	617b      	str	r3, [r7, #20]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01f      	beq.n	8004538 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	e012      	b.n	8004524 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	7819      	ldrb	r1, [r3, #0]
 8004506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	3334      	adds	r3, #52	@ 0x34
 800450e:	460a      	mov	r2, r1
 8004510:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3301      	adds	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	d9e9      	bls.n	80044fe <prvInitialiseNewTask+0x66>
 800452a:	e000      	b.n	800452e <prvInitialiseNewTask+0x96>
			{
				break;
 800452c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004536:	e003      	b.n	8004540 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	2b37      	cmp	r3, #55	@ 0x37
 8004544:	d901      	bls.n	800454a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004546:	2337      	movs	r3, #55	@ 0x37
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800454e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004554:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	2200      	movs	r2, #0
 800455a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff f8a7 	bl	80036b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	3318      	adds	r3, #24
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f8a2 	bl	80036b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004574:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004584:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	2200      	movs	r2, #0
 8004592:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	3354      	adds	r3, #84	@ 0x54
 800459a:	224c      	movs	r2, #76	@ 0x4c
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f002 f88c 	bl	80066bc <memset>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <prvInitialiseNewTask+0x144>)
 80045a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	4a0c      	ldr	r2, [pc, #48]	@ (80045e0 <prvInitialiseNewTask+0x148>)
 80045ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	4a0c      	ldr	r2, [pc, #48]	@ (80045e4 <prvInitialiseNewTask+0x14c>)
 80045b4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	69b8      	ldr	r0, [r7, #24]
 80045bc:	f001 fa34 	bl	8005a28 <pxPortInitialiseStack>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045d2:	bf00      	nop
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20004b1c 	.word	0x20004b1c
 80045e0:	20004b84 	.word	0x20004b84
 80045e4:	20004bec 	.word	0x20004bec

080045e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045f0:	f001 fb4a 	bl	8005c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045f4:	4b2d      	ldr	r3, [pc, #180]	@ (80046ac <prvAddNewTaskToReadyList+0xc4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	4a2c      	ldr	r2, [pc, #176]	@ (80046ac <prvAddNewTaskToReadyList+0xc4>)
 80045fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045fe:	4b2c      	ldr	r3, [pc, #176]	@ (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004606:	4a2a      	ldr	r2, [pc, #168]	@ (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800460c:	4b27      	ldr	r3, [pc, #156]	@ (80046ac <prvAddNewTaskToReadyList+0xc4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d110      	bne.n	8004636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004614:	f000 fcd0 	bl	8004fb8 <prvInitialiseTaskLists>
 8004618:	e00d      	b.n	8004636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800461a:	4b26      	ldr	r3, [pc, #152]	@ (80046b4 <prvAddNewTaskToReadyList+0xcc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004622:	4b23      	ldr	r3, [pc, #140]	@ (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	429a      	cmp	r2, r3
 800462e:	d802      	bhi.n	8004636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004630:	4a1f      	ldr	r2, [pc, #124]	@ (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004636:	4b20      	ldr	r3, [pc, #128]	@ (80046b8 <prvAddNewTaskToReadyList+0xd0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	4a1e      	ldr	r2, [pc, #120]	@ (80046b8 <prvAddNewTaskToReadyList+0xd0>)
 800463e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004640:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <prvAddNewTaskToReadyList+0xd0>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464c:	4b1b      	ldr	r3, [pc, #108]	@ (80046bc <prvAddNewTaskToReadyList+0xd4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <prvAddNewTaskToReadyList+0x74>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	4a18      	ldr	r2, [pc, #96]	@ (80046bc <prvAddNewTaskToReadyList+0xd4>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a15      	ldr	r2, [pc, #84]	@ (80046c0 <prvAddNewTaskToReadyList+0xd8>)
 800466a:	441a      	add	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7ff f82b 	bl	80036ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004678:	f001 fb38 	bl	8005cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800467c:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <prvAddNewTaskToReadyList+0xcc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00e      	beq.n	80046a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004684:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468e:	429a      	cmp	r2, r3
 8004690:	d207      	bcs.n	80046a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004692:	4b0c      	ldr	r3, [pc, #48]	@ (80046c4 <prvAddNewTaskToReadyList+0xdc>)
 8004694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000d9c 	.word	0x20000d9c
 80046b0:	200008c8 	.word	0x200008c8
 80046b4:	20000da8 	.word	0x20000da8
 80046b8:	20000db8 	.word	0x20000db8
 80046bc:	20000da4 	.word	0x20000da4
 80046c0:	200008cc 	.word	0x200008cc
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d018      	beq.n	800470c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046da:	4b14      	ldr	r3, [pc, #80]	@ (800472c <vTaskDelay+0x64>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <vTaskDelay+0x32>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60bb      	str	r3, [r7, #8]
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	e7fd      	b.n	80046f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046fa:	f000 f88b 	bl	8004814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046fe:	2100      	movs	r1, #0
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fdc3 	bl	800528c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004706:	f000 f893 	bl	8004830 <xTaskResumeAll>
 800470a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <vTaskDelay+0x68>)
 8004714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000dc4 	.word	0x20000dc4
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	@ 0x28
 8004738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004742:	463a      	mov	r2, r7
 8004744:	1d39      	adds	r1, r7, #4
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fd68 	bl	8003220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	9202      	str	r2, [sp, #8]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	2300      	movs	r3, #0
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2300      	movs	r3, #0
 8004760:	460a      	mov	r2, r1
 8004762:	4924      	ldr	r1, [pc, #144]	@ (80047f4 <vTaskStartScheduler+0xc0>)
 8004764:	4824      	ldr	r0, [pc, #144]	@ (80047f8 <vTaskStartScheduler+0xc4>)
 8004766:	f7ff fdf1 	bl	800434c <xTaskCreateStatic>
 800476a:	4603      	mov	r3, r0
 800476c:	4a23      	ldr	r2, [pc, #140]	@ (80047fc <vTaskStartScheduler+0xc8>)
 800476e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004770:	4b22      	ldr	r3, [pc, #136]	@ (80047fc <vTaskStartScheduler+0xc8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004778:	2301      	movs	r3, #1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e001      	b.n	8004782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d102      	bne.n	800478e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004788:	f000 fdd4 	bl	8005334 <xTimerCreateTimerTask>
 800478c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d11b      	bne.n	80047cc <vTaskStartScheduler+0x98>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	613b      	str	r3, [r7, #16]
}
 80047a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047a8:	4b15      	ldr	r3, [pc, #84]	@ (8004800 <vTaskStartScheduler+0xcc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3354      	adds	r3, #84	@ 0x54
 80047ae:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <vTaskStartScheduler+0xd0>)
 80047b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047b2:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <vTaskStartScheduler+0xd4>)
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047ba:	4b14      	ldr	r3, [pc, #80]	@ (800480c <vTaskStartScheduler+0xd8>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047c0:	4b13      	ldr	r3, [pc, #76]	@ (8004810 <vTaskStartScheduler+0xdc>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047c6:	f001 f9bb 	bl	8005b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047ca:	e00f      	b.n	80047ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d10b      	bne.n	80047ec <vTaskStartScheduler+0xb8>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <vTaskStartScheduler+0xb4>
}
 80047ec:	bf00      	nop
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	08007334 	.word	0x08007334
 80047f8:	08004f89 	.word	0x08004f89
 80047fc:	20000dc0 	.word	0x20000dc0
 8004800:	200008c8 	.word	0x200008c8
 8004804:	2000001c 	.word	0x2000001c
 8004808:	20000dbc 	.word	0x20000dbc
 800480c:	20000da8 	.word	0x20000da8
 8004810:	20000da0 	.word	0x20000da0

08004814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004818:	4b04      	ldr	r3, [pc, #16]	@ (800482c <vTaskSuspendAll+0x18>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	4a03      	ldr	r2, [pc, #12]	@ (800482c <vTaskSuspendAll+0x18>)
 8004820:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004822:	bf00      	nop
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	20000dc4 	.word	0x20000dc4

08004830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800483e:	4b42      	ldr	r3, [pc, #264]	@ (8004948 <xTaskResumeAll+0x118>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <xTaskResumeAll+0x2e>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	603b      	str	r3, [r7, #0]
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	e7fd      	b.n	800485a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800485e:	f001 fa13 	bl	8005c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004862:	4b39      	ldr	r3, [pc, #228]	@ (8004948 <xTaskResumeAll+0x118>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3b01      	subs	r3, #1
 8004868:	4a37      	ldr	r2, [pc, #220]	@ (8004948 <xTaskResumeAll+0x118>)
 800486a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800486c:	4b36      	ldr	r3, [pc, #216]	@ (8004948 <xTaskResumeAll+0x118>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d162      	bne.n	800493a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004874:	4b35      	ldr	r3, [pc, #212]	@ (800494c <xTaskResumeAll+0x11c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05e      	beq.n	800493a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800487c:	e02f      	b.n	80048de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487e:	4b34      	ldr	r3, [pc, #208]	@ (8004950 <xTaskResumeAll+0x120>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3318      	adds	r3, #24
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe ff7c 	bl	8003788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe ff77 	bl	8003788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489e:	4b2d      	ldr	r3, [pc, #180]	@ (8004954 <xTaskResumeAll+0x124>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d903      	bls.n	80048ae <xTaskResumeAll+0x7e>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <xTaskResumeAll+0x124>)
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a27      	ldr	r2, [pc, #156]	@ (8004958 <xTaskResumeAll+0x128>)
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe ff02 	bl	80036ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ce:	4b23      	ldr	r3, [pc, #140]	@ (800495c <xTaskResumeAll+0x12c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d302      	bcc.n	80048de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80048d8:	4b21      	ldr	r3, [pc, #132]	@ (8004960 <xTaskResumeAll+0x130>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048de:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <xTaskResumeAll+0x120>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1cb      	bne.n	800487e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048ec:	f000 fc08 	bl	8005100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004964 <xTaskResumeAll+0x134>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d010      	beq.n	800491e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048fc:	f000 f846 	bl	800498c <xTaskIncrementTick>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004906:	4b16      	ldr	r3, [pc, #88]	@ (8004960 <xTaskResumeAll+0x130>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3b01      	subs	r3, #1
 8004910:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f1      	bne.n	80048fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004918:	4b12      	ldr	r3, [pc, #72]	@ (8004964 <xTaskResumeAll+0x134>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800491e:	4b10      	ldr	r3, [pc, #64]	@ (8004960 <xTaskResumeAll+0x130>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004926:	2301      	movs	r3, #1
 8004928:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800492a:	4b0f      	ldr	r3, [pc, #60]	@ (8004968 <xTaskResumeAll+0x138>)
 800492c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800493a:	f001 f9d7 	bl	8005cec <vPortExitCritical>

	return xAlreadyYielded;
 800493e:	68bb      	ldr	r3, [r7, #8]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000dc4 	.word	0x20000dc4
 800494c:	20000d9c 	.word	0x20000d9c
 8004950:	20000d5c 	.word	0x20000d5c
 8004954:	20000da4 	.word	0x20000da4
 8004958:	200008cc 	.word	0x200008cc
 800495c:	200008c8 	.word	0x200008c8
 8004960:	20000db0 	.word	0x20000db0
 8004964:	20000dac 	.word	0x20000dac
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004972:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <xTaskGetTickCount+0x1c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004978:	687b      	ldr	r3, [r7, #4]
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000da0 	.word	0x20000da0

0800498c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004996:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad4 <xTaskIncrementTick+0x148>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 8090 	bne.w	8004ac0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049a0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad8 <xTaskIncrementTick+0x14c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049a8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ad8 <xTaskIncrementTick+0x14c>)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d121      	bne.n	80049f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80049b4:	4b49      	ldr	r3, [pc, #292]	@ (8004adc <xTaskIncrementTick+0x150>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	603b      	str	r3, [r7, #0]
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	e7fd      	b.n	80049d2 <xTaskIncrementTick+0x46>
 80049d6:	4b41      	ldr	r3, [pc, #260]	@ (8004adc <xTaskIncrementTick+0x150>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	4b40      	ldr	r3, [pc, #256]	@ (8004ae0 <xTaskIncrementTick+0x154>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a3e      	ldr	r2, [pc, #248]	@ (8004adc <xTaskIncrementTick+0x150>)
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ae0 <xTaskIncrementTick+0x154>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae4 <xTaskIncrementTick+0x158>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ae4 <xTaskIncrementTick+0x158>)
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	f000 fb84 	bl	8005100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049f8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae8 <xTaskIncrementTick+0x15c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d349      	bcc.n	8004a96 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a02:	4b36      	ldr	r3, [pc, #216]	@ (8004adc <xTaskIncrementTick+0x150>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0c:	4b36      	ldr	r3, [pc, #216]	@ (8004ae8 <xTaskIncrementTick+0x15c>)
 8004a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a12:	601a      	str	r2, [r3, #0]
					break;
 8004a14:	e03f      	b.n	8004a96 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a16:	4b31      	ldr	r3, [pc, #196]	@ (8004adc <xTaskIncrementTick+0x150>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d203      	bcs.n	8004a36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae8 <xTaskIncrementTick+0x15c>)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a34:	e02f      	b.n	8004a96 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fea4 	bl	8003788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe fe9b 	bl	8003788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a56:	4b25      	ldr	r3, [pc, #148]	@ (8004aec <xTaskIncrementTick+0x160>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d903      	bls.n	8004a66 <xTaskIncrementTick+0xda>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	4a22      	ldr	r2, [pc, #136]	@ (8004aec <xTaskIncrementTick+0x160>)
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <xTaskIncrementTick+0x164>)
 8004a74:	441a      	add	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7fe fe26 	bl	80036ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a86:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <xTaskIncrementTick+0x168>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d3b8      	bcc.n	8004a02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a94:	e7b5      	b.n	8004a02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a96:	4b17      	ldr	r3, [pc, #92]	@ (8004af4 <xTaskIncrementTick+0x168>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9c:	4914      	ldr	r1, [pc, #80]	@ (8004af0 <xTaskIncrementTick+0x164>)
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d901      	bls.n	8004ab2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ab2:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <xTaskIncrementTick+0x16c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e004      	b.n	8004aca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8004afc <xTaskIncrementTick+0x170>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8004afc <xTaskIncrementTick+0x170>)
 8004ac8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004aca:	697b      	ldr	r3, [r7, #20]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000dc4 	.word	0x20000dc4
 8004ad8:	20000da0 	.word	0x20000da0
 8004adc:	20000d54 	.word	0x20000d54
 8004ae0:	20000d58 	.word	0x20000d58
 8004ae4:	20000db4 	.word	0x20000db4
 8004ae8:	20000dbc 	.word	0x20000dbc
 8004aec:	20000da4 	.word	0x20000da4
 8004af0:	200008cc 	.word	0x200008cc
 8004af4:	200008c8 	.word	0x200008c8
 8004af8:	20000db0 	.word	0x20000db0
 8004afc:	20000dac 	.word	0x20000dac

08004b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b06:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb4 <vTaskSwitchContext+0xb4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb8 <vTaskSwitchContext+0xb8>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b14:	e047      	b.n	8004ba6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004b16:	4b28      	ldr	r3, [pc, #160]	@ (8004bb8 <vTaskSwitchContext+0xb8>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1c:	4b27      	ldr	r3, [pc, #156]	@ (8004bbc <vTaskSwitchContext+0xbc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e011      	b.n	8004b48 <vTaskSwitchContext+0x48>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <vTaskSwitchContext+0x42>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	607b      	str	r3, [r7, #4]
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <vTaskSwitchContext+0x3e>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	491d      	ldr	r1, [pc, #116]	@ (8004bc0 <vTaskSwitchContext+0xc0>)
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0e3      	beq.n	8004b24 <vTaskSwitchContext+0x24>
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4a16      	ldr	r2, [pc, #88]	@ (8004bc0 <vTaskSwitchContext+0xc0>)
 8004b68:	4413      	add	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d104      	bne.n	8004b8c <vTaskSwitchContext+0x8c>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <vTaskSwitchContext+0xc4>)
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	4a09      	ldr	r2, [pc, #36]	@ (8004bbc <vTaskSwitchContext+0xbc>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b9c:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <vTaskSwitchContext+0xc4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3354      	adds	r3, #84	@ 0x54
 8004ba2:	4a09      	ldr	r2, [pc, #36]	@ (8004bc8 <vTaskSwitchContext+0xc8>)
 8004ba4:	6013      	str	r3, [r2, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000dc4 	.word	0x20000dc4
 8004bb8:	20000db0 	.word	0x20000db0
 8004bbc:	20000da4 	.word	0x20000da4
 8004bc0:	200008cc 	.word	0x200008cc
 8004bc4:	200008c8 	.word	0x200008c8
 8004bc8:	2000001c 	.word	0x2000001c

08004bcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60fb      	str	r3, [r7, #12]
}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	e7fd      	b.n	8004bf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bf4:	4b07      	ldr	r3, [pc, #28]	@ (8004c14 <vTaskPlaceOnEventList+0x48>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3318      	adds	r3, #24
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fe fd8a 	bl	8003716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c02:	2101      	movs	r1, #1
 8004c04:	6838      	ldr	r0, [r7, #0]
 8004c06:	f000 fb41 	bl	800528c <prvAddCurrentTaskToDelayedList>
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200008c8 	.word	0x200008c8

08004c18 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	617b      	str	r3, [r7, #20]
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	e7fd      	b.n	8004c3e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <vTaskPlaceOnUnorderedEventList+0x74>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	613b      	str	r3, [r7, #16]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004c6c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c6e:	4b08      	ldr	r3, [pc, #32]	@ (8004c90 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3318      	adds	r3, #24
 8004c74:	4619      	mov	r1, r3
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7fe fd29 	bl	80036ce <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fb04 	bl	800528c <prvAddCurrentTaskToDelayedList>
}
 8004c84:	bf00      	nop
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000dc4 	.word	0x20000dc4
 8004c90:	200008c8 	.word	0x200008c8

08004c94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	617b      	str	r3, [r7, #20]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3318      	adds	r3, #24
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7fe fd01 	bl	80036ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	68b8      	ldr	r0, [r7, #8]
 8004cdc:	f000 fad6 	bl	800528c <prvAddCurrentTaskToDelayedList>
	}
 8004ce0:	bf00      	nop
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	200008c8 	.word	0x200008c8

08004cec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60fb      	str	r3, [r7, #12]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3318      	adds	r3, #24
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fd32 	bl	8003788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d24:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <xTaskRemoveFromEventList+0xb0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d11d      	bne.n	8004d68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fd29 	bl	8003788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3a:	4b19      	ldr	r3, [pc, #100]	@ (8004da0 <xTaskRemoveFromEventList+0xb4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d903      	bls.n	8004d4a <xTaskRemoveFromEventList+0x5e>
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	4a16      	ldr	r2, [pc, #88]	@ (8004da0 <xTaskRemoveFromEventList+0xb4>)
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <xTaskRemoveFromEventList+0xb8>)
 8004d58:	441a      	add	r2, r3
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fe fcb4 	bl	80036ce <vListInsertEnd>
 8004d66:	e005      	b.n	8004d74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	3318      	adds	r3, #24
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	480e      	ldr	r0, [pc, #56]	@ (8004da8 <xTaskRemoveFromEventList+0xbc>)
 8004d70:	f7fe fcad 	bl	80036ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d78:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <xTaskRemoveFromEventList+0xc0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d905      	bls.n	8004d8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d82:	2301      	movs	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d86:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <xTaskRemoveFromEventList+0xc4>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e001      	b.n	8004d92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d92:	697b      	ldr	r3, [r7, #20]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000dc4 	.word	0x20000dc4
 8004da0:	20000da4 	.word	0x20000da4
 8004da4:	200008cc 	.word	0x200008cc
 8004da8:	20000d5c 	.word	0x20000d5c
 8004dac:	200008c8 	.word	0x200008c8
 8004db0:	20000db0 	.word	0x20000db0

08004db4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8004e68 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	613b      	str	r3, [r7, #16]
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	60fb      	str	r3, [r7, #12]
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fe fcbb 	bl	8003788 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fcb6 	bl	8003788 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e20:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d903      	bls.n	8004e30 <vTaskRemoveFromUnorderedEventList+0x7c>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8004e6c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e70 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004e3e:	441a      	add	r2, r3
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7fe fc41 	bl	80036ce <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e50:	4b08      	ldr	r3, [pc, #32]	@ (8004e74 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d902      	bls.n	8004e60 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004e5a:	4b07      	ldr	r3, [pc, #28]	@ (8004e78 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
	}
}
 8004e60:	bf00      	nop
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000dc4 	.word	0x20000dc4
 8004e6c:	20000da4 	.word	0x20000da4
 8004e70:	200008cc 	.word	0x200008cc
 8004e74:	200008c8 	.word	0x200008c8
 8004e78:	20000db0 	.word	0x20000db0

08004e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e84:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <vTaskInternalSetTimeOutState+0x24>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <vTaskInternalSetTimeOutState+0x28>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	605a      	str	r2, [r3, #4]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	20000db4 	.word	0x20000db4
 8004ea4:	20000da0 	.word	0x20000da0

08004ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	613b      	str	r3, [r7, #16]
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60fb      	str	r3, [r7, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004eee:	f000 fecb 	bl	8005c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f68 <xTaskCheckForTimeOut+0xc0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d102      	bne.n	8004f12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	e023      	b.n	8004f5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b15      	ldr	r3, [pc, #84]	@ (8004f6c <xTaskCheckForTimeOut+0xc4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d007      	beq.n	8004f2e <xTaskCheckForTimeOut+0x86>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e015      	b.n	8004f5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d20b      	bcs.n	8004f50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1ad2      	subs	r2, r2, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ff99 	bl	8004e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e004      	b.n	8004f5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f5a:	f000 fec7 	bl	8005cec <vPortExitCritical>

	return xReturn;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000da0 	.word	0x20000da0
 8004f6c:	20000db4 	.word	0x20000db4

08004f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f74:	4b03      	ldr	r3, [pc, #12]	@ (8004f84 <vTaskMissedYield+0x14>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	20000db0 	.word	0x20000db0

08004f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f90:	f000 f852 	bl	8005038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f94:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <prvIdleTask+0x28>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d9f9      	bls.n	8004f90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <prvIdleTask+0x2c>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fac:	e7f0      	b.n	8004f90 <prvIdleTask+0x8>
 8004fae:	bf00      	nop
 8004fb0:	200008cc 	.word	0x200008cc
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	e00c      	b.n	8004fde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4a12      	ldr	r2, [pc, #72]	@ (8005018 <prvInitialiseTaskLists+0x60>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fb4e 	bl	8003674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b37      	cmp	r3, #55	@ 0x37
 8004fe2:	d9ef      	bls.n	8004fc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fe4:	480d      	ldr	r0, [pc, #52]	@ (800501c <prvInitialiseTaskLists+0x64>)
 8004fe6:	f7fe fb45 	bl	8003674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fea:	480d      	ldr	r0, [pc, #52]	@ (8005020 <prvInitialiseTaskLists+0x68>)
 8004fec:	f7fe fb42 	bl	8003674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ff0:	480c      	ldr	r0, [pc, #48]	@ (8005024 <prvInitialiseTaskLists+0x6c>)
 8004ff2:	f7fe fb3f 	bl	8003674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ff6:	480c      	ldr	r0, [pc, #48]	@ (8005028 <prvInitialiseTaskLists+0x70>)
 8004ff8:	f7fe fb3c 	bl	8003674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ffc:	480b      	ldr	r0, [pc, #44]	@ (800502c <prvInitialiseTaskLists+0x74>)
 8004ffe:	f7fe fb39 	bl	8003674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <prvInitialiseTaskLists+0x78>)
 8005004:	4a05      	ldr	r2, [pc, #20]	@ (800501c <prvInitialiseTaskLists+0x64>)
 8005006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005008:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <prvInitialiseTaskLists+0x7c>)
 800500a:	4a05      	ldr	r2, [pc, #20]	@ (8005020 <prvInitialiseTaskLists+0x68>)
 800500c:	601a      	str	r2, [r3, #0]
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200008cc 	.word	0x200008cc
 800501c:	20000d2c 	.word	0x20000d2c
 8005020:	20000d40 	.word	0x20000d40
 8005024:	20000d5c 	.word	0x20000d5c
 8005028:	20000d70 	.word	0x20000d70
 800502c:	20000d88 	.word	0x20000d88
 8005030:	20000d54 	.word	0x20000d54
 8005034:	20000d58 	.word	0x20000d58

08005038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800503e:	e019      	b.n	8005074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005040:	f000 fe22 	bl	8005c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005044:	4b10      	ldr	r3, [pc, #64]	@ (8005088 <prvCheckTasksWaitingTermination+0x50>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe fb99 	bl	8003788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005056:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <prvCheckTasksWaitingTermination+0x54>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3b01      	subs	r3, #1
 800505c:	4a0b      	ldr	r2, [pc, #44]	@ (800508c <prvCheckTasksWaitingTermination+0x54>)
 800505e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <prvCheckTasksWaitingTermination+0x58>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3b01      	subs	r3, #1
 8005066:	4a0a      	ldr	r2, [pc, #40]	@ (8005090 <prvCheckTasksWaitingTermination+0x58>)
 8005068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800506a:	f000 fe3f 	bl	8005cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f810 	bl	8005094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005074:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <prvCheckTasksWaitingTermination+0x58>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e1      	bne.n	8005040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000d70 	.word	0x20000d70
 800508c:	20000d9c 	.word	0x20000d9c
 8005090:	20000d84 	.word	0x20000d84

08005094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3354      	adds	r3, #84	@ 0x54
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 fb23 	bl	80066ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d108      	bne.n	80050c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 ffd7 	bl	8006068 <vPortFree>
				vPortFree( pxTCB );
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 ffd4 	bl	8006068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050c0:	e019      	b.n	80050f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d103      	bne.n	80050d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 ffcb 	bl	8006068 <vPortFree>
	}
 80050d2:	e010      	b.n	80050f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d00b      	beq.n	80050f6 <prvDeleteTCB+0x62>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60fb      	str	r3, [r7, #12]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <prvDeleteTCB+0x5e>
	}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005106:	4b0c      	ldr	r3, [pc, #48]	@ (8005138 <prvResetNextTaskUnblockTime+0x38>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005110:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <prvResetNextTaskUnblockTime+0x3c>)
 8005112:	f04f 32ff 	mov.w	r2, #4294967295
 8005116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005118:	e008      	b.n	800512c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511a:	4b07      	ldr	r3, [pc, #28]	@ (8005138 <prvResetNextTaskUnblockTime+0x38>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a04      	ldr	r2, [pc, #16]	@ (800513c <prvResetNextTaskUnblockTime+0x3c>)
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	20000d54 	.word	0x20000d54
 800513c:	20000dbc 	.word	0x20000dbc

08005140 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005146:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <xTaskGetSchedulerState+0x34>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800514e:	2301      	movs	r3, #1
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	e008      	b.n	8005166 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005154:	4b08      	ldr	r3, [pc, #32]	@ (8005178 <xTaskGetSchedulerState+0x38>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800515c:	2302      	movs	r3, #2
 800515e:	607b      	str	r3, [r7, #4]
 8005160:	e001      	b.n	8005166 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005162:	2300      	movs	r3, #0
 8005164:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005166:	687b      	ldr	r3, [r7, #4]
	}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	20000da8 	.word	0x20000da8
 8005178:	20000dc4 	.word	0x20000dc4

0800517c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d058      	beq.n	8005244 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005192:	4b2f      	ldr	r3, [pc, #188]	@ (8005250 <xTaskPriorityDisinherit+0xd4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	429a      	cmp	r2, r3
 800519a:	d00b      	beq.n	80051b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	60fb      	str	r3, [r7, #12]
}
 80051ae:	bf00      	nop
 80051b0:	bf00      	nop
 80051b2:	e7fd      	b.n	80051b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60bb      	str	r3, [r7, #8]
}
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d02c      	beq.n	8005244 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d128      	bne.n	8005244 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fac6 	bl	8003788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005214:	4b0f      	ldr	r3, [pc, #60]	@ (8005254 <xTaskPriorityDisinherit+0xd8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d903      	bls.n	8005224 <xTaskPriorityDisinherit+0xa8>
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005220:	4a0c      	ldr	r2, [pc, #48]	@ (8005254 <xTaskPriorityDisinherit+0xd8>)
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <xTaskPriorityDisinherit+0xdc>)
 8005232:	441a      	add	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3304      	adds	r3, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fe fa47 	bl	80036ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005244:	697b      	ldr	r3, [r7, #20]
	}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200008c8 	.word	0x200008c8
 8005254:	20000da4 	.word	0x20000da4
 8005258:	200008cc 	.word	0x200008cc

0800525c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005262:	4b09      	ldr	r3, [pc, #36]	@ (8005288 <uxTaskResetEventItemValue+0x2c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800526a:	4b07      	ldr	r3, [pc, #28]	@ (8005288 <uxTaskResetEventItemValue+0x2c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <uxTaskResetEventItemValue+0x2c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8005278:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800527a:	687b      	ldr	r3, [r7, #4]
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	200008c8 	.word	0x200008c8

0800528c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005296:	4b21      	ldr	r3, [pc, #132]	@ (800531c <prvAddCurrentTaskToDelayedList+0x90>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529c:	4b20      	ldr	r3, [pc, #128]	@ (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fa70 	bl	8003788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d10a      	bne.n	80052c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4819      	ldr	r0, [pc, #100]	@ (8005324 <prvAddCurrentTaskToDelayedList+0x98>)
 80052c0:	f7fe fa05 	bl	80036ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052c4:	e026      	b.n	8005314 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052ce:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d209      	bcs.n	80052f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052de:	4b12      	ldr	r3, [pc, #72]	@ (8005328 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f7fe fa13 	bl	8003716 <vListInsert>
}
 80052f0:	e010      	b.n	8005314 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052f2:	4b0e      	ldr	r3, [pc, #56]	@ (800532c <prvAddCurrentTaskToDelayedList+0xa0>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <prvAddCurrentTaskToDelayedList+0x94>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f7fe fa09 	bl	8003716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005304:	4b0a      	ldr	r3, [pc, #40]	@ (8005330 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	d202      	bcs.n	8005314 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800530e:	4a08      	ldr	r2, [pc, #32]	@ (8005330 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	6013      	str	r3, [r2, #0]
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000da0 	.word	0x20000da0
 8005320:	200008c8 	.word	0x200008c8
 8005324:	20000d88 	.word	0x20000d88
 8005328:	20000d58 	.word	0x20000d58
 800532c:	20000d54 	.word	0x20000d54
 8005330:	20000dbc 	.word	0x20000dbc

08005334 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	@ 0x28
 8005338:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800533e:	f000 fb13 	bl	8005968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005342:	4b1d      	ldr	r3, [pc, #116]	@ (80053b8 <xTimerCreateTimerTask+0x84>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d021      	beq.n	800538e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005352:	1d3a      	adds	r2, r7, #4
 8005354:	f107 0108 	add.w	r1, r7, #8
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4618      	mov	r0, r3
 800535e:	f7fd ff79 	bl	8003254 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	9202      	str	r2, [sp, #8]
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	2302      	movs	r3, #2
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2300      	movs	r3, #0
 8005372:	460a      	mov	r2, r1
 8005374:	4911      	ldr	r1, [pc, #68]	@ (80053bc <xTimerCreateTimerTask+0x88>)
 8005376:	4812      	ldr	r0, [pc, #72]	@ (80053c0 <xTimerCreateTimerTask+0x8c>)
 8005378:	f7fe ffe8 	bl	800434c <xTaskCreateStatic>
 800537c:	4603      	mov	r3, r0
 800537e:	4a11      	ldr	r2, [pc, #68]	@ (80053c4 <xTimerCreateTimerTask+0x90>)
 8005380:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005382:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <xTimerCreateTimerTask+0x90>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800538a:	2301      	movs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053ac:	697b      	ldr	r3, [r7, #20]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000df8 	.word	0x20000df8
 80053bc:	0800733c 	.word	0x0800733c
 80053c0:	08005501 	.word	0x08005501
 80053c4:	20000dfc 	.word	0x20000dfc

080053c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	623b      	str	r3, [r7, #32]
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <xTimerGenericCommand+0x98>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d02a      	beq.n	8005456 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b05      	cmp	r3, #5
 8005410:	dc18      	bgt.n	8005444 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005412:	f7ff fe95 	bl	8005140 <xTaskGetSchedulerState>
 8005416:	4603      	mov	r3, r0
 8005418:	2b02      	cmp	r3, #2
 800541a:	d109      	bne.n	8005430 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800541c:	4b10      	ldr	r3, [pc, #64]	@ (8005460 <xTimerGenericCommand+0x98>)
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	f107 0110 	add.w	r1, r7, #16
 8005424:	2300      	movs	r3, #0
 8005426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005428:	f7fe fb1e 	bl	8003a68 <xQueueGenericSend>
 800542c:	6278      	str	r0, [r7, #36]	@ 0x24
 800542e:	e012      	b.n	8005456 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <xTimerGenericCommand+0x98>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	f107 0110 	add.w	r1, r7, #16
 8005438:	2300      	movs	r3, #0
 800543a:	2200      	movs	r2, #0
 800543c:	f7fe fb14 	bl	8003a68 <xQueueGenericSend>
 8005440:	6278      	str	r0, [r7, #36]	@ 0x24
 8005442:	e008      	b.n	8005456 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005444:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <xTimerGenericCommand+0x98>)
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	f107 0110 	add.w	r1, r7, #16
 800544c:	2300      	movs	r3, #0
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	f7fe fc0c 	bl	8003c6c <xQueueGenericSendFromISR>
 8005454:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	@ 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20000df8 	.word	0x20000df8

08005464 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af02      	add	r7, sp, #8
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800546e:	4b23      	ldr	r3, [pc, #140]	@ (80054fc <prvProcessExpiredTimer+0x98>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3304      	adds	r3, #4
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe f983 	bl	8003788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d023      	beq.n	80054d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	18d1      	adds	r1, r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	6978      	ldr	r0, [r7, #20]
 800549e:	f000 f8d5 	bl	800564c <prvInsertTimerInActiveList>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d020      	beq.n	80054ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054a8:	2300      	movs	r3, #0
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	2300      	movs	r3, #0
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	2100      	movs	r1, #0
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f7ff ff88 	bl	80053c8 <xTimerGenericCommand>
 80054b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d114      	bne.n	80054ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60fb      	str	r3, [r7, #12]
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	6978      	ldr	r0, [r7, #20]
 80054f0:	4798      	blx	r3
}
 80054f2:	bf00      	nop
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000df0 	.word	0x20000df0

08005500 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005508:	f107 0308 	add.w	r3, r7, #8
 800550c:	4618      	mov	r0, r3
 800550e:	f000 f859 	bl	80055c4 <prvGetNextExpireTime>
 8005512:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4619      	mov	r1, r3
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f805 	bl	8005528 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800551e:	f000 f8d7 	bl	80056d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005522:	bf00      	nop
 8005524:	e7f0      	b.n	8005508 <prvTimerTask+0x8>
	...

08005528 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005532:	f7ff f96f 	bl	8004814 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f866 	bl	800560c <prvSampleTimeNow>
 8005540:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d130      	bne.n	80055aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <prvProcessTimerOrBlockTask+0x3c>
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	429a      	cmp	r2, r3
 8005554:	d806      	bhi.n	8005564 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005556:	f7ff f96b 	bl	8004830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ff81 	bl	8005464 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005562:	e024      	b.n	80055ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d008      	beq.n	800557c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800556a:	4b13      	ldr	r3, [pc, #76]	@ (80055b8 <prvProcessTimerOrBlockTask+0x90>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <prvProcessTimerOrBlockTask+0x50>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <prvProcessTimerOrBlockTask+0x52>
 8005578:	2300      	movs	r3, #0
 800557a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800557c:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <prvProcessTimerOrBlockTask+0x94>)
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4619      	mov	r1, r3
 800558a:	f7fe feab 	bl	80042e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800558e:	f7ff f94f 	bl	8004830 <xTaskResumeAll>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005598:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <prvProcessTimerOrBlockTask+0x98>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
}
 80055a8:	e001      	b.n	80055ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055aa:	f7ff f941 	bl	8004830 <xTaskResumeAll>
}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000df4 	.word	0x20000df4
 80055bc:	20000df8 	.word	0x20000df8
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005608 <prvGetNextExpireTime+0x44>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <prvGetNextExpireTime+0x16>
 80055d6:	2201      	movs	r2, #1
 80055d8:	e000      	b.n	80055dc <prvGetNextExpireTime+0x18>
 80055da:	2200      	movs	r2, #0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055e8:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <prvGetNextExpireTime+0x44>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e001      	b.n	80055f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000df0 	.word	0x20000df0

0800560c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005614:	f7ff f9aa 	bl	800496c <xTaskGetTickCount>
 8005618:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800561a:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <prvSampleTimeNow+0x3c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	429a      	cmp	r2, r3
 8005622:	d205      	bcs.n	8005630 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005624:	f000 f93a 	bl	800589c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e002      	b.n	8005636 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005636:	4a04      	ldr	r2, [pc, #16]	@ (8005648 <prvSampleTimeNow+0x3c>)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800563c:	68fb      	ldr	r3, [r7, #12]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000e00 	.word	0x20000e00

0800564c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	429a      	cmp	r2, r3
 8005670:	d812      	bhi.n	8005698 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	1ad2      	subs	r2, r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005680:	2301      	movs	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	e01b      	b.n	80056be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005686:	4b10      	ldr	r3, [pc, #64]	@ (80056c8 <prvInsertTimerInActiveList+0x7c>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7fe f840 	bl	8003716 <vListInsert>
 8005696:	e012      	b.n	80056be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d206      	bcs.n	80056ae <prvInsertTimerInActiveList+0x62>
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d302      	bcc.n	80056ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e007      	b.n	80056be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ae:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <prvInsertTimerInActiveList+0x80>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f7fe f82c 	bl	8003716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056be:	697b      	ldr	r3, [r7, #20]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000df4 	.word	0x20000df4
 80056cc:	20000df0 	.word	0x20000df0

080056d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08e      	sub	sp, #56	@ 0x38
 80056d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056d6:	e0ce      	b.n	8005876 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	da19      	bge.n	8005712 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	3304      	adds	r3, #4
 80056e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	61fb      	str	r3, [r7, #28]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005708:	6850      	ldr	r0, [r2, #4]
 800570a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800570c:	6892      	ldr	r2, [r2, #8]
 800570e:	4611      	mov	r1, r2
 8005710:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f2c0 80ae 	blt.w	8005876 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	3304      	adds	r3, #4
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe f82c 	bl	8003788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005730:	463b      	mov	r3, r7
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ff6a 	bl	800560c <prvSampleTimeNow>
 8005738:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b09      	cmp	r3, #9
 800573e:	f200 8097 	bhi.w	8005870 <prvProcessReceivedCommands+0x1a0>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <prvProcessReceivedCommands+0x78>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005771 	.word	0x08005771
 800574c:	08005771 	.word	0x08005771
 8005750:	08005771 	.word	0x08005771
 8005754:	080057e7 	.word	0x080057e7
 8005758:	080057fb 	.word	0x080057fb
 800575c:	08005847 	.word	0x08005847
 8005760:	08005771 	.word	0x08005771
 8005764:	08005771 	.word	0x08005771
 8005768:	080057e7 	.word	0x080057e7
 800576c:	080057fb 	.word	0x080057fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	b2da      	uxtb	r2, r3
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	18d1      	adds	r1, r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800578e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005790:	f7ff ff5c 	bl	800564c <prvInsertTimerInActiveList>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d06c      	beq.n	8005874 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d061      	beq.n	8005874 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	441a      	add	r2, r3
 80057b8:	2300      	movs	r3, #0
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2300      	movs	r3, #0
 80057be:	2100      	movs	r1, #0
 80057c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057c2:	f7ff fe01 	bl	80053c8 <xTimerGenericCommand>
 80057c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d152      	bne.n	8005874 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	61bb      	str	r3, [r7, #24]
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	e7fd      	b.n	80057e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80057f8:	e03d      	b.n	8005876 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	b2da      	uxtb	r2, r3
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005810:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	617b      	str	r3, [r7, #20]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	18d1      	adds	r1, r2, r3
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800583e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005840:	f7ff ff04 	bl	800564c <prvInsertTimerInActiveList>
					break;
 8005844:	e017      	b.n	8005876 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005856:	f000 fc07 	bl	8006068 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800585a:	e00c      	b.n	8005876 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	b2da      	uxtb	r2, r3
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800586e:	e002      	b.n	8005876 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <prvProcessReceivedCommands+0x1a6>
					break;
 8005874:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005876:	4b08      	ldr	r3, [pc, #32]	@ (8005898 <prvProcessReceivedCommands+0x1c8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	1d39      	adds	r1, r7, #4
 800587c:	2200      	movs	r2, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fa92 	bl	8003da8 <xQueueReceive>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	f47f af26 	bne.w	80056d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	3730      	adds	r7, #48	@ 0x30
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000df8 	.word	0x20000df8

0800589c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058a2:	e049      	b.n	8005938 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005960 <prvSwitchTimerLists+0xc4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005960 <prvSwitchTimerLists+0xc4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fd ff63 	bl	8003788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d02f      	beq.n	8005938 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d90e      	bls.n	8005908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005960 <prvSwitchTimerLists+0xc4>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f7fd ff08 	bl	8003716 <vListInsert>
 8005906:	e017      	b.n	8005938 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005908:	2300      	movs	r3, #0
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2300      	movs	r3, #0
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	2100      	movs	r1, #0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff fd58 	bl	80053c8 <xTimerGenericCommand>
 8005918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	603b      	str	r3, [r7, #0]
}
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	e7fd      	b.n	8005934 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005938:	4b09      	ldr	r3, [pc, #36]	@ (8005960 <prvSwitchTimerLists+0xc4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1b0      	bne.n	80058a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005942:	4b07      	ldr	r3, [pc, #28]	@ (8005960 <prvSwitchTimerLists+0xc4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005948:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <prvSwitchTimerLists+0xc8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a04      	ldr	r2, [pc, #16]	@ (8005960 <prvSwitchTimerLists+0xc4>)
 800594e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005950:	4a04      	ldr	r2, [pc, #16]	@ (8005964 <prvSwitchTimerLists+0xc8>)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6013      	str	r3, [r2, #0]
}
 8005956:	bf00      	nop
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000df0 	.word	0x20000df0
 8005964:	20000df4 	.word	0x20000df4

08005968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800596e:	f000 f98b 	bl	8005c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005972:	4b15      	ldr	r3, [pc, #84]	@ (80059c8 <prvCheckForValidListAndQueue+0x60>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d120      	bne.n	80059bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800597a:	4814      	ldr	r0, [pc, #80]	@ (80059cc <prvCheckForValidListAndQueue+0x64>)
 800597c:	f7fd fe7a 	bl	8003674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005980:	4813      	ldr	r0, [pc, #76]	@ (80059d0 <prvCheckForValidListAndQueue+0x68>)
 8005982:	f7fd fe77 	bl	8003674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005986:	4b13      	ldr	r3, [pc, #76]	@ (80059d4 <prvCheckForValidListAndQueue+0x6c>)
 8005988:	4a10      	ldr	r2, [pc, #64]	@ (80059cc <prvCheckForValidListAndQueue+0x64>)
 800598a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800598c:	4b12      	ldr	r3, [pc, #72]	@ (80059d8 <prvCheckForValidListAndQueue+0x70>)
 800598e:	4a10      	ldr	r2, [pc, #64]	@ (80059d0 <prvCheckForValidListAndQueue+0x68>)
 8005990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005992:	2300      	movs	r3, #0
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	4b11      	ldr	r3, [pc, #68]	@ (80059dc <prvCheckForValidListAndQueue+0x74>)
 8005998:	4a11      	ldr	r2, [pc, #68]	@ (80059e0 <prvCheckForValidListAndQueue+0x78>)
 800599a:	2110      	movs	r1, #16
 800599c:	200a      	movs	r0, #10
 800599e:	f7fd ff87 	bl	80038b0 <xQueueGenericCreateStatic>
 80059a2:	4603      	mov	r3, r0
 80059a4:	4a08      	ldr	r2, [pc, #32]	@ (80059c8 <prvCheckForValidListAndQueue+0x60>)
 80059a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059a8:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <prvCheckForValidListAndQueue+0x60>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <prvCheckForValidListAndQueue+0x60>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	490b      	ldr	r1, [pc, #44]	@ (80059e4 <prvCheckForValidListAndQueue+0x7c>)
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fc6a 	bl	8004290 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059bc:	f000 f996 	bl	8005cec <vPortExitCritical>
}
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000df8 	.word	0x20000df8
 80059cc:	20000dc8 	.word	0x20000dc8
 80059d0:	20000ddc 	.word	0x20000ddc
 80059d4:	20000df0 	.word	0x20000df0
 80059d8:	20000df4 	.word	0x20000df4
 80059dc:	20000ea4 	.word	0x20000ea4
 80059e0:	20000e04 	.word	0x20000e04
 80059e4:	08007344 	.word	0x08007344

080059e8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	@ 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80059f6:	f06f 0301 	mvn.w	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a08:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <xTimerPendFunctionCallFromISR+0x3c>)
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	f107 0114 	add.w	r1, r7, #20
 8005a10:	2300      	movs	r3, #0
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	f7fe f92a 	bl	8003c6c <xQueueGenericSendFromISR>
 8005a18:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3728      	adds	r7, #40	@ 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000df8 	.word	0x20000df8

08005a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b04      	subs	r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b04      	subs	r3, #4
 8005a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0201 	bic.w	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a58:	4a0c      	ldr	r2, [pc, #48]	@ (8005a8c <pxPortInitialiseStack+0x64>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3b14      	subs	r3, #20
 8005a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f06f 0202 	mvn.w	r2, #2
 8005a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b20      	subs	r3, #32
 8005a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	08005a91 	.word	0x08005a91

08005a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <prvTaskExitError+0x58>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d00b      	beq.n	8005abc <prvTaskExitError+0x2c>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <prvTaskExitError+0x28>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	60bb      	str	r3, [r7, #8]
}
 8005ace:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ad0:	bf00      	nop
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0fc      	beq.n	8005ad2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	2000000c 	.word	0x2000000c
 8005aec:	00000000 	.word	0x00000000

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	@ (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b18:	4808      	ldr	r0, [pc, #32]	@ (8005b3c <prvPortStartFirstTask+0x24>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8814 	msr	CONTROL, r0
 8005b2a:	b662      	cpsie	i
 8005b2c:	b661      	cpsie	f
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	df00      	svc	0
 8005b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed08 	.word	0xe000ed08

08005b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b46:	4b47      	ldr	r3, [pc, #284]	@ (8005c64 <xPortStartScheduler+0x124>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a47      	ldr	r2, [pc, #284]	@ (8005c68 <xPortStartScheduler+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10b      	bne.n	8005b68 <xPortStartScheduler+0x28>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	60fb      	str	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b68:	4b3e      	ldr	r3, [pc, #248]	@ (8005c64 <xPortStartScheduler+0x124>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c6c <xPortStartScheduler+0x12c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10b      	bne.n	8005b8a <xPortStartScheduler+0x4a>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	613b      	str	r3, [r7, #16]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b8a:	4b39      	ldr	r3, [pc, #228]	@ (8005c70 <xPortStartScheduler+0x130>)
 8005b8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	22ff      	movs	r2, #255	@ 0xff
 8005b9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	4b31      	ldr	r3, [pc, #196]	@ (8005c74 <xPortStartScheduler+0x134>)
 8005bb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bb2:	4b31      	ldr	r3, [pc, #196]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bb8:	e009      	b.n	8005bce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005bba:	4b2f      	ldr	r3, [pc, #188]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005bc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd6:	2b80      	cmp	r3, #128	@ 0x80
 8005bd8:	d0ef      	beq.n	8005bba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bda:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1c3 0307 	rsb	r3, r3, #7
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d00b      	beq.n	8005bfe <xPortStartScheduler+0xbe>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60bb      	str	r3, [r7, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	4a1c      	ldr	r2, [pc, #112]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005c06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c08:	4b1b      	ldr	r3, [pc, #108]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c10:	4a19      	ldr	r2, [pc, #100]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005c12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c1c:	4b17      	ldr	r3, [pc, #92]	@ (8005c7c <xPortStartScheduler+0x13c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <xPortStartScheduler+0x13c>)
 8005c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c28:	4b14      	ldr	r3, [pc, #80]	@ (8005c7c <xPortStartScheduler+0x13c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a13      	ldr	r2, [pc, #76]	@ (8005c7c <xPortStartScheduler+0x13c>)
 8005c2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c34:	f000 f8da 	bl	8005dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c38:	4b11      	ldr	r3, [pc, #68]	@ (8005c80 <xPortStartScheduler+0x140>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c3e:	f000 f8f9 	bl	8005e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c42:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <xPortStartScheduler+0x144>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a0f      	ldr	r2, [pc, #60]	@ (8005c84 <xPortStartScheduler+0x144>)
 8005c48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c4e:	f7ff ff63 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c52:	f7fe ff55 	bl	8004b00 <vTaskSwitchContext>
	prvTaskExitError();
 8005c56:	f7ff ff1b 	bl	8005a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	e000ed00 	.word	0xe000ed00
 8005c68:	410fc271 	.word	0x410fc271
 8005c6c:	410fc270 	.word	0x410fc270
 8005c70:	e000e400 	.word	0xe000e400
 8005c74:	20000ef4 	.word	0x20000ef4
 8005c78:	20000ef8 	.word	0x20000ef8
 8005c7c:	e000ed20 	.word	0xe000ed20
 8005c80:	2000000c 	.word	0x2000000c
 8005c84:	e000ef34 	.word	0xe000ef34

08005c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
}
 8005ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <vPortEnterCritical+0x5c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ce4 <vPortEnterCritical+0x5c>)
 8005caa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <vPortEnterCritical+0x5c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d110      	bne.n	8005cd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <vPortEnterCritical+0x60>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	603b      	str	r3, [r7, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	e7fd      	b.n	8005cd2 <vPortEnterCritical+0x4a>
	}
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	2000000c 	.word	0x2000000c
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cf2:	4b12      	ldr	r3, [pc, #72]	@ (8005d3c <vPortExitCritical+0x50>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <vPortExitCritical+0x26>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	607b      	str	r3, [r7, #4]
}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	e7fd      	b.n	8005d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d12:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a08      	ldr	r2, [pc, #32]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d1c:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <vPortExitCritical+0x44>
 8005d24:	2300      	movs	r3, #0
 8005d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f383 8811 	msr	BASEPRI, r3
}
 8005d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	2000000c 	.word	0x2000000c

08005d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d40:	f3ef 8009 	mrs	r0, PSP
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <pxCurrentTCBConst>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	f01e 0f10 	tst.w	lr, #16
 8005d50:	bf08      	it	eq
 8005d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d64:	f380 8811 	msr	BASEPRI, r0
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f7fe fec6 	bl	8004b00 <vTaskSwitchContext>
 8005d74:	f04f 0000 	mov.w	r0, #0
 8005d78:	f380 8811 	msr	BASEPRI, r0
 8005d7c:	bc09      	pop	{r0, r3}
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d86:	f01e 0f10 	tst.w	lr, #16
 8005d8a:	bf08      	it	eq
 8005d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d90:	f380 8809 	msr	PSP, r0
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst>:
 8005da0:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f7fe fde3 	bl	800498c <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <xPortSysTickHandler+0x40>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e24 <vPortSetupTimerInterrupt+0x38>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <vPortSetupTimerInterrupt+0x3c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	@ (8005e2c <vPortSetupTimerInterrupt+0x40>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	4a09      	ldr	r2, [pc, #36]	@ (8005e30 <vPortSetupTimerInterrupt+0x44>)
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e0e:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e010 	.word	0xe000e010
 8005e24:	e000e018 	.word	0xe000e018
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	10624dd3 	.word	0x10624dd3
 8005e30:	e000e014 	.word	0xe000e014

08005e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e44 <vPortEnableVFP+0x10>
 8005e38:	6801      	ldr	r1, [r0, #0]
 8005e3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e3e:	6001      	str	r1, [r0, #0]
 8005e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e42:	bf00      	nop
 8005e44:	e000ed88 	.word	0xe000ed88

08005e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
 8005e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d915      	bls.n	8005e86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <vPortValidateInterruptPriority+0x74>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e64:	4b16      	ldr	r3, [pc, #88]	@ (8005ec0 <vPortValidateInterruptPriority+0x78>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	7afa      	ldrb	r2, [r7, #11]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d20b      	bcs.n	8005e86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	607b      	str	r3, [r7, #4]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <vPortValidateInterruptPriority+0x7c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec8 <vPortValidateInterruptPriority+0x80>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d90b      	bls.n	8005eae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	603b      	str	r3, [r7, #0]
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	e7fd      	b.n	8005eaa <vPortValidateInterruptPriority+0x62>
	}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	e000e3f0 	.word	0xe000e3f0
 8005ec0:	20000ef4 	.word	0x20000ef4
 8005ec4:	e000ed0c 	.word	0xe000ed0c
 8005ec8:	20000ef8 	.word	0x20000ef8

08005ecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ed8:	f7fe fc9c 	bl	8004814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005edc:	4b5c      	ldr	r3, [pc, #368]	@ (8006050 <pvPortMalloc+0x184>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ee4:	f000 f924 	bl	8006130 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8006054 <pvPortMalloc+0x188>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f040 8095 	bne.w	8006020 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01e      	beq.n	8005f3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005efc:	2208      	movs	r2, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d015      	beq.n	8005f3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f023 0307 	bic.w	r3, r3, #7
 8005f14:	3308      	adds	r3, #8
 8005f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <pvPortMalloc+0x6e>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	617b      	str	r3, [r7, #20]
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d06f      	beq.n	8006020 <pvPortMalloc+0x154>
 8005f40:	4b45      	ldr	r3, [pc, #276]	@ (8006058 <pvPortMalloc+0x18c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d86a      	bhi.n	8006020 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f4a:	4b44      	ldr	r3, [pc, #272]	@ (800605c <pvPortMalloc+0x190>)
 8005f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f4e:	4b43      	ldr	r3, [pc, #268]	@ (800605c <pvPortMalloc+0x190>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f54:	e004      	b.n	8005f60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d903      	bls.n	8005f72 <pvPortMalloc+0xa6>
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f1      	bne.n	8005f56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f72:	4b37      	ldr	r3, [pc, #220]	@ (8006050 <pvPortMalloc+0x184>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d051      	beq.n	8006020 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2208      	movs	r2, #8
 8005f82:	4413      	add	r3, r2
 8005f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	1ad2      	subs	r2, r2, r3
 8005f96:	2308      	movs	r3, #8
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d920      	bls.n	8005fe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <pvPortMalloc+0xfc>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	613b      	str	r3, [r7, #16]
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fda:	69b8      	ldr	r0, [r7, #24]
 8005fdc:	f000 f90a 	bl	80061f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <pvPortMalloc+0x18c>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	4a1b      	ldr	r2, [pc, #108]	@ (8006058 <pvPortMalloc+0x18c>)
 8005fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fee:	4b1a      	ldr	r3, [pc, #104]	@ (8006058 <pvPortMalloc+0x18c>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8006060 <pvPortMalloc+0x194>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d203      	bcs.n	8006002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ffa:	4b17      	ldr	r3, [pc, #92]	@ (8006058 <pvPortMalloc+0x18c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <pvPortMalloc+0x194>)
 8006000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	4b13      	ldr	r3, [pc, #76]	@ (8006054 <pvPortMalloc+0x188>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	431a      	orrs	r2, r3
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006016:	4b13      	ldr	r3, [pc, #76]	@ (8006064 <pvPortMalloc+0x198>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3301      	adds	r3, #1
 800601c:	4a11      	ldr	r2, [pc, #68]	@ (8006064 <pvPortMalloc+0x198>)
 800601e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006020:	f7fe fc06 	bl	8004830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <pvPortMalloc+0x17a>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60fb      	str	r3, [r7, #12]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <pvPortMalloc+0x176>
	return pvReturn;
 8006046:	69fb      	ldr	r3, [r7, #28]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3728      	adds	r7, #40	@ 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20004b04 	.word	0x20004b04
 8006054:	20004b18 	.word	0x20004b18
 8006058:	20004b08 	.word	0x20004b08
 800605c:	20004afc 	.word	0x20004afc
 8006060:	20004b0c 	.word	0x20004b0c
 8006064:	20004b10 	.word	0x20004b10

08006068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04f      	beq.n	800611a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800607a:	2308      	movs	r3, #8
 800607c:	425b      	negs	r3, r3
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	4b25      	ldr	r3, [pc, #148]	@ (8006124 <vPortFree+0xbc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <vPortFree+0x46>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60fb      	str	r3, [r7, #12]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <vPortFree+0x66>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	e7fd      	b.n	80060ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	4b14      	ldr	r3, [pc, #80]	@ (8006124 <vPortFree+0xbc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01e      	beq.n	800611a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d11a      	bne.n	800611a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006124 <vPortFree+0xbc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	401a      	ands	r2, r3
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060f4:	f7fe fb8e 	bl	8004814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <vPortFree+0xc0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4413      	add	r3, r2
 8006102:	4a09      	ldr	r2, [pc, #36]	@ (8006128 <vPortFree+0xc0>)
 8006104:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006106:	6938      	ldr	r0, [r7, #16]
 8006108:	f000 f874 	bl	80061f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800610c:	4b07      	ldr	r3, [pc, #28]	@ (800612c <vPortFree+0xc4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	4a06      	ldr	r2, [pc, #24]	@ (800612c <vPortFree+0xc4>)
 8006114:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006116:	f7fe fb8b 	bl	8004830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20004b18 	.word	0x20004b18
 8006128:	20004b08 	.word	0x20004b08
 800612c:	20004b14 	.word	0x20004b14

08006130 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006136:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800613a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800613c:	4b27      	ldr	r3, [pc, #156]	@ (80061dc <prvHeapInit+0xac>)
 800613e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00c      	beq.n	8006164 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3307      	adds	r3, #7
 800614e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0307 	bic.w	r3, r3, #7
 8006156:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	4a1f      	ldr	r2, [pc, #124]	@ (80061dc <prvHeapInit+0xac>)
 8006160:	4413      	add	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006168:	4a1d      	ldr	r2, [pc, #116]	@ (80061e0 <prvHeapInit+0xb0>)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800616e:	4b1c      	ldr	r3, [pc, #112]	@ (80061e0 <prvHeapInit+0xb0>)
 8006170:	2200      	movs	r2, #0
 8006172:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4413      	add	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800617c:	2208      	movs	r2, #8
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <prvHeapInit+0xb4>)
 8006190:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006192:	4b14      	ldr	r3, [pc, #80]	@ (80061e4 <prvHeapInit+0xb4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2200      	movs	r2, #0
 8006198:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800619a:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <prvHeapInit+0xb4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061b0:	4b0c      	ldr	r3, [pc, #48]	@ (80061e4 <prvHeapInit+0xb4>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4a0a      	ldr	r2, [pc, #40]	@ (80061e8 <prvHeapInit+0xb8>)
 80061be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4a09      	ldr	r2, [pc, #36]	@ (80061ec <prvHeapInit+0xbc>)
 80061c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061c8:	4b09      	ldr	r3, [pc, #36]	@ (80061f0 <prvHeapInit+0xc0>)
 80061ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061ce:	601a      	str	r2, [r3, #0]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	20000efc 	.word	0x20000efc
 80061e0:	20004afc 	.word	0x20004afc
 80061e4:	20004b04 	.word	0x20004b04
 80061e8:	20004b0c 	.word	0x20004b0c
 80061ec:	20004b08 	.word	0x20004b08
 80061f0:	20004b18 	.word	0x20004b18

080061f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061fc:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <prvInsertBlockIntoFreeList+0xac>)
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	e002      	b.n	8006208 <prvInsertBlockIntoFreeList+0x14>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	429a      	cmp	r2, r3
 8006210:	d8f7      	bhi.n	8006202 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d108      	bne.n	8006236 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d118      	bne.n	800627c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b15      	ldr	r3, [pc, #84]	@ (80062a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d00d      	beq.n	8006272 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e008      	b.n	8006284 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006272:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e003      	b.n	8006284 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d002      	beq.n	8006292 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20004afc 	.word	0x20004afc
 80062a4:	20004b04 	.word	0x20004b04

080062a8 <std>:
 80062a8:	2300      	movs	r3, #0
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	e9c0 3300 	strd	r3, r3, [r0]
 80062b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062b6:	6083      	str	r3, [r0, #8]
 80062b8:	8181      	strh	r1, [r0, #12]
 80062ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80062bc:	81c2      	strh	r2, [r0, #14]
 80062be:	6183      	str	r3, [r0, #24]
 80062c0:	4619      	mov	r1, r3
 80062c2:	2208      	movs	r2, #8
 80062c4:	305c      	adds	r0, #92	@ 0x5c
 80062c6:	f000 f9f9 	bl	80066bc <memset>
 80062ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006300 <std+0x58>)
 80062cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80062ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <std+0x5c>)
 80062d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006308 <std+0x60>)
 80062d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <std+0x64>)
 80062d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80062da:	4b0d      	ldr	r3, [pc, #52]	@ (8006310 <std+0x68>)
 80062dc:	6224      	str	r4, [r4, #32]
 80062de:	429c      	cmp	r4, r3
 80062e0:	d006      	beq.n	80062f0 <std+0x48>
 80062e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062e6:	4294      	cmp	r4, r2
 80062e8:	d002      	beq.n	80062f0 <std+0x48>
 80062ea:	33d0      	adds	r3, #208	@ 0xd0
 80062ec:	429c      	cmp	r4, r3
 80062ee:	d105      	bne.n	80062fc <std+0x54>
 80062f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f8:	f000 bab6 	b.w	8006868 <__retarget_lock_init_recursive>
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	bf00      	nop
 8006300:	0800650d 	.word	0x0800650d
 8006304:	0800652f 	.word	0x0800652f
 8006308:	08006567 	.word	0x08006567
 800630c:	0800658b 	.word	0x0800658b
 8006310:	20004b1c 	.word	0x20004b1c

08006314 <stdio_exit_handler>:
 8006314:	4a02      	ldr	r2, [pc, #8]	@ (8006320 <stdio_exit_handler+0xc>)
 8006316:	4903      	ldr	r1, [pc, #12]	@ (8006324 <stdio_exit_handler+0x10>)
 8006318:	4803      	ldr	r0, [pc, #12]	@ (8006328 <stdio_exit_handler+0x14>)
 800631a:	f000 b869 	b.w	80063f0 <_fwalk_sglue>
 800631e:	bf00      	nop
 8006320:	20000010 	.word	0x20000010
 8006324:	08007121 	.word	0x08007121
 8006328:	20000020 	.word	0x20000020

0800632c <cleanup_stdio>:
 800632c:	6841      	ldr	r1, [r0, #4]
 800632e:	4b0c      	ldr	r3, [pc, #48]	@ (8006360 <cleanup_stdio+0x34>)
 8006330:	4299      	cmp	r1, r3
 8006332:	b510      	push	{r4, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	d001      	beq.n	800633c <cleanup_stdio+0x10>
 8006338:	f000 fef2 	bl	8007120 <_fflush_r>
 800633c:	68a1      	ldr	r1, [r4, #8]
 800633e:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <cleanup_stdio+0x38>)
 8006340:	4299      	cmp	r1, r3
 8006342:	d002      	beq.n	800634a <cleanup_stdio+0x1e>
 8006344:	4620      	mov	r0, r4
 8006346:	f000 feeb 	bl	8007120 <_fflush_r>
 800634a:	68e1      	ldr	r1, [r4, #12]
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <cleanup_stdio+0x3c>)
 800634e:	4299      	cmp	r1, r3
 8006350:	d004      	beq.n	800635c <cleanup_stdio+0x30>
 8006352:	4620      	mov	r0, r4
 8006354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006358:	f000 bee2 	b.w	8007120 <_fflush_r>
 800635c:	bd10      	pop	{r4, pc}
 800635e:	bf00      	nop
 8006360:	20004b1c 	.word	0x20004b1c
 8006364:	20004b84 	.word	0x20004b84
 8006368:	20004bec 	.word	0x20004bec

0800636c <global_stdio_init.part.0>:
 800636c:	b510      	push	{r4, lr}
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <global_stdio_init.part.0+0x30>)
 8006370:	4c0b      	ldr	r4, [pc, #44]	@ (80063a0 <global_stdio_init.part.0+0x34>)
 8006372:	4a0c      	ldr	r2, [pc, #48]	@ (80063a4 <global_stdio_init.part.0+0x38>)
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	4620      	mov	r0, r4
 8006378:	2200      	movs	r2, #0
 800637a:	2104      	movs	r1, #4
 800637c:	f7ff ff94 	bl	80062a8 <std>
 8006380:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006384:	2201      	movs	r2, #1
 8006386:	2109      	movs	r1, #9
 8006388:	f7ff ff8e 	bl	80062a8 <std>
 800638c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006390:	2202      	movs	r2, #2
 8006392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006396:	2112      	movs	r1, #18
 8006398:	f7ff bf86 	b.w	80062a8 <std>
 800639c:	20004c54 	.word	0x20004c54
 80063a0:	20004b1c 	.word	0x20004b1c
 80063a4:	08006315 	.word	0x08006315

080063a8 <__sfp_lock_acquire>:
 80063a8:	4801      	ldr	r0, [pc, #4]	@ (80063b0 <__sfp_lock_acquire+0x8>)
 80063aa:	f000 ba5e 	b.w	800686a <__retarget_lock_acquire_recursive>
 80063ae:	bf00      	nop
 80063b0:	20004c5d 	.word	0x20004c5d

080063b4 <__sfp_lock_release>:
 80063b4:	4801      	ldr	r0, [pc, #4]	@ (80063bc <__sfp_lock_release+0x8>)
 80063b6:	f000 ba59 	b.w	800686c <__retarget_lock_release_recursive>
 80063ba:	bf00      	nop
 80063bc:	20004c5d 	.word	0x20004c5d

080063c0 <__sinit>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	4604      	mov	r4, r0
 80063c4:	f7ff fff0 	bl	80063a8 <__sfp_lock_acquire>
 80063c8:	6a23      	ldr	r3, [r4, #32]
 80063ca:	b11b      	cbz	r3, 80063d4 <__sinit+0x14>
 80063cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d0:	f7ff bff0 	b.w	80063b4 <__sfp_lock_release>
 80063d4:	4b04      	ldr	r3, [pc, #16]	@ (80063e8 <__sinit+0x28>)
 80063d6:	6223      	str	r3, [r4, #32]
 80063d8:	4b04      	ldr	r3, [pc, #16]	@ (80063ec <__sinit+0x2c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f5      	bne.n	80063cc <__sinit+0xc>
 80063e0:	f7ff ffc4 	bl	800636c <global_stdio_init.part.0>
 80063e4:	e7f2      	b.n	80063cc <__sinit+0xc>
 80063e6:	bf00      	nop
 80063e8:	0800632d 	.word	0x0800632d
 80063ec:	20004c54 	.word	0x20004c54

080063f0 <_fwalk_sglue>:
 80063f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f4:	4607      	mov	r7, r0
 80063f6:	4688      	mov	r8, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	2600      	movs	r6, #0
 80063fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006400:	f1b9 0901 	subs.w	r9, r9, #1
 8006404:	d505      	bpl.n	8006412 <_fwalk_sglue+0x22>
 8006406:	6824      	ldr	r4, [r4, #0]
 8006408:	2c00      	cmp	r4, #0
 800640a:	d1f7      	bne.n	80063fc <_fwalk_sglue+0xc>
 800640c:	4630      	mov	r0, r6
 800640e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006412:	89ab      	ldrh	r3, [r5, #12]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d907      	bls.n	8006428 <_fwalk_sglue+0x38>
 8006418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800641c:	3301      	adds	r3, #1
 800641e:	d003      	beq.n	8006428 <_fwalk_sglue+0x38>
 8006420:	4629      	mov	r1, r5
 8006422:	4638      	mov	r0, r7
 8006424:	47c0      	blx	r8
 8006426:	4306      	orrs	r6, r0
 8006428:	3568      	adds	r5, #104	@ 0x68
 800642a:	e7e9      	b.n	8006400 <_fwalk_sglue+0x10>

0800642c <iprintf>:
 800642c:	b40f      	push	{r0, r1, r2, r3}
 800642e:	b507      	push	{r0, r1, r2, lr}
 8006430:	4906      	ldr	r1, [pc, #24]	@ (800644c <iprintf+0x20>)
 8006432:	ab04      	add	r3, sp, #16
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	f853 2b04 	ldr.w	r2, [r3], #4
 800643a:	6881      	ldr	r1, [r0, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	f000 fb47 	bl	8006ad0 <_vfiprintf_r>
 8006442:	b003      	add	sp, #12
 8006444:	f85d eb04 	ldr.w	lr, [sp], #4
 8006448:	b004      	add	sp, #16
 800644a:	4770      	bx	lr
 800644c:	2000001c 	.word	0x2000001c

08006450 <_puts_r>:
 8006450:	6a03      	ldr	r3, [r0, #32]
 8006452:	b570      	push	{r4, r5, r6, lr}
 8006454:	6884      	ldr	r4, [r0, #8]
 8006456:	4605      	mov	r5, r0
 8006458:	460e      	mov	r6, r1
 800645a:	b90b      	cbnz	r3, 8006460 <_puts_r+0x10>
 800645c:	f7ff ffb0 	bl	80063c0 <__sinit>
 8006460:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006462:	07db      	lsls	r3, r3, #31
 8006464:	d405      	bmi.n	8006472 <_puts_r+0x22>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	0598      	lsls	r0, r3, #22
 800646a:	d402      	bmi.n	8006472 <_puts_r+0x22>
 800646c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800646e:	f000 f9fc 	bl	800686a <__retarget_lock_acquire_recursive>
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	0719      	lsls	r1, r3, #28
 8006476:	d502      	bpl.n	800647e <_puts_r+0x2e>
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d135      	bne.n	80064ea <_puts_r+0x9a>
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f000 f8c5 	bl	8006610 <__swsetup_r>
 8006486:	b380      	cbz	r0, 80064ea <_puts_r+0x9a>
 8006488:	f04f 35ff 	mov.w	r5, #4294967295
 800648c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800648e:	07da      	lsls	r2, r3, #31
 8006490:	d405      	bmi.n	800649e <_puts_r+0x4e>
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	059b      	lsls	r3, r3, #22
 8006496:	d402      	bmi.n	800649e <_puts_r+0x4e>
 8006498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800649a:	f000 f9e7 	bl	800686c <__retarget_lock_release_recursive>
 800649e:	4628      	mov	r0, r5
 80064a0:	bd70      	pop	{r4, r5, r6, pc}
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da04      	bge.n	80064b0 <_puts_r+0x60>
 80064a6:	69a2      	ldr	r2, [r4, #24]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	dc17      	bgt.n	80064dc <_puts_r+0x8c>
 80064ac:	290a      	cmp	r1, #10
 80064ae:	d015      	beq.n	80064dc <_puts_r+0x8c>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	7019      	strb	r1, [r3, #0]
 80064b8:	68a3      	ldr	r3, [r4, #8]
 80064ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064be:	3b01      	subs	r3, #1
 80064c0:	60a3      	str	r3, [r4, #8]
 80064c2:	2900      	cmp	r1, #0
 80064c4:	d1ed      	bne.n	80064a2 <_puts_r+0x52>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da11      	bge.n	80064ee <_puts_r+0x9e>
 80064ca:	4622      	mov	r2, r4
 80064cc:	210a      	movs	r1, #10
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 f85f 	bl	8006592 <__swbuf_r>
 80064d4:	3001      	adds	r0, #1
 80064d6:	d0d7      	beq.n	8006488 <_puts_r+0x38>
 80064d8:	250a      	movs	r5, #10
 80064da:	e7d7      	b.n	800648c <_puts_r+0x3c>
 80064dc:	4622      	mov	r2, r4
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f857 	bl	8006592 <__swbuf_r>
 80064e4:	3001      	adds	r0, #1
 80064e6:	d1e7      	bne.n	80064b8 <_puts_r+0x68>
 80064e8:	e7ce      	b.n	8006488 <_puts_r+0x38>
 80064ea:	3e01      	subs	r6, #1
 80064ec:	e7e4      	b.n	80064b8 <_puts_r+0x68>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	220a      	movs	r2, #10
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	e7ee      	b.n	80064d8 <_puts_r+0x88>
	...

080064fc <puts>:
 80064fc:	4b02      	ldr	r3, [pc, #8]	@ (8006508 <puts+0xc>)
 80064fe:	4601      	mov	r1, r0
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	f7ff bfa5 	b.w	8006450 <_puts_r>
 8006506:	bf00      	nop
 8006508:	2000001c 	.word	0x2000001c

0800650c <__sread>:
 800650c:	b510      	push	{r4, lr}
 800650e:	460c      	mov	r4, r1
 8006510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006514:	f000 f95a 	bl	80067cc <_read_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	bfab      	itete	ge
 800651c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800651e:	89a3      	ldrhlt	r3, [r4, #12]
 8006520:	181b      	addge	r3, r3, r0
 8006522:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006526:	bfac      	ite	ge
 8006528:	6563      	strge	r3, [r4, #84]	@ 0x54
 800652a:	81a3      	strhlt	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__swrite>:
 800652e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	461f      	mov	r7, r3
 8006534:	898b      	ldrh	r3, [r1, #12]
 8006536:	05db      	lsls	r3, r3, #23
 8006538:	4605      	mov	r5, r0
 800653a:	460c      	mov	r4, r1
 800653c:	4616      	mov	r6, r2
 800653e:	d505      	bpl.n	800654c <__swrite+0x1e>
 8006540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006544:	2302      	movs	r3, #2
 8006546:	2200      	movs	r2, #0
 8006548:	f000 f92e 	bl	80067a8 <_lseek_r>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006552:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	4632      	mov	r2, r6
 800655a:	463b      	mov	r3, r7
 800655c:	4628      	mov	r0, r5
 800655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	f000 b945 	b.w	80067f0 <_write_r>

08006566 <__sseek>:
 8006566:	b510      	push	{r4, lr}
 8006568:	460c      	mov	r4, r1
 800656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656e:	f000 f91b 	bl	80067a8 <_lseek_r>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	bf15      	itete	ne
 8006578:	6560      	strne	r0, [r4, #84]	@ 0x54
 800657a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800657e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006582:	81a3      	strheq	r3, [r4, #12]
 8006584:	bf18      	it	ne
 8006586:	81a3      	strhne	r3, [r4, #12]
 8006588:	bd10      	pop	{r4, pc}

0800658a <__sclose>:
 800658a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658e:	f000 b89d 	b.w	80066cc <_close_r>

08006592 <__swbuf_r>:
 8006592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006594:	460e      	mov	r6, r1
 8006596:	4614      	mov	r4, r2
 8006598:	4605      	mov	r5, r0
 800659a:	b118      	cbz	r0, 80065a4 <__swbuf_r+0x12>
 800659c:	6a03      	ldr	r3, [r0, #32]
 800659e:	b90b      	cbnz	r3, 80065a4 <__swbuf_r+0x12>
 80065a0:	f7ff ff0e 	bl	80063c0 <__sinit>
 80065a4:	69a3      	ldr	r3, [r4, #24]
 80065a6:	60a3      	str	r3, [r4, #8]
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	071a      	lsls	r2, r3, #28
 80065ac:	d501      	bpl.n	80065b2 <__swbuf_r+0x20>
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	b943      	cbnz	r3, 80065c4 <__swbuf_r+0x32>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 f82b 	bl	8006610 <__swsetup_r>
 80065ba:	b118      	cbz	r0, 80065c4 <__swbuf_r+0x32>
 80065bc:	f04f 37ff 	mov.w	r7, #4294967295
 80065c0:	4638      	mov	r0, r7
 80065c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	6922      	ldr	r2, [r4, #16]
 80065c8:	1a98      	subs	r0, r3, r2
 80065ca:	6963      	ldr	r3, [r4, #20]
 80065cc:	b2f6      	uxtb	r6, r6
 80065ce:	4283      	cmp	r3, r0
 80065d0:	4637      	mov	r7, r6
 80065d2:	dc05      	bgt.n	80065e0 <__swbuf_r+0x4e>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 fda2 	bl	8007120 <_fflush_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d1ed      	bne.n	80065bc <__swbuf_r+0x2a>
 80065e0:	68a3      	ldr	r3, [r4, #8]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	60a3      	str	r3, [r4, #8]
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	701e      	strb	r6, [r3, #0]
 80065ee:	6962      	ldr	r2, [r4, #20]
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d004      	beq.n	8006600 <__swbuf_r+0x6e>
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	07db      	lsls	r3, r3, #31
 80065fa:	d5e1      	bpl.n	80065c0 <__swbuf_r+0x2e>
 80065fc:	2e0a      	cmp	r6, #10
 80065fe:	d1df      	bne.n	80065c0 <__swbuf_r+0x2e>
 8006600:	4621      	mov	r1, r4
 8006602:	4628      	mov	r0, r5
 8006604:	f000 fd8c 	bl	8007120 <_fflush_r>
 8006608:	2800      	cmp	r0, #0
 800660a:	d0d9      	beq.n	80065c0 <__swbuf_r+0x2e>
 800660c:	e7d6      	b.n	80065bc <__swbuf_r+0x2a>
	...

08006610 <__swsetup_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4b29      	ldr	r3, [pc, #164]	@ (80066b8 <__swsetup_r+0xa8>)
 8006614:	4605      	mov	r5, r0
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	460c      	mov	r4, r1
 800661a:	b118      	cbz	r0, 8006624 <__swsetup_r+0x14>
 800661c:	6a03      	ldr	r3, [r0, #32]
 800661e:	b90b      	cbnz	r3, 8006624 <__swsetup_r+0x14>
 8006620:	f7ff fece 	bl	80063c0 <__sinit>
 8006624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006628:	0719      	lsls	r1, r3, #28
 800662a:	d422      	bmi.n	8006672 <__swsetup_r+0x62>
 800662c:	06da      	lsls	r2, r3, #27
 800662e:	d407      	bmi.n	8006640 <__swsetup_r+0x30>
 8006630:	2209      	movs	r2, #9
 8006632:	602a      	str	r2, [r5, #0]
 8006634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	e033      	b.n	80066a8 <__swsetup_r+0x98>
 8006640:	0758      	lsls	r0, r3, #29
 8006642:	d512      	bpl.n	800666a <__swsetup_r+0x5a>
 8006644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006646:	b141      	cbz	r1, 800665a <__swsetup_r+0x4a>
 8006648:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800664c:	4299      	cmp	r1, r3
 800664e:	d002      	beq.n	8006656 <__swsetup_r+0x46>
 8006650:	4628      	mov	r0, r5
 8006652:	f000 f91b 	bl	800688c <_free_r>
 8006656:	2300      	movs	r3, #0
 8006658:	6363      	str	r3, [r4, #52]	@ 0x34
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006660:	81a3      	strh	r3, [r4, #12]
 8006662:	2300      	movs	r3, #0
 8006664:	6063      	str	r3, [r4, #4]
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f043 0308 	orr.w	r3, r3, #8
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	b94b      	cbnz	r3, 800668a <__swsetup_r+0x7a>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800667c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006680:	d003      	beq.n	800668a <__swsetup_r+0x7a>
 8006682:	4621      	mov	r1, r4
 8006684:	4628      	mov	r0, r5
 8006686:	f000 fd99 	bl	80071bc <__smakebuf_r>
 800668a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800668e:	f013 0201 	ands.w	r2, r3, #1
 8006692:	d00a      	beq.n	80066aa <__swsetup_r+0x9a>
 8006694:	2200      	movs	r2, #0
 8006696:	60a2      	str	r2, [r4, #8]
 8006698:	6962      	ldr	r2, [r4, #20]
 800669a:	4252      	negs	r2, r2
 800669c:	61a2      	str	r2, [r4, #24]
 800669e:	6922      	ldr	r2, [r4, #16]
 80066a0:	b942      	cbnz	r2, 80066b4 <__swsetup_r+0xa4>
 80066a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066a6:	d1c5      	bne.n	8006634 <__swsetup_r+0x24>
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
 80066aa:	0799      	lsls	r1, r3, #30
 80066ac:	bf58      	it	pl
 80066ae:	6962      	ldrpl	r2, [r4, #20]
 80066b0:	60a2      	str	r2, [r4, #8]
 80066b2:	e7f4      	b.n	800669e <__swsetup_r+0x8e>
 80066b4:	2000      	movs	r0, #0
 80066b6:	e7f7      	b.n	80066a8 <__swsetup_r+0x98>
 80066b8:	2000001c 	.word	0x2000001c

080066bc <memset>:
 80066bc:	4402      	add	r2, r0
 80066be:	4603      	mov	r3, r0
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d100      	bne.n	80066c6 <memset+0xa>
 80066c4:	4770      	bx	lr
 80066c6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ca:	e7f9      	b.n	80066c0 <memset+0x4>

080066cc <_close_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	@ (80066e8 <_close_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fa faf5 	bl	8000cc6 <_close>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_close_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_close_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20004c58 	.word	0x20004c58

080066ec <_reclaim_reent>:
 80066ec:	4b2d      	ldr	r3, [pc, #180]	@ (80067a4 <_reclaim_reent+0xb8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4283      	cmp	r3, r0
 80066f2:	b570      	push	{r4, r5, r6, lr}
 80066f4:	4604      	mov	r4, r0
 80066f6:	d053      	beq.n	80067a0 <_reclaim_reent+0xb4>
 80066f8:	69c3      	ldr	r3, [r0, #28]
 80066fa:	b31b      	cbz	r3, 8006744 <_reclaim_reent+0x58>
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	b163      	cbz	r3, 800671a <_reclaim_reent+0x2e>
 8006700:	2500      	movs	r5, #0
 8006702:	69e3      	ldr	r3, [r4, #28]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	5959      	ldr	r1, [r3, r5]
 8006708:	b9b1      	cbnz	r1, 8006738 <_reclaim_reent+0x4c>
 800670a:	3504      	adds	r5, #4
 800670c:	2d80      	cmp	r5, #128	@ 0x80
 800670e:	d1f8      	bne.n	8006702 <_reclaim_reent+0x16>
 8006710:	69e3      	ldr	r3, [r4, #28]
 8006712:	4620      	mov	r0, r4
 8006714:	68d9      	ldr	r1, [r3, #12]
 8006716:	f000 f8b9 	bl	800688c <_free_r>
 800671a:	69e3      	ldr	r3, [r4, #28]
 800671c:	6819      	ldr	r1, [r3, #0]
 800671e:	b111      	cbz	r1, 8006726 <_reclaim_reent+0x3a>
 8006720:	4620      	mov	r0, r4
 8006722:	f000 f8b3 	bl	800688c <_free_r>
 8006726:	69e3      	ldr	r3, [r4, #28]
 8006728:	689d      	ldr	r5, [r3, #8]
 800672a:	b15d      	cbz	r5, 8006744 <_reclaim_reent+0x58>
 800672c:	4629      	mov	r1, r5
 800672e:	4620      	mov	r0, r4
 8006730:	682d      	ldr	r5, [r5, #0]
 8006732:	f000 f8ab 	bl	800688c <_free_r>
 8006736:	e7f8      	b.n	800672a <_reclaim_reent+0x3e>
 8006738:	680e      	ldr	r6, [r1, #0]
 800673a:	4620      	mov	r0, r4
 800673c:	f000 f8a6 	bl	800688c <_free_r>
 8006740:	4631      	mov	r1, r6
 8006742:	e7e1      	b.n	8006708 <_reclaim_reent+0x1c>
 8006744:	6961      	ldr	r1, [r4, #20]
 8006746:	b111      	cbz	r1, 800674e <_reclaim_reent+0x62>
 8006748:	4620      	mov	r0, r4
 800674a:	f000 f89f 	bl	800688c <_free_r>
 800674e:	69e1      	ldr	r1, [r4, #28]
 8006750:	b111      	cbz	r1, 8006758 <_reclaim_reent+0x6c>
 8006752:	4620      	mov	r0, r4
 8006754:	f000 f89a 	bl	800688c <_free_r>
 8006758:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800675a:	b111      	cbz	r1, 8006762 <_reclaim_reent+0x76>
 800675c:	4620      	mov	r0, r4
 800675e:	f000 f895 	bl	800688c <_free_r>
 8006762:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006764:	b111      	cbz	r1, 800676c <_reclaim_reent+0x80>
 8006766:	4620      	mov	r0, r4
 8006768:	f000 f890 	bl	800688c <_free_r>
 800676c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800676e:	b111      	cbz	r1, 8006776 <_reclaim_reent+0x8a>
 8006770:	4620      	mov	r0, r4
 8006772:	f000 f88b 	bl	800688c <_free_r>
 8006776:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006778:	b111      	cbz	r1, 8006780 <_reclaim_reent+0x94>
 800677a:	4620      	mov	r0, r4
 800677c:	f000 f886 	bl	800688c <_free_r>
 8006780:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006782:	b111      	cbz	r1, 800678a <_reclaim_reent+0x9e>
 8006784:	4620      	mov	r0, r4
 8006786:	f000 f881 	bl	800688c <_free_r>
 800678a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800678c:	b111      	cbz	r1, 8006794 <_reclaim_reent+0xa8>
 800678e:	4620      	mov	r0, r4
 8006790:	f000 f87c 	bl	800688c <_free_r>
 8006794:	6a23      	ldr	r3, [r4, #32]
 8006796:	b11b      	cbz	r3, 80067a0 <_reclaim_reent+0xb4>
 8006798:	4620      	mov	r0, r4
 800679a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800679e:	4718      	bx	r3
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
 80067a2:	bf00      	nop
 80067a4:	2000001c 	.word	0x2000001c

080067a8 <_lseek_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d07      	ldr	r5, [pc, #28]	@ (80067c8 <_lseek_r+0x20>)
 80067ac:	4604      	mov	r4, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	602a      	str	r2, [r5, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7fa faac 	bl	8000d14 <_lseek>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_lseek_r+0x1e>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_lseek_r+0x1e>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20004c58 	.word	0x20004c58

080067cc <_read_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d07      	ldr	r5, [pc, #28]	@ (80067ec <_read_r+0x20>)
 80067d0:	4604      	mov	r4, r0
 80067d2:	4608      	mov	r0, r1
 80067d4:	4611      	mov	r1, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7fa fa3a 	bl	8000c54 <_read>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_read_r+0x1e>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_read_r+0x1e>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	20004c58 	.word	0x20004c58

080067f0 <_write_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d07      	ldr	r5, [pc, #28]	@ (8006810 <_write_r+0x20>)
 80067f4:	4604      	mov	r4, r0
 80067f6:	4608      	mov	r0, r1
 80067f8:	4611      	mov	r1, r2
 80067fa:	2200      	movs	r2, #0
 80067fc:	602a      	str	r2, [r5, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	f7fa fa45 	bl	8000c8e <_write>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_write_r+0x1e>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_write_r+0x1e>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	20004c58 	.word	0x20004c58

08006814 <__errno>:
 8006814:	4b01      	ldr	r3, [pc, #4]	@ (800681c <__errno+0x8>)
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	2000001c 	.word	0x2000001c

08006820 <__libc_init_array>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	4d0d      	ldr	r5, [pc, #52]	@ (8006858 <__libc_init_array+0x38>)
 8006824:	4c0d      	ldr	r4, [pc, #52]	@ (800685c <__libc_init_array+0x3c>)
 8006826:	1b64      	subs	r4, r4, r5
 8006828:	10a4      	asrs	r4, r4, #2
 800682a:	2600      	movs	r6, #0
 800682c:	42a6      	cmp	r6, r4
 800682e:	d109      	bne.n	8006844 <__libc_init_array+0x24>
 8006830:	4d0b      	ldr	r5, [pc, #44]	@ (8006860 <__libc_init_array+0x40>)
 8006832:	4c0c      	ldr	r4, [pc, #48]	@ (8006864 <__libc_init_array+0x44>)
 8006834:	f000 fd30 	bl	8007298 <_init>
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	2600      	movs	r6, #0
 800683e:	42a6      	cmp	r6, r4
 8006840:	d105      	bne.n	800684e <__libc_init_array+0x2e>
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	f855 3b04 	ldr.w	r3, [r5], #4
 8006848:	4798      	blx	r3
 800684a:	3601      	adds	r6, #1
 800684c:	e7ee      	b.n	800682c <__libc_init_array+0xc>
 800684e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006852:	4798      	blx	r3
 8006854:	3601      	adds	r6, #1
 8006856:	e7f2      	b.n	800683e <__libc_init_array+0x1e>
 8006858:	08007424 	.word	0x08007424
 800685c:	08007424 	.word	0x08007424
 8006860:	08007424 	.word	0x08007424
 8006864:	08007428 	.word	0x08007428

08006868 <__retarget_lock_init_recursive>:
 8006868:	4770      	bx	lr

0800686a <__retarget_lock_acquire_recursive>:
 800686a:	4770      	bx	lr

0800686c <__retarget_lock_release_recursive>:
 800686c:	4770      	bx	lr

0800686e <memcpy>:
 800686e:	440a      	add	r2, r1
 8006870:	4291      	cmp	r1, r2
 8006872:	f100 33ff 	add.w	r3, r0, #4294967295
 8006876:	d100      	bne.n	800687a <memcpy+0xc>
 8006878:	4770      	bx	lr
 800687a:	b510      	push	{r4, lr}
 800687c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006884:	4291      	cmp	r1, r2
 8006886:	d1f9      	bne.n	800687c <memcpy+0xe>
 8006888:	bd10      	pop	{r4, pc}
	...

0800688c <_free_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4605      	mov	r5, r0
 8006890:	2900      	cmp	r1, #0
 8006892:	d041      	beq.n	8006918 <_free_r+0x8c>
 8006894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006898:	1f0c      	subs	r4, r1, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfb8      	it	lt
 800689e:	18e4      	addlt	r4, r4, r3
 80068a0:	f000 f8e0 	bl	8006a64 <__malloc_lock>
 80068a4:	4a1d      	ldr	r2, [pc, #116]	@ (800691c <_free_r+0x90>)
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	b933      	cbnz	r3, 80068b8 <_free_r+0x2c>
 80068aa:	6063      	str	r3, [r4, #4]
 80068ac:	6014      	str	r4, [r2, #0]
 80068ae:	4628      	mov	r0, r5
 80068b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b4:	f000 b8dc 	b.w	8006a70 <__malloc_unlock>
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	d908      	bls.n	80068ce <_free_r+0x42>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	1821      	adds	r1, r4, r0
 80068c0:	428b      	cmp	r3, r1
 80068c2:	bf01      	itttt	eq
 80068c4:	6819      	ldreq	r1, [r3, #0]
 80068c6:	685b      	ldreq	r3, [r3, #4]
 80068c8:	1809      	addeq	r1, r1, r0
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	e7ed      	b.n	80068aa <_free_r+0x1e>
 80068ce:	461a      	mov	r2, r3
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b10b      	cbz	r3, 80068d8 <_free_r+0x4c>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d9fa      	bls.n	80068ce <_free_r+0x42>
 80068d8:	6811      	ldr	r1, [r2, #0]
 80068da:	1850      	adds	r0, r2, r1
 80068dc:	42a0      	cmp	r0, r4
 80068de:	d10b      	bne.n	80068f8 <_free_r+0x6c>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	4401      	add	r1, r0
 80068e4:	1850      	adds	r0, r2, r1
 80068e6:	4283      	cmp	r3, r0
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	d1e0      	bne.n	80068ae <_free_r+0x22>
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	6053      	str	r3, [r2, #4]
 80068f2:	4408      	add	r0, r1
 80068f4:	6010      	str	r0, [r2, #0]
 80068f6:	e7da      	b.n	80068ae <_free_r+0x22>
 80068f8:	d902      	bls.n	8006900 <_free_r+0x74>
 80068fa:	230c      	movs	r3, #12
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	e7d6      	b.n	80068ae <_free_r+0x22>
 8006900:	6820      	ldr	r0, [r4, #0]
 8006902:	1821      	adds	r1, r4, r0
 8006904:	428b      	cmp	r3, r1
 8006906:	bf04      	itt	eq
 8006908:	6819      	ldreq	r1, [r3, #0]
 800690a:	685b      	ldreq	r3, [r3, #4]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	bf04      	itt	eq
 8006910:	1809      	addeq	r1, r1, r0
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	6054      	str	r4, [r2, #4]
 8006916:	e7ca      	b.n	80068ae <_free_r+0x22>
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	20004c64 	.word	0x20004c64

08006920 <sbrk_aligned>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	4e0f      	ldr	r6, [pc, #60]	@ (8006960 <sbrk_aligned+0x40>)
 8006924:	460c      	mov	r4, r1
 8006926:	6831      	ldr	r1, [r6, #0]
 8006928:	4605      	mov	r5, r0
 800692a:	b911      	cbnz	r1, 8006932 <sbrk_aligned+0x12>
 800692c:	f000 fca4 	bl	8007278 <_sbrk_r>
 8006930:	6030      	str	r0, [r6, #0]
 8006932:	4621      	mov	r1, r4
 8006934:	4628      	mov	r0, r5
 8006936:	f000 fc9f 	bl	8007278 <_sbrk_r>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	d103      	bne.n	8006946 <sbrk_aligned+0x26>
 800693e:	f04f 34ff 	mov.w	r4, #4294967295
 8006942:	4620      	mov	r0, r4
 8006944:	bd70      	pop	{r4, r5, r6, pc}
 8006946:	1cc4      	adds	r4, r0, #3
 8006948:	f024 0403 	bic.w	r4, r4, #3
 800694c:	42a0      	cmp	r0, r4
 800694e:	d0f8      	beq.n	8006942 <sbrk_aligned+0x22>
 8006950:	1a21      	subs	r1, r4, r0
 8006952:	4628      	mov	r0, r5
 8006954:	f000 fc90 	bl	8007278 <_sbrk_r>
 8006958:	3001      	adds	r0, #1
 800695a:	d1f2      	bne.n	8006942 <sbrk_aligned+0x22>
 800695c:	e7ef      	b.n	800693e <sbrk_aligned+0x1e>
 800695e:	bf00      	nop
 8006960:	20004c60 	.word	0x20004c60

08006964 <_malloc_r>:
 8006964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006968:	1ccd      	adds	r5, r1, #3
 800696a:	f025 0503 	bic.w	r5, r5, #3
 800696e:	3508      	adds	r5, #8
 8006970:	2d0c      	cmp	r5, #12
 8006972:	bf38      	it	cc
 8006974:	250c      	movcc	r5, #12
 8006976:	2d00      	cmp	r5, #0
 8006978:	4606      	mov	r6, r0
 800697a:	db01      	blt.n	8006980 <_malloc_r+0x1c>
 800697c:	42a9      	cmp	r1, r5
 800697e:	d904      	bls.n	800698a <_malloc_r+0x26>
 8006980:	230c      	movs	r3, #12
 8006982:	6033      	str	r3, [r6, #0]
 8006984:	2000      	movs	r0, #0
 8006986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a60 <_malloc_r+0xfc>
 800698e:	f000 f869 	bl	8006a64 <__malloc_lock>
 8006992:	f8d8 3000 	ldr.w	r3, [r8]
 8006996:	461c      	mov	r4, r3
 8006998:	bb44      	cbnz	r4, 80069ec <_malloc_r+0x88>
 800699a:	4629      	mov	r1, r5
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff ffbf 	bl	8006920 <sbrk_aligned>
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	4604      	mov	r4, r0
 80069a6:	d158      	bne.n	8006a5a <_malloc_r+0xf6>
 80069a8:	f8d8 4000 	ldr.w	r4, [r8]
 80069ac:	4627      	mov	r7, r4
 80069ae:	2f00      	cmp	r7, #0
 80069b0:	d143      	bne.n	8006a3a <_malloc_r+0xd6>
 80069b2:	2c00      	cmp	r4, #0
 80069b4:	d04b      	beq.n	8006a4e <_malloc_r+0xea>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	4639      	mov	r1, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	eb04 0903 	add.w	r9, r4, r3
 80069c0:	f000 fc5a 	bl	8007278 <_sbrk_r>
 80069c4:	4581      	cmp	r9, r0
 80069c6:	d142      	bne.n	8006a4e <_malloc_r+0xea>
 80069c8:	6821      	ldr	r1, [r4, #0]
 80069ca:	1a6d      	subs	r5, r5, r1
 80069cc:	4629      	mov	r1, r5
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7ff ffa6 	bl	8006920 <sbrk_aligned>
 80069d4:	3001      	adds	r0, #1
 80069d6:	d03a      	beq.n	8006a4e <_malloc_r+0xea>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	442b      	add	r3, r5
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	f8d8 3000 	ldr.w	r3, [r8]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	bb62      	cbnz	r2, 8006a40 <_malloc_r+0xdc>
 80069e6:	f8c8 7000 	str.w	r7, [r8]
 80069ea:	e00f      	b.n	8006a0c <_malloc_r+0xa8>
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	1b52      	subs	r2, r2, r5
 80069f0:	d420      	bmi.n	8006a34 <_malloc_r+0xd0>
 80069f2:	2a0b      	cmp	r2, #11
 80069f4:	d917      	bls.n	8006a26 <_malloc_r+0xc2>
 80069f6:	1961      	adds	r1, r4, r5
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	6025      	str	r5, [r4, #0]
 80069fc:	bf18      	it	ne
 80069fe:	6059      	strne	r1, [r3, #4]
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	bf08      	it	eq
 8006a04:	f8c8 1000 	streq.w	r1, [r8]
 8006a08:	5162      	str	r2, [r4, r5]
 8006a0a:	604b      	str	r3, [r1, #4]
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f000 f82f 	bl	8006a70 <__malloc_unlock>
 8006a12:	f104 000b 	add.w	r0, r4, #11
 8006a16:	1d23      	adds	r3, r4, #4
 8006a18:	f020 0007 	bic.w	r0, r0, #7
 8006a1c:	1ac2      	subs	r2, r0, r3
 8006a1e:	bf1c      	itt	ne
 8006a20:	1a1b      	subne	r3, r3, r0
 8006a22:	50a3      	strne	r3, [r4, r2]
 8006a24:	e7af      	b.n	8006986 <_malloc_r+0x22>
 8006a26:	6862      	ldr	r2, [r4, #4]
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	bf0c      	ite	eq
 8006a2c:	f8c8 2000 	streq.w	r2, [r8]
 8006a30:	605a      	strne	r2, [r3, #4]
 8006a32:	e7eb      	b.n	8006a0c <_malloc_r+0xa8>
 8006a34:	4623      	mov	r3, r4
 8006a36:	6864      	ldr	r4, [r4, #4]
 8006a38:	e7ae      	b.n	8006998 <_malloc_r+0x34>
 8006a3a:	463c      	mov	r4, r7
 8006a3c:	687f      	ldr	r7, [r7, #4]
 8006a3e:	e7b6      	b.n	80069ae <_malloc_r+0x4a>
 8006a40:	461a      	mov	r2, r3
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d1fb      	bne.n	8006a40 <_malloc_r+0xdc>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6053      	str	r3, [r2, #4]
 8006a4c:	e7de      	b.n	8006a0c <_malloc_r+0xa8>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	6033      	str	r3, [r6, #0]
 8006a52:	4630      	mov	r0, r6
 8006a54:	f000 f80c 	bl	8006a70 <__malloc_unlock>
 8006a58:	e794      	b.n	8006984 <_malloc_r+0x20>
 8006a5a:	6005      	str	r5, [r0, #0]
 8006a5c:	e7d6      	b.n	8006a0c <_malloc_r+0xa8>
 8006a5e:	bf00      	nop
 8006a60:	20004c64 	.word	0x20004c64

08006a64 <__malloc_lock>:
 8006a64:	4801      	ldr	r0, [pc, #4]	@ (8006a6c <__malloc_lock+0x8>)
 8006a66:	f7ff bf00 	b.w	800686a <__retarget_lock_acquire_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	20004c5c 	.word	0x20004c5c

08006a70 <__malloc_unlock>:
 8006a70:	4801      	ldr	r0, [pc, #4]	@ (8006a78 <__malloc_unlock+0x8>)
 8006a72:	f7ff befb 	b.w	800686c <__retarget_lock_release_recursive>
 8006a76:	bf00      	nop
 8006a78:	20004c5c 	.word	0x20004c5c

08006a7c <__sfputc_r>:
 8006a7c:	6893      	ldr	r3, [r2, #8]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	b410      	push	{r4}
 8006a84:	6093      	str	r3, [r2, #8]
 8006a86:	da08      	bge.n	8006a9a <__sfputc_r+0x1e>
 8006a88:	6994      	ldr	r4, [r2, #24]
 8006a8a:	42a3      	cmp	r3, r4
 8006a8c:	db01      	blt.n	8006a92 <__sfputc_r+0x16>
 8006a8e:	290a      	cmp	r1, #10
 8006a90:	d103      	bne.n	8006a9a <__sfputc_r+0x1e>
 8006a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a96:	f7ff bd7c 	b.w	8006592 <__swbuf_r>
 8006a9a:	6813      	ldr	r3, [r2, #0]
 8006a9c:	1c58      	adds	r0, r3, #1
 8006a9e:	6010      	str	r0, [r2, #0]
 8006aa0:	7019      	strb	r1, [r3, #0]
 8006aa2:	4608      	mov	r0, r1
 8006aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <__sfputs_r>:
 8006aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aac:	4606      	mov	r6, r0
 8006aae:	460f      	mov	r7, r1
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	18d5      	adds	r5, r2, r3
 8006ab4:	42ac      	cmp	r4, r5
 8006ab6:	d101      	bne.n	8006abc <__sfputs_r+0x12>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e007      	b.n	8006acc <__sfputs_r+0x22>
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	463a      	mov	r2, r7
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff ffda 	bl	8006a7c <__sfputc_r>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d1f3      	bne.n	8006ab4 <__sfputs_r+0xa>
 8006acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ad0 <_vfiprintf_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	460d      	mov	r5, r1
 8006ad6:	b09d      	sub	sp, #116	@ 0x74
 8006ad8:	4614      	mov	r4, r2
 8006ada:	4698      	mov	r8, r3
 8006adc:	4606      	mov	r6, r0
 8006ade:	b118      	cbz	r0, 8006ae8 <_vfiprintf_r+0x18>
 8006ae0:	6a03      	ldr	r3, [r0, #32]
 8006ae2:	b90b      	cbnz	r3, 8006ae8 <_vfiprintf_r+0x18>
 8006ae4:	f7ff fc6c 	bl	80063c0 <__sinit>
 8006ae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aea:	07d9      	lsls	r1, r3, #31
 8006aec:	d405      	bmi.n	8006afa <_vfiprintf_r+0x2a>
 8006aee:	89ab      	ldrh	r3, [r5, #12]
 8006af0:	059a      	lsls	r2, r3, #22
 8006af2:	d402      	bmi.n	8006afa <_vfiprintf_r+0x2a>
 8006af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006af6:	f7ff feb8 	bl	800686a <__retarget_lock_acquire_recursive>
 8006afa:	89ab      	ldrh	r3, [r5, #12]
 8006afc:	071b      	lsls	r3, r3, #28
 8006afe:	d501      	bpl.n	8006b04 <_vfiprintf_r+0x34>
 8006b00:	692b      	ldr	r3, [r5, #16]
 8006b02:	b99b      	cbnz	r3, 8006b2c <_vfiprintf_r+0x5c>
 8006b04:	4629      	mov	r1, r5
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff fd82 	bl	8006610 <__swsetup_r>
 8006b0c:	b170      	cbz	r0, 8006b2c <_vfiprintf_r+0x5c>
 8006b0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b10:	07dc      	lsls	r4, r3, #31
 8006b12:	d504      	bpl.n	8006b1e <_vfiprintf_r+0x4e>
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	b01d      	add	sp, #116	@ 0x74
 8006b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	0598      	lsls	r0, r3, #22
 8006b22:	d4f7      	bmi.n	8006b14 <_vfiprintf_r+0x44>
 8006b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b26:	f7ff fea1 	bl	800686c <__retarget_lock_release_recursive>
 8006b2a:	e7f3      	b.n	8006b14 <_vfiprintf_r+0x44>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b30:	2320      	movs	r3, #32
 8006b32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b3a:	2330      	movs	r3, #48	@ 0x30
 8006b3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cec <_vfiprintf_r+0x21c>
 8006b40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b44:	f04f 0901 	mov.w	r9, #1
 8006b48:	4623      	mov	r3, r4
 8006b4a:	469a      	mov	sl, r3
 8006b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b50:	b10a      	cbz	r2, 8006b56 <_vfiprintf_r+0x86>
 8006b52:	2a25      	cmp	r2, #37	@ 0x25
 8006b54:	d1f9      	bne.n	8006b4a <_vfiprintf_r+0x7a>
 8006b56:	ebba 0b04 	subs.w	fp, sl, r4
 8006b5a:	d00b      	beq.n	8006b74 <_vfiprintf_r+0xa4>
 8006b5c:	465b      	mov	r3, fp
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffa1 	bl	8006aaa <__sfputs_r>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f000 80a7 	beq.w	8006cbc <_vfiprintf_r+0x1ec>
 8006b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b70:	445a      	add	r2, fp
 8006b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b74:	f89a 3000 	ldrb.w	r3, [sl]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 809f 	beq.w	8006cbc <_vfiprintf_r+0x1ec>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295
 8006b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b88:	f10a 0a01 	add.w	sl, sl, #1
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	9307      	str	r3, [sp, #28]
 8006b90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b94:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b96:	4654      	mov	r4, sl
 8006b98:	2205      	movs	r2, #5
 8006b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9e:	4853      	ldr	r0, [pc, #332]	@ (8006cec <_vfiprintf_r+0x21c>)
 8006ba0:	f7f9 fb36 	bl	8000210 <memchr>
 8006ba4:	9a04      	ldr	r2, [sp, #16]
 8006ba6:	b9d8      	cbnz	r0, 8006be0 <_vfiprintf_r+0x110>
 8006ba8:	06d1      	lsls	r1, r2, #27
 8006baa:	bf44      	itt	mi
 8006bac:	2320      	movmi	r3, #32
 8006bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bb2:	0713      	lsls	r3, r2, #28
 8006bb4:	bf44      	itt	mi
 8006bb6:	232b      	movmi	r3, #43	@ 0x2b
 8006bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc2:	d015      	beq.n	8006bf0 <_vfiprintf_r+0x120>
 8006bc4:	9a07      	ldr	r2, [sp, #28]
 8006bc6:	4654      	mov	r4, sl
 8006bc8:	2000      	movs	r0, #0
 8006bca:	f04f 0c0a 	mov.w	ip, #10
 8006bce:	4621      	mov	r1, r4
 8006bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bd4:	3b30      	subs	r3, #48	@ 0x30
 8006bd6:	2b09      	cmp	r3, #9
 8006bd8:	d94b      	bls.n	8006c72 <_vfiprintf_r+0x1a2>
 8006bda:	b1b0      	cbz	r0, 8006c0a <_vfiprintf_r+0x13a>
 8006bdc:	9207      	str	r2, [sp, #28]
 8006bde:	e014      	b.n	8006c0a <_vfiprintf_r+0x13a>
 8006be0:	eba0 0308 	sub.w	r3, r0, r8
 8006be4:	fa09 f303 	lsl.w	r3, r9, r3
 8006be8:	4313      	orrs	r3, r2
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	46a2      	mov	sl, r4
 8006bee:	e7d2      	b.n	8006b96 <_vfiprintf_r+0xc6>
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	1d19      	adds	r1, r3, #4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	9103      	str	r1, [sp, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bfbb      	ittet	lt
 8006bfc:	425b      	neglt	r3, r3
 8006bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8006c02:	9307      	strge	r3, [sp, #28]
 8006c04:	9307      	strlt	r3, [sp, #28]
 8006c06:	bfb8      	it	lt
 8006c08:	9204      	strlt	r2, [sp, #16]
 8006c0a:	7823      	ldrb	r3, [r4, #0]
 8006c0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c0e:	d10a      	bne.n	8006c26 <_vfiprintf_r+0x156>
 8006c10:	7863      	ldrb	r3, [r4, #1]
 8006c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c14:	d132      	bne.n	8006c7c <_vfiprintf_r+0x1ac>
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	1d1a      	adds	r2, r3, #4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	9203      	str	r2, [sp, #12]
 8006c1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c22:	3402      	adds	r4, #2
 8006c24:	9305      	str	r3, [sp, #20]
 8006c26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cfc <_vfiprintf_r+0x22c>
 8006c2a:	7821      	ldrb	r1, [r4, #0]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	4650      	mov	r0, sl
 8006c30:	f7f9 faee 	bl	8000210 <memchr>
 8006c34:	b138      	cbz	r0, 8006c46 <_vfiprintf_r+0x176>
 8006c36:	9b04      	ldr	r3, [sp, #16]
 8006c38:	eba0 000a 	sub.w	r0, r0, sl
 8006c3c:	2240      	movs	r2, #64	@ 0x40
 8006c3e:	4082      	lsls	r2, r0
 8006c40:	4313      	orrs	r3, r2
 8006c42:	3401      	adds	r4, #1
 8006c44:	9304      	str	r3, [sp, #16]
 8006c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4a:	4829      	ldr	r0, [pc, #164]	@ (8006cf0 <_vfiprintf_r+0x220>)
 8006c4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c50:	2206      	movs	r2, #6
 8006c52:	f7f9 fadd 	bl	8000210 <memchr>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d03f      	beq.n	8006cda <_vfiprintf_r+0x20a>
 8006c5a:	4b26      	ldr	r3, [pc, #152]	@ (8006cf4 <_vfiprintf_r+0x224>)
 8006c5c:	bb1b      	cbnz	r3, 8006ca6 <_vfiprintf_r+0x1d6>
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	3307      	adds	r3, #7
 8006c62:	f023 0307 	bic.w	r3, r3, #7
 8006c66:	3308      	adds	r3, #8
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6c:	443b      	add	r3, r7
 8006c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c70:	e76a      	b.n	8006b48 <_vfiprintf_r+0x78>
 8006c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c76:	460c      	mov	r4, r1
 8006c78:	2001      	movs	r0, #1
 8006c7a:	e7a8      	b.n	8006bce <_vfiprintf_r+0xfe>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	3401      	adds	r4, #1
 8006c80:	9305      	str	r3, [sp, #20]
 8006c82:	4619      	mov	r1, r3
 8006c84:	f04f 0c0a 	mov.w	ip, #10
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c8e:	3a30      	subs	r2, #48	@ 0x30
 8006c90:	2a09      	cmp	r2, #9
 8006c92:	d903      	bls.n	8006c9c <_vfiprintf_r+0x1cc>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0c6      	beq.n	8006c26 <_vfiprintf_r+0x156>
 8006c98:	9105      	str	r1, [sp, #20]
 8006c9a:	e7c4      	b.n	8006c26 <_vfiprintf_r+0x156>
 8006c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7f0      	b.n	8006c88 <_vfiprintf_r+0x1b8>
 8006ca6:	ab03      	add	r3, sp, #12
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	462a      	mov	r2, r5
 8006cac:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <_vfiprintf_r+0x228>)
 8006cae:	a904      	add	r1, sp, #16
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f3af 8000 	nop.w
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	1c78      	adds	r0, r7, #1
 8006cba:	d1d6      	bne.n	8006c6a <_vfiprintf_r+0x19a>
 8006cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	d405      	bmi.n	8006cce <_vfiprintf_r+0x1fe>
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	059a      	lsls	r2, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_vfiprintf_r+0x1fe>
 8006cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cca:	f7ff fdcf 	bl	800686c <__retarget_lock_release_recursive>
 8006cce:	89ab      	ldrh	r3, [r5, #12]
 8006cd0:	065b      	lsls	r3, r3, #25
 8006cd2:	f53f af1f 	bmi.w	8006b14 <_vfiprintf_r+0x44>
 8006cd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cd8:	e71e      	b.n	8006b18 <_vfiprintf_r+0x48>
 8006cda:	ab03      	add	r3, sp, #12
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	462a      	mov	r2, r5
 8006ce0:	4b05      	ldr	r3, [pc, #20]	@ (8006cf8 <_vfiprintf_r+0x228>)
 8006ce2:	a904      	add	r1, sp, #16
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f000 f879 	bl	8006ddc <_printf_i>
 8006cea:	e7e4      	b.n	8006cb6 <_vfiprintf_r+0x1e6>
 8006cec:	080073e8 	.word	0x080073e8
 8006cf0:	080073f2 	.word	0x080073f2
 8006cf4:	00000000 	.word	0x00000000
 8006cf8:	08006aab 	.word	0x08006aab
 8006cfc:	080073ee 	.word	0x080073ee

08006d00 <_printf_common>:
 8006d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d04:	4616      	mov	r6, r2
 8006d06:	4698      	mov	r8, r3
 8006d08:	688a      	ldr	r2, [r1, #8]
 8006d0a:	690b      	ldr	r3, [r1, #16]
 8006d0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfb8      	it	lt
 8006d14:	4613      	movlt	r3, r2
 8006d16:	6033      	str	r3, [r6, #0]
 8006d18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b10a      	cbz	r2, 8006d26 <_printf_common+0x26>
 8006d22:	3301      	adds	r3, #1
 8006d24:	6033      	str	r3, [r6, #0]
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	0699      	lsls	r1, r3, #26
 8006d2a:	bf42      	ittt	mi
 8006d2c:	6833      	ldrmi	r3, [r6, #0]
 8006d2e:	3302      	addmi	r3, #2
 8006d30:	6033      	strmi	r3, [r6, #0]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	f015 0506 	ands.w	r5, r5, #6
 8006d38:	d106      	bne.n	8006d48 <_printf_common+0x48>
 8006d3a:	f104 0a19 	add.w	sl, r4, #25
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	6832      	ldr	r2, [r6, #0]
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dc26      	bgt.n	8006d96 <_printf_common+0x96>
 8006d48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d4c:	6822      	ldr	r2, [r4, #0]
 8006d4e:	3b00      	subs	r3, #0
 8006d50:	bf18      	it	ne
 8006d52:	2301      	movne	r3, #1
 8006d54:	0692      	lsls	r2, r2, #26
 8006d56:	d42b      	bmi.n	8006db0 <_printf_common+0xb0>
 8006d58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	4638      	mov	r0, r7
 8006d60:	47c8      	blx	r9
 8006d62:	3001      	adds	r0, #1
 8006d64:	d01e      	beq.n	8006da4 <_printf_common+0xa4>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	f003 0306 	and.w	r3, r3, #6
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	bf02      	ittt	eq
 8006d72:	68e5      	ldreq	r5, [r4, #12]
 8006d74:	6833      	ldreq	r3, [r6, #0]
 8006d76:	1aed      	subeq	r5, r5, r3
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	bf0c      	ite	eq
 8006d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d80:	2500      	movne	r5, #0
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bfc4      	itt	gt
 8006d86:	1a9b      	subgt	r3, r3, r2
 8006d88:	18ed      	addgt	r5, r5, r3
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	341a      	adds	r4, #26
 8006d8e:	42b5      	cmp	r5, r6
 8006d90:	d11a      	bne.n	8006dc8 <_printf_common+0xc8>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e008      	b.n	8006da8 <_printf_common+0xa8>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4652      	mov	r2, sl
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	47c8      	blx	r9
 8006da0:	3001      	adds	r0, #1
 8006da2:	d103      	bne.n	8006dac <_printf_common+0xac>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dac:	3501      	adds	r5, #1
 8006dae:	e7c6      	b.n	8006d3e <_printf_common+0x3e>
 8006db0:	18e1      	adds	r1, r4, r3
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	2030      	movs	r0, #48	@ 0x30
 8006db6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dba:	4422      	add	r2, r4
 8006dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	e7c7      	b.n	8006d58 <_printf_common+0x58>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4622      	mov	r2, r4
 8006dcc:	4641      	mov	r1, r8
 8006dce:	4638      	mov	r0, r7
 8006dd0:	47c8      	blx	r9
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d0e6      	beq.n	8006da4 <_printf_common+0xa4>
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7d9      	b.n	8006d8e <_printf_common+0x8e>
	...

08006ddc <_printf_i>:
 8006ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	7e0f      	ldrb	r7, [r1, #24]
 8006de2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006de4:	2f78      	cmp	r7, #120	@ 0x78
 8006de6:	4691      	mov	r9, r2
 8006de8:	4680      	mov	r8, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	469a      	mov	sl, r3
 8006dee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006df2:	d807      	bhi.n	8006e04 <_printf_i+0x28>
 8006df4:	2f62      	cmp	r7, #98	@ 0x62
 8006df6:	d80a      	bhi.n	8006e0e <_printf_i+0x32>
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	f000 80d1 	beq.w	8006fa0 <_printf_i+0x1c4>
 8006dfe:	2f58      	cmp	r7, #88	@ 0x58
 8006e00:	f000 80b8 	beq.w	8006f74 <_printf_i+0x198>
 8006e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e0c:	e03a      	b.n	8006e84 <_printf_i+0xa8>
 8006e0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e12:	2b15      	cmp	r3, #21
 8006e14:	d8f6      	bhi.n	8006e04 <_printf_i+0x28>
 8006e16:	a101      	add	r1, pc, #4	@ (adr r1, 8006e1c <_printf_i+0x40>)
 8006e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e1c:	08006e75 	.word	0x08006e75
 8006e20:	08006e89 	.word	0x08006e89
 8006e24:	08006e05 	.word	0x08006e05
 8006e28:	08006e05 	.word	0x08006e05
 8006e2c:	08006e05 	.word	0x08006e05
 8006e30:	08006e05 	.word	0x08006e05
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006e05 	.word	0x08006e05
 8006e3c:	08006e05 	.word	0x08006e05
 8006e40:	08006e05 	.word	0x08006e05
 8006e44:	08006e05 	.word	0x08006e05
 8006e48:	08006f87 	.word	0x08006f87
 8006e4c:	08006eb3 	.word	0x08006eb3
 8006e50:	08006f41 	.word	0x08006f41
 8006e54:	08006e05 	.word	0x08006e05
 8006e58:	08006e05 	.word	0x08006e05
 8006e5c:	08006fa9 	.word	0x08006fa9
 8006e60:	08006e05 	.word	0x08006e05
 8006e64:	08006eb3 	.word	0x08006eb3
 8006e68:	08006e05 	.word	0x08006e05
 8006e6c:	08006e05 	.word	0x08006e05
 8006e70:	08006f49 	.word	0x08006f49
 8006e74:	6833      	ldr	r3, [r6, #0]
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6032      	str	r2, [r6, #0]
 8006e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e84:	2301      	movs	r3, #1
 8006e86:	e09c      	b.n	8006fc2 <_printf_i+0x1e6>
 8006e88:	6833      	ldr	r3, [r6, #0]
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	1d19      	adds	r1, r3, #4
 8006e8e:	6031      	str	r1, [r6, #0]
 8006e90:	0606      	lsls	r6, r0, #24
 8006e92:	d501      	bpl.n	8006e98 <_printf_i+0xbc>
 8006e94:	681d      	ldr	r5, [r3, #0]
 8006e96:	e003      	b.n	8006ea0 <_printf_i+0xc4>
 8006e98:	0645      	lsls	r5, r0, #25
 8006e9a:	d5fb      	bpl.n	8006e94 <_printf_i+0xb8>
 8006e9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ea0:	2d00      	cmp	r5, #0
 8006ea2:	da03      	bge.n	8006eac <_printf_i+0xd0>
 8006ea4:	232d      	movs	r3, #45	@ 0x2d
 8006ea6:	426d      	negs	r5, r5
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eac:	4858      	ldr	r0, [pc, #352]	@ (8007010 <_printf_i+0x234>)
 8006eae:	230a      	movs	r3, #10
 8006eb0:	e011      	b.n	8006ed6 <_printf_i+0xfa>
 8006eb2:	6821      	ldr	r1, [r4, #0]
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	0608      	lsls	r0, r1, #24
 8006eb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ebc:	d402      	bmi.n	8006ec4 <_printf_i+0xe8>
 8006ebe:	0649      	lsls	r1, r1, #25
 8006ec0:	bf48      	it	mi
 8006ec2:	b2ad      	uxthmi	r5, r5
 8006ec4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ec6:	4852      	ldr	r0, [pc, #328]	@ (8007010 <_printf_i+0x234>)
 8006ec8:	6033      	str	r3, [r6, #0]
 8006eca:	bf14      	ite	ne
 8006ecc:	230a      	movne	r3, #10
 8006ece:	2308      	moveq	r3, #8
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ed6:	6866      	ldr	r6, [r4, #4]
 8006ed8:	60a6      	str	r6, [r4, #8]
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	db05      	blt.n	8006eea <_printf_i+0x10e>
 8006ede:	6821      	ldr	r1, [r4, #0]
 8006ee0:	432e      	orrs	r6, r5
 8006ee2:	f021 0104 	bic.w	r1, r1, #4
 8006ee6:	6021      	str	r1, [r4, #0]
 8006ee8:	d04b      	beq.n	8006f82 <_printf_i+0x1a6>
 8006eea:	4616      	mov	r6, r2
 8006eec:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ef0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ef4:	5dc7      	ldrb	r7, [r0, r7]
 8006ef6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006efa:	462f      	mov	r7, r5
 8006efc:	42bb      	cmp	r3, r7
 8006efe:	460d      	mov	r5, r1
 8006f00:	d9f4      	bls.n	8006eec <_printf_i+0x110>
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d10b      	bne.n	8006f1e <_printf_i+0x142>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	07df      	lsls	r7, r3, #31
 8006f0a:	d508      	bpl.n	8006f1e <_printf_i+0x142>
 8006f0c:	6923      	ldr	r3, [r4, #16]
 8006f0e:	6861      	ldr	r1, [r4, #4]
 8006f10:	4299      	cmp	r1, r3
 8006f12:	bfde      	ittt	le
 8006f14:	2330      	movle	r3, #48	@ 0x30
 8006f16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f1e:	1b92      	subs	r2, r2, r6
 8006f20:	6122      	str	r2, [r4, #16]
 8006f22:	f8cd a000 	str.w	sl, [sp]
 8006f26:	464b      	mov	r3, r9
 8006f28:	aa03      	add	r2, sp, #12
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	4640      	mov	r0, r8
 8006f2e:	f7ff fee7 	bl	8006d00 <_printf_common>
 8006f32:	3001      	adds	r0, #1
 8006f34:	d14a      	bne.n	8006fcc <_printf_i+0x1f0>
 8006f36:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3a:	b004      	add	sp, #16
 8006f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	f043 0320 	orr.w	r3, r3, #32
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	4832      	ldr	r0, [pc, #200]	@ (8007014 <_printf_i+0x238>)
 8006f4a:	2778      	movs	r7, #120	@ 0x78
 8006f4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	6831      	ldr	r1, [r6, #0]
 8006f54:	061f      	lsls	r7, r3, #24
 8006f56:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f5a:	d402      	bmi.n	8006f62 <_printf_i+0x186>
 8006f5c:	065f      	lsls	r7, r3, #25
 8006f5e:	bf48      	it	mi
 8006f60:	b2ad      	uxthmi	r5, r5
 8006f62:	6031      	str	r1, [r6, #0]
 8006f64:	07d9      	lsls	r1, r3, #31
 8006f66:	bf44      	itt	mi
 8006f68:	f043 0320 	orrmi.w	r3, r3, #32
 8006f6c:	6023      	strmi	r3, [r4, #0]
 8006f6e:	b11d      	cbz	r5, 8006f78 <_printf_i+0x19c>
 8006f70:	2310      	movs	r3, #16
 8006f72:	e7ad      	b.n	8006ed0 <_printf_i+0xf4>
 8006f74:	4826      	ldr	r0, [pc, #152]	@ (8007010 <_printf_i+0x234>)
 8006f76:	e7e9      	b.n	8006f4c <_printf_i+0x170>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	f023 0320 	bic.w	r3, r3, #32
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	e7f6      	b.n	8006f70 <_printf_i+0x194>
 8006f82:	4616      	mov	r6, r2
 8006f84:	e7bd      	b.n	8006f02 <_printf_i+0x126>
 8006f86:	6833      	ldr	r3, [r6, #0]
 8006f88:	6825      	ldr	r5, [r4, #0]
 8006f8a:	6961      	ldr	r1, [r4, #20]
 8006f8c:	1d18      	adds	r0, r3, #4
 8006f8e:	6030      	str	r0, [r6, #0]
 8006f90:	062e      	lsls	r6, r5, #24
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	d501      	bpl.n	8006f9a <_printf_i+0x1be>
 8006f96:	6019      	str	r1, [r3, #0]
 8006f98:	e002      	b.n	8006fa0 <_printf_i+0x1c4>
 8006f9a:	0668      	lsls	r0, r5, #25
 8006f9c:	d5fb      	bpl.n	8006f96 <_printf_i+0x1ba>
 8006f9e:	8019      	strh	r1, [r3, #0]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	e7bc      	b.n	8006f22 <_printf_i+0x146>
 8006fa8:	6833      	ldr	r3, [r6, #0]
 8006faa:	1d1a      	adds	r2, r3, #4
 8006fac:	6032      	str	r2, [r6, #0]
 8006fae:	681e      	ldr	r6, [r3, #0]
 8006fb0:	6862      	ldr	r2, [r4, #4]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7f9 f92b 	bl	8000210 <memchr>
 8006fba:	b108      	cbz	r0, 8006fc0 <_printf_i+0x1e4>
 8006fbc:	1b80      	subs	r0, r0, r6
 8006fbe:	6060      	str	r0, [r4, #4]
 8006fc0:	6863      	ldr	r3, [r4, #4]
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fca:	e7aa      	b.n	8006f22 <_printf_i+0x146>
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	4632      	mov	r2, r6
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	47d0      	blx	sl
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d0ad      	beq.n	8006f36 <_printf_i+0x15a>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	079b      	lsls	r3, r3, #30
 8006fde:	d413      	bmi.n	8007008 <_printf_i+0x22c>
 8006fe0:	68e0      	ldr	r0, [r4, #12]
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	4298      	cmp	r0, r3
 8006fe6:	bfb8      	it	lt
 8006fe8:	4618      	movlt	r0, r3
 8006fea:	e7a6      	b.n	8006f3a <_printf_i+0x15e>
 8006fec:	2301      	movs	r3, #1
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	47d0      	blx	sl
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d09d      	beq.n	8006f36 <_printf_i+0x15a>
 8006ffa:	3501      	adds	r5, #1
 8006ffc:	68e3      	ldr	r3, [r4, #12]
 8006ffe:	9903      	ldr	r1, [sp, #12]
 8007000:	1a5b      	subs	r3, r3, r1
 8007002:	42ab      	cmp	r3, r5
 8007004:	dcf2      	bgt.n	8006fec <_printf_i+0x210>
 8007006:	e7eb      	b.n	8006fe0 <_printf_i+0x204>
 8007008:	2500      	movs	r5, #0
 800700a:	f104 0619 	add.w	r6, r4, #25
 800700e:	e7f5      	b.n	8006ffc <_printf_i+0x220>
 8007010:	080073f9 	.word	0x080073f9
 8007014:	0800740a 	.word	0x0800740a

08007018 <__sflush_r>:
 8007018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007020:	0716      	lsls	r6, r2, #28
 8007022:	4605      	mov	r5, r0
 8007024:	460c      	mov	r4, r1
 8007026:	d454      	bmi.n	80070d2 <__sflush_r+0xba>
 8007028:	684b      	ldr	r3, [r1, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dc02      	bgt.n	8007034 <__sflush_r+0x1c>
 800702e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	dd48      	ble.n	80070c6 <__sflush_r+0xae>
 8007034:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007036:	2e00      	cmp	r6, #0
 8007038:	d045      	beq.n	80070c6 <__sflush_r+0xae>
 800703a:	2300      	movs	r3, #0
 800703c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007040:	682f      	ldr	r7, [r5, #0]
 8007042:	6a21      	ldr	r1, [r4, #32]
 8007044:	602b      	str	r3, [r5, #0]
 8007046:	d030      	beq.n	80070aa <__sflush_r+0x92>
 8007048:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	0759      	lsls	r1, r3, #29
 800704e:	d505      	bpl.n	800705c <__sflush_r+0x44>
 8007050:	6863      	ldr	r3, [r4, #4]
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007056:	b10b      	cbz	r3, 800705c <__sflush_r+0x44>
 8007058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800705a:	1ad2      	subs	r2, r2, r3
 800705c:	2300      	movs	r3, #0
 800705e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007060:	6a21      	ldr	r1, [r4, #32]
 8007062:	4628      	mov	r0, r5
 8007064:	47b0      	blx	r6
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	d106      	bne.n	800707a <__sflush_r+0x62>
 800706c:	6829      	ldr	r1, [r5, #0]
 800706e:	291d      	cmp	r1, #29
 8007070:	d82b      	bhi.n	80070ca <__sflush_r+0xb2>
 8007072:	4a2a      	ldr	r2, [pc, #168]	@ (800711c <__sflush_r+0x104>)
 8007074:	40ca      	lsrs	r2, r1
 8007076:	07d6      	lsls	r6, r2, #31
 8007078:	d527      	bpl.n	80070ca <__sflush_r+0xb2>
 800707a:	2200      	movs	r2, #0
 800707c:	6062      	str	r2, [r4, #4]
 800707e:	04d9      	lsls	r1, r3, #19
 8007080:	6922      	ldr	r2, [r4, #16]
 8007082:	6022      	str	r2, [r4, #0]
 8007084:	d504      	bpl.n	8007090 <__sflush_r+0x78>
 8007086:	1c42      	adds	r2, r0, #1
 8007088:	d101      	bne.n	800708e <__sflush_r+0x76>
 800708a:	682b      	ldr	r3, [r5, #0]
 800708c:	b903      	cbnz	r3, 8007090 <__sflush_r+0x78>
 800708e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007092:	602f      	str	r7, [r5, #0]
 8007094:	b1b9      	cbz	r1, 80070c6 <__sflush_r+0xae>
 8007096:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800709a:	4299      	cmp	r1, r3
 800709c:	d002      	beq.n	80070a4 <__sflush_r+0x8c>
 800709e:	4628      	mov	r0, r5
 80070a0:	f7ff fbf4 	bl	800688c <_free_r>
 80070a4:	2300      	movs	r3, #0
 80070a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80070a8:	e00d      	b.n	80070c6 <__sflush_r+0xae>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b0      	blx	r6
 80070b0:	4602      	mov	r2, r0
 80070b2:	1c50      	adds	r0, r2, #1
 80070b4:	d1c9      	bne.n	800704a <__sflush_r+0x32>
 80070b6:	682b      	ldr	r3, [r5, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0c6      	beq.n	800704a <__sflush_r+0x32>
 80070bc:	2b1d      	cmp	r3, #29
 80070be:	d001      	beq.n	80070c4 <__sflush_r+0xac>
 80070c0:	2b16      	cmp	r3, #22
 80070c2:	d11e      	bne.n	8007102 <__sflush_r+0xea>
 80070c4:	602f      	str	r7, [r5, #0]
 80070c6:	2000      	movs	r0, #0
 80070c8:	e022      	b.n	8007110 <__sflush_r+0xf8>
 80070ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ce:	b21b      	sxth	r3, r3
 80070d0:	e01b      	b.n	800710a <__sflush_r+0xf2>
 80070d2:	690f      	ldr	r7, [r1, #16]
 80070d4:	2f00      	cmp	r7, #0
 80070d6:	d0f6      	beq.n	80070c6 <__sflush_r+0xae>
 80070d8:	0793      	lsls	r3, r2, #30
 80070da:	680e      	ldr	r6, [r1, #0]
 80070dc:	bf08      	it	eq
 80070de:	694b      	ldreq	r3, [r1, #20]
 80070e0:	600f      	str	r7, [r1, #0]
 80070e2:	bf18      	it	ne
 80070e4:	2300      	movne	r3, #0
 80070e6:	eba6 0807 	sub.w	r8, r6, r7
 80070ea:	608b      	str	r3, [r1, #8]
 80070ec:	f1b8 0f00 	cmp.w	r8, #0
 80070f0:	dde9      	ble.n	80070c6 <__sflush_r+0xae>
 80070f2:	6a21      	ldr	r1, [r4, #32]
 80070f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070f6:	4643      	mov	r3, r8
 80070f8:	463a      	mov	r2, r7
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b0      	blx	r6
 80070fe:	2800      	cmp	r0, #0
 8007100:	dc08      	bgt.n	8007114 <__sflush_r+0xfc>
 8007102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007114:	4407      	add	r7, r0
 8007116:	eba8 0800 	sub.w	r8, r8, r0
 800711a:	e7e7      	b.n	80070ec <__sflush_r+0xd4>
 800711c:	20400001 	.word	0x20400001

08007120 <_fflush_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	690b      	ldr	r3, [r1, #16]
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b913      	cbnz	r3, 8007130 <_fflush_r+0x10>
 800712a:	2500      	movs	r5, #0
 800712c:	4628      	mov	r0, r5
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	b118      	cbz	r0, 800713a <_fflush_r+0x1a>
 8007132:	6a03      	ldr	r3, [r0, #32]
 8007134:	b90b      	cbnz	r3, 800713a <_fflush_r+0x1a>
 8007136:	f7ff f943 	bl	80063c0 <__sinit>
 800713a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f3      	beq.n	800712a <_fflush_r+0xa>
 8007142:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007144:	07d0      	lsls	r0, r2, #31
 8007146:	d404      	bmi.n	8007152 <_fflush_r+0x32>
 8007148:	0599      	lsls	r1, r3, #22
 800714a:	d402      	bmi.n	8007152 <_fflush_r+0x32>
 800714c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800714e:	f7ff fb8c 	bl	800686a <__retarget_lock_acquire_recursive>
 8007152:	4628      	mov	r0, r5
 8007154:	4621      	mov	r1, r4
 8007156:	f7ff ff5f 	bl	8007018 <__sflush_r>
 800715a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800715c:	07da      	lsls	r2, r3, #31
 800715e:	4605      	mov	r5, r0
 8007160:	d4e4      	bmi.n	800712c <_fflush_r+0xc>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	059b      	lsls	r3, r3, #22
 8007166:	d4e1      	bmi.n	800712c <_fflush_r+0xc>
 8007168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800716a:	f7ff fb7f 	bl	800686c <__retarget_lock_release_recursive>
 800716e:	e7dd      	b.n	800712c <_fflush_r+0xc>

08007170 <__swhatbuf_r>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	460c      	mov	r4, r1
 8007174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007178:	2900      	cmp	r1, #0
 800717a:	b096      	sub	sp, #88	@ 0x58
 800717c:	4615      	mov	r5, r2
 800717e:	461e      	mov	r6, r3
 8007180:	da0d      	bge.n	800719e <__swhatbuf_r+0x2e>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	bf14      	ite	ne
 800718e:	2340      	movne	r3, #64	@ 0x40
 8007190:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007194:	2000      	movs	r0, #0
 8007196:	6031      	str	r1, [r6, #0]
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	b016      	add	sp, #88	@ 0x58
 800719c:	bd70      	pop	{r4, r5, r6, pc}
 800719e:	466a      	mov	r2, sp
 80071a0:	f000 f848 	bl	8007234 <_fstat_r>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	dbec      	blt.n	8007182 <__swhatbuf_r+0x12>
 80071a8:	9901      	ldr	r1, [sp, #4]
 80071aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071b2:	4259      	negs	r1, r3
 80071b4:	4159      	adcs	r1, r3
 80071b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ba:	e7eb      	b.n	8007194 <__swhatbuf_r+0x24>

080071bc <__smakebuf_r>:
 80071bc:	898b      	ldrh	r3, [r1, #12]
 80071be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071c0:	079d      	lsls	r5, r3, #30
 80071c2:	4606      	mov	r6, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	d507      	bpl.n	80071d8 <__smakebuf_r+0x1c>
 80071c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	6123      	str	r3, [r4, #16]
 80071d0:	2301      	movs	r3, #1
 80071d2:	6163      	str	r3, [r4, #20]
 80071d4:	b003      	add	sp, #12
 80071d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d8:	ab01      	add	r3, sp, #4
 80071da:	466a      	mov	r2, sp
 80071dc:	f7ff ffc8 	bl	8007170 <__swhatbuf_r>
 80071e0:	9f00      	ldr	r7, [sp, #0]
 80071e2:	4605      	mov	r5, r0
 80071e4:	4639      	mov	r1, r7
 80071e6:	4630      	mov	r0, r6
 80071e8:	f7ff fbbc 	bl	8006964 <_malloc_r>
 80071ec:	b948      	cbnz	r0, 8007202 <__smakebuf_r+0x46>
 80071ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f2:	059a      	lsls	r2, r3, #22
 80071f4:	d4ee      	bmi.n	80071d4 <__smakebuf_r+0x18>
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	f043 0302 	orr.w	r3, r3, #2
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	e7e2      	b.n	80071c8 <__smakebuf_r+0xc>
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	6020      	str	r0, [r4, #0]
 8007206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007212:	b15b      	cbz	r3, 800722c <__smakebuf_r+0x70>
 8007214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007218:	4630      	mov	r0, r6
 800721a:	f000 f81d 	bl	8007258 <_isatty_r>
 800721e:	b128      	cbz	r0, 800722c <__smakebuf_r+0x70>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	431d      	orrs	r5, r3
 8007230:	81a5      	strh	r5, [r4, #12]
 8007232:	e7cf      	b.n	80071d4 <__smakebuf_r+0x18>

08007234 <_fstat_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d07      	ldr	r5, [pc, #28]	@ (8007254 <_fstat_r+0x20>)
 8007238:	2300      	movs	r3, #0
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	f7f9 fd4c 	bl	8000cde <_fstat>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	d102      	bne.n	8007250 <_fstat_r+0x1c>
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	b103      	cbz	r3, 8007250 <_fstat_r+0x1c>
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	bd38      	pop	{r3, r4, r5, pc}
 8007252:	bf00      	nop
 8007254:	20004c58 	.word	0x20004c58

08007258 <_isatty_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d06      	ldr	r5, [pc, #24]	@ (8007274 <_isatty_r+0x1c>)
 800725c:	2300      	movs	r3, #0
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	f7f9 fd4b 	bl	8000cfe <_isatty>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	d102      	bne.n	8007272 <_isatty_r+0x1a>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	b103      	cbz	r3, 8007272 <_isatty_r+0x1a>
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	bd38      	pop	{r3, r4, r5, pc}
 8007274:	20004c58 	.word	0x20004c58

08007278 <_sbrk_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d06      	ldr	r5, [pc, #24]	@ (8007294 <_sbrk_r+0x1c>)
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	f7f9 fd54 	bl	8000d30 <_sbrk>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_sbrk_r+0x1a>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_sbrk_r+0x1a>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	20004c58 	.word	0x20004c58

08007298 <_init>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr

080072a4 <_fini>:
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	bf00      	nop
 80072a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072aa:	bc08      	pop	{r3}
 80072ac:	469e      	mov	lr, r3
 80072ae:	4770      	bx	lr
