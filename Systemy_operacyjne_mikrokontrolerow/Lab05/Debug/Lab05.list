
Lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007418  08007418  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007418  08007418  00008418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007420  08007420  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007424  08007424  00008424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007428  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c00  2000006c  08007494  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c6c  08007494  00009c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e8d  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399f  00000000  00000000  00022f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  000268c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c8  00000000  00000000  00027e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046ec  00000000  00000000  00028f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185c4  00000000  00000000  0002d624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd88c  00000000  00000000  00045be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062d8  00000000  00000000  001234b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00129790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007278 	.word	0x08007278

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007278 	.word	0x08007278

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	ITM_SendChar(chr);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffd1 	bl	80005dc <ITM_SendChar>
	return 1;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fbf6 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f858 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 f8ee 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f8c2 	bl	80007dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000658:	f002 fae6 	bl	8002c28 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <main+0x80>)
 800065e:	2200      	movs	r2, #0
 8000660:	2101      	movs	r1, #1
 8000662:	4819      	ldr	r0, [pc, #100]	@ (80006c8 <main+0x84>)
 8000664:	f002 fbec 	bl	8002e40 <osTimerNew>
 8000668:	4603      	mov	r3, r0
 800066a:	4a18      	ldr	r2, [pc, #96]	@ (80006cc <main+0x88>)
 800066c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of abcQueue01 */
  abcQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &abcQueue01_attributes);
 800066e:	4a18      	ldr	r2, [pc, #96]	@ (80006d0 <main+0x8c>)
 8000670:	2102      	movs	r1, #2
 8000672:	2010      	movs	r0, #16
 8000674:	f002 fd04 	bl	8003080 <osMessageQueueNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <main+0x90>)
 800067c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ProducerTask */
  ProducerTaskHandle = osThreadNew(StartProducerTask, NULL, &ProducerTask_attributes);
 800067e:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <main+0x94>)
 8000680:	2100      	movs	r1, #0
 8000682:	4816      	ldr	r0, [pc, #88]	@ (80006dc <main+0x98>)
 8000684:	f002 fb1a 	bl	8002cbc <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a15      	ldr	r2, [pc, #84]	@ (80006e0 <main+0x9c>)
 800068c:	6013      	str	r3, [r2, #0]

  /* creation of ConsumerTask */
  ConsumerTaskHandle = osThreadNew(StartConsumerTask, NULL, &ConsumerTask_attributes);
 800068e:	4a15      	ldr	r2, [pc, #84]	@ (80006e4 <main+0xa0>)
 8000690:	2100      	movs	r1, #0
 8000692:	4815      	ldr	r0, [pc, #84]	@ (80006e8 <main+0xa4>)
 8000694:	f002 fb12 	bl	8002cbc <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a14      	ldr	r2, [pc, #80]	@ (80006ec <main+0xa8>)
 800069c:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 800069e:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <main+0xac>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	@ (80006f4 <main+0xb0>)
 80006a4:	f002 fb0a 	bl	8002cbc <osThreadNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a13      	ldr	r2, [pc, #76]	@ (80006f8 <main+0xb4>)
 80006ac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  myEventFlags = osEventFlagsNew(NULL);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f002 fc42 	bl	8002f38 <osEventFlagsNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a11      	ldr	r2, [pc, #68]	@ (80006fc <main+0xb8>)
 80006b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ba:	f002 fad9 	bl	8002c70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0x7a>
 80006c2:	bf00      	nop
 80006c4:	080073bc 	.word	0x080073bc
 80006c8:	080009f9 	.word	0x080009f9
 80006cc:	200000e0 	.word	0x200000e0
 80006d0:	080073a4 	.word	0x080073a4
 80006d4:	200000dc 	.word	0x200000dc
 80006d8:	08007338 	.word	0x08007338
 80006dc:	08000901 	.word	0x08000901
 80006e0:	200000d0 	.word	0x200000d0
 80006e4:	0800735c 	.word	0x0800735c
 80006e8:	08000969 	.word	0x08000969
 80006ec:	200000d4 	.word	0x200000d4
 80006f0:	08007380 	.word	0x08007380
 80006f4:	080009ad 	.word	0x080009ad
 80006f8:	200000d8 	.word	0x200000d8
 80006fc:	200000e4 	.word	0x200000e4

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2234      	movs	r2, #52	@ 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f005 ffc4 	bl	800669c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <SystemClock_Config+0xd4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a29      	ldr	r2, [pc, #164]	@ (80007d4 <SystemClock_Config+0xd4>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <SystemClock_Config+0xd4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <SystemClock_Config+0xd8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800074c:	4a22      	ldr	r2, [pc, #136]	@ (80007d8 <SystemClock_Config+0xd8>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <SystemClock_Config+0xd8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000774:	2310      	movs	r3, #16
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000778:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800077c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800077e:	2304      	movs	r3, #4
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fa02 	bl	8001b98 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800079a:	f000 f949 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fe70 	bl	80014a0 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007c6:	f000 f933 	bl	8000a30 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f001 ff00 	bl	8002618 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f907 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000088 	.word	0x20000088
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b2a      	ldr	r3, [pc, #168]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a29      	ldr	r2, [pc, #164]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a22      	ldr	r2, [pc, #136]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_GPIO_Init+0xc4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	4816      	ldr	r0, [pc, #88]	@ (80008f8 <MX_GPIO_Init+0xc8>)
 80008a0:	f000 fda6 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4810      	ldr	r0, [pc, #64]	@ (80008fc <MX_GPIO_Init+0xcc>)
 80008bc:	f000 fc04 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <MX_GPIO_Init+0xc8>)
 80008d8:	f000 fbf6 	bl	80010c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2105      	movs	r1, #5
 80008e0:	2028      	movs	r0, #40	@ 0x28
 80008e2:	f000 fbc7 	bl	8001074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008e6:	2028      	movs	r0, #40	@ 0x28
 80008e8:	f000 fbe0 	bl	80010ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800

08000900 <StartProducerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProducerTask */
void StartProducerTask(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  uint16_t value =0;
 8000908:	2300      	movs	r3, #0
 800090a:	817b      	strh	r3, [r7, #10]
	  osStatus_t statusSender =0;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
	  /* Infinite loop */
	  for(;;)
	  {
		printf("ProducerTask Start\r\n");
 8000910:	4811      	ldr	r0, [pc, #68]	@ (8000958 <StartProducerTask+0x58>)
 8000912:	f005 fde3 	bl	80064dc <puts>
		printf("Sending: %d \r\n", value);
 8000916:	897b      	ldrh	r3, [r7, #10]
 8000918:	4619      	mov	r1, r3
 800091a:	4810      	ldr	r0, [pc, #64]	@ (800095c <StartProducerTask+0x5c>)
 800091c:	f005 fd76 	bl	800640c <iprintf>
		statusSender = osMessageQueuePut(abcQueue01Handle, &value, 0, osWaitForever);
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <StartProducerTask+0x60>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	f107 010a 	add.w	r1, r7, #10
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	2200      	movs	r2, #0
 800092e:	f002 fc1b 	bl	8003168 <osMessageQueuePut>
 8000932:	60f8      	str	r0, [r7, #12]
		if(++value > 20)
 8000934:	897b      	ldrh	r3, [r7, #10]
 8000936:	3301      	adds	r3, #1
 8000938:	b29b      	uxth	r3, r3
 800093a:	817b      	strh	r3, [r7, #10]
 800093c:	897b      	ldrh	r3, [r7, #10]
 800093e:	2b14      	cmp	r3, #20
 8000940:	d901      	bls.n	8000946 <StartProducerTask+0x46>
		{
			value = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	817b      	strh	r3, [r7, #10]
		}
		printf("statusSender: %d \r\n", statusSender);
 8000946:	68f9      	ldr	r1, [r7, #12]
 8000948:	4806      	ldr	r0, [pc, #24]	@ (8000964 <StartProducerTask+0x64>)
 800094a:	f005 fd5f 	bl	800640c <iprintf>
	    osDelay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000952:	f002 fa45 	bl	8002de0 <osDelay>
		printf("ProducerTask Start\r\n");
 8000956:	e7db      	b.n	8000910 <StartProducerTask+0x10>
 8000958:	080072d0 	.word	0x080072d0
 800095c:	080072e4 	.word	0x080072e4
 8000960:	200000dc 	.word	0x200000dc
 8000964:	080072f4 	.word	0x080072f4

08000968 <StartConsumerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsumerTask */
void StartConsumerTask(void *argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConsumerTask */
	  uint16_t valueRec = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	817b      	strh	r3, [r7, #10]
	  osStatus_t statusReceiver = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
	  /* Infinite loop */
	  for(;;)
	  {
		  statusReceiver = osMessageQueueGet(abcQueue01Handle, &valueRec, NULL, osWaitForever);
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <StartConsumerTask+0x3c>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	f107 010a 	add.w	r1, r7, #10
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	2200      	movs	r2, #0
 8000986:	f002 fc4f 	bl	8003228 <osMessageQueueGet>
 800098a:	60f8      	str	r0, [r7, #12]
		printf("Received value: %d \r\n", valueRec);
 800098c:	897b      	ldrh	r3, [r7, #10]
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <StartConsumerTask+0x40>)
 8000992:	f005 fd3b 	bl	800640c <iprintf>
	    osDelay(1000);
 8000996:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800099a:	f002 fa21 	bl	8002de0 <osDelay>
		  statusReceiver = osMessageQueueGet(abcQueue01Handle, &valueRec, NULL, osWaitForever);
 800099e:	bf00      	nop
 80009a0:	e7ea      	b.n	8000978 <StartConsumerTask+0x10>
 80009a2:	bf00      	nop
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	08007308 	.word	0x08007308

080009ac <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
	  for(;;)
	  {
		  osEventFlagsWait(myEventFlags, 0x1, osFlagsWaitAll, osWaitForever);
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <StartLedTask+0x44>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	f002 faf9 	bl	8002fb6 <osEventFlagsWait>
		  for(int i = 0; i<10; i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e009      	b.n	80009de <StartLedTask+0x32>
		  {
			  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009ca:	2120      	movs	r1, #32
 80009cc:	4809      	ldr	r0, [pc, #36]	@ (80009f4 <StartLedTask+0x48>)
 80009ce:	f000 fd28 	bl	8001422 <HAL_GPIO_TogglePin>
			  HAL_Delay(50);
 80009d2:	2032      	movs	r0, #50	@ 0x32
 80009d4:	f000 fa72 	bl	8000ebc <HAL_Delay>
		  for(int i = 0; i<10; i++)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2b09      	cmp	r3, #9
 80009e2:	ddf2      	ble.n	80009ca <StartLedTask+0x1e>
		  }
	    osDelay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e8:	f002 f9fa 	bl	8002de0 <osDelay>
		  osEventFlagsWait(myEventFlags, 0x1, osFlagsWaitAll, osWaitForever);
 80009ec:	e7e2      	b.n	80009b4 <StartLedTask+0x8>
 80009ee:	bf00      	nop
 80009f0:	200000e4 	.word	0x200000e4
 80009f4:	40020000 	.word	0x40020000

080009f8 <Callback01>:
  /* USER CODE END StartLedTask */
}

/* Callback01 function */
void Callback01(void *argument)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a1e:	f000 fa2d 	bl	8000e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40000c00 	.word	0x40000c00

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	f06f 0001 	mvn.w	r0, #1
 8000a82:	f000 faf7 	bl	8001074 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <HAL_UART_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <HAL_UART_MspInit+0x8c>)
 8000b0a:	f000 fadd 	bl	80010c8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	@ 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	4a32      	ldr	r2, [pc, #200]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b44:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b50:	f107 0210 	add.w	r2, r7, #16
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fdba 	bl	80016d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b6a:	f000 fd8b 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8000b6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b70:	e004      	b.n	8000b7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b72:	f000 fd87 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8000b76:	4603      	mov	r3, r0
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b7e:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <HAL_InitTick+0xe8>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	0c9b      	lsrs	r3, r3, #18
 8000b86:	3b01      	subs	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <HAL_InitTick+0xf0>)
 8000b8e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b96:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b98:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b9c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <HAL_InitTick+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_InitTick+0xec>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000bb0:	4817      	ldr	r0, [pc, #92]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bb2:	f001 fa8f 	bl	80020d4 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d11b      	bne.n	8000bfc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000bc4:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bc6:	f001 fadf 	bl	8002188 <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d111      	bne.n	8000bfc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bd8:	2032      	movs	r0, #50	@ 0x32
 8000bda:	f000 fa67 	bl	80010ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d808      	bhi.n	8000bf6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2032      	movs	r0, #50	@ 0x32
 8000bea:	f000 fa43 	bl	8001074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0xf4>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e002      	b.n	8000bfc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3738      	adds	r7, #56	@ 0x38
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	200000e8 	.word	0x200000e8
 8000c14:	40000c00 	.word	0x40000c00
 8000c18:	20000004 	.word	0x20000004

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000c56:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c5a:	f000 fbfd 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <TIM5_IRQHandler+0x10>)
 8000c6a:	f001 fafd 	bl	8002268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000e8 	.word	0x200000e8

08000c78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e00a      	b.n	8000ca0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8a:	f3af 8000 	nop.w
 8000c8e:	4601      	mov	r1, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	b2ca      	uxtb	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf0      	blt.n	8000c8a <_read+0x12>
  }

  return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e009      	b.n	8000cd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fcac 	bl	800062a <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf1      	blt.n	8000cc4 <_write+0x12>
  }
  return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_close>:

int _close(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d12:	605a      	str	r2, [r3, #4]
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_isatty>:

int _isatty(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f005 fd36 	bl	80067f4 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20020000 	.word	0x20020000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	20000130 	.word	0x20000130
 8000dbc:	20004c70 	.word	0x20004c70

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de8:	f7ff ffea 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f005 fcf5 	bl	8006800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fc15 	bl	8000644 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e28:	08007428 	.word	0x08007428
  ldr r2, =_sbss
 8000e2c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e30:	20004c6c 	.word	0x20004c6c

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f8fc 	bl	800105e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	200f      	movs	r0, #15
 8000e68:	f7ff fe5c 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fde6 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000134 	.word	0x20000134

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000134 	.word	0x20000134

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008

08000f04 <__NVIC_SetPriorityGrouping>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	@ (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	@ 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff4c 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001086:	f7ff ff61 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 800108a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	6978      	ldr	r0, [r7, #20]
 8001092:	f7ff ffb1 	bl	8000ff8 <NVIC_EncodePriority>
 8001096:	4602      	mov	r2, r0
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff80 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff54 	bl	8000f68 <__NVIC_EnableIRQ>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e165      	b.n	80013b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 8154 	bne.w	80013aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d005      	beq.n	800111a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	2b02      	cmp	r3, #2
 8001118:	d130      	bne.n	800117c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b03      	cmp	r3, #3
 8001186:	d017      	beq.n	80011b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d123      	bne.n	800120c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	69b9      	ldr	r1, [r7, #24]
 8001208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0203 	and.w	r2, r3, #3
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80ae 	beq.w	80013aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b5d      	ldr	r3, [pc, #372]	@ (80013c8 <HAL_GPIO_Init+0x300>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	4a5c      	ldr	r2, [pc, #368]	@ (80013c8 <HAL_GPIO_Init+0x300>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125c:	6453      	str	r3, [r2, #68]	@ 0x44
 800125e:	4b5a      	ldr	r3, [pc, #360]	@ (80013c8 <HAL_GPIO_Init+0x300>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126a:	4a58      	ldr	r2, [pc, #352]	@ (80013cc <HAL_GPIO_Init+0x304>)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4f      	ldr	r2, [pc, #316]	@ (80013d0 <HAL_GPIO_Init+0x308>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d025      	beq.n	80012e2 <HAL_GPIO_Init+0x21a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4e      	ldr	r2, [pc, #312]	@ (80013d4 <HAL_GPIO_Init+0x30c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d01f      	beq.n	80012de <HAL_GPIO_Init+0x216>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4d      	ldr	r2, [pc, #308]	@ (80013d8 <HAL_GPIO_Init+0x310>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x212>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	@ (80013dc <HAL_GPIO_Init+0x314>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x20e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4b      	ldr	r2, [pc, #300]	@ (80013e0 <HAL_GPIO_Init+0x318>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x20a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4a      	ldr	r2, [pc, #296]	@ (80013e4 <HAL_GPIO_Init+0x31c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x206>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a49      	ldr	r2, [pc, #292]	@ (80013e8 <HAL_GPIO_Init+0x320>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x202>
 80012c6:	2306      	movs	r3, #6
 80012c8:	e00c      	b.n	80012e4 <HAL_GPIO_Init+0x21c>
 80012ca:	2307      	movs	r3, #7
 80012cc:	e00a      	b.n	80012e4 <HAL_GPIO_Init+0x21c>
 80012ce:	2305      	movs	r3, #5
 80012d0:	e008      	b.n	80012e4 <HAL_GPIO_Init+0x21c>
 80012d2:	2304      	movs	r3, #4
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x21c>
 80012d6:	2303      	movs	r3, #3
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x21c>
 80012da:	2302      	movs	r3, #2
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x21c>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x21c>
 80012e2:	2300      	movs	r3, #0
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	f002 0203 	and.w	r2, r2, #3
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f4:	4935      	ldr	r1, [pc, #212]	@ (80013cc <HAL_GPIO_Init+0x304>)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <HAL_GPIO_Init+0x324>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001326:	4a31      	ldr	r2, [pc, #196]	@ (80013ec <HAL_GPIO_Init+0x324>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132c:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <HAL_GPIO_Init+0x324>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001350:	4a26      	ldr	r2, [pc, #152]	@ (80013ec <HAL_GPIO_Init+0x324>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001356:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <HAL_GPIO_Init+0x324>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <HAL_GPIO_Init+0x324>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <HAL_GPIO_Init+0x324>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a4:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <HAL_GPIO_Init+0x324>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	f67f ae96 	bls.w	80010e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40013800 	.word	0x40013800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40021400 	.word	0x40021400
 80013e8:	40021800 	.word	0x40021800
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001434:	887a      	ldrh	r2, [r7, #2]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	041a      	lsls	r2, r3, #16
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43d9      	mvns	r1, r3
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	400b      	ands	r3, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f806 	bl	8001488 <HAL_GPIO_EXTI_Callback>
  }
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0cc      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b68      	ldr	r3, [pc, #416]	@ (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d90c      	bls.n	80014dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b65      	ldr	r3, [pc, #404]	@ (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b63      	ldr	r3, [pc, #396]	@ (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0b8      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f4:	4b59      	ldr	r3, [pc, #356]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a58      	ldr	r2, [pc, #352]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800150c:	4b53      	ldr	r3, [pc, #332]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a52      	ldr	r2, [pc, #328]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b50      	ldr	r3, [pc, #320]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	494d      	ldr	r1, [pc, #308]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d044      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b47      	ldr	r3, [pc, #284]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d119      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e07f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d003      	beq.n	800155e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155a:	2b03      	cmp	r3, #3
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b3f      	ldr	r3, [pc, #252]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e06f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e067      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4b37      	ldr	r3, [pc, #220]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 0203 	bic.w	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4934      	ldr	r1, [pc, #208]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff fc88 	bl	8000ea4 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff fc84 	bl	8000ea4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e04f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d20c      	bcs.n	80015e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e032      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4916      	ldr	r1, [pc, #88]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	490e      	ldr	r1, [pc, #56]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001626:	f000 f887 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 800162a:	4602      	mov	r2, r0
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	490a      	ldr	r1, [pc, #40]	@ (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	5ccb      	ldrb	r3, [r1, r3]
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fa6c 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00
 800165c:	40023800 	.word	0x40023800
 8001660:	080073cc 	.word	0x080073cc
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <HAL_RCC_GetHCLKFreq+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000

08001684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001688:	f7ff fff0 	bl	800166c <HAL_RCC_GetHCLKFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	0a9b      	lsrs	r3, r3, #10
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	4903      	ldr	r1, [pc, #12]	@ (80016a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	080073dc 	.word	0x080073dc

080016ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016b0:	f7ff ffdc 	bl	800166c <HAL_RCC_GetHCLKFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	0b5b      	lsrs	r3, r3, #13
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	4903      	ldr	r1, [pc, #12]	@ (80016d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	080073dc 	.word	0x080073dc

080016d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	220f      	movs	r2, #15
 80016e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_RCC_GetClockConfig+0x5c>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0203 	and.w	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_RCC_GetClockConfig+0x5c>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_RCC_GetClockConfig+0x5c>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_RCC_GetClockConfig+0x5c>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <HAL_RCC_GetClockConfig+0x60>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 020f 	and.w	r2, r3, #15
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	601a      	str	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40023c00 	.word	0x40023c00

08001738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800173c:	b0ae      	sub	sp, #184	@ 0xb8
 800173e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800175e:	4bcb      	ldr	r3, [pc, #812]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b0c      	cmp	r3, #12
 8001768:	f200 8206 	bhi.w	8001b78 <HAL_RCC_GetSysClockFreq+0x440>
 800176c:	a201      	add	r2, pc, #4	@ (adr r2, 8001774 <HAL_RCC_GetSysClockFreq+0x3c>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	080017a9 	.word	0x080017a9
 8001778:	08001b79 	.word	0x08001b79
 800177c:	08001b79 	.word	0x08001b79
 8001780:	08001b79 	.word	0x08001b79
 8001784:	080017b1 	.word	0x080017b1
 8001788:	08001b79 	.word	0x08001b79
 800178c:	08001b79 	.word	0x08001b79
 8001790:	08001b79 	.word	0x08001b79
 8001794:	080017b9 	.word	0x080017b9
 8001798:	08001b79 	.word	0x08001b79
 800179c:	08001b79 	.word	0x08001b79
 80017a0:	08001b79 	.word	0x08001b79
 80017a4:	080019a9 	.word	0x080019a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x358>)
 80017aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ae:	e1e7      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017b6:	e1e3      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b8:	4bb4      	ldr	r3, [pc, #720]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c4:	4bb1      	ldr	r3, [pc, #708]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d071      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d0:	4bae      	ldr	r3, [pc, #696]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	2200      	movs	r2, #0
 80017d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80017dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80017e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80017f6:	4622      	mov	r2, r4
 80017f8:	462b      	mov	r3, r5
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	0159      	lsls	r1, r3, #5
 8001804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001808:	0150      	lsls	r0, r2, #5
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4621      	mov	r1, r4
 8001810:	1a51      	subs	r1, r2, r1
 8001812:	6439      	str	r1, [r7, #64]	@ 0x40
 8001814:	4629      	mov	r1, r5
 8001816:	eb63 0301 	sbc.w	r3, r3, r1
 800181a:	647b      	str	r3, [r7, #68]	@ 0x44
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001828:	4649      	mov	r1, r9
 800182a:	018b      	lsls	r3, r1, #6
 800182c:	4641      	mov	r1, r8
 800182e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001832:	4641      	mov	r1, r8
 8001834:	018a      	lsls	r2, r1, #6
 8001836:	4641      	mov	r1, r8
 8001838:	1a51      	subs	r1, r2, r1
 800183a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800183c:	4649      	mov	r1, r9
 800183e:	eb63 0301 	sbc.w	r3, r3, r1
 8001842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001850:	4649      	mov	r1, r9
 8001852:	00cb      	lsls	r3, r1, #3
 8001854:	4641      	mov	r1, r8
 8001856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800185a:	4641      	mov	r1, r8
 800185c:	00ca      	lsls	r2, r1, #3
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	4603      	mov	r3, r0
 8001864:	4622      	mov	r2, r4
 8001866:	189b      	adds	r3, r3, r2
 8001868:	633b      	str	r3, [r7, #48]	@ 0x30
 800186a:	462b      	mov	r3, r5
 800186c:	460a      	mov	r2, r1
 800186e:	eb42 0303 	adc.w	r3, r2, r3
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001880:	4629      	mov	r1, r5
 8001882:	024b      	lsls	r3, r1, #9
 8001884:	4621      	mov	r1, r4
 8001886:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800188a:	4621      	mov	r1, r4
 800188c:	024a      	lsls	r2, r1, #9
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001896:	2200      	movs	r2, #0
 8001898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800189c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018a4:	f7fe fd04 	bl	80002b0 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018b2:	e067      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b4:	4b75      	ldr	r3, [pc, #468]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	2200      	movs	r2, #0
 80018bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018ce:	2300      	movs	r3, #0
 80018d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018d6:	4622      	mov	r2, r4
 80018d8:	462b      	mov	r3, r5
 80018da:	f04f 0000 	mov.w	r0, #0
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	0159      	lsls	r1, r3, #5
 80018e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e8:	0150      	lsls	r0, r2, #5
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4621      	mov	r1, r4
 80018f0:	1a51      	subs	r1, r2, r1
 80018f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80018f4:	4629      	mov	r1, r5
 80018f6:	eb63 0301 	sbc.w	r3, r3, r1
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001908:	4649      	mov	r1, r9
 800190a:	018b      	lsls	r3, r1, #6
 800190c:	4641      	mov	r1, r8
 800190e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001912:	4641      	mov	r1, r8
 8001914:	018a      	lsls	r2, r1, #6
 8001916:	4641      	mov	r1, r8
 8001918:	ebb2 0a01 	subs.w	sl, r2, r1
 800191c:	4649      	mov	r1, r9
 800191e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800192e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001932:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001936:	4692      	mov	sl, r2
 8001938:	469b      	mov	fp, r3
 800193a:	4623      	mov	r3, r4
 800193c:	eb1a 0303 	adds.w	r3, sl, r3
 8001940:	623b      	str	r3, [r7, #32]
 8001942:	462b      	mov	r3, r5
 8001944:	eb4b 0303 	adc.w	r3, fp, r3
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001956:	4629      	mov	r1, r5
 8001958:	028b      	lsls	r3, r1, #10
 800195a:	4621      	mov	r1, r4
 800195c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001960:	4621      	mov	r1, r4
 8001962:	028a      	lsls	r2, r1, #10
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800196c:	2200      	movs	r2, #0
 800196e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001970:	677a      	str	r2, [r7, #116]	@ 0x74
 8001972:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001976:	f7fe fc9b 	bl	80002b0 <__aeabi_uldivmod>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4613      	mov	r3, r2
 8001980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001984:	4b41      	ldr	r3, [pc, #260]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800199a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019a6:	e0eb      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b4:	4b35      	ldr	r3, [pc, #212]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d06b      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c0:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x354>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	2200      	movs	r2, #0
 80019c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80019d4:	2300      	movs	r3, #0
 80019d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80019d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019dc:	4622      	mov	r2, r4
 80019de:	462b      	mov	r3, r5
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	0159      	lsls	r1, r3, #5
 80019ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ee:	0150      	lsls	r0, r2, #5
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4621      	mov	r1, r4
 80019f6:	1a51      	subs	r1, r2, r1
 80019f8:	61b9      	str	r1, [r7, #24]
 80019fa:	4629      	mov	r1, r5
 80019fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a0e:	4659      	mov	r1, fp
 8001a10:	018b      	lsls	r3, r1, #6
 8001a12:	4651      	mov	r1, sl
 8001a14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a18:	4651      	mov	r1, sl
 8001a1a:	018a      	lsls	r2, r1, #6
 8001a1c:	4651      	mov	r1, sl
 8001a1e:	ebb2 0801 	subs.w	r8, r2, r1
 8001a22:	4659      	mov	r1, fp
 8001a24:	eb63 0901 	sbc.w	r9, r3, r1
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	4699      	mov	r9, r3
 8001a40:	4623      	mov	r3, r4
 8001a42:	eb18 0303 	adds.w	r3, r8, r3
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	462b      	mov	r3, r5
 8001a4a:	eb49 0303 	adc.w	r3, r9, r3
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	024b      	lsls	r3, r1, #9
 8001a60:	4621      	mov	r1, r4
 8001a62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a66:	4621      	mov	r1, r4
 8001a68:	024a      	lsls	r2, r1, #9
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a72:	2200      	movs	r2, #0
 8001a74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a76:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a7c:	f7fe fc18 	bl	80002b0 <__aeabi_uldivmod>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4613      	mov	r3, r2
 8001a86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a8a:	e065      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x420>
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	00f42400 	.word	0x00f42400
 8001a94:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a98:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aaa:	2300      	movs	r3, #0
 8001aac:	657b      	str	r3, [r7, #84]	@ 0x54
 8001aae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	464b      	mov	r3, r9
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	0159      	lsls	r1, r3, #5
 8001ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac4:	0150      	lsls	r0, r2, #5
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4641      	mov	r1, r8
 8001acc:	1a51      	subs	r1, r2, r1
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ae4:	4659      	mov	r1, fp
 8001ae6:	018b      	lsls	r3, r1, #6
 8001ae8:	4651      	mov	r1, sl
 8001aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aee:	4651      	mov	r1, sl
 8001af0:	018a      	lsls	r2, r1, #6
 8001af2:	4651      	mov	r1, sl
 8001af4:	1a54      	subs	r4, r2, r1
 8001af6:	4659      	mov	r1, fp
 8001af8:	eb63 0501 	sbc.w	r5, r3, r1
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	18e3      	adds	r3, r4, r3
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	464b      	mov	r3, r9
 8001b18:	eb45 0303 	adc.w	r3, r5, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	028b      	lsls	r3, r1, #10
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b34:	4621      	mov	r1, r4
 8001b36:	028a      	lsls	r2, r1, #10
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b40:	2200      	movs	r2, #0
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b44:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b4a:	f7fe fbb1 	bl	80002b0 <__aeabi_uldivmod>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4613      	mov	r3, r2
 8001b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b58:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	0f1b      	lsrs	r3, r3, #28
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b76:	e003      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	37b8      	adds	r7, #184	@ 0xb8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	00f42400 	.word	0x00f42400

08001b98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e28d      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8083 	beq.w	8001cbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bb8:	4b94      	ldr	r3, [pc, #592]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d019      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bc4:	4b91      	ldr	r3, [pc, #580]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bd0:	4b8e      	ldr	r3, [pc, #568]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bdc:	d00c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bde:	4b8b      	ldr	r3, [pc, #556]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d112      	bne.n	8001c10 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bea:	4b88      	ldr	r3, [pc, #544]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bf6:	d10b      	bne.n	8001c10 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	4b84      	ldr	r3, [pc, #528]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d05b      	beq.n	8001cbc <HAL_RCC_OscConfig+0x124>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d157      	bne.n	8001cbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e25a      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_OscConfig+0x90>
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0xcc>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0xb4>
 8001c32:	4b76      	ldr	r3, [pc, #472]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b73      	ldr	r3, [pc, #460]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a72      	ldr	r2, [pc, #456]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0xcc>
 8001c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a6e      	ldr	r2, [pc, #440]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b6c      	ldr	r3, [pc, #432]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f91a 	bl	8000ea4 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff f916 	bl	8000ea4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	@ 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e21f      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b61      	ldr	r3, [pc, #388]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0xdc>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f906 	bl	8000ea4 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f902 	bl	8000ea4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e20b      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	4b57      	ldr	r3, [pc, #348]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x104>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d06f      	beq.n	8001daa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cca:	4b50      	ldr	r3, [pc, #320]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d017      	beq.n	8001d06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
        || \
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d105      	bne.n	8001cee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfa:	4b44      	ldr	r3, [pc, #272]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b41      	ldr	r3, [pc, #260]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x186>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1d3      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4937      	ldr	r1, [pc, #220]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <HAL_RCC_OscConfig+0x278>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff f8af 	bl	8000ea4 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f8ab 	bl	8000ea4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1b4      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4925      	ldr	r1, [pc, #148]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <HAL_RCC_OscConfig+0x278>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff f88e 	bl	8000ea4 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f88a 	bl	8000ea4 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e193      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d036      	beq.n	8001e24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d016      	beq.n	8001dec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f86e 	bl	8000ea4 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f86a 	bl	8000ea4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e173      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x234>
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7ff f857 	bl	8000ea4 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	e00e      	b.n	8001e18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f853 	bl	8000ea4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d907      	bls.n	8001e18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e15c      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	42470000 	.word	0x42470000
 8001e14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b8a      	ldr	r3, [pc, #552]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ea      	bne.n	8001dfa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8097 	beq.w	8001f60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b83      	ldr	r3, [pc, #524]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	4b7f      	ldr	r3, [pc, #508]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e52:	4b7c      	ldr	r3, [pc, #496]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b79      	ldr	r3, [pc, #484]	@ (8002048 <HAL_RCC_OscConfig+0x4b0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b76      	ldr	r3, [pc, #472]	@ (8002048 <HAL_RCC_OscConfig+0x4b0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a75      	ldr	r2, [pc, #468]	@ (8002048 <HAL_RCC_OscConfig+0x4b0>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f813 	bl	8000ea4 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff f80f 	bl	8000ea4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e118      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b6c      	ldr	r3, [pc, #432]	@ (8002048 <HAL_RCC_OscConfig+0x4b0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x31e>
 8001ea8:	4b66      	ldr	r3, [pc, #408]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eac:	4a65      	ldr	r2, [pc, #404]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x358>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x340>
 8001ebe:	4b61      	ldr	r3, [pc, #388]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec2:	4a60      	ldr	r2, [pc, #384]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eca:	4b5e      	ldr	r3, [pc, #376]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ece:	4a5d      	ldr	r2, [pc, #372]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x358>
 8001ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001edc:	4a59      	ldr	r2, [pc, #356]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee4:	4b57      	ldr	r3, [pc, #348]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee8:	4a56      	ldr	r2, [pc, #344]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001eea:	f023 0304 	bic.w	r3, r3, #4
 8001eee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d015      	beq.n	8001f24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7fe ffd4 	bl	8000ea4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe ffd0 	bl	8000ea4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0d7      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	4b4b      	ldr	r3, [pc, #300]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ee      	beq.n	8001f00 <HAL_RCC_OscConfig+0x368>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7fe ffbe 	bl	8000ea4 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7fe ffba 	bl	8000ea4 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0c1      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	4b40      	ldr	r3, [pc, #256]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ee      	bne.n	8001f2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b3b      	ldr	r3, [pc, #236]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	4a3a      	ldr	r2, [pc, #232]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80ad 	beq.w	80020c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6a:	4b36      	ldr	r3, [pc, #216]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d060      	beq.n	8002038 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d145      	bne.n	800200a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b33      	ldr	r3, [pc, #204]	@ (800204c <HAL_RCC_OscConfig+0x4b4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe ff8e 	bl	8000ea4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe ff8a 	bl	8000ea4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e093      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b29      	ldr	r3, [pc, #164]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	071b      	lsls	r3, r3, #28
 8001fd6:	491b      	ldr	r1, [pc, #108]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x4b4>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe2:	f7fe ff5f 	bl	8000ea4 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe ff5b 	bl	8000ea4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e064      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x452>
 8002008:	e05c      	b.n	80020c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_RCC_OscConfig+0x4b4>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe ff48 	bl	8000ea4 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe ff44 	bl	8000ea4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e04d      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_RCC_OscConfig+0x4ac>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x480>
 8002036:	e045      	b.n	80020c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e040      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
 8002044:	40023800 	.word	0x40023800
 8002048:	40007000 	.word	0x40007000
 800204c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_RCC_OscConfig+0x538>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d030      	beq.n	80020c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d129      	bne.n	80020c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d122      	bne.n	80020c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002088:	4293      	cmp	r3, r2
 800208a:	d119      	bne.n	80020c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	3b01      	subs	r3, #1
 800209a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d10f      	bne.n	80020c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e041      	b.n	800216a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f839 	bl	8002172 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3304      	adds	r3, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f000 f9c0 	bl	8002498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d001      	beq.n	80021a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e04e      	b.n	800223e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a23      	ldr	r2, [pc, #140]	@ (800224c <HAL_TIM_Base_Start_IT+0xc4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d022      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x80>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ca:	d01d      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x80>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002250 <HAL_TIM_Base_Start_IT+0xc8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d018      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x80>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1e      	ldr	r2, [pc, #120]	@ (8002254 <HAL_TIM_Base_Start_IT+0xcc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x80>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002258 <HAL_TIM_Base_Start_IT+0xd0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00e      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x80>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1b      	ldr	r2, [pc, #108]	@ (800225c <HAL_TIM_Base_Start_IT+0xd4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d009      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x80>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	@ (8002260 <HAL_TIM_Base_Start_IT+0xd8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d004      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x80>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a18      	ldr	r2, [pc, #96]	@ (8002264 <HAL_TIM_Base_Start_IT+0xdc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d111      	bne.n	800222c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d010      	beq.n	800223c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222a:	e007      	b.n	800223c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800
 8002258:	40000c00 	.word	0x40000c00
 800225c:	40010400 	.word	0x40010400
 8002260:	40014000 	.word	0x40014000
 8002264:	40001800 	.word	0x40001800

08002268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0202 	mvn.w	r2, #2
 800229c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8d2 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8c4 	bl	8002448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f8d5 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d020      	beq.n	8002318 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0204 	mvn.w	r2, #4
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8ac 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f89e 	bl	8002448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f8af 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d020      	beq.n	8002364 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0208 	mvn.w	r2, #8
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f886 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f878 	bl	8002448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f889 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d020      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01b      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0210 	mvn.w	r2, #16
 8002380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2208      	movs	r2, #8
 8002386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f860 	bl	800245c <HAL_TIM_IC_CaptureCallback>
 800239c:	e005      	b.n	80023aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f852 	bl	8002448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f863 	bl	8002470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0201 	mvn.w	r2, #1
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fb1c 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f906 	bl	8002604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00c      	beq.n	800241c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f834 	bl	8002484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0220 	mvn.w	r2, #32
 8002438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8d8 	bl	80025f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a46      	ldr	r2, [pc, #280]	@ (80025c4 <TIM_Base_SetConfig+0x12c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b6:	d00f      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a43      	ldr	r2, [pc, #268]	@ (80025c8 <TIM_Base_SetConfig+0x130>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00b      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a42      	ldr	r2, [pc, #264]	@ (80025cc <TIM_Base_SetConfig+0x134>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a41      	ldr	r2, [pc, #260]	@ (80025d0 <TIM_Base_SetConfig+0x138>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a40      	ldr	r2, [pc, #256]	@ (80025d4 <TIM_Base_SetConfig+0x13c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d108      	bne.n	80024ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a35      	ldr	r2, [pc, #212]	@ (80025c4 <TIM_Base_SetConfig+0x12c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d02b      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024f8:	d027      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a32      	ldr	r2, [pc, #200]	@ (80025c8 <TIM_Base_SetConfig+0x130>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d023      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a31      	ldr	r2, [pc, #196]	@ (80025cc <TIM_Base_SetConfig+0x134>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01f      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a30      	ldr	r2, [pc, #192]	@ (80025d0 <TIM_Base_SetConfig+0x138>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01b      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2f      	ldr	r2, [pc, #188]	@ (80025d4 <TIM_Base_SetConfig+0x13c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d017      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a2e      	ldr	r2, [pc, #184]	@ (80025d8 <TIM_Base_SetConfig+0x140>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2d      	ldr	r2, [pc, #180]	@ (80025dc <TIM_Base_SetConfig+0x144>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00f      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2c      	ldr	r2, [pc, #176]	@ (80025e0 <TIM_Base_SetConfig+0x148>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2b      	ldr	r2, [pc, #172]	@ (80025e4 <TIM_Base_SetConfig+0x14c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2a      	ldr	r2, [pc, #168]	@ (80025e8 <TIM_Base_SetConfig+0x150>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a29      	ldr	r2, [pc, #164]	@ (80025ec <TIM_Base_SetConfig+0x154>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a10      	ldr	r2, [pc, #64]	@ (80025c4 <TIM_Base_SetConfig+0x12c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <TIM_Base_SetConfig+0xf8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a12      	ldr	r2, [pc, #72]	@ (80025d4 <TIM_Base_SetConfig+0x13c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	611a      	str	r2, [r3, #16]
  }
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40010400 	.word	0x40010400
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40014400 	.word	0x40014400
 80025e0:	40014800 	.word	0x40014800
 80025e4:	40001800 	.word	0x40001800
 80025e8:	40001c00 	.word	0x40001c00
 80025ec:	40002000 	.word	0x40002000

080025f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e042      	b.n	80026b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fa28 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	@ 0x24
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800265a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f82b 	bl	80026b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026bc:	b0c0      	sub	sp, #256	@ 0x100
 80026be:	af00      	add	r7, sp, #0
 80026c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	ea40 0301 	orr.w	r3, r0, r1
 80026e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002710:	f021 010c 	bic.w	r1, r1, #12
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800271e:	430b      	orrs	r3, r1
 8002720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002732:	6999      	ldr	r1, [r3, #24]
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	ea40 0301 	orr.w	r3, r0, r1
 800273e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b8f      	ldr	r3, [pc, #572]	@ (8002984 <UART_SetConfig+0x2cc>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d005      	beq.n	8002758 <UART_SetConfig+0xa0>
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b8d      	ldr	r3, [pc, #564]	@ (8002988 <UART_SetConfig+0x2d0>)
 8002754:	429a      	cmp	r2, r3
 8002756:	d104      	bne.n	8002762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002758:	f7fe ffa8 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 800275c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002760:	e003      	b.n	800276a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002762:	f7fe ff8f 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8002766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002774:	f040 810c 	bne.w	8002990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800277c:	2200      	movs	r2, #0
 800277e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800278a:	4622      	mov	r2, r4
 800278c:	462b      	mov	r3, r5
 800278e:	1891      	adds	r1, r2, r2
 8002790:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002792:	415b      	adcs	r3, r3
 8002794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800279a:	4621      	mov	r1, r4
 800279c:	eb12 0801 	adds.w	r8, r2, r1
 80027a0:	4629      	mov	r1, r5
 80027a2:	eb43 0901 	adc.w	r9, r3, r1
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ba:	4690      	mov	r8, r2
 80027bc:	4699      	mov	r9, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	eb18 0303 	adds.w	r3, r8, r3
 80027c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027c8:	462b      	mov	r3, r5
 80027ca:	eb49 0303 	adc.w	r3, r9, r3
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027e6:	460b      	mov	r3, r1
 80027e8:	18db      	adds	r3, r3, r3
 80027ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ec:	4613      	mov	r3, r2
 80027ee:	eb42 0303 	adc.w	r3, r2, r3
 80027f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027fc:	f7fd fd58 	bl	80002b0 <__aeabi_uldivmod>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4b61      	ldr	r3, [pc, #388]	@ (800298c <UART_SetConfig+0x2d4>)
 8002806:	fba3 2302 	umull	r2, r3, r3, r2
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	011c      	lsls	r4, r3, #4
 800280e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800281c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002820:	4642      	mov	r2, r8
 8002822:	464b      	mov	r3, r9
 8002824:	1891      	adds	r1, r2, r2
 8002826:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002828:	415b      	adcs	r3, r3
 800282a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800282c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002830:	4641      	mov	r1, r8
 8002832:	eb12 0a01 	adds.w	sl, r2, r1
 8002836:	4649      	mov	r1, r9
 8002838:	eb43 0b01 	adc.w	fp, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800284c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002850:	4692      	mov	sl, r2
 8002852:	469b      	mov	fp, r3
 8002854:	4643      	mov	r3, r8
 8002856:	eb1a 0303 	adds.w	r3, sl, r3
 800285a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800285e:	464b      	mov	r3, r9
 8002860:	eb4b 0303 	adc.w	r3, fp, r3
 8002864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800287c:	460b      	mov	r3, r1
 800287e:	18db      	adds	r3, r3, r3
 8002880:	643b      	str	r3, [r7, #64]	@ 0x40
 8002882:	4613      	mov	r3, r2
 8002884:	eb42 0303 	adc.w	r3, r2, r3
 8002888:	647b      	str	r3, [r7, #68]	@ 0x44
 800288a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800288e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002892:	f7fd fd0d 	bl	80002b0 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4611      	mov	r1, r2
 800289c:	4b3b      	ldr	r3, [pc, #236]	@ (800298c <UART_SetConfig+0x2d4>)
 800289e:	fba3 2301 	umull	r2, r3, r3, r1
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2264      	movs	r2, #100	@ 0x64
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	1acb      	subs	r3, r1, r3
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028b2:	4b36      	ldr	r3, [pc, #216]	@ (800298c <UART_SetConfig+0x2d4>)
 80028b4:	fba3 2302 	umull	r2, r3, r3, r2
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028c0:	441c      	add	r4, r3
 80028c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028d4:	4642      	mov	r2, r8
 80028d6:	464b      	mov	r3, r9
 80028d8:	1891      	adds	r1, r2, r2
 80028da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028dc:	415b      	adcs	r3, r3
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028e4:	4641      	mov	r1, r8
 80028e6:	1851      	adds	r1, r2, r1
 80028e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028ea:	4649      	mov	r1, r9
 80028ec:	414b      	adcs	r3, r1
 80028ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028fc:	4659      	mov	r1, fp
 80028fe:	00cb      	lsls	r3, r1, #3
 8002900:	4651      	mov	r1, sl
 8002902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002906:	4651      	mov	r1, sl
 8002908:	00ca      	lsls	r2, r1, #3
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	4603      	mov	r3, r0
 8002910:	4642      	mov	r2, r8
 8002912:	189b      	adds	r3, r3, r2
 8002914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002918:	464b      	mov	r3, r9
 800291a:	460a      	mov	r2, r1
 800291c:	eb42 0303 	adc.w	r3, r2, r3
 8002920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002938:	460b      	mov	r3, r1
 800293a:	18db      	adds	r3, r3, r3
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800293e:	4613      	mov	r3, r2
 8002940:	eb42 0303 	adc.w	r3, r2, r3
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800294a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800294e:	f7fd fcaf 	bl	80002b0 <__aeabi_uldivmod>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <UART_SetConfig+0x2d4>)
 8002958:	fba3 1302 	umull	r1, r3, r3, r2
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	2164      	movs	r1, #100	@ 0x64
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	3332      	adds	r3, #50	@ 0x32
 800296a:	4a08      	ldr	r2, [pc, #32]	@ (800298c <UART_SetConfig+0x2d4>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	f003 0207 	and.w	r2, r3, #7
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4422      	add	r2, r4
 800297e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002980:	e106      	b.n	8002b90 <UART_SetConfig+0x4d8>
 8002982:	bf00      	nop
 8002984:	40011000 	.word	0x40011000
 8002988:	40011400 	.word	0x40011400
 800298c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002994:	2200      	movs	r2, #0
 8002996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800299a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800299e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029a2:	4642      	mov	r2, r8
 80029a4:	464b      	mov	r3, r9
 80029a6:	1891      	adds	r1, r2, r2
 80029a8:	6239      	str	r1, [r7, #32]
 80029aa:	415b      	adcs	r3, r3
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029b2:	4641      	mov	r1, r8
 80029b4:	1854      	adds	r4, r2, r1
 80029b6:	4649      	mov	r1, r9
 80029b8:	eb43 0501 	adc.w	r5, r3, r1
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	00eb      	lsls	r3, r5, #3
 80029c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ca:	00e2      	lsls	r2, r4, #3
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	18e3      	adds	r3, r4, r3
 80029d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029d8:	464b      	mov	r3, r9
 80029da:	eb45 0303 	adc.w	r3, r5, r3
 80029de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029fe:	4629      	mov	r1, r5
 8002a00:	008b      	lsls	r3, r1, #2
 8002a02:	4621      	mov	r1, r4
 8002a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a08:	4621      	mov	r1, r4
 8002a0a:	008a      	lsls	r2, r1, #2
 8002a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a10:	f7fd fc4e 	bl	80002b0 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4b60      	ldr	r3, [pc, #384]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	011c      	lsls	r4, r3, #4
 8002a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a34:	4642      	mov	r2, r8
 8002a36:	464b      	mov	r3, r9
 8002a38:	1891      	adds	r1, r2, r2
 8002a3a:	61b9      	str	r1, [r7, #24]
 8002a3c:	415b      	adcs	r3, r3
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a44:	4641      	mov	r1, r8
 8002a46:	1851      	adds	r1, r2, r1
 8002a48:	6139      	str	r1, [r7, #16]
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	414b      	adcs	r3, r1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	00cb      	lsls	r3, r1, #3
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a66:	4651      	mov	r1, sl
 8002a68:	00ca      	lsls	r2, r1, #3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4642      	mov	r2, r8
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a78:	464b      	mov	r3, r9
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	eb42 0303 	adc.w	r3, r2, r3
 8002a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	008b      	lsls	r3, r1, #2
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	008a      	lsls	r2, r1, #2
 8002aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002aae:	f7fd fbff 	bl	80002b0 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4b38      	ldr	r3, [pc, #224]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002aba:	fba3 2301 	umull	r2, r3, r3, r1
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2264      	movs	r2, #100	@ 0x64
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	1acb      	subs	r3, r1, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	@ 0x32
 8002acc:	4a33      	ldr	r2, [pc, #204]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad8:	441c      	add	r4, r3
 8002ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ade:	2200      	movs	r2, #0
 8002ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ae2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ae8:	4642      	mov	r2, r8
 8002aea:	464b      	mov	r3, r9
 8002aec:	1891      	adds	r1, r2, r2
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	415b      	adcs	r3, r3
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af8:	4641      	mov	r1, r8
 8002afa:	1851      	adds	r1, r2, r1
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	4649      	mov	r1, r9
 8002b00:	414b      	adcs	r3, r1
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b10:	4659      	mov	r1, fp
 8002b12:	00cb      	lsls	r3, r1, #3
 8002b14:	4651      	mov	r1, sl
 8002b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b1a:	4651      	mov	r1, sl
 8002b1c:	00ca      	lsls	r2, r1, #3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	4642      	mov	r2, r8
 8002b26:	189b      	adds	r3, r3, r2
 8002b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	460a      	mov	r2, r1
 8002b2e:	eb42 0303 	adc.w	r3, r2, r3
 8002b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	008b      	lsls	r3, r1, #2
 8002b50:	4641      	mov	r1, r8
 8002b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b56:	4641      	mov	r1, r8
 8002b58:	008a      	lsls	r2, r1, #2
 8002b5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b5e:	f7fd fba7 	bl	80002b0 <__aeabi_uldivmod>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002b68:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	2164      	movs	r1, #100	@ 0x64
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	3332      	adds	r3, #50	@ 0x32
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4422      	add	r2, r4
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b96:	46bd      	mov	sp, r7
 8002b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9c:	51eb851f 	.word	0x51eb851f

08002ba0 <__NVIC_SetPriority>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	@ (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	@ (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <SysTick_Handler+0x1c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bfc:	f002 f9f0 	bl	8004fe0 <xTaskGetSchedulerState>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c06:	f003 f8bf 	bl	8005d88 <xPortSysTickHandler>
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	f06f 0004 	mvn.w	r0, #4
 8002c1e:	f7ff ffbf 	bl	8002ba0 <__NVIC_SetPriority>
#endif
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c2e:	f3ef 8305 	mrs	r3, IPSR
 8002c32:	603b      	str	r3, [r7, #0]
  return(result);
 8002c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c3a:	f06f 0305 	mvn.w	r3, #5
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	e00c      	b.n	8002c5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <osKernelInitialize+0x44>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <osKernelInitialize+0x44>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	e002      	b.n	8002c5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c5c:	687b      	ldr	r3, [r7, #4]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000138 	.word	0x20000138

08002c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c76:	f3ef 8305 	mrs	r3, IPSR
 8002c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c82:	f06f 0305 	mvn.w	r3, #5
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	e010      	b.n	8002cac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <osKernelStart+0x48>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d109      	bne.n	8002ca6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c92:	f7ff ffbf 	bl	8002c14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c96:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <osKernelStart+0x48>)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c9c:	f001 fcfe 	bl	800469c <vTaskStartScheduler>
      stat = osOK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	e002      	b.n	8002cac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002cac:	687b      	ldr	r3, [r7, #4]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000138 	.word	0x20000138

08002cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	@ 0x38
 8002cc0:	af04      	add	r7, sp, #16
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ccc:	f3ef 8305 	mrs	r3, IPSR
 8002cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8002cd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d17e      	bne.n	8002dd6 <osThreadNew+0x11a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d07b      	beq.n	8002dd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ce2:	2318      	movs	r3, #24
 8002ce4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d045      	beq.n	8002d82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <osThreadNew+0x48>
        name = attr->name;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <osThreadNew+0x6e>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2b38      	cmp	r3, #56	@ 0x38
 8002d1c:	d805      	bhi.n	8002d2a <osThreadNew+0x6e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <osThreadNew+0x72>
        return (NULL);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e054      	b.n	8002dd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00e      	beq.n	8002d64 <osThreadNew+0xa8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2ba7      	cmp	r3, #167	@ 0xa7
 8002d4c:	d90a      	bls.n	8002d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <osThreadNew+0xa8>
        mem = 1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	e010      	b.n	8002d86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10c      	bne.n	8002d86 <osThreadNew+0xca>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d108      	bne.n	8002d86 <osThreadNew+0xca>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <osThreadNew+0xca>
          mem = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e001      	b.n	8002d86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d110      	bne.n	8002dae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d94:	9202      	str	r2, [sp, #8]
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	6a3a      	ldr	r2, [r7, #32]
 8002da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f001 fa86 	bl	80042b4 <xTaskCreateStatic>
 8002da8:	4603      	mov	r3, r0
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e013      	b.n	8002dd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d110      	bne.n	8002dd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f001 fad4 	bl	8004374 <xTaskCreate>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d001      	beq.n	8002dd6 <osThreadNew+0x11a>
            hTask = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002dd6:	693b      	ldr	r3, [r7, #16]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3728      	adds	r7, #40	@ 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002de8:	f3ef 8305 	mrs	r3, IPSR
 8002dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <osDelay+0x1c>
    stat = osErrorISR;
 8002df4:	f06f 0305 	mvn.w	r3, #5
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	e007      	b.n	8002e0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f001 fc12 	bl	8004630 <vTaskDelay>
    }
  }

  return (stat);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f002 fdd0 	bl	80059c4 <pvTimerGetTimerID>
 8002e24:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	6852      	ldr	r2, [r2, #4]
 8002e34:	4610      	mov	r0, r2
 8002e36:	4798      	blx	r3
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	@ 0x30
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e54:	f3ef 8305 	mrs	r3, IPSR
 8002e58:	613b      	str	r3, [r7, #16]
  return(result);
 8002e5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d163      	bne.n	8002f28 <osTimerNew+0xe8>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d060      	beq.n	8002f28 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002e66:	2008      	movs	r0, #8
 8002e68:	f003 f820 	bl	8005eac <pvPortMalloc>
 8002e6c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d059      	beq.n	8002f28 <osTimerNew+0xe8>
      callb->func = func;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002e80:	7afb      	ldrb	r3, [r7, #11]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <osTimerNew+0x4c>
        reload = pdFALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	e001      	b.n	8002e90 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01c      	beq.n	8002eda <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <osTimerNew+0x6e>
          name = attr->name;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <osTimerNew+0x84>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b2b      	cmp	r3, #43	@ 0x2b
 8002ebc:	d902      	bls.n	8002ec4 <osTimerNew+0x84>
          mem = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e00c      	b.n	8002ede <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <osTimerNew+0x9e>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d104      	bne.n	8002ede <osTimerNew+0x9e>
            mem = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	e001      	b.n	8002ede <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10c      	bne.n	8002efe <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	4b12      	ldr	r3, [pc, #72]	@ (8002f34 <osTimerNew+0xf4>)
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ef6:	f002 f9d8 	bl	80052aa <xTimerCreateStatic>
 8002efa:	6238      	str	r0, [r7, #32]
 8002efc:	e00b      	b.n	8002f16 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <osTimerNew+0xf4>)
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f10:	f002 f9aa 	bl	8005268 <xTimerCreate>
 8002f14:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <osTimerNew+0xe8>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <osTimerNew+0xe8>
        vPortFree (callb);
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f003 f890 	bl	8006048 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002f28:	6a3b      	ldr	r3, [r7, #32]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3728      	adds	r7, #40	@ 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	08002e17 	.word	0x08002e17

08002f38 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f44:	f3ef 8305 	mrs	r3, IPSR
 8002f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f4a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d12d      	bne.n	8002fac <osEventFlagsNew+0x74>
    mem = -1;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d015      	beq.n	8002f88 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <osEventFlagsNew+0x3a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b1f      	cmp	r3, #31
 8002f6a:	d902      	bls.n	8002f72 <osEventFlagsNew+0x3a>
        mem = 1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e00c      	b.n	8002f8c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d108      	bne.n	8002f8c <osEventFlagsNew+0x54>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <osEventFlagsNew+0x54>
          mem = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	e001      	b.n	8002f8c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d106      	bne.n	8002fa0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f9d8 	bl	800334c <xEventGroupCreateStatic>
 8002f9c:	6178      	str	r0, [r7, #20]
 8002f9e:	e005      	b.n	8002fac <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002fa6:	f000 fa0a 	bl	80033be <xEventGroupCreate>
 8002faa:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002fac:	697b      	ldr	r3, [r7, #20]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b08c      	sub	sp, #48	@ 0x30
 8002fba:	af02      	add	r7, sp, #8
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <osEventFlagsWait+0x20>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd4:	d303      	bcc.n	8002fde <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8002fd6:	f06f 0303 	mvn.w	r3, #3
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e04b      	b.n	8003076 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fde:	f3ef 8305 	mrs	r3, IPSR
 8002fe2:	617b      	str	r3, [r7, #20]
  return(result);
 8002fe4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8002fea:	f06f 0305 	mvn.w	r3, #5
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	e041      	b.n	8003076 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003000:	e001      	b.n	8003006 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8003010:	2300      	movs	r3, #0
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	e001      	b.n	800301a <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8003016:	2301      	movs	r3, #1
 8003018:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	69b8      	ldr	r0, [r7, #24]
 8003026:	f000 f9e5 	bl	80033f4 <xEventGroupWaitBits>
 800302a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4013      	ands	r3, r2
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d019      	beq.n	8003076 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8003048:	f06f 0301 	mvn.w	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	e012      	b.n	8003076 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003050:	f06f 0302 	mvn.w	r3, #2
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e00e      	b.n	8003076 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8003068:	f06f 0301 	mvn.w	r3, #1
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e002      	b.n	8003076 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8003070:	f06f 0302 	mvn.w	r3, #2
 8003074:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8003076:	69fb      	ldr	r3, [r7, #28]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3728      	adds	r7, #40	@ 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003090:	f3ef 8305 	mrs	r3, IPSR
 8003094:	613b      	str	r3, [r7, #16]
  return(result);
 8003096:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003098:	2b00      	cmp	r3, #0
 800309a:	d15f      	bne.n	800315c <osMessageQueueNew+0xdc>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d05c      	beq.n	800315c <osMessageQueueNew+0xdc>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d059      	beq.n	800315c <osMessageQueueNew+0xdc>
    mem = -1;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d029      	beq.n	8003108 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d012      	beq.n	80030e2 <osMessageQueueNew+0x62>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b4f      	cmp	r3, #79	@ 0x4f
 80030c2:	d90e      	bls.n	80030e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <osMessageQueueNew+0x62>
        mem = 1;
 80030dc:	2301      	movs	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	e014      	b.n	800310c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d110      	bne.n	800310c <osMessageQueueNew+0x8c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d108      	bne.n	800310c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d104      	bne.n	800310c <osMessageQueueNew+0x8c>
          mem = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e001      	b.n	800310c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10b      	bne.n	800312a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2100      	movs	r1, #0
 800311c:	9100      	str	r1, [sp, #0]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fb79 	bl	8003818 <xQueueGenericCreateStatic>
 8003126:	61f8      	str	r0, [r7, #28]
 8003128:	e008      	b.n	800313c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003130:	2200      	movs	r2, #0
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fbec 	bl	8003912 <xQueueGenericCreate>
 800313a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e001      	b.n	8003154 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003154:	6979      	ldr	r1, [r7, #20]
 8003156:	69f8      	ldr	r0, [r7, #28]
 8003158:	f001 f84e 	bl	80041f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800315c:	69fb      	ldr	r3, [r7, #28]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003180:	f3ef 8305 	mrs	r3, IPSR
 8003184:	617b      	str	r3, [r7, #20]
  return(result);
 8003186:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003188:	2b00      	cmp	r3, #0
 800318a:	d028      	beq.n	80031de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <osMessageQueuePut+0x36>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <osMessageQueuePut+0x36>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800319e:	f06f 0303 	mvn.w	r3, #3
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	e038      	b.n	8003218 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80031aa:	f107 0210 	add.w	r2, r7, #16
 80031ae:	2300      	movs	r3, #0
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	69b8      	ldr	r0, [r7, #24]
 80031b4:	f000 fd0e 	bl	8003bd4 <xQueueGenericSendFromISR>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d003      	beq.n	80031c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80031be:	f06f 0302 	mvn.w	r3, #2
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e028      	b.n	8003218 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d025      	beq.n	8003218 <osMessageQueuePut+0xb0>
 80031cc:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <osMessageQueuePut+0xbc>)
 80031ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	e01c      	b.n	8003218 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <osMessageQueuePut+0x82>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80031ea:	f06f 0303 	mvn.w	r3, #3
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	e012      	b.n	8003218 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80031f2:	2300      	movs	r3, #0
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	69b8      	ldr	r0, [r7, #24]
 80031fa:	f000 fbe9 	bl	80039d0 <xQueueGenericSend>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b01      	cmp	r3, #1
 8003202:	d009      	beq.n	8003218 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800320a:	f06f 0301 	mvn.w	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	e002      	b.n	8003218 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003212:	f06f 0302 	mvn.w	r3, #2
 8003216:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003218:	69fb      	ldr	r3, [r7, #28]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323e:	f3ef 8305 	mrs	r3, IPSR
 8003242:	617b      	str	r3, [r7, #20]
  return(result);
 8003244:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003246:	2b00      	cmp	r3, #0
 8003248:	d028      	beq.n	800329c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <osMessageQueueGet+0x34>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <osMessageQueueGet+0x34>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800325c:	f06f 0303 	mvn.w	r3, #3
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e037      	b.n	80032d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	461a      	mov	r2, r3
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	69b8      	ldr	r0, [r7, #24]
 8003272:	f000 fe2f 	bl	8003ed4 <xQueueReceiveFromISR>
 8003276:	4603      	mov	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d003      	beq.n	8003284 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800327c:	f06f 0302 	mvn.w	r3, #2
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e027      	b.n	80032d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d024      	beq.n	80032d4 <osMessageQueueGet+0xac>
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <osMessageQueueGet+0xb8>)
 800328c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	e01b      	b.n	80032d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <osMessageQueueGet+0x80>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80032a8:	f06f 0303 	mvn.w	r3, #3
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e011      	b.n	80032d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	69b8      	ldr	r0, [r7, #24]
 80032b6:	f000 fd2b 	bl	8003d10 <xQueueReceive>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d009      	beq.n	80032d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80032c6:	f06f 0301 	mvn.w	r3, #1
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	e002      	b.n	80032d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80032ce:	f06f 0302 	mvn.w	r3, #2
 80032d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80032d4:	69fb      	ldr	r3, [r7, #28]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a07      	ldr	r2, [pc, #28]	@ (8003310 <vApplicationGetIdleTaskMemory+0x2c>)
 80032f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4a06      	ldr	r2, [pc, #24]	@ (8003314 <vApplicationGetIdleTaskMemory+0x30>)
 80032fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2280      	movs	r2, #128	@ 0x80
 8003300:	601a      	str	r2, [r3, #0]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000013c 	.word	0x2000013c
 8003314:	200001e4 	.word	0x200001e4

08003318 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a07      	ldr	r2, [pc, #28]	@ (8003344 <vApplicationGetTimerTaskMemory+0x2c>)
 8003328:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4a06      	ldr	r2, [pc, #24]	@ (8003348 <vApplicationGetTimerTaskMemory+0x30>)
 800332e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003336:	601a      	str	r2, [r3, #0]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	200003e4 	.word	0x200003e4
 8003348:	2000048c 	.word	0x2000048c

0800334c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	e7fd      	b.n	800336e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003372:	2320      	movs	r3, #32
 8003374:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b20      	cmp	r3, #32
 800337a:	d00b      	beq.n	8003394 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	60fb      	str	r3, [r7, #12]
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f917 	bl	80035dc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2201      	movs	r2, #1
 80033b2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80033b4:	697b      	ldr	r3, [r7, #20]
	}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80033c4:	2020      	movs	r0, #32
 80033c6:	f002 fd71 	bl	8005eac <pvPortMalloc>
 80033ca:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 f8fd 	bl	80035dc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80033e8:	687b      	ldr	r3, [r7, #4]
	}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b090      	sub	sp, #64	@ 0x40
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800340a:	2300      	movs	r3, #0
 800340c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <xEventGroupWaitBits+0x38>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	623b      	str	r3, [r7, #32]
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003432:	d30b      	bcc.n	800344c <xEventGroupWaitBits+0x58>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	61fb      	str	r3, [r7, #28]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <xEventGroupWaitBits+0x76>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	61bb      	str	r3, [r7, #24]
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800346a:	f001 fdb9 	bl	8004fe0 <xTaskGetSchedulerState>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <xEventGroupWaitBits+0x86>
 8003474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <xEventGroupWaitBits+0x8a>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <xEventGroupWaitBits+0x8c>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	617b      	str	r3, [r7, #20]
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800349c:	f001 f96e 	bl	800477c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80034a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034ac:	f000 f874 	bl	8003598 <prvTestWaitCondition>
 80034b0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80034b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00e      	beq.n	80034d6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80034b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d028      	beq.n	8003518 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80034c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	401a      	ands	r2, r3
 80034d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e020      	b.n	8003518 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80034d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80034dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034de:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80034e0:	2301      	movs	r3, #1
 80034e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e4:	e018      	b.n	8003518 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80034ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80034fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003500:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003504:	1d18      	adds	r0, r3, #4
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350a:	4313      	orrs	r3, r2
 800350c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800350e:	4619      	mov	r1, r3
 8003510:	f001 fb36 	bl	8004b80 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003518:	f001 f93e 	bl	8004798 <xTaskResumeAll>
 800351c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800351e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003520:	2b00      	cmp	r3, #0
 8003522:	d031      	beq.n	8003588 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800352a:	4b1a      	ldr	r3, [pc, #104]	@ (8003594 <xEventGroupWaitBits+0x1a0>)
 800352c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800353a:	f001 fddf 	bl	80050fc <uxTaskResetEventItemValue>
 800353e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11a      	bne.n	8003580 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800354a:	f002 fb8d 	bl	8005c68 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800354e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800355a:	f000 f81d 	bl	8003598 <prvTestWaitCondition>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800356a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	43db      	mvns	r3, r3
 8003572:	401a      	ands	r2, r3
 8003574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003576:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800357c:	f002 fba6 	bl	8005ccc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003582:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003586:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800358a:	4618      	mov	r0, r3
 800358c:	3740      	adds	r7, #64	@ 0x40
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e007      	b.n	80035ce <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d101      	bne.n	80035ce <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80035ca:	2301      	movs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80035ce:	697b      	ldr	r3, [r7, #20]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f103 0208 	add.w	r2, r3, #8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f04f 32ff 	mov.w	r2, #4294967295
 80035f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f103 0208 	add.w	r2, r3, #8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f103 0208 	add.w	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	601a      	str	r2, [r3, #0]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d103      	bne.n	800369e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e00c      	b.n	80036b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3308      	adds	r3, #8
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e002      	b.n	80036ac <vListInsert+0x2e>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d2f6      	bcs.n	80036a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	601a      	str	r2, [r3, #0]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6852      	ldr	r2, [r2, #4]
 8003710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	d103      	bne.n	8003724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1e5a      	subs	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <xQueueGenericReset+0x2c>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60bb      	str	r3, [r7, #8]
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003770:	f002 fa7a 	bl	8005c68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	441a      	add	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a0:	3b01      	subs	r3, #1
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	22ff      	movs	r2, #255	@ 0xff
 80037b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	22ff      	movs	r2, #255	@ 0xff
 80037bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d114      	bne.n	80037f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01a      	beq.n	8003804 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3310      	adds	r3, #16
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fa3e 	bl	8004c54 <xTaskRemoveFromEventList>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d012      	beq.n	8003804 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <xQueueGenericReset+0xd0>)
 80037e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	e009      	b.n	8003804 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3310      	adds	r3, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fef1 	bl	80035dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3324      	adds	r3, #36	@ 0x24
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff feec 	bl	80035dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003804:	f002 fa62 	bl	8005ccc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003808:	2301      	movs	r3, #1
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08e      	sub	sp, #56	@ 0x38
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	e7fd      	b.n	800385e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <xQueueGenericCreateStatic+0x56>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <xQueueGenericCreateStatic+0x5a>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <xQueueGenericCreateStatic+0x5c>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	623b      	str	r3, [r7, #32]
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <xQueueGenericCreateStatic+0x84>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <xQueueGenericCreateStatic+0x88>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <xQueueGenericCreateStatic+0x8a>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	61fb      	str	r3, [r7, #28]
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	e7fd      	b.n	80038ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038be:	2350      	movs	r3, #80	@ 0x50
 80038c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b50      	cmp	r3, #80	@ 0x50
 80038c6:	d00b      	beq.n	80038e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61bb      	str	r3, [r7, #24]
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80038e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80038f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f840 	bl	8003988 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800390a:	4618      	mov	r0, r3
 800390c:	3730      	adds	r7, #48	@ 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08a      	sub	sp, #40	@ 0x28
 8003916:	af02      	add	r7, sp, #8
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	4613      	mov	r3, r2
 800391e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	613b      	str	r3, [r7, #16]
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	e7fd      	b.n	800393a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	3350      	adds	r3, #80	@ 0x50
 800394c:	4618      	mov	r0, r3
 800394e:	f002 faad 	bl	8005eac <pvPortMalloc>
 8003952:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d011      	beq.n	800397e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3350      	adds	r3, #80	@ 0x50
 8003962:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800396c:	79fa      	ldrb	r2, [r7, #7]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	4613      	mov	r3, r2
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f805 	bl	8003988 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800397e:	69bb      	ldr	r3, [r7, #24]
	}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e002      	b.n	80039aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039b6:	2101      	movs	r1, #1
 80039b8:	69b8      	ldr	r0, [r7, #24]
 80039ba:	f7ff fec3 	bl	8003744 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08e      	sub	sp, #56	@ 0x38
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039de:	2300      	movs	r3, #0
 80039e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <xQueueGenericSend+0x34>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039fe:	bf00      	nop
 8003a00:	bf00      	nop
 8003a02:	e7fd      	b.n	8003a00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <xQueueGenericSend+0x42>
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <xQueueGenericSend+0x46>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <xQueueGenericSend+0x48>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <xQueueGenericSend+0x64>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d103      	bne.n	8003a42 <xQueueGenericSend+0x72>
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <xQueueGenericSend+0x76>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <xQueueGenericSend+0x78>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <xQueueGenericSend+0x94>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	623b      	str	r3, [r7, #32]
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	e7fd      	b.n	8003a60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a64:	f001 fabc 	bl	8004fe0 <xTaskGetSchedulerState>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <xQueueGenericSend+0xa4>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <xQueueGenericSend+0xa8>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <xQueueGenericSend+0xaa>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <xQueueGenericSend+0xc6>
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	61fb      	str	r3, [r7, #28]
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	e7fd      	b.n	8003a92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a96:	f002 f8e7 	bl	8005c68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <xQueueGenericSend+0xdc>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d129      	bne.n	8003b00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ab2:	f000 fa91 	bl	8003fd8 <prvCopyDataToQueue>
 8003ab6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	3324      	adds	r3, #36	@ 0x24
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 f8c5 	bl	8004c54 <xTaskRemoveFromEventList>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd0 <xQueueGenericSend+0x200>)
 8003ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	e00a      	b.n	8003af8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ae8:	4b39      	ldr	r3, [pc, #228]	@ (8003bd0 <xQueueGenericSend+0x200>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003af8:	f002 f8e8 	bl	8005ccc <vPortExitCritical>
				return pdPASS;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e063      	b.n	8003bc8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b06:	f002 f8e1 	bl	8005ccc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e05c      	b.n	8003bc8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 f8ff 	bl	8004d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b22:	f002 f8d3 	bl	8005ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b26:	f000 fe29 	bl	800477c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2a:	f002 f89d 	bl	8005c68 <vPortEnterCritical>
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d103      	bne.n	8003b44 <xQueueGenericSend+0x174>
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <xQueueGenericSend+0x18a>
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b5a:	f002 f8b7 	bl	8005ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b5e:	1d3a      	adds	r2, r7, #4
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f8ee 	bl	8004d48 <xTaskCheckForTimeOut>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d124      	bne.n	8003bbc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b74:	f000 fb28 	bl	80041c8 <prvIsQueueFull>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	3310      	adds	r3, #16
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 ffd4 	bl	8004b34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b8e:	f000 fab3 	bl	80040f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b92:	f000 fe01 	bl	8004798 <xTaskResumeAll>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f47f af7c 	bne.w	8003a96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd0 <xQueueGenericSend+0x200>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	e772      	b.n	8003a96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bb2:	f000 faa1 	bl	80040f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bb6:	f000 fdef 	bl	8004798 <xTaskResumeAll>
 8003bba:	e76c      	b.n	8003a96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bbe:	f000 fa9b 	bl	80040f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc2:	f000 fde9 	bl	8004798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3738      	adds	r7, #56	@ 0x38
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b090      	sub	sp, #64	@ 0x40
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <xQueueGenericSendFromISR+0x3e>
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <xQueueGenericSendFromISR+0x42>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <xQueueGenericSendFromISR+0x44>
 8003c16:	2300      	movs	r3, #0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	e7fd      	b.n	8003c30 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d103      	bne.n	8003c42 <xQueueGenericSendFromISR+0x6e>
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <xQueueGenericSendFromISR+0x72>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <xQueueGenericSendFromISR+0x74>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	623b      	str	r3, [r7, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c64:	f002 f8e0 	bl	8005e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c68:	f3ef 8211 	mrs	r2, BASEPRI
 8003c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	61fa      	str	r2, [r7, #28]
 8003c7e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c80:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c82:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d302      	bcc.n	8003c96 <xQueueGenericSendFromISR+0xc2>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d12f      	bne.n	8003cf6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003cac:	f000 f994 	bl	8003fd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cb0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d112      	bne.n	8003ce0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	3324      	adds	r3, #36	@ 0x24
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 ffc4 	bl	8004c54 <xTaskRemoveFromEventList>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00e      	beq.n	8003cf0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e007      	b.n	8003cf0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	b25a      	sxtb	r2, r3
 8003cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003cf4:	e001      	b.n	8003cfa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3740      	adds	r7, #64	@ 0x40
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	@ 0x30
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <xQueueReceive+0x32>
	__asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	623b      	str	r3, [r7, #32]
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	e7fd      	b.n	8003d3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <xQueueReceive+0x40>
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <xQueueReceive+0x44>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <xQueueReceive+0x46>
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <xQueueReceive+0x62>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	61fb      	str	r3, [r7, #28]
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d72:	f001 f935 	bl	8004fe0 <xTaskGetSchedulerState>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <xQueueReceive+0x72>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <xQueueReceive+0x76>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <xQueueReceive+0x78>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <xQueueReceive+0x94>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	61bb      	str	r3, [r7, #24]
}
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	e7fd      	b.n	8003da0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003da4:	f001 ff60 	bl	8005c68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01f      	beq.n	8003df4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003db8:	f000 f978 	bl	80040ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	1e5a      	subs	r2, r3, #1
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00f      	beq.n	8003dec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dce:	3310      	adds	r3, #16
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 ff3f 	bl	8004c54 <xTaskRemoveFromEventList>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <xQueueReceive+0x1c0>)
 8003dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dec:	f001 ff6e 	bl	8005ccc <vPortExitCritical>
				return pdPASS;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e069      	b.n	8003ec8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dfa:	f001 ff67 	bl	8005ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e062      	b.n	8003ec8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e08:	f107 0310 	add.w	r3, r7, #16
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 ff85 	bl	8004d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e12:	2301      	movs	r3, #1
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e16:	f001 ff59 	bl	8005ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e1a:	f000 fcaf 	bl	800477c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e1e:	f001 ff23 	bl	8005c68 <vPortEnterCritical>
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e28:	b25b      	sxtb	r3, r3
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d103      	bne.n	8003e38 <xQueueReceive+0x128>
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e3e:	b25b      	sxtb	r3, r3
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d103      	bne.n	8003e4e <xQueueReceive+0x13e>
 8003e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e4e:	f001 ff3d 	bl	8005ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e52:	1d3a      	adds	r2, r7, #4
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 ff74 	bl	8004d48 <xTaskCheckForTimeOut>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d123      	bne.n	8003eae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e68:	f000 f998 	bl	800419c <prvIsQueueEmpty>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d017      	beq.n	8003ea2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	3324      	adds	r3, #36	@ 0x24
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fe5a 	bl	8004b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e82:	f000 f939 	bl	80040f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e86:	f000 fc87 	bl	8004798 <xTaskResumeAll>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d189      	bne.n	8003da4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003e90:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed0 <xQueueReceive+0x1c0>)
 8003e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	e780      	b.n	8003da4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ea4:	f000 f928 	bl	80040f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ea8:	f000 fc76 	bl	8004798 <xTaskResumeAll>
 8003eac:	e77a      	b.n	8003da4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eb0:	f000 f922 	bl	80040f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eb4:	f000 fc70 	bl	8004798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eba:	f000 f96f 	bl	800419c <prvIsQueueEmpty>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f43f af6f 	beq.w	8003da4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ec6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3730      	adds	r7, #48	@ 0x30
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	e000ed04 	.word	0xe000ed04

08003ed4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08e      	sub	sp, #56	@ 0x38
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	623b      	str	r3, [r7, #32]
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	e7fd      	b.n	8003efe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <xQueueReceiveFromISR+0x3c>
 8003f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <xQueueReceiveFromISR+0x40>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <xQueueReceiveFromISR+0x42>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	61fb      	str	r3, [r7, #28]
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	e7fd      	b.n	8003f2e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f32:	f001 ff79 	bl	8005e28 <vPortValidateInterruptPriority>
	__asm volatile
 8003f36:	f3ef 8211 	mrs	r2, BASEPRI
 8003f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	61ba      	str	r2, [r7, #24]
 8003f4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02f      	beq.n	8003fbe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f6c:	f000 f89e 	bl	80040ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	1e5a      	subs	r2, r3, #1
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003f78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d112      	bne.n	8003fa8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	3310      	adds	r3, #16
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fe60 	bl	8004c54 <xTaskRemoveFromEventList>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00e      	beq.n	8003fb8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e007      	b.n	8003fb8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fac:	3301      	adds	r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	b25a      	sxtb	r2, r3
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fbc:	e001      	b.n	8003fc2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f383 8811 	msr	BASEPRI, r3
}
 8003fcc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3738      	adds	r7, #56	@ 0x38
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d14d      	bne.n	800409a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f001 f80a 	bl	800501c <xTaskPriorityDisinherit>
 8004008:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	e043      	b.n	800409a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d119      	bne.n	800404c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6858      	ldr	r0, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	461a      	mov	r2, r3
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	f002 fc13 	bl	800684e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	441a      	add	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	d32b      	bcc.n	800409a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	e026      	b.n	800409a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68d8      	ldr	r0, [r3, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	461a      	mov	r2, r3
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	f002 fbf9 	bl	800684e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	425b      	negs	r3, r3
 8004066:	441a      	add	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d207      	bcs.n	8004088 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	425b      	negs	r3, r3
 8004082:	441a      	add	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d105      	bne.n	800409a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	3b01      	subs	r3, #1
 8004098:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040a2:	697b      	ldr	r3, [r7, #20]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d018      	beq.n	80040f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	441a      	add	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d303      	bcc.n	80040e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68d9      	ldr	r1, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	461a      	mov	r2, r3
 80040ea:	6838      	ldr	r0, [r7, #0]
 80040ec:	f002 fbaf 	bl	800684e <memcpy>
	}
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004100:	f001 fdb2 	bl	8005c68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800410a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800410c:	e011      	b.n	8004132 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3324      	adds	r3, #36	@ 0x24
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fd9a 	bl	8004c54 <xTaskRemoveFromEventList>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004126:	f000 fe73 	bl	8004e10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	3b01      	subs	r3, #1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004136:	2b00      	cmp	r3, #0
 8004138:	dce9      	bgt.n	800410e <prvUnlockQueue+0x16>
 800413a:	e000      	b.n	800413e <prvUnlockQueue+0x46>
					break;
 800413c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	22ff      	movs	r2, #255	@ 0xff
 8004142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004146:	f001 fdc1 	bl	8005ccc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800414a:	f001 fd8d 	bl	8005c68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004154:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004156:	e011      	b.n	800417c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d012      	beq.n	8004186 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3310      	adds	r3, #16
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fd75 	bl	8004c54 <xTaskRemoveFromEventList>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004170:	f000 fe4e 	bl	8004e10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004174:	7bbb      	ldrb	r3, [r7, #14]
 8004176:	3b01      	subs	r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800417c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004180:	2b00      	cmp	r3, #0
 8004182:	dce9      	bgt.n	8004158 <prvUnlockQueue+0x60>
 8004184:	e000      	b.n	8004188 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004186:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	22ff      	movs	r2, #255	@ 0xff
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004190:	f001 fd9c 	bl	8005ccc <vPortExitCritical>
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041a4:	f001 fd60 	bl	8005c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e001      	b.n	80041ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ba:	f001 fd87 	bl	8005ccc <vPortExitCritical>

	return xReturn;
 80041be:	68fb      	ldr	r3, [r7, #12]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041d0:	f001 fd4a 	bl	8005c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	429a      	cmp	r2, r3
 80041de:	d102      	bne.n	80041e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e001      	b.n	80041ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ea:	f001 fd6f 	bl	8005ccc <vPortExitCritical>

	return xReturn;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e014      	b.n	8004232 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004208:	4a0f      	ldr	r2, [pc, #60]	@ (8004248 <vQueueAddToRegistry+0x50>)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004214:	490c      	ldr	r1, [pc, #48]	@ (8004248 <vQueueAddToRegistry+0x50>)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800421e:	4a0a      	ldr	r2, [pc, #40]	@ (8004248 <vQueueAddToRegistry+0x50>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800422a:	e006      	b.n	800423a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b07      	cmp	r3, #7
 8004236:	d9e7      	bls.n	8004208 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000088c 	.word	0x2000088c

0800424c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800425c:	f001 fd04 	bl	8005c68 <vPortEnterCritical>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004266:	b25b      	sxtb	r3, r3
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d103      	bne.n	8004276 <vQueueWaitForMessageRestricted+0x2a>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800427c:	b25b      	sxtb	r3, r3
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d103      	bne.n	800428c <vQueueWaitForMessageRestricted+0x40>
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800428c:	f001 fd1e 	bl	8005ccc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	3324      	adds	r3, #36	@ 0x24
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fcab 	bl	8004bfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042a6:	6978      	ldr	r0, [r7, #20]
 80042a8:	f7ff ff26 	bl	80040f8 <prvUnlockQueue>
	}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08e      	sub	sp, #56	@ 0x38
 80042b8:	af04      	add	r7, sp, #16
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	623b      	str	r3, [r7, #32]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	61fb      	str	r3, [r7, #28]
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042fe:	23a8      	movs	r3, #168	@ 0xa8
 8004300:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2ba8      	cmp	r3, #168	@ 0xa8
 8004306:	d00b      	beq.n	8004320 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61bb      	str	r3, [r7, #24]
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004320:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01e      	beq.n	8004366 <xTaskCreateStatic+0xb2>
 8004328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01b      	beq.n	8004366 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800432e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	2202      	movs	r2, #2
 800433c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004340:	2300      	movs	r3, #0
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f851 	bl	8004400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800435e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004360:	f000 f8f6 	bl	8004550 <prvAddNewTaskToReadyList>
 8004364:	e001      	b.n	800436a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800436a:	697b      	ldr	r3, [r7, #20]
	}
 800436c:	4618      	mov	r0, r3
 800436e:	3728      	adds	r7, #40	@ 0x28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	@ 0x30
 8004378:	af04      	add	r7, sp, #16
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fd8f 	bl	8005eac <pvPortMalloc>
 800438e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004396:	20a8      	movs	r0, #168	@ 0xa8
 8004398:	f001 fd88 	bl	8005eac <pvPortMalloc>
 800439c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80043aa:	e005      	b.n	80043b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043ac:	6978      	ldr	r0, [r7, #20]
 80043ae:	f001 fe4b 	bl	8006048 <vPortFree>
 80043b2:	e001      	b.n	80043b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9303      	str	r3, [sp, #12]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	9302      	str	r3, [sp, #8]
 80043d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f80f 	bl	8004400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e2:	69f8      	ldr	r0, [r7, #28]
 80043e4:	f000 f8b4 	bl	8004550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043e8:	2301      	movs	r3, #1
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e002      	b.n	80043f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043f4:	69bb      	ldr	r3, [r7, #24]
	}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	461a      	mov	r2, r3
 8004418:	21a5      	movs	r1, #165	@ 0xa5
 800441a:	f002 f93f 	bl	800669c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004428:	3b01      	subs	r3, #1
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f023 0307 	bic.w	r3, r3, #7
 8004436:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	617b      	str	r3, [r7, #20]
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	e7fd      	b.n	8004456 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01f      	beq.n	80044a0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	e012      	b.n	800448c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	7819      	ldrb	r1, [r3, #0]
 800446e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	3334      	adds	r3, #52	@ 0x34
 8004476:	460a      	mov	r2, r1
 8004478:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3301      	adds	r3, #1
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b0f      	cmp	r3, #15
 8004490:	d9e9      	bls.n	8004466 <prvInitialiseNewTask+0x66>
 8004492:	e000      	b.n	8004496 <prvInitialiseNewTask+0x96>
			{
				break;
 8004494:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800449e:	e003      	b.n	80044a8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	2b37      	cmp	r3, #55	@ 0x37
 80044ac:	d901      	bls.n	80044b2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044ae:	2337      	movs	r3, #55	@ 0x37
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c0:	2200      	movs	r2, #0
 80044c2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	3304      	adds	r3, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff f8a7 	bl	800361c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	3318      	adds	r3, #24
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff f8a2 	bl	800361c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	3354      	adds	r3, #84	@ 0x54
 8004502:	224c      	movs	r2, #76	@ 0x4c
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f002 f8c8 	bl	800669c <memset>
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	4a0d      	ldr	r2, [pc, #52]	@ (8004544 <prvInitialiseNewTask+0x144>)
 8004510:	659a      	str	r2, [r3, #88]	@ 0x58
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <prvInitialiseNewTask+0x148>)
 8004516:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	4a0c      	ldr	r2, [pc, #48]	@ (800454c <prvInitialiseNewTask+0x14c>)
 800451c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	69b8      	ldr	r0, [r7, #24]
 8004524:	f001 fa70 	bl	8005a08 <pxPortInitialiseStack>
 8004528:	4602      	mov	r2, r0
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800452e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800453a:	bf00      	nop
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20004b20 	.word	0x20004b20
 8004548:	20004b88 	.word	0x20004b88
 800454c:	20004bf0 	.word	0x20004bf0

08004550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004558:	f001 fb86 	bl	8005c68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800455c:	4b2d      	ldr	r3, [pc, #180]	@ (8004614 <prvAddNewTaskToReadyList+0xc4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a2c      	ldr	r2, [pc, #176]	@ (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004566:	4b2c      	ldr	r3, [pc, #176]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800456e:	4a2a      	ldr	r2, [pc, #168]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004574:	4b27      	ldr	r3, [pc, #156]	@ (8004614 <prvAddNewTaskToReadyList+0xc4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d110      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800457c:	f000 fc6c 	bl	8004e58 <prvInitialiseTaskLists>
 8004580:	e00d      	b.n	800459e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004582:	4b26      	ldr	r3, [pc, #152]	@ (800461c <prvAddNewTaskToReadyList+0xcc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800458a:	4b23      	ldr	r3, [pc, #140]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d802      	bhi.n	800459e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004598:	4a1f      	ldr	r2, [pc, #124]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800459e:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004620 <prvAddNewTaskToReadyList+0xd0>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d903      	bls.n	80045c4 <prvAddNewTaskToReadyList+0x74>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	4a18      	ldr	r2, [pc, #96]	@ (8004624 <prvAddNewTaskToReadyList+0xd4>)
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4a15      	ldr	r2, [pc, #84]	@ (8004628 <prvAddNewTaskToReadyList+0xd8>)
 80045d2:	441a      	add	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7ff f82b 	bl	8003636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045e0:	f001 fb74 	bl	8005ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045e4:	4b0d      	ldr	r3, [pc, #52]	@ (800461c <prvAddNewTaskToReadyList+0xcc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <prvAddNewTaskToReadyList+0xc8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d207      	bcs.n	800460a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045fa:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <prvAddNewTaskToReadyList+0xdc>)
 80045fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000da0 	.word	0x20000da0
 8004618:	200008cc 	.word	0x200008cc
 800461c:	20000dac 	.word	0x20000dac
 8004620:	20000dbc 	.word	0x20000dbc
 8004624:	20000da8 	.word	0x20000da8
 8004628:	200008d0 	.word	0x200008d0
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004642:	4b14      	ldr	r3, [pc, #80]	@ (8004694 <vTaskDelay+0x64>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <vTaskDelay+0x32>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60bb      	str	r3, [r7, #8]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004662:	f000 f88b 	bl	800477c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fd5f 	bl	800512c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800466e:	f000 f893 	bl	8004798 <xTaskResumeAll>
 8004672:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800467a:	4b07      	ldr	r3, [pc, #28]	@ (8004698 <vTaskDelay+0x68>)
 800467c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000dc8 	.word	0x20000dc8
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046aa:	463a      	mov	r2, r7
 80046ac:	1d39      	adds	r1, r7, #4
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe fe16 	bl	80032e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	9202      	str	r2, [sp, #8]
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	460a      	mov	r2, r1
 80046ca:	4924      	ldr	r1, [pc, #144]	@ (800475c <vTaskStartScheduler+0xc0>)
 80046cc:	4824      	ldr	r0, [pc, #144]	@ (8004760 <vTaskStartScheduler+0xc4>)
 80046ce:	f7ff fdf1 	bl	80042b4 <xTaskCreateStatic>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4a23      	ldr	r2, [pc, #140]	@ (8004764 <vTaskStartScheduler+0xc8>)
 80046d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d8:	4b22      	ldr	r3, [pc, #136]	@ (8004764 <vTaskStartScheduler+0xc8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e001      	b.n	80046ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d102      	bne.n	80046f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046f0:	f000 fd70 	bl	80051d4 <xTimerCreateTimerTask>
 80046f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d11b      	bne.n	8004734 <vTaskStartScheduler+0x98>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	613b      	str	r3, [r7, #16]
}
 800470e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004710:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <vTaskStartScheduler+0xcc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3354      	adds	r3, #84	@ 0x54
 8004716:	4a15      	ldr	r2, [pc, #84]	@ (800476c <vTaskStartScheduler+0xd0>)
 8004718:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <vTaskStartScheduler+0xd4>)
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004722:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <vTaskStartScheduler+0xd8>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004728:	4b13      	ldr	r3, [pc, #76]	@ (8004778 <vTaskStartScheduler+0xdc>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800472e:	f001 f9f7 	bl	8005b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004732:	e00f      	b.n	8004754 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d10b      	bne.n	8004754 <vTaskStartScheduler+0xb8>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60fb      	str	r3, [r7, #12]
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <vTaskStartScheduler+0xb4>
}
 8004754:	bf00      	nop
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	08007320 	.word	0x08007320
 8004760:	08004e29 	.word	0x08004e29
 8004764:	20000dc4 	.word	0x20000dc4
 8004768:	200008cc 	.word	0x200008cc
 800476c:	2000001c 	.word	0x2000001c
 8004770:	20000dc0 	.word	0x20000dc0
 8004774:	20000dac 	.word	0x20000dac
 8004778:	20000da4 	.word	0x20000da4

0800477c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004780:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <vTaskSuspendAll+0x18>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	4a03      	ldr	r2, [pc, #12]	@ (8004794 <vTaskSuspendAll+0x18>)
 8004788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800478a:	bf00      	nop
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	20000dc8 	.word	0x20000dc8

08004798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047a6:	4b42      	ldr	r3, [pc, #264]	@ (80048b0 <xTaskResumeAll+0x118>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10b      	bne.n	80047c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	603b      	str	r3, [r7, #0]
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	e7fd      	b.n	80047c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047c6:	f001 fa4f 	bl	8005c68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047ca:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <xTaskResumeAll+0x118>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4a37      	ldr	r2, [pc, #220]	@ (80048b0 <xTaskResumeAll+0x118>)
 80047d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d4:	4b36      	ldr	r3, [pc, #216]	@ (80048b0 <xTaskResumeAll+0x118>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d162      	bne.n	80048a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047dc:	4b35      	ldr	r3, [pc, #212]	@ (80048b4 <xTaskResumeAll+0x11c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05e      	beq.n	80048a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e4:	e02f      	b.n	8004846 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e6:	4b34      	ldr	r3, [pc, #208]	@ (80048b8 <xTaskResumeAll+0x120>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3318      	adds	r3, #24
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe ff7c 	bl	80036f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe ff77 	bl	80036f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004806:	4b2d      	ldr	r3, [pc, #180]	@ (80048bc <xTaskResumeAll+0x124>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d903      	bls.n	8004816 <xTaskResumeAll+0x7e>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	4a2a      	ldr	r2, [pc, #168]	@ (80048bc <xTaskResumeAll+0x124>)
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4a27      	ldr	r2, [pc, #156]	@ (80048c0 <xTaskResumeAll+0x128>)
 8004824:	441a      	add	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7fe ff02 	bl	8003636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004836:	4b23      	ldr	r3, [pc, #140]	@ (80048c4 <xTaskResumeAll+0x12c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	429a      	cmp	r2, r3
 800483e:	d302      	bcc.n	8004846 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004840:	4b21      	ldr	r3, [pc, #132]	@ (80048c8 <xTaskResumeAll+0x130>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004846:	4b1c      	ldr	r3, [pc, #112]	@ (80048b8 <xTaskResumeAll+0x120>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1cb      	bne.n	80047e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004854:	f000 fba4 	bl	8004fa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004858:	4b1c      	ldr	r3, [pc, #112]	@ (80048cc <xTaskResumeAll+0x134>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004864:	f000 f846 	bl	80048f4 <xTaskIncrementTick>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800486e:	4b16      	ldr	r3, [pc, #88]	@ (80048c8 <xTaskResumeAll+0x130>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3b01      	subs	r3, #1
 8004878:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f1      	bne.n	8004864 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004880:	4b12      	ldr	r3, [pc, #72]	@ (80048cc <xTaskResumeAll+0x134>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <xTaskResumeAll+0x130>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800488e:	2301      	movs	r3, #1
 8004890:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004892:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <xTaskResumeAll+0x138>)
 8004894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048a2:	f001 fa13 	bl	8005ccc <vPortExitCritical>

	return xAlreadyYielded;
 80048a6:	68bb      	ldr	r3, [r7, #8]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000dc8 	.word	0x20000dc8
 80048b4:	20000da0 	.word	0x20000da0
 80048b8:	20000d60 	.word	0x20000d60
 80048bc:	20000da8 	.word	0x20000da8
 80048c0:	200008d0 	.word	0x200008d0
 80048c4:	200008cc 	.word	0x200008cc
 80048c8:	20000db4 	.word	0x20000db4
 80048cc:	20000db0 	.word	0x20000db0
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048da:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <xTaskGetTickCount+0x1c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048e0:	687b      	ldr	r3, [r7, #4]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000da4 	.word	0x20000da4

080048f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fe:	4b4f      	ldr	r3, [pc, #316]	@ (8004a3c <xTaskIncrementTick+0x148>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 8090 	bne.w	8004a28 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004908:	4b4d      	ldr	r3, [pc, #308]	@ (8004a40 <xTaskIncrementTick+0x14c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004910:	4a4b      	ldr	r2, [pc, #300]	@ (8004a40 <xTaskIncrementTick+0x14c>)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d121      	bne.n	8004960 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800491c:	4b49      	ldr	r3, [pc, #292]	@ (8004a44 <xTaskIncrementTick+0x150>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	603b      	str	r3, [r7, #0]
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	e7fd      	b.n	800493a <xTaskIncrementTick+0x46>
 800493e:	4b41      	ldr	r3, [pc, #260]	@ (8004a44 <xTaskIncrementTick+0x150>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	4b40      	ldr	r3, [pc, #256]	@ (8004a48 <xTaskIncrementTick+0x154>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a3e      	ldr	r2, [pc, #248]	@ (8004a44 <xTaskIncrementTick+0x150>)
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4a3e      	ldr	r2, [pc, #248]	@ (8004a48 <xTaskIncrementTick+0x154>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b3e      	ldr	r3, [pc, #248]	@ (8004a4c <xTaskIncrementTick+0x158>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	4a3c      	ldr	r2, [pc, #240]	@ (8004a4c <xTaskIncrementTick+0x158>)
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	f000 fb20 	bl	8004fa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004960:	4b3b      	ldr	r3, [pc, #236]	@ (8004a50 <xTaskIncrementTick+0x15c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	429a      	cmp	r2, r3
 8004968:	d349      	bcc.n	80049fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496a:	4b36      	ldr	r3, [pc, #216]	@ (8004a44 <xTaskIncrementTick+0x150>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004974:	4b36      	ldr	r3, [pc, #216]	@ (8004a50 <xTaskIncrementTick+0x15c>)
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	601a      	str	r2, [r3, #0]
					break;
 800497c:	e03f      	b.n	80049fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497e:	4b31      	ldr	r3, [pc, #196]	@ (8004a44 <xTaskIncrementTick+0x150>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	429a      	cmp	r2, r3
 8004994:	d203      	bcs.n	800499e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004996:	4a2e      	ldr	r2, [pc, #184]	@ (8004a50 <xTaskIncrementTick+0x15c>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800499c:	e02f      	b.n	80049fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fea4 	bl	80036f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	3318      	adds	r3, #24
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe fe9b 	bl	80036f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049be:	4b25      	ldr	r3, [pc, #148]	@ (8004a54 <xTaskIncrementTick+0x160>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d903      	bls.n	80049ce <xTaskIncrementTick+0xda>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	4a22      	ldr	r2, [pc, #136]	@ (8004a54 <xTaskIncrementTick+0x160>)
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4a1f      	ldr	r2, [pc, #124]	@ (8004a58 <xTaskIncrementTick+0x164>)
 80049dc:	441a      	add	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f7fe fe26 	bl	8003636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ee:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <xTaskIncrementTick+0x168>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d3b8      	bcc.n	800496a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fc:	e7b5      	b.n	800496a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049fe:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <xTaskIncrementTick+0x168>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a04:	4914      	ldr	r1, [pc, #80]	@ (8004a58 <xTaskIncrementTick+0x164>)
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d901      	bls.n	8004a1a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a16:	2301      	movs	r3, #1
 8004a18:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a1a:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <xTaskIncrementTick+0x16c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004a22:	2301      	movs	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	e004      	b.n	8004a32 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a28:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <xTaskIncrementTick+0x170>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a64 <xTaskIncrementTick+0x170>)
 8004a30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a32:	697b      	ldr	r3, [r7, #20]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000dc8 	.word	0x20000dc8
 8004a40:	20000da4 	.word	0x20000da4
 8004a44:	20000d58 	.word	0x20000d58
 8004a48:	20000d5c 	.word	0x20000d5c
 8004a4c:	20000db8 	.word	0x20000db8
 8004a50:	20000dc0 	.word	0x20000dc0
 8004a54:	20000da8 	.word	0x20000da8
 8004a58:	200008d0 	.word	0x200008d0
 8004a5c:	200008cc 	.word	0x200008cc
 8004a60:	20000db4 	.word	0x20000db4
 8004a64:	20000db0 	.word	0x20000db0

08004a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b1c <vTaskSwitchContext+0xb4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a76:	4b2a      	ldr	r3, [pc, #168]	@ (8004b20 <vTaskSwitchContext+0xb8>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a7c:	e047      	b.n	8004b0e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004a7e:	4b28      	ldr	r3, [pc, #160]	@ (8004b20 <vTaskSwitchContext+0xb8>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a84:	4b27      	ldr	r3, [pc, #156]	@ (8004b24 <vTaskSwitchContext+0xbc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e011      	b.n	8004ab0 <vTaskSwitchContext+0x48>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <vTaskSwitchContext+0x42>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	607b      	str	r3, [r7, #4]
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <vTaskSwitchContext+0x3e>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	491d      	ldr	r1, [pc, #116]	@ (8004b28 <vTaskSwitchContext+0xc0>)
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0e3      	beq.n	8004a8c <vTaskSwitchContext+0x24>
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4a16      	ldr	r2, [pc, #88]	@ (8004b28 <vTaskSwitchContext+0xc0>)
 8004ad0:	4413      	add	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d104      	bne.n	8004af4 <vTaskSwitchContext+0x8c>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4a0c      	ldr	r2, [pc, #48]	@ (8004b2c <vTaskSwitchContext+0xc4>)
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4a09      	ldr	r2, [pc, #36]	@ (8004b24 <vTaskSwitchContext+0xbc>)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <vTaskSwitchContext+0xc4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3354      	adds	r3, #84	@ 0x54
 8004b0a:	4a09      	ldr	r2, [pc, #36]	@ (8004b30 <vTaskSwitchContext+0xc8>)
 8004b0c:	6013      	str	r3, [r2, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000dc8 	.word	0x20000dc8
 8004b20:	20000db4 	.word	0x20000db4
 8004b24:	20000da8 	.word	0x20000da8
 8004b28:	200008d0 	.word	0x200008d0
 8004b2c:	200008cc 	.word	0x200008cc
 8004b30:	2000001c 	.word	0x2000001c

08004b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	60fb      	str	r3, [r7, #12]
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	e7fd      	b.n	8004b58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b5c:	4b07      	ldr	r3, [pc, #28]	@ (8004b7c <vTaskPlaceOnEventList+0x48>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3318      	adds	r3, #24
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fe fd8a 	bl	800367e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	6838      	ldr	r0, [r7, #0]
 8004b6e:	f000 fadd 	bl	800512c <prvAddCurrentTaskToDelayedList>
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200008cc 	.word	0x200008cc

08004b80 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	617b      	str	r3, [r7, #20]
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004baa:	4b12      	ldr	r3, [pc, #72]	@ (8004bf4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	613b      	str	r3, [r7, #16]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004bca:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004bd4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bd6:	4b08      	ldr	r3, [pc, #32]	@ (8004bf8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	4619      	mov	r1, r3
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7fe fd29 	bl	8003636 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004be4:	2101      	movs	r1, #1
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 faa0 	bl	800512c <prvAddCurrentTaskToDelayedList>
}
 8004bec:	bf00      	nop
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000dc8 	.word	0x20000dc8
 8004bf8:	200008cc 	.word	0x200008cc

08004bfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10b      	bne.n	8004c26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	617b      	str	r3, [r7, #20]
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	e7fd      	b.n	8004c22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c26:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7fe fd01 	bl	8003636 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	68b8      	ldr	r0, [r7, #8]
 8004c44:	f000 fa72 	bl	800512c <prvAddCurrentTaskToDelayedList>
	}
 8004c48:	bf00      	nop
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200008cc 	.word	0x200008cc

08004c54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3318      	adds	r3, #24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe fd32 	bl	80036f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <xTaskRemoveFromEventList+0xb0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d11d      	bne.n	8004cd0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fd29 	bl	80036f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca2:	4b19      	ldr	r3, [pc, #100]	@ (8004d08 <xTaskRemoveFromEventList+0xb4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d903      	bls.n	8004cb2 <xTaskRemoveFromEventList+0x5e>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cae:	4a16      	ldr	r2, [pc, #88]	@ (8004d08 <xTaskRemoveFromEventList+0xb4>)
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <xTaskRemoveFromEventList+0xb8>)
 8004cc0:	441a      	add	r2, r3
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f7fe fcb4 	bl	8003636 <vListInsertEnd>
 8004cce:	e005      	b.n	8004cdc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	3318      	adds	r3, #24
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	480e      	ldr	r0, [pc, #56]	@ (8004d10 <xTaskRemoveFromEventList+0xbc>)
 8004cd8:	f7fe fcad 	bl	8003636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <xTaskRemoveFromEventList+0xc0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d905      	bls.n	8004cf6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cea:	2301      	movs	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cee:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <xTaskRemoveFromEventList+0xc4>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e001      	b.n	8004cfa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cfa:	697b      	ldr	r3, [r7, #20]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000dc8 	.word	0x20000dc8
 8004d08:	20000da8 	.word	0x20000da8
 8004d0c:	200008d0 	.word	0x200008d0
 8004d10:	20000d60 	.word	0x20000d60
 8004d14:	200008cc 	.word	0x200008cc
 8004d18:	20000db4 	.word	0x20000db4

08004d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d24:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <vTaskInternalSetTimeOutState+0x24>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <vTaskInternalSetTimeOutState+0x28>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	605a      	str	r2, [r3, #4]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	20000db8 	.word	0x20000db8
 8004d44:	20000da4 	.word	0x20000da4

08004d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10b      	bne.n	8004d70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	613b      	str	r3, [r7, #16]
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	60fb      	str	r3, [r7, #12]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d8e:	f000 ff6b 	bl	8005c68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d92:	4b1d      	ldr	r3, [pc, #116]	@ (8004e08 <xTaskCheckForTimeOut+0xc0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d102      	bne.n	8004db2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e023      	b.n	8004dfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <xTaskCheckForTimeOut+0xc4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d007      	beq.n	8004dce <xTaskCheckForTimeOut+0x86>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	e015      	b.n	8004dfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d20b      	bcs.n	8004df0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff ff99 	bl	8004d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	e004      	b.n	8004dfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dfa:	f000 ff67 	bl	8005ccc <vPortExitCritical>

	return xReturn;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000da4 	.word	0x20000da4
 8004e0c:	20000db8 	.word	0x20000db8

08004e10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e14:	4b03      	ldr	r3, [pc, #12]	@ (8004e24 <vTaskMissedYield+0x14>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	20000db4 	.word	0x20000db4

08004e28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e30:	f000 f852 	bl	8004ed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e34:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <prvIdleTask+0x28>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d9f9      	bls.n	8004e30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <prvIdleTask+0x2c>)
 8004e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e4c:	e7f0      	b.n	8004e30 <prvIdleTask+0x8>
 8004e4e:	bf00      	nop
 8004e50:	200008d0 	.word	0x200008d0
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e5e:	2300      	movs	r3, #0
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	e00c      	b.n	8004e7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4a12      	ldr	r2, [pc, #72]	@ (8004eb8 <prvInitialiseTaskLists+0x60>)
 8004e70:	4413      	add	r3, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe fbb2 	bl	80035dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b37      	cmp	r3, #55	@ 0x37
 8004e82:	d9ef      	bls.n	8004e64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e84:	480d      	ldr	r0, [pc, #52]	@ (8004ebc <prvInitialiseTaskLists+0x64>)
 8004e86:	f7fe fba9 	bl	80035dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e8a:	480d      	ldr	r0, [pc, #52]	@ (8004ec0 <prvInitialiseTaskLists+0x68>)
 8004e8c:	f7fe fba6 	bl	80035dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e90:	480c      	ldr	r0, [pc, #48]	@ (8004ec4 <prvInitialiseTaskLists+0x6c>)
 8004e92:	f7fe fba3 	bl	80035dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e96:	480c      	ldr	r0, [pc, #48]	@ (8004ec8 <prvInitialiseTaskLists+0x70>)
 8004e98:	f7fe fba0 	bl	80035dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e9c:	480b      	ldr	r0, [pc, #44]	@ (8004ecc <prvInitialiseTaskLists+0x74>)
 8004e9e:	f7fe fb9d 	bl	80035dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <prvInitialiseTaskLists+0x78>)
 8004ea4:	4a05      	ldr	r2, [pc, #20]	@ (8004ebc <prvInitialiseTaskLists+0x64>)
 8004ea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <prvInitialiseTaskLists+0x7c>)
 8004eaa:	4a05      	ldr	r2, [pc, #20]	@ (8004ec0 <prvInitialiseTaskLists+0x68>)
 8004eac:	601a      	str	r2, [r3, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200008d0 	.word	0x200008d0
 8004ebc:	20000d30 	.word	0x20000d30
 8004ec0:	20000d44 	.word	0x20000d44
 8004ec4:	20000d60 	.word	0x20000d60
 8004ec8:	20000d74 	.word	0x20000d74
 8004ecc:	20000d8c 	.word	0x20000d8c
 8004ed0:	20000d58 	.word	0x20000d58
 8004ed4:	20000d5c 	.word	0x20000d5c

08004ed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ede:	e019      	b.n	8004f14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ee0:	f000 fec2 	bl	8005c68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee4:	4b10      	ldr	r3, [pc, #64]	@ (8004f28 <prvCheckTasksWaitingTermination+0x50>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe fbfd 	bl	80036f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f2c <prvCheckTasksWaitingTermination+0x54>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	4a0b      	ldr	r2, [pc, #44]	@ (8004f2c <prvCheckTasksWaitingTermination+0x54>)
 8004efe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f00:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <prvCheckTasksWaitingTermination+0x58>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <prvCheckTasksWaitingTermination+0x58>)
 8004f08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f0a:	f000 fedf 	bl	8005ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f810 	bl	8004f34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f14:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <prvCheckTasksWaitingTermination+0x58>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e1      	bne.n	8004ee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000d74 	.word	0x20000d74
 8004f2c:	20000da0 	.word	0x20000da0
 8004f30:	20000d88 	.word	0x20000d88

08004f34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3354      	adds	r3, #84	@ 0x54
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fbc3 	bl	80066cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d108      	bne.n	8004f62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 f877 	bl	8006048 <vPortFree>
				vPortFree( pxTCB );
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f001 f874 	bl	8006048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f60:	e019      	b.n	8004f96 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d103      	bne.n	8004f74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 f86b 	bl	8006048 <vPortFree>
	}
 8004f72:	e010      	b.n	8004f96 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d00b      	beq.n	8004f96 <prvDeleteTCB+0x62>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60fb      	str	r3, [r7, #12]
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <prvDeleteTCB+0x5e>
	}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <prvResetNextTaskUnblockTime+0x38>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <prvResetNextTaskUnblockTime+0x3c>)
 8004fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fb8:	e008      	b.n	8004fcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fba:	4b07      	ldr	r3, [pc, #28]	@ (8004fd8 <prvResetNextTaskUnblockTime+0x38>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	@ (8004fdc <prvResetNextTaskUnblockTime+0x3c>)
 8004fca:	6013      	str	r3, [r2, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	20000d58 	.word	0x20000d58
 8004fdc:	20000dc0 	.word	0x20000dc0

08004fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8005014 <xTaskGetSchedulerState+0x34>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	e008      	b.n	8005006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff4:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <xTaskGetSchedulerState+0x38>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	607b      	str	r3, [r7, #4]
 8005000:	e001      	b.n	8005006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005002:	2300      	movs	r3, #0
 8005004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005006:	687b      	ldr	r3, [r7, #4]
	}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	20000dac 	.word	0x20000dac
 8005018:	20000dc8 	.word	0x20000dc8

0800501c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d058      	beq.n	80050e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005032:	4b2f      	ldr	r3, [pc, #188]	@ (80050f0 <xTaskPriorityDisinherit+0xd4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	d00b      	beq.n	8005054 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60fb      	str	r3, [r7, #12]
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	60bb      	str	r3, [r7, #8]
}
 800506e:	bf00      	nop
 8005070:	bf00      	nop
 8005072:	e7fd      	b.n	8005070 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005078:	1e5a      	subs	r2, r3, #1
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005086:	429a      	cmp	r2, r3
 8005088:	d02c      	beq.n	80050e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508e:	2b00      	cmp	r3, #0
 8005090:	d128      	bne.n	80050e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3304      	adds	r3, #4
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fb2a 	bl	80036f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b4:	4b0f      	ldr	r3, [pc, #60]	@ (80050f4 <xTaskPriorityDisinherit+0xd8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d903      	bls.n	80050c4 <xTaskPriorityDisinherit+0xa8>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	4a0c      	ldr	r2, [pc, #48]	@ (80050f4 <xTaskPriorityDisinherit+0xd8>)
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <xTaskPriorityDisinherit+0xdc>)
 80050d2:	441a      	add	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f7fe faab 	bl	8003636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050e4:	697b      	ldr	r3, [r7, #20]
	}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200008cc 	.word	0x200008cc
 80050f4:	20000da8 	.word	0x20000da8
 80050f8:	200008d0 	.word	0x200008d0

080050fc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005102:	4b09      	ldr	r3, [pc, #36]	@ (8005128 <uxTaskResetEventItemValue+0x2c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800510a:	4b07      	ldr	r3, [pc, #28]	@ (8005128 <uxTaskResetEventItemValue+0x2c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <uxTaskResetEventItemValue+0x2c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8005118:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800511a:	687b      	ldr	r3, [r7, #4]
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	200008cc 	.word	0x200008cc

0800512c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005136:	4b21      	ldr	r3, [pc, #132]	@ (80051bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800513c:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3304      	adds	r3, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fad4 	bl	80036f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d10a      	bne.n	8005166 <prvAddCurrentTaskToDelayedList+0x3a>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005156:	4b1a      	ldr	r3, [pc, #104]	@ (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4819      	ldr	r0, [pc, #100]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005160:	f7fe fa69 	bl	8003636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005164:	e026      	b.n	80051b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800516e:	4b14      	ldr	r3, [pc, #80]	@ (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	429a      	cmp	r2, r3
 800517c:	d209      	bcs.n	8005192 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800517e:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b0f      	ldr	r3, [pc, #60]	@ (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f7fe fa77 	bl	800367e <vListInsert>
}
 8005190:	e010      	b.n	80051b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005192:	4b0e      	ldr	r3, [pc, #56]	@ (80051cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b0a      	ldr	r3, [pc, #40]	@ (80051c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3304      	adds	r3, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f7fe fa6d 	bl	800367e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051a4:	4b0a      	ldr	r3, [pc, #40]	@ (80051d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d202      	bcs.n	80051b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051ae:	4a08      	ldr	r2, [pc, #32]	@ (80051d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6013      	str	r3, [r2, #0]
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000da4 	.word	0x20000da4
 80051c0:	200008cc 	.word	0x200008cc
 80051c4:	20000d8c 	.word	0x20000d8c
 80051c8:	20000d5c 	.word	0x20000d5c
 80051cc:	20000d58 	.word	0x20000d58
 80051d0:	20000dc0 	.word	0x20000dc0

080051d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	@ 0x28
 80051d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051de:	f000 fbb1 	bl	8005944 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <xTimerCreateTimerTask+0x84>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d021      	beq.n	800522e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051f2:	1d3a      	adds	r2, r7, #4
 80051f4:	f107 0108 	add.w	r1, r7, #8
 80051f8:	f107 030c 	add.w	r3, r7, #12
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe f88b 	bl	8003318 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	9202      	str	r2, [sp, #8]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	2302      	movs	r3, #2
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	2300      	movs	r3, #0
 8005212:	460a      	mov	r2, r1
 8005214:	4911      	ldr	r1, [pc, #68]	@ (800525c <xTimerCreateTimerTask+0x88>)
 8005216:	4812      	ldr	r0, [pc, #72]	@ (8005260 <xTimerCreateTimerTask+0x8c>)
 8005218:	f7ff f84c 	bl	80042b4 <xTaskCreateStatic>
 800521c:	4603      	mov	r3, r0
 800521e:	4a11      	ldr	r2, [pc, #68]	@ (8005264 <xTimerCreateTimerTask+0x90>)
 8005220:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <xTimerCreateTimerTask+0x90>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800522a:	2301      	movs	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	613b      	str	r3, [r7, #16]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800524c:	697b      	ldr	r3, [r7, #20]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000dfc 	.word	0x20000dfc
 800525c:	08007328 	.word	0x08007328
 8005260:	080054dd 	.word	0x080054dd
 8005264:	20000e00 	.word	0x20000e00

08005268 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005276:	202c      	movs	r0, #44	@ 0x2c
 8005278:	f000 fe18 	bl	8005eac <pvPortMalloc>
 800527c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f845 	bl	800532a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80052a0:	697b      	ldr	r3, [r7, #20]
	}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b08a      	sub	sp, #40	@ 0x28
 80052ae:	af02      	add	r7, sp, #8
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80052b8:	232c      	movs	r3, #44	@ 0x2c
 80052ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b2c      	cmp	r3, #44	@ 0x2c
 80052c0:	d00b      	beq.n	80052da <xTimerCreateStatic+0x30>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	61bb      	str	r3, [r7, #24]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80052dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <xTimerCreateStatic+0x50>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	617b      	str	r3, [r7, #20]
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	e7fd      	b.n	80052f6 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f805 	bl	800532a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005320:	69fb      	ldr	r3, [r7, #28]
	}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b086      	sub	sp, #24
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10b      	bne.n	8005356 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	617b      	str	r3, [r7, #20]
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	e7fd      	b.n	8005352 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01e      	beq.n	800539a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800535c:	f000 faf2 	bl	8005944 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	6a3a      	ldr	r2, [r7, #32]
 8005376:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	3304      	adds	r3, #4
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe f94d 	bl	800361c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800538e:	f043 0304 	orr.w	r3, r3, #4
 8005392:	b2da      	uxtb	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800539a:	bf00      	nop
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	@ 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	623b      	str	r3, [r7, #32]
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053d4:	4b19      	ldr	r3, [pc, #100]	@ (800543c <xTimerGenericCommand+0x98>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d02a      	beq.n	8005432 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b05      	cmp	r3, #5
 80053ec:	dc18      	bgt.n	8005420 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053ee:	f7ff fdf7 	bl	8004fe0 <xTaskGetSchedulerState>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d109      	bne.n	800540c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053f8:	4b10      	ldr	r3, [pc, #64]	@ (800543c <xTimerGenericCommand+0x98>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	f107 0110 	add.w	r1, r7, #16
 8005400:	2300      	movs	r3, #0
 8005402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005404:	f7fe fae4 	bl	80039d0 <xQueueGenericSend>
 8005408:	6278      	str	r0, [r7, #36]	@ 0x24
 800540a:	e012      	b.n	8005432 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800540c:	4b0b      	ldr	r3, [pc, #44]	@ (800543c <xTimerGenericCommand+0x98>)
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	f107 0110 	add.w	r1, r7, #16
 8005414:	2300      	movs	r3, #0
 8005416:	2200      	movs	r2, #0
 8005418:	f7fe fada 	bl	80039d0 <xQueueGenericSend>
 800541c:	6278      	str	r0, [r7, #36]	@ 0x24
 800541e:	e008      	b.n	8005432 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005420:	4b06      	ldr	r3, [pc, #24]	@ (800543c <xTimerGenericCommand+0x98>)
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	f107 0110 	add.w	r1, r7, #16
 8005428:	2300      	movs	r3, #0
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	f7fe fbd2 	bl	8003bd4 <xQueueGenericSendFromISR>
 8005430:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005434:	4618      	mov	r0, r3
 8005436:	3728      	adds	r7, #40	@ 0x28
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000dfc 	.word	0x20000dfc

08005440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544a:	4b23      	ldr	r3, [pc, #140]	@ (80054d8 <prvProcessExpiredTimer+0x98>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe f949 	bl	80036f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d023      	beq.n	80054b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	18d1      	adds	r1, r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	6978      	ldr	r0, [r7, #20]
 800547a:	f000 f8d5 	bl	8005628 <prvInsertTimerInActiveList>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d020      	beq.n	80054c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005484:	2300      	movs	r3, #0
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	2100      	movs	r1, #0
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7ff ff88 	bl	80053a4 <xTimerGenericCommand>
 8005494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d114      	bne.n	80054c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	60fb      	str	r3, [r7, #12]
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	6978      	ldr	r0, [r7, #20]
 80054cc:	4798      	blx	r3
}
 80054ce:	bf00      	nop
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000df4 	.word	0x20000df4

080054dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054e4:	f107 0308 	add.w	r3, r7, #8
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f859 	bl	80055a0 <prvGetNextExpireTime>
 80054ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4619      	mov	r1, r3
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f805 	bl	8005504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054fa:	f000 f8d7 	bl	80056ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054fe:	bf00      	nop
 8005500:	e7f0      	b.n	80054e4 <prvTimerTask+0x8>
	...

08005504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800550e:	f7ff f935 	bl	800477c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005512:	f107 0308 	add.w	r3, r7, #8
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f866 	bl	80055e8 <prvSampleTimeNow>
 800551c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d130      	bne.n	8005586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <prvProcessTimerOrBlockTask+0x3c>
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	429a      	cmp	r2, r3
 8005530:	d806      	bhi.n	8005540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005532:	f7ff f931 	bl	8004798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff81 	bl	8005440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800553e:	e024      	b.n	800558a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <prvProcessTimerOrBlockTask+0x90>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <prvProcessTimerOrBlockTask+0x50>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <prvProcessTimerOrBlockTask+0x52>
 8005554:	2300      	movs	r3, #0
 8005556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005558:	4b0f      	ldr	r3, [pc, #60]	@ (8005598 <prvProcessTimerOrBlockTask+0x94>)
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4619      	mov	r1, r3
 8005566:	f7fe fe71 	bl	800424c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800556a:	f7ff f915 	bl	8004798 <xTaskResumeAll>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005574:	4b09      	ldr	r3, [pc, #36]	@ (800559c <prvProcessTimerOrBlockTask+0x98>)
 8005576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	f3bf 8f6f 	isb	sy
}
 8005584:	e001      	b.n	800558a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005586:	f7ff f907 	bl	8004798 <xTaskResumeAll>
}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000df8 	.word	0x20000df8
 8005598:	20000dfc 	.word	0x20000dfc
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055a8:	4b0e      	ldr	r3, [pc, #56]	@ (80055e4 <prvGetNextExpireTime+0x44>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <prvGetNextExpireTime+0x16>
 80055b2:	2201      	movs	r2, #1
 80055b4:	e000      	b.n	80055b8 <prvGetNextExpireTime+0x18>
 80055b6:	2200      	movs	r2, #0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055c4:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <prvGetNextExpireTime+0x44>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e001      	b.n	80055d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000df4 	.word	0x20000df4

080055e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055f0:	f7ff f970 	bl	80048d4 <xTaskGetTickCount>
 80055f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <prvSampleTimeNow+0x3c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d205      	bcs.n	800560c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005600:	f000 f93a 	bl	8005878 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e002      	b.n	8005612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005612:	4a04      	ldr	r2, [pc, #16]	@ (8005624 <prvSampleTimeNow+0x3c>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000e04 	.word	0x20000e04

08005628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d812      	bhi.n	8005674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800565c:	2301      	movs	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e01b      	b.n	800569a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005662:	4b10      	ldr	r3, [pc, #64]	@ (80056a4 <prvInsertTimerInActiveList+0x7c>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3304      	adds	r3, #4
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f7fe f806 	bl	800367e <vListInsert>
 8005672:	e012      	b.n	800569a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d206      	bcs.n	800568a <prvInsertTimerInActiveList+0x62>
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005684:	2301      	movs	r3, #1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e007      	b.n	800569a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800568a:	4b07      	ldr	r3, [pc, #28]	@ (80056a8 <prvInsertTimerInActiveList+0x80>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f7fd fff2 	bl	800367e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800569a:	697b      	ldr	r3, [r7, #20]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000df8 	.word	0x20000df8
 80056a8:	20000df4 	.word	0x20000df4

080056ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	@ 0x38
 80056b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056b2:	e0ce      	b.n	8005852 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da19      	bge.n	80056ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	3304      	adds	r3, #4
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <prvProcessReceivedCommands+0x32>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	61fb      	str	r3, [r7, #28]
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	e7fd      	b.n	80056da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e4:	6850      	ldr	r0, [r2, #4]
 80056e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e8:	6892      	ldr	r2, [r2, #8]
 80056ea:	4611      	mov	r1, r2
 80056ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f2c0 80ae 	blt.w	8005852 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005704:	3304      	adds	r3, #4
 8005706:	4618      	mov	r0, r3
 8005708:	f7fd fff2 	bl	80036f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800570c:	463b      	mov	r3, r7
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff ff6a 	bl	80055e8 <prvSampleTimeNow>
 8005714:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b09      	cmp	r3, #9
 800571a:	f200 8097 	bhi.w	800584c <prvProcessReceivedCommands+0x1a0>
 800571e:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <prvProcessReceivedCommands+0x78>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	0800574d 	.word	0x0800574d
 8005728:	0800574d 	.word	0x0800574d
 800572c:	0800574d 	.word	0x0800574d
 8005730:	080057c3 	.word	0x080057c3
 8005734:	080057d7 	.word	0x080057d7
 8005738:	08005823 	.word	0x08005823
 800573c:	0800574d 	.word	0x0800574d
 8005740:	0800574d 	.word	0x0800574d
 8005744:	080057c3 	.word	0x080057c3
 8005748:	080057d7 	.word	0x080057d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	b2da      	uxtb	r2, r3
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	18d1      	adds	r1, r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800576c:	f7ff ff5c 	bl	8005628 <prvInsertTimerInActiveList>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d06c      	beq.n	8005850 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800577c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800577e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d061      	beq.n	8005850 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	441a      	add	r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	2300      	movs	r3, #0
 800579a:	2100      	movs	r1, #0
 800579c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800579e:	f7ff fe01 	bl	80053a4 <xTimerGenericCommand>
 80057a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d152      	bne.n	8005850 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	61bb      	str	r3, [r7, #24]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80057d4:	e03d      	b.n	8005852 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <prvProcessReceivedCommands+0x162>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	617b      	str	r3, [r7, #20]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800580e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	18d1      	adds	r1, r2, r3
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800581a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800581c:	f7ff ff04 	bl	8005628 <prvInsertTimerInActiveList>
					break;
 8005820:	e017      	b.n	8005852 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005830:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005832:	f000 fc09 	bl	8006048 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005836:	e00c      	b.n	8005852 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	b2da      	uxtb	r2, r3
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800584a:	e002      	b.n	8005852 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800584c:	bf00      	nop
 800584e:	e000      	b.n	8005852 <prvProcessReceivedCommands+0x1a6>
					break;
 8005850:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005852:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <prvProcessReceivedCommands+0x1c8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	1d39      	adds	r1, r7, #4
 8005858:	2200      	movs	r2, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fa58 	bl	8003d10 <xQueueReceive>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	f47f af26 	bne.w	80056b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3730      	adds	r7, #48	@ 0x30
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000dfc 	.word	0x20000dfc

08005878 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800587e:	e049      	b.n	8005914 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005880:	4b2e      	ldr	r3, [pc, #184]	@ (800593c <prvSwitchTimerLists+0xc4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800588a:	4b2c      	ldr	r3, [pc, #176]	@ (800593c <prvSwitchTimerLists+0xc4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7fd ff29 	bl	80036f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d02f      	beq.n	8005914 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d90e      	bls.n	80058e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058d2:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <prvSwitchTimerLists+0xc4>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3304      	adds	r3, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7fd fece 	bl	800367e <vListInsert>
 80058e2:	e017      	b.n	8005914 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058e4:	2300      	movs	r3, #0
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	2300      	movs	r3, #0
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	2100      	movs	r1, #0
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff fd58 	bl	80053a4 <xTimerGenericCommand>
 80058f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	603b      	str	r3, [r7, #0]
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005914:	4b09      	ldr	r3, [pc, #36]	@ (800593c <prvSwitchTimerLists+0xc4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1b0      	bne.n	8005880 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800591e:	4b07      	ldr	r3, [pc, #28]	@ (800593c <prvSwitchTimerLists+0xc4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <prvSwitchTimerLists+0xc8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a04      	ldr	r2, [pc, #16]	@ (800593c <prvSwitchTimerLists+0xc4>)
 800592a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800592c:	4a04      	ldr	r2, [pc, #16]	@ (8005940 <prvSwitchTimerLists+0xc8>)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	6013      	str	r3, [r2, #0]
}
 8005932:	bf00      	nop
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000df4 	.word	0x20000df4
 8005940:	20000df8 	.word	0x20000df8

08005944 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800594a:	f000 f98d 	bl	8005c68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800594e:	4b15      	ldr	r3, [pc, #84]	@ (80059a4 <prvCheckForValidListAndQueue+0x60>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d120      	bne.n	8005998 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005956:	4814      	ldr	r0, [pc, #80]	@ (80059a8 <prvCheckForValidListAndQueue+0x64>)
 8005958:	f7fd fe40 	bl	80035dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800595c:	4813      	ldr	r0, [pc, #76]	@ (80059ac <prvCheckForValidListAndQueue+0x68>)
 800595e:	f7fd fe3d 	bl	80035dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005962:	4b13      	ldr	r3, [pc, #76]	@ (80059b0 <prvCheckForValidListAndQueue+0x6c>)
 8005964:	4a10      	ldr	r2, [pc, #64]	@ (80059a8 <prvCheckForValidListAndQueue+0x64>)
 8005966:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005968:	4b12      	ldr	r3, [pc, #72]	@ (80059b4 <prvCheckForValidListAndQueue+0x70>)
 800596a:	4a10      	ldr	r2, [pc, #64]	@ (80059ac <prvCheckForValidListAndQueue+0x68>)
 800596c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800596e:	2300      	movs	r3, #0
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	4b11      	ldr	r3, [pc, #68]	@ (80059b8 <prvCheckForValidListAndQueue+0x74>)
 8005974:	4a11      	ldr	r2, [pc, #68]	@ (80059bc <prvCheckForValidListAndQueue+0x78>)
 8005976:	2110      	movs	r1, #16
 8005978:	200a      	movs	r0, #10
 800597a:	f7fd ff4d 	bl	8003818 <xQueueGenericCreateStatic>
 800597e:	4603      	mov	r3, r0
 8005980:	4a08      	ldr	r2, [pc, #32]	@ (80059a4 <prvCheckForValidListAndQueue+0x60>)
 8005982:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005984:	4b07      	ldr	r3, [pc, #28]	@ (80059a4 <prvCheckForValidListAndQueue+0x60>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <prvCheckForValidListAndQueue+0x60>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	490b      	ldr	r1, [pc, #44]	@ (80059c0 <prvCheckForValidListAndQueue+0x7c>)
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fc30 	bl	80041f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005998:	f000 f998 	bl	8005ccc <vPortExitCritical>
}
 800599c:	bf00      	nop
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000dfc 	.word	0x20000dfc
 80059a8:	20000dcc 	.word	0x20000dcc
 80059ac:	20000de0 	.word	0x20000de0
 80059b0:	20000df4 	.word	0x20000df4
 80059b4:	20000df8 	.word	0x20000df8
 80059b8:	20000ea8 	.word	0x20000ea8
 80059bc:	20000e08 	.word	0x20000e08
 80059c0:	08007330 	.word	0x08007330

080059c4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <pvTimerGetTimerID+0x2a>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80059ee:	f000 f93b 	bl	8005c68 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80059f8:	f000 f968 	bl	8005ccc <vPortExitCritical>

	return pvReturn;
 80059fc:	693b      	ldr	r3, [r7, #16]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3b04      	subs	r3, #4
 8005a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3b04      	subs	r3, #4
 8005a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f023 0201 	bic.w	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3b04      	subs	r3, #4
 8005a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a38:	4a0c      	ldr	r2, [pc, #48]	@ (8005a6c <pxPortInitialiseStack+0x64>)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3b14      	subs	r3, #20
 8005a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3b04      	subs	r3, #4
 8005a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f06f 0202 	mvn.w	r2, #2
 8005a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b20      	subs	r3, #32
 8005a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	08005a71 	.word	0x08005a71

08005a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a7a:	4b13      	ldr	r3, [pc, #76]	@ (8005ac8 <prvTaskExitError+0x58>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d00b      	beq.n	8005a9c <prvTaskExitError+0x2c>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	60fb      	str	r3, [r7, #12]
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <prvTaskExitError+0x28>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	60bb      	str	r3, [r7, #8]
}
 8005aae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ab0:	bf00      	nop
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0fc      	beq.n	8005ab2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	2000000c 	.word	0x2000000c
 8005acc:	00000000 	.word	0x00000000

08005ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ad0:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <pxCurrentTCBConst2>)
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	6808      	ldr	r0, [r1, #0]
 8005ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f380 8809 	msr	PSP, r0
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8811 	msr	BASEPRI, r0
 8005aea:	4770      	bx	lr
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst2>:
 8005af0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005af8:	4808      	ldr	r0, [pc, #32]	@ (8005b1c <prvPortStartFirstTask+0x24>)
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f380 8808 	msr	MSP, r0
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8814 	msr	CONTROL, r0
 8005b0a:	b662      	cpsie	i
 8005b0c:	b661      	cpsie	f
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	df00      	svc	0
 8005b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b1a:	bf00      	nop
 8005b1c:	e000ed08 	.word	0xe000ed08

08005b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <xPortStartScheduler+0x124>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a47      	ldr	r2, [pc, #284]	@ (8005c48 <xPortStartScheduler+0x128>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10b      	bne.n	8005b48 <xPortStartScheduler+0x28>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b48:	4b3e      	ldr	r3, [pc, #248]	@ (8005c44 <xPortStartScheduler+0x124>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c4c <xPortStartScheduler+0x12c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10b      	bne.n	8005b6a <xPortStartScheduler+0x4a>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	613b      	str	r3, [r7, #16]
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	e7fd      	b.n	8005b66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b6a:	4b39      	ldr	r3, [pc, #228]	@ (8005c50 <xPortStartScheduler+0x130>)
 8005b6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	22ff      	movs	r2, #255	@ 0xff
 8005b7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	4b31      	ldr	r3, [pc, #196]	@ (8005c54 <xPortStartScheduler+0x134>)
 8005b90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b92:	4b31      	ldr	r3, [pc, #196]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b98:	e009      	b.n	8005bae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005ba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb6:	2b80      	cmp	r3, #128	@ 0x80
 8005bb8:	d0ef      	beq.n	8005b9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bba:	4b27      	ldr	r3, [pc, #156]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1c3 0307 	rsb	r3, r3, #7
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d00b      	beq.n	8005bde <xPortStartScheduler+0xbe>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60bb      	str	r3, [r7, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bde:	4b1e      	ldr	r3, [pc, #120]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bfc:	4b17      	ldr	r3, [pc, #92]	@ (8005c5c <xPortStartScheduler+0x13c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a16      	ldr	r2, [pc, #88]	@ (8005c5c <xPortStartScheduler+0x13c>)
 8005c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c08:	4b14      	ldr	r3, [pc, #80]	@ (8005c5c <xPortStartScheduler+0x13c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a13      	ldr	r2, [pc, #76]	@ (8005c5c <xPortStartScheduler+0x13c>)
 8005c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c14:	f000 f8da 	bl	8005dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c18:	4b11      	ldr	r3, [pc, #68]	@ (8005c60 <xPortStartScheduler+0x140>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c1e:	f000 f8f9 	bl	8005e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c22:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <xPortStartScheduler+0x144>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a0f      	ldr	r2, [pc, #60]	@ (8005c64 <xPortStartScheduler+0x144>)
 8005c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c2e:	f7ff ff63 	bl	8005af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c32:	f7fe ff19 	bl	8004a68 <vTaskSwitchContext>
	prvTaskExitError();
 8005c36:	f7ff ff1b 	bl	8005a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	e000ed00 	.word	0xe000ed00
 8005c48:	410fc271 	.word	0x410fc271
 8005c4c:	410fc270 	.word	0x410fc270
 8005c50:	e000e400 	.word	0xe000e400
 8005c54:	20000ef8 	.word	0x20000ef8
 8005c58:	20000efc 	.word	0x20000efc
 8005c5c:	e000ed20 	.word	0xe000ed20
 8005c60:	2000000c 	.word	0x2000000c
 8005c64:	e000ef34 	.word	0xe000ef34

08005c68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	607b      	str	r3, [r7, #4]
}
 8005c80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c82:	4b10      	ldr	r3, [pc, #64]	@ (8005cc4 <vPortEnterCritical+0x5c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	4a0e      	ldr	r2, [pc, #56]	@ (8005cc4 <vPortEnterCritical+0x5c>)
 8005c8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <vPortEnterCritical+0x5c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d110      	bne.n	8005cb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c94:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <vPortEnterCritical+0x60>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	603b      	str	r3, [r7, #0]
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	e7fd      	b.n	8005cb2 <vPortEnterCritical+0x4a>
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	2000000c 	.word	0x2000000c
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cd2:	4b12      	ldr	r3, [pc, #72]	@ (8005d1c <vPortExitCritical+0x50>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <vPortExitCritical+0x26>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	607b      	str	r3, [r7, #4]
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <vPortExitCritical+0x50>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	4a08      	ldr	r2, [pc, #32]	@ (8005d1c <vPortExitCritical+0x50>)
 8005cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cfc:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <vPortExitCritical+0x50>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <vPortExitCritical+0x44>
 8005d04:	2300      	movs	r3, #0
 8005d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	f383 8811 	msr	BASEPRI, r3
}
 8005d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	2000000c 	.word	0x2000000c

08005d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d20:	f3ef 8009 	mrs	r0, PSP
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4b15      	ldr	r3, [pc, #84]	@ (8005d80 <pxCurrentTCBConst>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	f01e 0f10 	tst.w	lr, #16
 8005d30:	bf08      	it	eq
 8005d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	6010      	str	r0, [r2, #0]
 8005d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d44:	f380 8811 	msr	BASEPRI, r0
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f7fe fe8a 	bl	8004a68 <vTaskSwitchContext>
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f380 8811 	msr	BASEPRI, r0
 8005d5c:	bc09      	pop	{r0, r3}
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	6808      	ldr	r0, [r1, #0]
 8005d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d66:	f01e 0f10 	tst.w	lr, #16
 8005d6a:	bf08      	it	eq
 8005d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d70:	f380 8809 	msr	PSP, r0
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst>:
 8005d80:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005da2:	f7fe fda7 	bl	80048f4 <xTaskIncrementTick>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <xPortSysTickHandler+0x40>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <vPortSetupTimerInterrupt+0x38>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e08 <vPortSetupTimerInterrupt+0x3c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <vPortSetupTimerInterrupt+0x40>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	4a09      	ldr	r2, [pc, #36]	@ (8005e10 <vPortSetupTimerInterrupt+0x44>)
 8005dea:	3b01      	subs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dee:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005df0:	2207      	movs	r2, #7
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000e010 	.word	0xe000e010
 8005e04:	e000e018 	.word	0xe000e018
 8005e08:	20000000 	.word	0x20000000
 8005e0c:	10624dd3 	.word	0x10624dd3
 8005e10:	e000e014 	.word	0xe000e014

08005e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e24 <vPortEnableVFP+0x10>
 8005e18:	6801      	ldr	r1, [r0, #0]
 8005e1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e1e:	6001      	str	r1, [r0, #0]
 8005e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e22:	bf00      	nop
 8005e24:	e000ed88 	.word	0xe000ed88

08005e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e2e:	f3ef 8305 	mrs	r3, IPSR
 8005e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b0f      	cmp	r3, #15
 8005e38:	d915      	bls.n	8005e66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e3a:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <vPortValidateInterruptPriority+0x74>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e44:	4b16      	ldr	r3, [pc, #88]	@ (8005ea0 <vPortValidateInterruptPriority+0x78>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	7afa      	ldrb	r2, [r7, #11]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d20b      	bcs.n	8005e66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <vPortValidateInterruptPriority+0x7c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <vPortValidateInterruptPriority+0x80>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d90b      	bls.n	8005e8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	603b      	str	r3, [r7, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <vPortValidateInterruptPriority+0x62>
	}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000e3f0 	.word	0xe000e3f0
 8005ea0:	20000ef8 	.word	0x20000ef8
 8005ea4:	e000ed0c 	.word	0xe000ed0c
 8005ea8:	20000efc 	.word	0x20000efc

08005eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	@ 0x28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005eb8:	f7fe fc60 	bl	800477c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8006030 <pvPortMalloc+0x184>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ec4:	f000 f924 	bl	8006110 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8006034 <pvPortMalloc+0x188>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 8095 	bne.w	8006000 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01e      	beq.n	8005f1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005edc:	2208      	movs	r2, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d015      	beq.n	8005f1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f023 0307 	bic.w	r3, r3, #7
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <pvPortMalloc+0x6e>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	617b      	str	r3, [r7, #20]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d06f      	beq.n	8006000 <pvPortMalloc+0x154>
 8005f20:	4b45      	ldr	r3, [pc, #276]	@ (8006038 <pvPortMalloc+0x18c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d86a      	bhi.n	8006000 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f2a:	4b44      	ldr	r3, [pc, #272]	@ (800603c <pvPortMalloc+0x190>)
 8005f2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f2e:	4b43      	ldr	r3, [pc, #268]	@ (800603c <pvPortMalloc+0x190>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f34:	e004      	b.n	8005f40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d903      	bls.n	8005f52 <pvPortMalloc+0xa6>
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f1      	bne.n	8005f36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f52:	4b37      	ldr	r3, [pc, #220]	@ (8006030 <pvPortMalloc+0x184>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d051      	beq.n	8006000 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2208      	movs	r2, #8
 8005f62:	4413      	add	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	2308      	movs	r3, #8
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d920      	bls.n	8005fc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <pvPortMalloc+0xfc>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	613b      	str	r3, [r7, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fba:	69b8      	ldr	r0, [r7, #24]
 8005fbc:	f000 f90a 	bl	80061d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006038 <pvPortMalloc+0x18c>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	4a1b      	ldr	r2, [pc, #108]	@ (8006038 <pvPortMalloc+0x18c>)
 8005fcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fce:	4b1a      	ldr	r3, [pc, #104]	@ (8006038 <pvPortMalloc+0x18c>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006040 <pvPortMalloc+0x194>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d203      	bcs.n	8005fe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fda:	4b17      	ldr	r3, [pc, #92]	@ (8006038 <pvPortMalloc+0x18c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a18      	ldr	r2, [pc, #96]	@ (8006040 <pvPortMalloc+0x194>)
 8005fe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	4b13      	ldr	r3, [pc, #76]	@ (8006034 <pvPortMalloc+0x188>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ff6:	4b13      	ldr	r3, [pc, #76]	@ (8006044 <pvPortMalloc+0x198>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <pvPortMalloc+0x198>)
 8005ffe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006000:	f7fe fbca 	bl	8004798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <pvPortMalloc+0x17a>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	60fb      	str	r3, [r7, #12]
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	e7fd      	b.n	8006022 <pvPortMalloc+0x176>
	return pvReturn;
 8006026:	69fb      	ldr	r3, [r7, #28]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3728      	adds	r7, #40	@ 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20004b08 	.word	0x20004b08
 8006034:	20004b1c 	.word	0x20004b1c
 8006038:	20004b0c 	.word	0x20004b0c
 800603c:	20004b00 	.word	0x20004b00
 8006040:	20004b10 	.word	0x20004b10
 8006044:	20004b14 	.word	0x20004b14

08006048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d04f      	beq.n	80060fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800605a:	2308      	movs	r3, #8
 800605c:	425b      	negs	r3, r3
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4b25      	ldr	r3, [pc, #148]	@ (8006104 <vPortFree+0xbc>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <vPortFree+0x46>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60fb      	str	r3, [r7, #12]
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	e7fd      	b.n	800608a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <vPortFree+0x66>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60bb      	str	r3, [r7, #8]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	4b14      	ldr	r3, [pc, #80]	@ (8006104 <vPortFree+0xbc>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01e      	beq.n	80060fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d11a      	bne.n	80060fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006104 <vPortFree+0xbc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	401a      	ands	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060d4:	f7fe fb52 	bl	800477c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <vPortFree+0xc0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4413      	add	r3, r2
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <vPortFree+0xc0>)
 80060e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060e6:	6938      	ldr	r0, [r7, #16]
 80060e8:	f000 f874 	bl	80061d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060ec:	4b07      	ldr	r3, [pc, #28]	@ (800610c <vPortFree+0xc4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a06      	ldr	r2, [pc, #24]	@ (800610c <vPortFree+0xc4>)
 80060f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060f6:	f7fe fb4f 	bl	8004798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060fa:	bf00      	nop
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20004b1c 	.word	0x20004b1c
 8006108:	20004b0c 	.word	0x20004b0c
 800610c:	20004b18 	.word	0x20004b18

08006110 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006116:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800611a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800611c:	4b27      	ldr	r3, [pc, #156]	@ (80061bc <prvHeapInit+0xac>)
 800611e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3307      	adds	r3, #7
 800612e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0307 	bic.w	r3, r3, #7
 8006136:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	4a1f      	ldr	r2, [pc, #124]	@ (80061bc <prvHeapInit+0xac>)
 8006140:	4413      	add	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <prvHeapInit+0xb0>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800614e:	4b1c      	ldr	r3, [pc, #112]	@ (80061c0 <prvHeapInit+0xb0>)
 8006150:	2200      	movs	r2, #0
 8006152:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4413      	add	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800615c:	2208      	movs	r2, #8
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0307 	bic.w	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <prvHeapInit+0xb4>)
 8006170:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006172:	4b14      	ldr	r3, [pc, #80]	@ (80061c4 <prvHeapInit+0xb4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2200      	movs	r2, #0
 8006178:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800617a:	4b12      	ldr	r3, [pc, #72]	@ (80061c4 <prvHeapInit+0xb4>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006190:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <prvHeapInit+0xb4>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4a0a      	ldr	r2, [pc, #40]	@ (80061c8 <prvHeapInit+0xb8>)
 800619e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	4a09      	ldr	r2, [pc, #36]	@ (80061cc <prvHeapInit+0xbc>)
 80061a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061a8:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <prvHeapInit+0xc0>)
 80061aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061ae:	601a      	str	r2, [r3, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	20000f00 	.word	0x20000f00
 80061c0:	20004b00 	.word	0x20004b00
 80061c4:	20004b08 	.word	0x20004b08
 80061c8:	20004b10 	.word	0x20004b10
 80061cc:	20004b0c 	.word	0x20004b0c
 80061d0:	20004b1c 	.word	0x20004b1c

080061d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061dc:	4b28      	ldr	r3, [pc, #160]	@ (8006280 <prvInsertBlockIntoFreeList+0xac>)
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e002      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x14>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d8f7      	bhi.n	80061e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4413      	add	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d108      	bne.n	8006216 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	441a      	add	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	441a      	add	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d118      	bne.n	800625c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <prvInsertBlockIntoFreeList+0xb0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d00d      	beq.n	8006252 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	441a      	add	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e008      	b.n	8006264 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006252:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <prvInsertBlockIntoFreeList+0xb0>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e003      	b.n	8006264 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	d002      	beq.n	8006272 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20004b00 	.word	0x20004b00
 8006284:	20004b08 	.word	0x20004b08

08006288 <std>:
 8006288:	2300      	movs	r3, #0
 800628a:	b510      	push	{r4, lr}
 800628c:	4604      	mov	r4, r0
 800628e:	e9c0 3300 	strd	r3, r3, [r0]
 8006292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006296:	6083      	str	r3, [r0, #8]
 8006298:	8181      	strh	r1, [r0, #12]
 800629a:	6643      	str	r3, [r0, #100]	@ 0x64
 800629c:	81c2      	strh	r2, [r0, #14]
 800629e:	6183      	str	r3, [r0, #24]
 80062a0:	4619      	mov	r1, r3
 80062a2:	2208      	movs	r2, #8
 80062a4:	305c      	adds	r0, #92	@ 0x5c
 80062a6:	f000 f9f9 	bl	800669c <memset>
 80062aa:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <std+0x58>)
 80062ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <std+0x5c>)
 80062b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062b2:	4b0d      	ldr	r3, [pc, #52]	@ (80062e8 <std+0x60>)
 80062b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062b6:	4b0d      	ldr	r3, [pc, #52]	@ (80062ec <std+0x64>)
 80062b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80062ba:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <std+0x68>)
 80062bc:	6224      	str	r4, [r4, #32]
 80062be:	429c      	cmp	r4, r3
 80062c0:	d006      	beq.n	80062d0 <std+0x48>
 80062c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062c6:	4294      	cmp	r4, r2
 80062c8:	d002      	beq.n	80062d0 <std+0x48>
 80062ca:	33d0      	adds	r3, #208	@ 0xd0
 80062cc:	429c      	cmp	r4, r3
 80062ce:	d105      	bne.n	80062dc <std+0x54>
 80062d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d8:	f000 bab6 	b.w	8006848 <__retarget_lock_init_recursive>
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	080064ed 	.word	0x080064ed
 80062e4:	0800650f 	.word	0x0800650f
 80062e8:	08006547 	.word	0x08006547
 80062ec:	0800656b 	.word	0x0800656b
 80062f0:	20004b20 	.word	0x20004b20

080062f4 <stdio_exit_handler>:
 80062f4:	4a02      	ldr	r2, [pc, #8]	@ (8006300 <stdio_exit_handler+0xc>)
 80062f6:	4903      	ldr	r1, [pc, #12]	@ (8006304 <stdio_exit_handler+0x10>)
 80062f8:	4803      	ldr	r0, [pc, #12]	@ (8006308 <stdio_exit_handler+0x14>)
 80062fa:	f000 b869 	b.w	80063d0 <_fwalk_sglue>
 80062fe:	bf00      	nop
 8006300:	20000010 	.word	0x20000010
 8006304:	08007101 	.word	0x08007101
 8006308:	20000020 	.word	0x20000020

0800630c <cleanup_stdio>:
 800630c:	6841      	ldr	r1, [r0, #4]
 800630e:	4b0c      	ldr	r3, [pc, #48]	@ (8006340 <cleanup_stdio+0x34>)
 8006310:	4299      	cmp	r1, r3
 8006312:	b510      	push	{r4, lr}
 8006314:	4604      	mov	r4, r0
 8006316:	d001      	beq.n	800631c <cleanup_stdio+0x10>
 8006318:	f000 fef2 	bl	8007100 <_fflush_r>
 800631c:	68a1      	ldr	r1, [r4, #8]
 800631e:	4b09      	ldr	r3, [pc, #36]	@ (8006344 <cleanup_stdio+0x38>)
 8006320:	4299      	cmp	r1, r3
 8006322:	d002      	beq.n	800632a <cleanup_stdio+0x1e>
 8006324:	4620      	mov	r0, r4
 8006326:	f000 feeb 	bl	8007100 <_fflush_r>
 800632a:	68e1      	ldr	r1, [r4, #12]
 800632c:	4b06      	ldr	r3, [pc, #24]	@ (8006348 <cleanup_stdio+0x3c>)
 800632e:	4299      	cmp	r1, r3
 8006330:	d004      	beq.n	800633c <cleanup_stdio+0x30>
 8006332:	4620      	mov	r0, r4
 8006334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006338:	f000 bee2 	b.w	8007100 <_fflush_r>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	bf00      	nop
 8006340:	20004b20 	.word	0x20004b20
 8006344:	20004b88 	.word	0x20004b88
 8006348:	20004bf0 	.word	0x20004bf0

0800634c <global_stdio_init.part.0>:
 800634c:	b510      	push	{r4, lr}
 800634e:	4b0b      	ldr	r3, [pc, #44]	@ (800637c <global_stdio_init.part.0+0x30>)
 8006350:	4c0b      	ldr	r4, [pc, #44]	@ (8006380 <global_stdio_init.part.0+0x34>)
 8006352:	4a0c      	ldr	r2, [pc, #48]	@ (8006384 <global_stdio_init.part.0+0x38>)
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	4620      	mov	r0, r4
 8006358:	2200      	movs	r2, #0
 800635a:	2104      	movs	r1, #4
 800635c:	f7ff ff94 	bl	8006288 <std>
 8006360:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006364:	2201      	movs	r2, #1
 8006366:	2109      	movs	r1, #9
 8006368:	f7ff ff8e 	bl	8006288 <std>
 800636c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006370:	2202      	movs	r2, #2
 8006372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006376:	2112      	movs	r1, #18
 8006378:	f7ff bf86 	b.w	8006288 <std>
 800637c:	20004c58 	.word	0x20004c58
 8006380:	20004b20 	.word	0x20004b20
 8006384:	080062f5 	.word	0x080062f5

08006388 <__sfp_lock_acquire>:
 8006388:	4801      	ldr	r0, [pc, #4]	@ (8006390 <__sfp_lock_acquire+0x8>)
 800638a:	f000 ba5e 	b.w	800684a <__retarget_lock_acquire_recursive>
 800638e:	bf00      	nop
 8006390:	20004c61 	.word	0x20004c61

08006394 <__sfp_lock_release>:
 8006394:	4801      	ldr	r0, [pc, #4]	@ (800639c <__sfp_lock_release+0x8>)
 8006396:	f000 ba59 	b.w	800684c <__retarget_lock_release_recursive>
 800639a:	bf00      	nop
 800639c:	20004c61 	.word	0x20004c61

080063a0 <__sinit>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	4604      	mov	r4, r0
 80063a4:	f7ff fff0 	bl	8006388 <__sfp_lock_acquire>
 80063a8:	6a23      	ldr	r3, [r4, #32]
 80063aa:	b11b      	cbz	r3, 80063b4 <__sinit+0x14>
 80063ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b0:	f7ff bff0 	b.w	8006394 <__sfp_lock_release>
 80063b4:	4b04      	ldr	r3, [pc, #16]	@ (80063c8 <__sinit+0x28>)
 80063b6:	6223      	str	r3, [r4, #32]
 80063b8:	4b04      	ldr	r3, [pc, #16]	@ (80063cc <__sinit+0x2c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f5      	bne.n	80063ac <__sinit+0xc>
 80063c0:	f7ff ffc4 	bl	800634c <global_stdio_init.part.0>
 80063c4:	e7f2      	b.n	80063ac <__sinit+0xc>
 80063c6:	bf00      	nop
 80063c8:	0800630d 	.word	0x0800630d
 80063cc:	20004c58 	.word	0x20004c58

080063d0 <_fwalk_sglue>:
 80063d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d4:	4607      	mov	r7, r0
 80063d6:	4688      	mov	r8, r1
 80063d8:	4614      	mov	r4, r2
 80063da:	2600      	movs	r6, #0
 80063dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063e0:	f1b9 0901 	subs.w	r9, r9, #1
 80063e4:	d505      	bpl.n	80063f2 <_fwalk_sglue+0x22>
 80063e6:	6824      	ldr	r4, [r4, #0]
 80063e8:	2c00      	cmp	r4, #0
 80063ea:	d1f7      	bne.n	80063dc <_fwalk_sglue+0xc>
 80063ec:	4630      	mov	r0, r6
 80063ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d907      	bls.n	8006408 <_fwalk_sglue+0x38>
 80063f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063fc:	3301      	adds	r3, #1
 80063fe:	d003      	beq.n	8006408 <_fwalk_sglue+0x38>
 8006400:	4629      	mov	r1, r5
 8006402:	4638      	mov	r0, r7
 8006404:	47c0      	blx	r8
 8006406:	4306      	orrs	r6, r0
 8006408:	3568      	adds	r5, #104	@ 0x68
 800640a:	e7e9      	b.n	80063e0 <_fwalk_sglue+0x10>

0800640c <iprintf>:
 800640c:	b40f      	push	{r0, r1, r2, r3}
 800640e:	b507      	push	{r0, r1, r2, lr}
 8006410:	4906      	ldr	r1, [pc, #24]	@ (800642c <iprintf+0x20>)
 8006412:	ab04      	add	r3, sp, #16
 8006414:	6808      	ldr	r0, [r1, #0]
 8006416:	f853 2b04 	ldr.w	r2, [r3], #4
 800641a:	6881      	ldr	r1, [r0, #8]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f000 fb47 	bl	8006ab0 <_vfiprintf_r>
 8006422:	b003      	add	sp, #12
 8006424:	f85d eb04 	ldr.w	lr, [sp], #4
 8006428:	b004      	add	sp, #16
 800642a:	4770      	bx	lr
 800642c:	2000001c 	.word	0x2000001c

08006430 <_puts_r>:
 8006430:	6a03      	ldr	r3, [r0, #32]
 8006432:	b570      	push	{r4, r5, r6, lr}
 8006434:	6884      	ldr	r4, [r0, #8]
 8006436:	4605      	mov	r5, r0
 8006438:	460e      	mov	r6, r1
 800643a:	b90b      	cbnz	r3, 8006440 <_puts_r+0x10>
 800643c:	f7ff ffb0 	bl	80063a0 <__sinit>
 8006440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006442:	07db      	lsls	r3, r3, #31
 8006444:	d405      	bmi.n	8006452 <_puts_r+0x22>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	0598      	lsls	r0, r3, #22
 800644a:	d402      	bmi.n	8006452 <_puts_r+0x22>
 800644c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800644e:	f000 f9fc 	bl	800684a <__retarget_lock_acquire_recursive>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	0719      	lsls	r1, r3, #28
 8006456:	d502      	bpl.n	800645e <_puts_r+0x2e>
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d135      	bne.n	80064ca <_puts_r+0x9a>
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 f8c5 	bl	80065f0 <__swsetup_r>
 8006466:	b380      	cbz	r0, 80064ca <_puts_r+0x9a>
 8006468:	f04f 35ff 	mov.w	r5, #4294967295
 800646c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800646e:	07da      	lsls	r2, r3, #31
 8006470:	d405      	bmi.n	800647e <_puts_r+0x4e>
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	059b      	lsls	r3, r3, #22
 8006476:	d402      	bmi.n	800647e <_puts_r+0x4e>
 8006478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800647a:	f000 f9e7 	bl	800684c <__retarget_lock_release_recursive>
 800647e:	4628      	mov	r0, r5
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	2b00      	cmp	r3, #0
 8006484:	da04      	bge.n	8006490 <_puts_r+0x60>
 8006486:	69a2      	ldr	r2, [r4, #24]
 8006488:	429a      	cmp	r2, r3
 800648a:	dc17      	bgt.n	80064bc <_puts_r+0x8c>
 800648c:	290a      	cmp	r1, #10
 800648e:	d015      	beq.n	80064bc <_puts_r+0x8c>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	6022      	str	r2, [r4, #0]
 8006496:	7019      	strb	r1, [r3, #0]
 8006498:	68a3      	ldr	r3, [r4, #8]
 800649a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800649e:	3b01      	subs	r3, #1
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	2900      	cmp	r1, #0
 80064a4:	d1ed      	bne.n	8006482 <_puts_r+0x52>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	da11      	bge.n	80064ce <_puts_r+0x9e>
 80064aa:	4622      	mov	r2, r4
 80064ac:	210a      	movs	r1, #10
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 f85f 	bl	8006572 <__swbuf_r>
 80064b4:	3001      	adds	r0, #1
 80064b6:	d0d7      	beq.n	8006468 <_puts_r+0x38>
 80064b8:	250a      	movs	r5, #10
 80064ba:	e7d7      	b.n	800646c <_puts_r+0x3c>
 80064bc:	4622      	mov	r2, r4
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 f857 	bl	8006572 <__swbuf_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d1e7      	bne.n	8006498 <_puts_r+0x68>
 80064c8:	e7ce      	b.n	8006468 <_puts_r+0x38>
 80064ca:	3e01      	subs	r6, #1
 80064cc:	e7e4      	b.n	8006498 <_puts_r+0x68>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	6022      	str	r2, [r4, #0]
 80064d4:	220a      	movs	r2, #10
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e7ee      	b.n	80064b8 <_puts_r+0x88>
	...

080064dc <puts>:
 80064dc:	4b02      	ldr	r3, [pc, #8]	@ (80064e8 <puts+0xc>)
 80064de:	4601      	mov	r1, r0
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	f7ff bfa5 	b.w	8006430 <_puts_r>
 80064e6:	bf00      	nop
 80064e8:	2000001c 	.word	0x2000001c

080064ec <__sread>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	460c      	mov	r4, r1
 80064f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f4:	f000 f95a 	bl	80067ac <_read_r>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	bfab      	itete	ge
 80064fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006500:	181b      	addge	r3, r3, r0
 8006502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006506:	bfac      	ite	ge
 8006508:	6563      	strge	r3, [r4, #84]	@ 0x54
 800650a:	81a3      	strhlt	r3, [r4, #12]
 800650c:	bd10      	pop	{r4, pc}

0800650e <__swrite>:
 800650e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006512:	461f      	mov	r7, r3
 8006514:	898b      	ldrh	r3, [r1, #12]
 8006516:	05db      	lsls	r3, r3, #23
 8006518:	4605      	mov	r5, r0
 800651a:	460c      	mov	r4, r1
 800651c:	4616      	mov	r6, r2
 800651e:	d505      	bpl.n	800652c <__swrite+0x1e>
 8006520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006524:	2302      	movs	r3, #2
 8006526:	2200      	movs	r2, #0
 8006528:	f000 f92e 	bl	8006788 <_lseek_r>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	4632      	mov	r2, r6
 800653a:	463b      	mov	r3, r7
 800653c:	4628      	mov	r0, r5
 800653e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	f000 b945 	b.w	80067d0 <_write_r>

08006546 <__sseek>:
 8006546:	b510      	push	{r4, lr}
 8006548:	460c      	mov	r4, r1
 800654a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654e:	f000 f91b 	bl	8006788 <_lseek_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	bf15      	itete	ne
 8006558:	6560      	strne	r0, [r4, #84]	@ 0x54
 800655a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800655e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006562:	81a3      	strheq	r3, [r4, #12]
 8006564:	bf18      	it	ne
 8006566:	81a3      	strhne	r3, [r4, #12]
 8006568:	bd10      	pop	{r4, pc}

0800656a <__sclose>:
 800656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656e:	f000 b89d 	b.w	80066ac <_close_r>

08006572 <__swbuf_r>:
 8006572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006574:	460e      	mov	r6, r1
 8006576:	4614      	mov	r4, r2
 8006578:	4605      	mov	r5, r0
 800657a:	b118      	cbz	r0, 8006584 <__swbuf_r+0x12>
 800657c:	6a03      	ldr	r3, [r0, #32]
 800657e:	b90b      	cbnz	r3, 8006584 <__swbuf_r+0x12>
 8006580:	f7ff ff0e 	bl	80063a0 <__sinit>
 8006584:	69a3      	ldr	r3, [r4, #24]
 8006586:	60a3      	str	r3, [r4, #8]
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	071a      	lsls	r2, r3, #28
 800658c:	d501      	bpl.n	8006592 <__swbuf_r+0x20>
 800658e:	6923      	ldr	r3, [r4, #16]
 8006590:	b943      	cbnz	r3, 80065a4 <__swbuf_r+0x32>
 8006592:	4621      	mov	r1, r4
 8006594:	4628      	mov	r0, r5
 8006596:	f000 f82b 	bl	80065f0 <__swsetup_r>
 800659a:	b118      	cbz	r0, 80065a4 <__swbuf_r+0x32>
 800659c:	f04f 37ff 	mov.w	r7, #4294967295
 80065a0:	4638      	mov	r0, r7
 80065a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	6922      	ldr	r2, [r4, #16]
 80065a8:	1a98      	subs	r0, r3, r2
 80065aa:	6963      	ldr	r3, [r4, #20]
 80065ac:	b2f6      	uxtb	r6, r6
 80065ae:	4283      	cmp	r3, r0
 80065b0:	4637      	mov	r7, r6
 80065b2:	dc05      	bgt.n	80065c0 <__swbuf_r+0x4e>
 80065b4:	4621      	mov	r1, r4
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 fda2 	bl	8007100 <_fflush_r>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d1ed      	bne.n	800659c <__swbuf_r+0x2a>
 80065c0:	68a3      	ldr	r3, [r4, #8]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	60a3      	str	r3, [r4, #8]
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	6022      	str	r2, [r4, #0]
 80065cc:	701e      	strb	r6, [r3, #0]
 80065ce:	6962      	ldr	r2, [r4, #20]
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d004      	beq.n	80065e0 <__swbuf_r+0x6e>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	07db      	lsls	r3, r3, #31
 80065da:	d5e1      	bpl.n	80065a0 <__swbuf_r+0x2e>
 80065dc:	2e0a      	cmp	r6, #10
 80065de:	d1df      	bne.n	80065a0 <__swbuf_r+0x2e>
 80065e0:	4621      	mov	r1, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 fd8c 	bl	8007100 <_fflush_r>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d0d9      	beq.n	80065a0 <__swbuf_r+0x2e>
 80065ec:	e7d6      	b.n	800659c <__swbuf_r+0x2a>
	...

080065f0 <__swsetup_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4b29      	ldr	r3, [pc, #164]	@ (8006698 <__swsetup_r+0xa8>)
 80065f4:	4605      	mov	r5, r0
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	460c      	mov	r4, r1
 80065fa:	b118      	cbz	r0, 8006604 <__swsetup_r+0x14>
 80065fc:	6a03      	ldr	r3, [r0, #32]
 80065fe:	b90b      	cbnz	r3, 8006604 <__swsetup_r+0x14>
 8006600:	f7ff fece 	bl	80063a0 <__sinit>
 8006604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006608:	0719      	lsls	r1, r3, #28
 800660a:	d422      	bmi.n	8006652 <__swsetup_r+0x62>
 800660c:	06da      	lsls	r2, r3, #27
 800660e:	d407      	bmi.n	8006620 <__swsetup_r+0x30>
 8006610:	2209      	movs	r2, #9
 8006612:	602a      	str	r2, [r5, #0]
 8006614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	f04f 30ff 	mov.w	r0, #4294967295
 800661e:	e033      	b.n	8006688 <__swsetup_r+0x98>
 8006620:	0758      	lsls	r0, r3, #29
 8006622:	d512      	bpl.n	800664a <__swsetup_r+0x5a>
 8006624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006626:	b141      	cbz	r1, 800663a <__swsetup_r+0x4a>
 8006628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800662c:	4299      	cmp	r1, r3
 800662e:	d002      	beq.n	8006636 <__swsetup_r+0x46>
 8006630:	4628      	mov	r0, r5
 8006632:	f000 f91b 	bl	800686c <_free_r>
 8006636:	2300      	movs	r3, #0
 8006638:	6363      	str	r3, [r4, #52]	@ 0x34
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006640:	81a3      	strh	r3, [r4, #12]
 8006642:	2300      	movs	r3, #0
 8006644:	6063      	str	r3, [r4, #4]
 8006646:	6923      	ldr	r3, [r4, #16]
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	f043 0308 	orr.w	r3, r3, #8
 8006650:	81a3      	strh	r3, [r4, #12]
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	b94b      	cbnz	r3, 800666a <__swsetup_r+0x7a>
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800665c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006660:	d003      	beq.n	800666a <__swsetup_r+0x7a>
 8006662:	4621      	mov	r1, r4
 8006664:	4628      	mov	r0, r5
 8006666:	f000 fd99 	bl	800719c <__smakebuf_r>
 800666a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666e:	f013 0201 	ands.w	r2, r3, #1
 8006672:	d00a      	beq.n	800668a <__swsetup_r+0x9a>
 8006674:	2200      	movs	r2, #0
 8006676:	60a2      	str	r2, [r4, #8]
 8006678:	6962      	ldr	r2, [r4, #20]
 800667a:	4252      	negs	r2, r2
 800667c:	61a2      	str	r2, [r4, #24]
 800667e:	6922      	ldr	r2, [r4, #16]
 8006680:	b942      	cbnz	r2, 8006694 <__swsetup_r+0xa4>
 8006682:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006686:	d1c5      	bne.n	8006614 <__swsetup_r+0x24>
 8006688:	bd38      	pop	{r3, r4, r5, pc}
 800668a:	0799      	lsls	r1, r3, #30
 800668c:	bf58      	it	pl
 800668e:	6962      	ldrpl	r2, [r4, #20]
 8006690:	60a2      	str	r2, [r4, #8]
 8006692:	e7f4      	b.n	800667e <__swsetup_r+0x8e>
 8006694:	2000      	movs	r0, #0
 8006696:	e7f7      	b.n	8006688 <__swsetup_r+0x98>
 8006698:	2000001c 	.word	0x2000001c

0800669c <memset>:
 800669c:	4402      	add	r2, r0
 800669e:	4603      	mov	r3, r0
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d100      	bne.n	80066a6 <memset+0xa>
 80066a4:	4770      	bx	lr
 80066a6:	f803 1b01 	strb.w	r1, [r3], #1
 80066aa:	e7f9      	b.n	80066a0 <memset+0x4>

080066ac <_close_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d06      	ldr	r5, [pc, #24]	@ (80066c8 <_close_r+0x1c>)
 80066b0:	2300      	movs	r3, #0
 80066b2:	4604      	mov	r4, r0
 80066b4:	4608      	mov	r0, r1
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	f7fa fb17 	bl	8000cea <_close>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_close_r+0x1a>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_close_r+0x1a>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	20004c5c 	.word	0x20004c5c

080066cc <_reclaim_reent>:
 80066cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006784 <_reclaim_reent+0xb8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4283      	cmp	r3, r0
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	4604      	mov	r4, r0
 80066d6:	d053      	beq.n	8006780 <_reclaim_reent+0xb4>
 80066d8:	69c3      	ldr	r3, [r0, #28]
 80066da:	b31b      	cbz	r3, 8006724 <_reclaim_reent+0x58>
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	b163      	cbz	r3, 80066fa <_reclaim_reent+0x2e>
 80066e0:	2500      	movs	r5, #0
 80066e2:	69e3      	ldr	r3, [r4, #28]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	5959      	ldr	r1, [r3, r5]
 80066e8:	b9b1      	cbnz	r1, 8006718 <_reclaim_reent+0x4c>
 80066ea:	3504      	adds	r5, #4
 80066ec:	2d80      	cmp	r5, #128	@ 0x80
 80066ee:	d1f8      	bne.n	80066e2 <_reclaim_reent+0x16>
 80066f0:	69e3      	ldr	r3, [r4, #28]
 80066f2:	4620      	mov	r0, r4
 80066f4:	68d9      	ldr	r1, [r3, #12]
 80066f6:	f000 f8b9 	bl	800686c <_free_r>
 80066fa:	69e3      	ldr	r3, [r4, #28]
 80066fc:	6819      	ldr	r1, [r3, #0]
 80066fe:	b111      	cbz	r1, 8006706 <_reclaim_reent+0x3a>
 8006700:	4620      	mov	r0, r4
 8006702:	f000 f8b3 	bl	800686c <_free_r>
 8006706:	69e3      	ldr	r3, [r4, #28]
 8006708:	689d      	ldr	r5, [r3, #8]
 800670a:	b15d      	cbz	r5, 8006724 <_reclaim_reent+0x58>
 800670c:	4629      	mov	r1, r5
 800670e:	4620      	mov	r0, r4
 8006710:	682d      	ldr	r5, [r5, #0]
 8006712:	f000 f8ab 	bl	800686c <_free_r>
 8006716:	e7f8      	b.n	800670a <_reclaim_reent+0x3e>
 8006718:	680e      	ldr	r6, [r1, #0]
 800671a:	4620      	mov	r0, r4
 800671c:	f000 f8a6 	bl	800686c <_free_r>
 8006720:	4631      	mov	r1, r6
 8006722:	e7e1      	b.n	80066e8 <_reclaim_reent+0x1c>
 8006724:	6961      	ldr	r1, [r4, #20]
 8006726:	b111      	cbz	r1, 800672e <_reclaim_reent+0x62>
 8006728:	4620      	mov	r0, r4
 800672a:	f000 f89f 	bl	800686c <_free_r>
 800672e:	69e1      	ldr	r1, [r4, #28]
 8006730:	b111      	cbz	r1, 8006738 <_reclaim_reent+0x6c>
 8006732:	4620      	mov	r0, r4
 8006734:	f000 f89a 	bl	800686c <_free_r>
 8006738:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800673a:	b111      	cbz	r1, 8006742 <_reclaim_reent+0x76>
 800673c:	4620      	mov	r0, r4
 800673e:	f000 f895 	bl	800686c <_free_r>
 8006742:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006744:	b111      	cbz	r1, 800674c <_reclaim_reent+0x80>
 8006746:	4620      	mov	r0, r4
 8006748:	f000 f890 	bl	800686c <_free_r>
 800674c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800674e:	b111      	cbz	r1, 8006756 <_reclaim_reent+0x8a>
 8006750:	4620      	mov	r0, r4
 8006752:	f000 f88b 	bl	800686c <_free_r>
 8006756:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006758:	b111      	cbz	r1, 8006760 <_reclaim_reent+0x94>
 800675a:	4620      	mov	r0, r4
 800675c:	f000 f886 	bl	800686c <_free_r>
 8006760:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006762:	b111      	cbz	r1, 800676a <_reclaim_reent+0x9e>
 8006764:	4620      	mov	r0, r4
 8006766:	f000 f881 	bl	800686c <_free_r>
 800676a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800676c:	b111      	cbz	r1, 8006774 <_reclaim_reent+0xa8>
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f87c 	bl	800686c <_free_r>
 8006774:	6a23      	ldr	r3, [r4, #32]
 8006776:	b11b      	cbz	r3, 8006780 <_reclaim_reent+0xb4>
 8006778:	4620      	mov	r0, r4
 800677a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800677e:	4718      	bx	r3
 8006780:	bd70      	pop	{r4, r5, r6, pc}
 8006782:	bf00      	nop
 8006784:	2000001c 	.word	0x2000001c

08006788 <_lseek_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	@ (80067a8 <_lseek_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa face 	bl	8000d38 <_lseek>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_lseek_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_lseek_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20004c5c 	.word	0x20004c5c

080067ac <_read_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	@ (80067cc <_read_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa fa5c 	bl	8000c78 <_read>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_read_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_read_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20004c5c 	.word	0x20004c5c

080067d0 <_write_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d07      	ldr	r5, [pc, #28]	@ (80067f0 <_write_r+0x20>)
 80067d4:	4604      	mov	r4, r0
 80067d6:	4608      	mov	r0, r1
 80067d8:	4611      	mov	r1, r2
 80067da:	2200      	movs	r2, #0
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	f7fa fa67 	bl	8000cb2 <_write>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_write_r+0x1e>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_write_r+0x1e>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	20004c5c 	.word	0x20004c5c

080067f4 <__errno>:
 80067f4:	4b01      	ldr	r3, [pc, #4]	@ (80067fc <__errno+0x8>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	2000001c 	.word	0x2000001c

08006800 <__libc_init_array>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4d0d      	ldr	r5, [pc, #52]	@ (8006838 <__libc_init_array+0x38>)
 8006804:	4c0d      	ldr	r4, [pc, #52]	@ (800683c <__libc_init_array+0x3c>)
 8006806:	1b64      	subs	r4, r4, r5
 8006808:	10a4      	asrs	r4, r4, #2
 800680a:	2600      	movs	r6, #0
 800680c:	42a6      	cmp	r6, r4
 800680e:	d109      	bne.n	8006824 <__libc_init_array+0x24>
 8006810:	4d0b      	ldr	r5, [pc, #44]	@ (8006840 <__libc_init_array+0x40>)
 8006812:	4c0c      	ldr	r4, [pc, #48]	@ (8006844 <__libc_init_array+0x44>)
 8006814:	f000 fd30 	bl	8007278 <_init>
 8006818:	1b64      	subs	r4, r4, r5
 800681a:	10a4      	asrs	r4, r4, #2
 800681c:	2600      	movs	r6, #0
 800681e:	42a6      	cmp	r6, r4
 8006820:	d105      	bne.n	800682e <__libc_init_array+0x2e>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	f855 3b04 	ldr.w	r3, [r5], #4
 8006828:	4798      	blx	r3
 800682a:	3601      	adds	r6, #1
 800682c:	e7ee      	b.n	800680c <__libc_init_array+0xc>
 800682e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006832:	4798      	blx	r3
 8006834:	3601      	adds	r6, #1
 8006836:	e7f2      	b.n	800681e <__libc_init_array+0x1e>
 8006838:	08007420 	.word	0x08007420
 800683c:	08007420 	.word	0x08007420
 8006840:	08007420 	.word	0x08007420
 8006844:	08007424 	.word	0x08007424

08006848 <__retarget_lock_init_recursive>:
 8006848:	4770      	bx	lr

0800684a <__retarget_lock_acquire_recursive>:
 800684a:	4770      	bx	lr

0800684c <__retarget_lock_release_recursive>:
 800684c:	4770      	bx	lr

0800684e <memcpy>:
 800684e:	440a      	add	r2, r1
 8006850:	4291      	cmp	r1, r2
 8006852:	f100 33ff 	add.w	r3, r0, #4294967295
 8006856:	d100      	bne.n	800685a <memcpy+0xc>
 8006858:	4770      	bx	lr
 800685a:	b510      	push	{r4, lr}
 800685c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006864:	4291      	cmp	r1, r2
 8006866:	d1f9      	bne.n	800685c <memcpy+0xe>
 8006868:	bd10      	pop	{r4, pc}
	...

0800686c <_free_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4605      	mov	r5, r0
 8006870:	2900      	cmp	r1, #0
 8006872:	d041      	beq.n	80068f8 <_free_r+0x8c>
 8006874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006878:	1f0c      	subs	r4, r1, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	bfb8      	it	lt
 800687e:	18e4      	addlt	r4, r4, r3
 8006880:	f000 f8e0 	bl	8006a44 <__malloc_lock>
 8006884:	4a1d      	ldr	r2, [pc, #116]	@ (80068fc <_free_r+0x90>)
 8006886:	6813      	ldr	r3, [r2, #0]
 8006888:	b933      	cbnz	r3, 8006898 <_free_r+0x2c>
 800688a:	6063      	str	r3, [r4, #4]
 800688c:	6014      	str	r4, [r2, #0]
 800688e:	4628      	mov	r0, r5
 8006890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006894:	f000 b8dc 	b.w	8006a50 <__malloc_unlock>
 8006898:	42a3      	cmp	r3, r4
 800689a:	d908      	bls.n	80068ae <_free_r+0x42>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	1821      	adds	r1, r4, r0
 80068a0:	428b      	cmp	r3, r1
 80068a2:	bf01      	itttt	eq
 80068a4:	6819      	ldreq	r1, [r3, #0]
 80068a6:	685b      	ldreq	r3, [r3, #4]
 80068a8:	1809      	addeq	r1, r1, r0
 80068aa:	6021      	streq	r1, [r4, #0]
 80068ac:	e7ed      	b.n	800688a <_free_r+0x1e>
 80068ae:	461a      	mov	r2, r3
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	b10b      	cbz	r3, 80068b8 <_free_r+0x4c>
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	d9fa      	bls.n	80068ae <_free_r+0x42>
 80068b8:	6811      	ldr	r1, [r2, #0]
 80068ba:	1850      	adds	r0, r2, r1
 80068bc:	42a0      	cmp	r0, r4
 80068be:	d10b      	bne.n	80068d8 <_free_r+0x6c>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	4401      	add	r1, r0
 80068c4:	1850      	adds	r0, r2, r1
 80068c6:	4283      	cmp	r3, r0
 80068c8:	6011      	str	r1, [r2, #0]
 80068ca:	d1e0      	bne.n	800688e <_free_r+0x22>
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	6053      	str	r3, [r2, #4]
 80068d2:	4408      	add	r0, r1
 80068d4:	6010      	str	r0, [r2, #0]
 80068d6:	e7da      	b.n	800688e <_free_r+0x22>
 80068d8:	d902      	bls.n	80068e0 <_free_r+0x74>
 80068da:	230c      	movs	r3, #12
 80068dc:	602b      	str	r3, [r5, #0]
 80068de:	e7d6      	b.n	800688e <_free_r+0x22>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	1821      	adds	r1, r4, r0
 80068e4:	428b      	cmp	r3, r1
 80068e6:	bf04      	itt	eq
 80068e8:	6819      	ldreq	r1, [r3, #0]
 80068ea:	685b      	ldreq	r3, [r3, #4]
 80068ec:	6063      	str	r3, [r4, #4]
 80068ee:	bf04      	itt	eq
 80068f0:	1809      	addeq	r1, r1, r0
 80068f2:	6021      	streq	r1, [r4, #0]
 80068f4:	6054      	str	r4, [r2, #4]
 80068f6:	e7ca      	b.n	800688e <_free_r+0x22>
 80068f8:	bd38      	pop	{r3, r4, r5, pc}
 80068fa:	bf00      	nop
 80068fc:	20004c68 	.word	0x20004c68

08006900 <sbrk_aligned>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	4e0f      	ldr	r6, [pc, #60]	@ (8006940 <sbrk_aligned+0x40>)
 8006904:	460c      	mov	r4, r1
 8006906:	6831      	ldr	r1, [r6, #0]
 8006908:	4605      	mov	r5, r0
 800690a:	b911      	cbnz	r1, 8006912 <sbrk_aligned+0x12>
 800690c:	f000 fca4 	bl	8007258 <_sbrk_r>
 8006910:	6030      	str	r0, [r6, #0]
 8006912:	4621      	mov	r1, r4
 8006914:	4628      	mov	r0, r5
 8006916:	f000 fc9f 	bl	8007258 <_sbrk_r>
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	d103      	bne.n	8006926 <sbrk_aligned+0x26>
 800691e:	f04f 34ff 	mov.w	r4, #4294967295
 8006922:	4620      	mov	r0, r4
 8006924:	bd70      	pop	{r4, r5, r6, pc}
 8006926:	1cc4      	adds	r4, r0, #3
 8006928:	f024 0403 	bic.w	r4, r4, #3
 800692c:	42a0      	cmp	r0, r4
 800692e:	d0f8      	beq.n	8006922 <sbrk_aligned+0x22>
 8006930:	1a21      	subs	r1, r4, r0
 8006932:	4628      	mov	r0, r5
 8006934:	f000 fc90 	bl	8007258 <_sbrk_r>
 8006938:	3001      	adds	r0, #1
 800693a:	d1f2      	bne.n	8006922 <sbrk_aligned+0x22>
 800693c:	e7ef      	b.n	800691e <sbrk_aligned+0x1e>
 800693e:	bf00      	nop
 8006940:	20004c64 	.word	0x20004c64

08006944 <_malloc_r>:
 8006944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006948:	1ccd      	adds	r5, r1, #3
 800694a:	f025 0503 	bic.w	r5, r5, #3
 800694e:	3508      	adds	r5, #8
 8006950:	2d0c      	cmp	r5, #12
 8006952:	bf38      	it	cc
 8006954:	250c      	movcc	r5, #12
 8006956:	2d00      	cmp	r5, #0
 8006958:	4606      	mov	r6, r0
 800695a:	db01      	blt.n	8006960 <_malloc_r+0x1c>
 800695c:	42a9      	cmp	r1, r5
 800695e:	d904      	bls.n	800696a <_malloc_r+0x26>
 8006960:	230c      	movs	r3, #12
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	2000      	movs	r0, #0
 8006966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a40 <_malloc_r+0xfc>
 800696e:	f000 f869 	bl	8006a44 <__malloc_lock>
 8006972:	f8d8 3000 	ldr.w	r3, [r8]
 8006976:	461c      	mov	r4, r3
 8006978:	bb44      	cbnz	r4, 80069cc <_malloc_r+0x88>
 800697a:	4629      	mov	r1, r5
 800697c:	4630      	mov	r0, r6
 800697e:	f7ff ffbf 	bl	8006900 <sbrk_aligned>
 8006982:	1c43      	adds	r3, r0, #1
 8006984:	4604      	mov	r4, r0
 8006986:	d158      	bne.n	8006a3a <_malloc_r+0xf6>
 8006988:	f8d8 4000 	ldr.w	r4, [r8]
 800698c:	4627      	mov	r7, r4
 800698e:	2f00      	cmp	r7, #0
 8006990:	d143      	bne.n	8006a1a <_malloc_r+0xd6>
 8006992:	2c00      	cmp	r4, #0
 8006994:	d04b      	beq.n	8006a2e <_malloc_r+0xea>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	4639      	mov	r1, r7
 800699a:	4630      	mov	r0, r6
 800699c:	eb04 0903 	add.w	r9, r4, r3
 80069a0:	f000 fc5a 	bl	8007258 <_sbrk_r>
 80069a4:	4581      	cmp	r9, r0
 80069a6:	d142      	bne.n	8006a2e <_malloc_r+0xea>
 80069a8:	6821      	ldr	r1, [r4, #0]
 80069aa:	1a6d      	subs	r5, r5, r1
 80069ac:	4629      	mov	r1, r5
 80069ae:	4630      	mov	r0, r6
 80069b0:	f7ff ffa6 	bl	8006900 <sbrk_aligned>
 80069b4:	3001      	adds	r0, #1
 80069b6:	d03a      	beq.n	8006a2e <_malloc_r+0xea>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	442b      	add	r3, r5
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	f8d8 3000 	ldr.w	r3, [r8]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	bb62      	cbnz	r2, 8006a20 <_malloc_r+0xdc>
 80069c6:	f8c8 7000 	str.w	r7, [r8]
 80069ca:	e00f      	b.n	80069ec <_malloc_r+0xa8>
 80069cc:	6822      	ldr	r2, [r4, #0]
 80069ce:	1b52      	subs	r2, r2, r5
 80069d0:	d420      	bmi.n	8006a14 <_malloc_r+0xd0>
 80069d2:	2a0b      	cmp	r2, #11
 80069d4:	d917      	bls.n	8006a06 <_malloc_r+0xc2>
 80069d6:	1961      	adds	r1, r4, r5
 80069d8:	42a3      	cmp	r3, r4
 80069da:	6025      	str	r5, [r4, #0]
 80069dc:	bf18      	it	ne
 80069de:	6059      	strne	r1, [r3, #4]
 80069e0:	6863      	ldr	r3, [r4, #4]
 80069e2:	bf08      	it	eq
 80069e4:	f8c8 1000 	streq.w	r1, [r8]
 80069e8:	5162      	str	r2, [r4, r5]
 80069ea:	604b      	str	r3, [r1, #4]
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f82f 	bl	8006a50 <__malloc_unlock>
 80069f2:	f104 000b 	add.w	r0, r4, #11
 80069f6:	1d23      	adds	r3, r4, #4
 80069f8:	f020 0007 	bic.w	r0, r0, #7
 80069fc:	1ac2      	subs	r2, r0, r3
 80069fe:	bf1c      	itt	ne
 8006a00:	1a1b      	subne	r3, r3, r0
 8006a02:	50a3      	strne	r3, [r4, r2]
 8006a04:	e7af      	b.n	8006966 <_malloc_r+0x22>
 8006a06:	6862      	ldr	r2, [r4, #4]
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	bf0c      	ite	eq
 8006a0c:	f8c8 2000 	streq.w	r2, [r8]
 8006a10:	605a      	strne	r2, [r3, #4]
 8006a12:	e7eb      	b.n	80069ec <_malloc_r+0xa8>
 8006a14:	4623      	mov	r3, r4
 8006a16:	6864      	ldr	r4, [r4, #4]
 8006a18:	e7ae      	b.n	8006978 <_malloc_r+0x34>
 8006a1a:	463c      	mov	r4, r7
 8006a1c:	687f      	ldr	r7, [r7, #4]
 8006a1e:	e7b6      	b.n	800698e <_malloc_r+0x4a>
 8006a20:	461a      	mov	r2, r3
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d1fb      	bne.n	8006a20 <_malloc_r+0xdc>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	6053      	str	r3, [r2, #4]
 8006a2c:	e7de      	b.n	80069ec <_malloc_r+0xa8>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	4630      	mov	r0, r6
 8006a34:	f000 f80c 	bl	8006a50 <__malloc_unlock>
 8006a38:	e794      	b.n	8006964 <_malloc_r+0x20>
 8006a3a:	6005      	str	r5, [r0, #0]
 8006a3c:	e7d6      	b.n	80069ec <_malloc_r+0xa8>
 8006a3e:	bf00      	nop
 8006a40:	20004c68 	.word	0x20004c68

08006a44 <__malloc_lock>:
 8006a44:	4801      	ldr	r0, [pc, #4]	@ (8006a4c <__malloc_lock+0x8>)
 8006a46:	f7ff bf00 	b.w	800684a <__retarget_lock_acquire_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	20004c60 	.word	0x20004c60

08006a50 <__malloc_unlock>:
 8006a50:	4801      	ldr	r0, [pc, #4]	@ (8006a58 <__malloc_unlock+0x8>)
 8006a52:	f7ff befb 	b.w	800684c <__retarget_lock_release_recursive>
 8006a56:	bf00      	nop
 8006a58:	20004c60 	.word	0x20004c60

08006a5c <__sfputc_r>:
 8006a5c:	6893      	ldr	r3, [r2, #8]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	b410      	push	{r4}
 8006a64:	6093      	str	r3, [r2, #8]
 8006a66:	da08      	bge.n	8006a7a <__sfputc_r+0x1e>
 8006a68:	6994      	ldr	r4, [r2, #24]
 8006a6a:	42a3      	cmp	r3, r4
 8006a6c:	db01      	blt.n	8006a72 <__sfputc_r+0x16>
 8006a6e:	290a      	cmp	r1, #10
 8006a70:	d103      	bne.n	8006a7a <__sfputc_r+0x1e>
 8006a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a76:	f7ff bd7c 	b.w	8006572 <__swbuf_r>
 8006a7a:	6813      	ldr	r3, [r2, #0]
 8006a7c:	1c58      	adds	r0, r3, #1
 8006a7e:	6010      	str	r0, [r2, #0]
 8006a80:	7019      	strb	r1, [r3, #0]
 8006a82:	4608      	mov	r0, r1
 8006a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <__sfputs_r>:
 8006a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	4614      	mov	r4, r2
 8006a92:	18d5      	adds	r5, r2, r3
 8006a94:	42ac      	cmp	r4, r5
 8006a96:	d101      	bne.n	8006a9c <__sfputs_r+0x12>
 8006a98:	2000      	movs	r0, #0
 8006a9a:	e007      	b.n	8006aac <__sfputs_r+0x22>
 8006a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa0:	463a      	mov	r2, r7
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f7ff ffda 	bl	8006a5c <__sfputc_r>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d1f3      	bne.n	8006a94 <__sfputs_r+0xa>
 8006aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ab0 <_vfiprintf_r>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	460d      	mov	r5, r1
 8006ab6:	b09d      	sub	sp, #116	@ 0x74
 8006ab8:	4614      	mov	r4, r2
 8006aba:	4698      	mov	r8, r3
 8006abc:	4606      	mov	r6, r0
 8006abe:	b118      	cbz	r0, 8006ac8 <_vfiprintf_r+0x18>
 8006ac0:	6a03      	ldr	r3, [r0, #32]
 8006ac2:	b90b      	cbnz	r3, 8006ac8 <_vfiprintf_r+0x18>
 8006ac4:	f7ff fc6c 	bl	80063a0 <__sinit>
 8006ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aca:	07d9      	lsls	r1, r3, #31
 8006acc:	d405      	bmi.n	8006ada <_vfiprintf_r+0x2a>
 8006ace:	89ab      	ldrh	r3, [r5, #12]
 8006ad0:	059a      	lsls	r2, r3, #22
 8006ad2:	d402      	bmi.n	8006ada <_vfiprintf_r+0x2a>
 8006ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ad6:	f7ff feb8 	bl	800684a <__retarget_lock_acquire_recursive>
 8006ada:	89ab      	ldrh	r3, [r5, #12]
 8006adc:	071b      	lsls	r3, r3, #28
 8006ade:	d501      	bpl.n	8006ae4 <_vfiprintf_r+0x34>
 8006ae0:	692b      	ldr	r3, [r5, #16]
 8006ae2:	b99b      	cbnz	r3, 8006b0c <_vfiprintf_r+0x5c>
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff fd82 	bl	80065f0 <__swsetup_r>
 8006aec:	b170      	cbz	r0, 8006b0c <_vfiprintf_r+0x5c>
 8006aee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006af0:	07dc      	lsls	r4, r3, #31
 8006af2:	d504      	bpl.n	8006afe <_vfiprintf_r+0x4e>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	b01d      	add	sp, #116	@ 0x74
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	89ab      	ldrh	r3, [r5, #12]
 8006b00:	0598      	lsls	r0, r3, #22
 8006b02:	d4f7      	bmi.n	8006af4 <_vfiprintf_r+0x44>
 8006b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b06:	f7ff fea1 	bl	800684c <__retarget_lock_release_recursive>
 8006b0a:	e7f3      	b.n	8006af4 <_vfiprintf_r+0x44>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b10:	2320      	movs	r3, #32
 8006b12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b1a:	2330      	movs	r3, #48	@ 0x30
 8006b1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ccc <_vfiprintf_r+0x21c>
 8006b20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b24:	f04f 0901 	mov.w	r9, #1
 8006b28:	4623      	mov	r3, r4
 8006b2a:	469a      	mov	sl, r3
 8006b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b30:	b10a      	cbz	r2, 8006b36 <_vfiprintf_r+0x86>
 8006b32:	2a25      	cmp	r2, #37	@ 0x25
 8006b34:	d1f9      	bne.n	8006b2a <_vfiprintf_r+0x7a>
 8006b36:	ebba 0b04 	subs.w	fp, sl, r4
 8006b3a:	d00b      	beq.n	8006b54 <_vfiprintf_r+0xa4>
 8006b3c:	465b      	mov	r3, fp
 8006b3e:	4622      	mov	r2, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	4630      	mov	r0, r6
 8006b44:	f7ff ffa1 	bl	8006a8a <__sfputs_r>
 8006b48:	3001      	adds	r0, #1
 8006b4a:	f000 80a7 	beq.w	8006c9c <_vfiprintf_r+0x1ec>
 8006b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b50:	445a      	add	r2, fp
 8006b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b54:	f89a 3000 	ldrb.w	r3, [sl]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 809f 	beq.w	8006c9c <_vfiprintf_r+0x1ec>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f04f 32ff 	mov.w	r2, #4294967295
 8006b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b68:	f10a 0a01 	add.w	sl, sl, #1
 8006b6c:	9304      	str	r3, [sp, #16]
 8006b6e:	9307      	str	r3, [sp, #28]
 8006b70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b74:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b76:	4654      	mov	r4, sl
 8006b78:	2205      	movs	r2, #5
 8006b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7e:	4853      	ldr	r0, [pc, #332]	@ (8006ccc <_vfiprintf_r+0x21c>)
 8006b80:	f7f9 fb46 	bl	8000210 <memchr>
 8006b84:	9a04      	ldr	r2, [sp, #16]
 8006b86:	b9d8      	cbnz	r0, 8006bc0 <_vfiprintf_r+0x110>
 8006b88:	06d1      	lsls	r1, r2, #27
 8006b8a:	bf44      	itt	mi
 8006b8c:	2320      	movmi	r3, #32
 8006b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b92:	0713      	lsls	r3, r2, #28
 8006b94:	bf44      	itt	mi
 8006b96:	232b      	movmi	r3, #43	@ 0x2b
 8006b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ba2:	d015      	beq.n	8006bd0 <_vfiprintf_r+0x120>
 8006ba4:	9a07      	ldr	r2, [sp, #28]
 8006ba6:	4654      	mov	r4, sl
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f04f 0c0a 	mov.w	ip, #10
 8006bae:	4621      	mov	r1, r4
 8006bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bb4:	3b30      	subs	r3, #48	@ 0x30
 8006bb6:	2b09      	cmp	r3, #9
 8006bb8:	d94b      	bls.n	8006c52 <_vfiprintf_r+0x1a2>
 8006bba:	b1b0      	cbz	r0, 8006bea <_vfiprintf_r+0x13a>
 8006bbc:	9207      	str	r2, [sp, #28]
 8006bbe:	e014      	b.n	8006bea <_vfiprintf_r+0x13a>
 8006bc0:	eba0 0308 	sub.w	r3, r0, r8
 8006bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	46a2      	mov	sl, r4
 8006bce:	e7d2      	b.n	8006b76 <_vfiprintf_r+0xc6>
 8006bd0:	9b03      	ldr	r3, [sp, #12]
 8006bd2:	1d19      	adds	r1, r3, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	9103      	str	r1, [sp, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfbb      	ittet	lt
 8006bdc:	425b      	neglt	r3, r3
 8006bde:	f042 0202 	orrlt.w	r2, r2, #2
 8006be2:	9307      	strge	r3, [sp, #28]
 8006be4:	9307      	strlt	r3, [sp, #28]
 8006be6:	bfb8      	it	lt
 8006be8:	9204      	strlt	r2, [sp, #16]
 8006bea:	7823      	ldrb	r3, [r4, #0]
 8006bec:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bee:	d10a      	bne.n	8006c06 <_vfiprintf_r+0x156>
 8006bf0:	7863      	ldrb	r3, [r4, #1]
 8006bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bf4:	d132      	bne.n	8006c5c <_vfiprintf_r+0x1ac>
 8006bf6:	9b03      	ldr	r3, [sp, #12]
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	9203      	str	r2, [sp, #12]
 8006bfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c02:	3402      	adds	r4, #2
 8006c04:	9305      	str	r3, [sp, #20]
 8006c06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cdc <_vfiprintf_r+0x22c>
 8006c0a:	7821      	ldrb	r1, [r4, #0]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	4650      	mov	r0, sl
 8006c10:	f7f9 fafe 	bl	8000210 <memchr>
 8006c14:	b138      	cbz	r0, 8006c26 <_vfiprintf_r+0x176>
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	eba0 000a 	sub.w	r0, r0, sl
 8006c1c:	2240      	movs	r2, #64	@ 0x40
 8006c1e:	4082      	lsls	r2, r0
 8006c20:	4313      	orrs	r3, r2
 8006c22:	3401      	adds	r4, #1
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2a:	4829      	ldr	r0, [pc, #164]	@ (8006cd0 <_vfiprintf_r+0x220>)
 8006c2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c30:	2206      	movs	r2, #6
 8006c32:	f7f9 faed 	bl	8000210 <memchr>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d03f      	beq.n	8006cba <_vfiprintf_r+0x20a>
 8006c3a:	4b26      	ldr	r3, [pc, #152]	@ (8006cd4 <_vfiprintf_r+0x224>)
 8006c3c:	bb1b      	cbnz	r3, 8006c86 <_vfiprintf_r+0x1d6>
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	3307      	adds	r3, #7
 8006c42:	f023 0307 	bic.w	r3, r3, #7
 8006c46:	3308      	adds	r3, #8
 8006c48:	9303      	str	r3, [sp, #12]
 8006c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4c:	443b      	add	r3, r7
 8006c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c50:	e76a      	b.n	8006b28 <_vfiprintf_r+0x78>
 8006c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c56:	460c      	mov	r4, r1
 8006c58:	2001      	movs	r0, #1
 8006c5a:	e7a8      	b.n	8006bae <_vfiprintf_r+0xfe>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	3401      	adds	r4, #1
 8006c60:	9305      	str	r3, [sp, #20]
 8006c62:	4619      	mov	r1, r3
 8006c64:	f04f 0c0a 	mov.w	ip, #10
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c6e:	3a30      	subs	r2, #48	@ 0x30
 8006c70:	2a09      	cmp	r2, #9
 8006c72:	d903      	bls.n	8006c7c <_vfiprintf_r+0x1cc>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0c6      	beq.n	8006c06 <_vfiprintf_r+0x156>
 8006c78:	9105      	str	r1, [sp, #20]
 8006c7a:	e7c4      	b.n	8006c06 <_vfiprintf_r+0x156>
 8006c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c80:	4604      	mov	r4, r0
 8006c82:	2301      	movs	r3, #1
 8006c84:	e7f0      	b.n	8006c68 <_vfiprintf_r+0x1b8>
 8006c86:	ab03      	add	r3, sp, #12
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4b12      	ldr	r3, [pc, #72]	@ (8006cd8 <_vfiprintf_r+0x228>)
 8006c8e:	a904      	add	r1, sp, #16
 8006c90:	4630      	mov	r0, r6
 8006c92:	f3af 8000 	nop.w
 8006c96:	4607      	mov	r7, r0
 8006c98:	1c78      	adds	r0, r7, #1
 8006c9a:	d1d6      	bne.n	8006c4a <_vfiprintf_r+0x19a>
 8006c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c9e:	07d9      	lsls	r1, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_vfiprintf_r+0x1fe>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	059a      	lsls	r2, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_vfiprintf_r+0x1fe>
 8006ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006caa:	f7ff fdcf 	bl	800684c <__retarget_lock_release_recursive>
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	065b      	lsls	r3, r3, #25
 8006cb2:	f53f af1f 	bmi.w	8006af4 <_vfiprintf_r+0x44>
 8006cb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cb8:	e71e      	b.n	8006af8 <_vfiprintf_r+0x48>
 8006cba:	ab03      	add	r3, sp, #12
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	462a      	mov	r2, r5
 8006cc0:	4b05      	ldr	r3, [pc, #20]	@ (8006cd8 <_vfiprintf_r+0x228>)
 8006cc2:	a904      	add	r1, sp, #16
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f000 f879 	bl	8006dbc <_printf_i>
 8006cca:	e7e4      	b.n	8006c96 <_vfiprintf_r+0x1e6>
 8006ccc:	080073e4 	.word	0x080073e4
 8006cd0:	080073ee 	.word	0x080073ee
 8006cd4:	00000000 	.word	0x00000000
 8006cd8:	08006a8b 	.word	0x08006a8b
 8006cdc:	080073ea 	.word	0x080073ea

08006ce0 <_printf_common>:
 8006ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	4698      	mov	r8, r3
 8006ce8:	688a      	ldr	r2, [r1, #8]
 8006cea:	690b      	ldr	r3, [r1, #16]
 8006cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	bfb8      	it	lt
 8006cf4:	4613      	movlt	r3, r2
 8006cf6:	6033      	str	r3, [r6, #0]
 8006cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cfc:	4607      	mov	r7, r0
 8006cfe:	460c      	mov	r4, r1
 8006d00:	b10a      	cbz	r2, 8006d06 <_printf_common+0x26>
 8006d02:	3301      	adds	r3, #1
 8006d04:	6033      	str	r3, [r6, #0]
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	0699      	lsls	r1, r3, #26
 8006d0a:	bf42      	ittt	mi
 8006d0c:	6833      	ldrmi	r3, [r6, #0]
 8006d0e:	3302      	addmi	r3, #2
 8006d10:	6033      	strmi	r3, [r6, #0]
 8006d12:	6825      	ldr	r5, [r4, #0]
 8006d14:	f015 0506 	ands.w	r5, r5, #6
 8006d18:	d106      	bne.n	8006d28 <_printf_common+0x48>
 8006d1a:	f104 0a19 	add.w	sl, r4, #25
 8006d1e:	68e3      	ldr	r3, [r4, #12]
 8006d20:	6832      	ldr	r2, [r6, #0]
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	42ab      	cmp	r3, r5
 8006d26:	dc26      	bgt.n	8006d76 <_printf_common+0x96>
 8006d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	3b00      	subs	r3, #0
 8006d30:	bf18      	it	ne
 8006d32:	2301      	movne	r3, #1
 8006d34:	0692      	lsls	r2, r2, #26
 8006d36:	d42b      	bmi.n	8006d90 <_printf_common+0xb0>
 8006d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	4638      	mov	r0, r7
 8006d40:	47c8      	blx	r9
 8006d42:	3001      	adds	r0, #1
 8006d44:	d01e      	beq.n	8006d84 <_printf_common+0xa4>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	6922      	ldr	r2, [r4, #16]
 8006d4a:	f003 0306 	and.w	r3, r3, #6
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	bf02      	ittt	eq
 8006d52:	68e5      	ldreq	r5, [r4, #12]
 8006d54:	6833      	ldreq	r3, [r6, #0]
 8006d56:	1aed      	subeq	r5, r5, r3
 8006d58:	68a3      	ldr	r3, [r4, #8]
 8006d5a:	bf0c      	ite	eq
 8006d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d60:	2500      	movne	r5, #0
 8006d62:	4293      	cmp	r3, r2
 8006d64:	bfc4      	itt	gt
 8006d66:	1a9b      	subgt	r3, r3, r2
 8006d68:	18ed      	addgt	r5, r5, r3
 8006d6a:	2600      	movs	r6, #0
 8006d6c:	341a      	adds	r4, #26
 8006d6e:	42b5      	cmp	r5, r6
 8006d70:	d11a      	bne.n	8006da8 <_printf_common+0xc8>
 8006d72:	2000      	movs	r0, #0
 8006d74:	e008      	b.n	8006d88 <_printf_common+0xa8>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4652      	mov	r2, sl
 8006d7a:	4641      	mov	r1, r8
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	47c8      	blx	r9
 8006d80:	3001      	adds	r0, #1
 8006d82:	d103      	bne.n	8006d8c <_printf_common+0xac>
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	e7c6      	b.n	8006d1e <_printf_common+0x3e>
 8006d90:	18e1      	adds	r1, r4, r3
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	2030      	movs	r0, #48	@ 0x30
 8006d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d9a:	4422      	add	r2, r4
 8006d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006da4:	3302      	adds	r3, #2
 8006da6:	e7c7      	b.n	8006d38 <_printf_common+0x58>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4622      	mov	r2, r4
 8006dac:	4641      	mov	r1, r8
 8006dae:	4638      	mov	r0, r7
 8006db0:	47c8      	blx	r9
 8006db2:	3001      	adds	r0, #1
 8006db4:	d0e6      	beq.n	8006d84 <_printf_common+0xa4>
 8006db6:	3601      	adds	r6, #1
 8006db8:	e7d9      	b.n	8006d6e <_printf_common+0x8e>
	...

08006dbc <_printf_i>:
 8006dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	7e0f      	ldrb	r7, [r1, #24]
 8006dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dc4:	2f78      	cmp	r7, #120	@ 0x78
 8006dc6:	4691      	mov	r9, r2
 8006dc8:	4680      	mov	r8, r0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	469a      	mov	sl, r3
 8006dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dd2:	d807      	bhi.n	8006de4 <_printf_i+0x28>
 8006dd4:	2f62      	cmp	r7, #98	@ 0x62
 8006dd6:	d80a      	bhi.n	8006dee <_printf_i+0x32>
 8006dd8:	2f00      	cmp	r7, #0
 8006dda:	f000 80d1 	beq.w	8006f80 <_printf_i+0x1c4>
 8006dde:	2f58      	cmp	r7, #88	@ 0x58
 8006de0:	f000 80b8 	beq.w	8006f54 <_printf_i+0x198>
 8006de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dec:	e03a      	b.n	8006e64 <_printf_i+0xa8>
 8006dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006df2:	2b15      	cmp	r3, #21
 8006df4:	d8f6      	bhi.n	8006de4 <_printf_i+0x28>
 8006df6:	a101      	add	r1, pc, #4	@ (adr r1, 8006dfc <_printf_i+0x40>)
 8006df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dfc:	08006e55 	.word	0x08006e55
 8006e00:	08006e69 	.word	0x08006e69
 8006e04:	08006de5 	.word	0x08006de5
 8006e08:	08006de5 	.word	0x08006de5
 8006e0c:	08006de5 	.word	0x08006de5
 8006e10:	08006de5 	.word	0x08006de5
 8006e14:	08006e69 	.word	0x08006e69
 8006e18:	08006de5 	.word	0x08006de5
 8006e1c:	08006de5 	.word	0x08006de5
 8006e20:	08006de5 	.word	0x08006de5
 8006e24:	08006de5 	.word	0x08006de5
 8006e28:	08006f67 	.word	0x08006f67
 8006e2c:	08006e93 	.word	0x08006e93
 8006e30:	08006f21 	.word	0x08006f21
 8006e34:	08006de5 	.word	0x08006de5
 8006e38:	08006de5 	.word	0x08006de5
 8006e3c:	08006f89 	.word	0x08006f89
 8006e40:	08006de5 	.word	0x08006de5
 8006e44:	08006e93 	.word	0x08006e93
 8006e48:	08006de5 	.word	0x08006de5
 8006e4c:	08006de5 	.word	0x08006de5
 8006e50:	08006f29 	.word	0x08006f29
 8006e54:	6833      	ldr	r3, [r6, #0]
 8006e56:	1d1a      	adds	r2, r3, #4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6032      	str	r2, [r6, #0]
 8006e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e64:	2301      	movs	r3, #1
 8006e66:	e09c      	b.n	8006fa2 <_printf_i+0x1e6>
 8006e68:	6833      	ldr	r3, [r6, #0]
 8006e6a:	6820      	ldr	r0, [r4, #0]
 8006e6c:	1d19      	adds	r1, r3, #4
 8006e6e:	6031      	str	r1, [r6, #0]
 8006e70:	0606      	lsls	r6, r0, #24
 8006e72:	d501      	bpl.n	8006e78 <_printf_i+0xbc>
 8006e74:	681d      	ldr	r5, [r3, #0]
 8006e76:	e003      	b.n	8006e80 <_printf_i+0xc4>
 8006e78:	0645      	lsls	r5, r0, #25
 8006e7a:	d5fb      	bpl.n	8006e74 <_printf_i+0xb8>
 8006e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e80:	2d00      	cmp	r5, #0
 8006e82:	da03      	bge.n	8006e8c <_printf_i+0xd0>
 8006e84:	232d      	movs	r3, #45	@ 0x2d
 8006e86:	426d      	negs	r5, r5
 8006e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e8c:	4858      	ldr	r0, [pc, #352]	@ (8006ff0 <_printf_i+0x234>)
 8006e8e:	230a      	movs	r3, #10
 8006e90:	e011      	b.n	8006eb6 <_printf_i+0xfa>
 8006e92:	6821      	ldr	r1, [r4, #0]
 8006e94:	6833      	ldr	r3, [r6, #0]
 8006e96:	0608      	lsls	r0, r1, #24
 8006e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e9c:	d402      	bmi.n	8006ea4 <_printf_i+0xe8>
 8006e9e:	0649      	lsls	r1, r1, #25
 8006ea0:	bf48      	it	mi
 8006ea2:	b2ad      	uxthmi	r5, r5
 8006ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ea6:	4852      	ldr	r0, [pc, #328]	@ (8006ff0 <_printf_i+0x234>)
 8006ea8:	6033      	str	r3, [r6, #0]
 8006eaa:	bf14      	ite	ne
 8006eac:	230a      	movne	r3, #10
 8006eae:	2308      	moveq	r3, #8
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eb6:	6866      	ldr	r6, [r4, #4]
 8006eb8:	60a6      	str	r6, [r4, #8]
 8006eba:	2e00      	cmp	r6, #0
 8006ebc:	db05      	blt.n	8006eca <_printf_i+0x10e>
 8006ebe:	6821      	ldr	r1, [r4, #0]
 8006ec0:	432e      	orrs	r6, r5
 8006ec2:	f021 0104 	bic.w	r1, r1, #4
 8006ec6:	6021      	str	r1, [r4, #0]
 8006ec8:	d04b      	beq.n	8006f62 <_printf_i+0x1a6>
 8006eca:	4616      	mov	r6, r2
 8006ecc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ed0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ed4:	5dc7      	ldrb	r7, [r0, r7]
 8006ed6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eda:	462f      	mov	r7, r5
 8006edc:	42bb      	cmp	r3, r7
 8006ede:	460d      	mov	r5, r1
 8006ee0:	d9f4      	bls.n	8006ecc <_printf_i+0x110>
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d10b      	bne.n	8006efe <_printf_i+0x142>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	07df      	lsls	r7, r3, #31
 8006eea:	d508      	bpl.n	8006efe <_printf_i+0x142>
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	6861      	ldr	r1, [r4, #4]
 8006ef0:	4299      	cmp	r1, r3
 8006ef2:	bfde      	ittt	le
 8006ef4:	2330      	movle	r3, #48	@ 0x30
 8006ef6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006efa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006efe:	1b92      	subs	r2, r2, r6
 8006f00:	6122      	str	r2, [r4, #16]
 8006f02:	f8cd a000 	str.w	sl, [sp]
 8006f06:	464b      	mov	r3, r9
 8006f08:	aa03      	add	r2, sp, #12
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	f7ff fee7 	bl	8006ce0 <_printf_common>
 8006f12:	3001      	adds	r0, #1
 8006f14:	d14a      	bne.n	8006fac <_printf_i+0x1f0>
 8006f16:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1a:	b004      	add	sp, #16
 8006f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	f043 0320 	orr.w	r3, r3, #32
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	4832      	ldr	r0, [pc, #200]	@ (8006ff4 <_printf_i+0x238>)
 8006f2a:	2778      	movs	r7, #120	@ 0x78
 8006f2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	6831      	ldr	r1, [r6, #0]
 8006f34:	061f      	lsls	r7, r3, #24
 8006f36:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f3a:	d402      	bmi.n	8006f42 <_printf_i+0x186>
 8006f3c:	065f      	lsls	r7, r3, #25
 8006f3e:	bf48      	it	mi
 8006f40:	b2ad      	uxthmi	r5, r5
 8006f42:	6031      	str	r1, [r6, #0]
 8006f44:	07d9      	lsls	r1, r3, #31
 8006f46:	bf44      	itt	mi
 8006f48:	f043 0320 	orrmi.w	r3, r3, #32
 8006f4c:	6023      	strmi	r3, [r4, #0]
 8006f4e:	b11d      	cbz	r5, 8006f58 <_printf_i+0x19c>
 8006f50:	2310      	movs	r3, #16
 8006f52:	e7ad      	b.n	8006eb0 <_printf_i+0xf4>
 8006f54:	4826      	ldr	r0, [pc, #152]	@ (8006ff0 <_printf_i+0x234>)
 8006f56:	e7e9      	b.n	8006f2c <_printf_i+0x170>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	f023 0320 	bic.w	r3, r3, #32
 8006f5e:	6023      	str	r3, [r4, #0]
 8006f60:	e7f6      	b.n	8006f50 <_printf_i+0x194>
 8006f62:	4616      	mov	r6, r2
 8006f64:	e7bd      	b.n	8006ee2 <_printf_i+0x126>
 8006f66:	6833      	ldr	r3, [r6, #0]
 8006f68:	6825      	ldr	r5, [r4, #0]
 8006f6a:	6961      	ldr	r1, [r4, #20]
 8006f6c:	1d18      	adds	r0, r3, #4
 8006f6e:	6030      	str	r0, [r6, #0]
 8006f70:	062e      	lsls	r6, r5, #24
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	d501      	bpl.n	8006f7a <_printf_i+0x1be>
 8006f76:	6019      	str	r1, [r3, #0]
 8006f78:	e002      	b.n	8006f80 <_printf_i+0x1c4>
 8006f7a:	0668      	lsls	r0, r5, #25
 8006f7c:	d5fb      	bpl.n	8006f76 <_printf_i+0x1ba>
 8006f7e:	8019      	strh	r1, [r3, #0]
 8006f80:	2300      	movs	r3, #0
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	4616      	mov	r6, r2
 8006f86:	e7bc      	b.n	8006f02 <_printf_i+0x146>
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	1d1a      	adds	r2, r3, #4
 8006f8c:	6032      	str	r2, [r6, #0]
 8006f8e:	681e      	ldr	r6, [r3, #0]
 8006f90:	6862      	ldr	r2, [r4, #4]
 8006f92:	2100      	movs	r1, #0
 8006f94:	4630      	mov	r0, r6
 8006f96:	f7f9 f93b 	bl	8000210 <memchr>
 8006f9a:	b108      	cbz	r0, 8006fa0 <_printf_i+0x1e4>
 8006f9c:	1b80      	subs	r0, r0, r6
 8006f9e:	6060      	str	r0, [r4, #4]
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006faa:	e7aa      	b.n	8006f02 <_printf_i+0x146>
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	4632      	mov	r2, r6
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	47d0      	blx	sl
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d0ad      	beq.n	8006f16 <_printf_i+0x15a>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	079b      	lsls	r3, r3, #30
 8006fbe:	d413      	bmi.n	8006fe8 <_printf_i+0x22c>
 8006fc0:	68e0      	ldr	r0, [r4, #12]
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	4298      	cmp	r0, r3
 8006fc6:	bfb8      	it	lt
 8006fc8:	4618      	movlt	r0, r3
 8006fca:	e7a6      	b.n	8006f1a <_printf_i+0x15e>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4632      	mov	r2, r6
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	47d0      	blx	sl
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d09d      	beq.n	8006f16 <_printf_i+0x15a>
 8006fda:	3501      	adds	r5, #1
 8006fdc:	68e3      	ldr	r3, [r4, #12]
 8006fde:	9903      	ldr	r1, [sp, #12]
 8006fe0:	1a5b      	subs	r3, r3, r1
 8006fe2:	42ab      	cmp	r3, r5
 8006fe4:	dcf2      	bgt.n	8006fcc <_printf_i+0x210>
 8006fe6:	e7eb      	b.n	8006fc0 <_printf_i+0x204>
 8006fe8:	2500      	movs	r5, #0
 8006fea:	f104 0619 	add.w	r6, r4, #25
 8006fee:	e7f5      	b.n	8006fdc <_printf_i+0x220>
 8006ff0:	080073f5 	.word	0x080073f5
 8006ff4:	08007406 	.word	0x08007406

08006ff8 <__sflush_r>:
 8006ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007000:	0716      	lsls	r6, r2, #28
 8007002:	4605      	mov	r5, r0
 8007004:	460c      	mov	r4, r1
 8007006:	d454      	bmi.n	80070b2 <__sflush_r+0xba>
 8007008:	684b      	ldr	r3, [r1, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dc02      	bgt.n	8007014 <__sflush_r+0x1c>
 800700e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	dd48      	ble.n	80070a6 <__sflush_r+0xae>
 8007014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007016:	2e00      	cmp	r6, #0
 8007018:	d045      	beq.n	80070a6 <__sflush_r+0xae>
 800701a:	2300      	movs	r3, #0
 800701c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007020:	682f      	ldr	r7, [r5, #0]
 8007022:	6a21      	ldr	r1, [r4, #32]
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	d030      	beq.n	800708a <__sflush_r+0x92>
 8007028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	0759      	lsls	r1, r3, #29
 800702e:	d505      	bpl.n	800703c <__sflush_r+0x44>
 8007030:	6863      	ldr	r3, [r4, #4]
 8007032:	1ad2      	subs	r2, r2, r3
 8007034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007036:	b10b      	cbz	r3, 800703c <__sflush_r+0x44>
 8007038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800703a:	1ad2      	subs	r2, r2, r3
 800703c:	2300      	movs	r3, #0
 800703e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007040:	6a21      	ldr	r1, [r4, #32]
 8007042:	4628      	mov	r0, r5
 8007044:	47b0      	blx	r6
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	d106      	bne.n	800705a <__sflush_r+0x62>
 800704c:	6829      	ldr	r1, [r5, #0]
 800704e:	291d      	cmp	r1, #29
 8007050:	d82b      	bhi.n	80070aa <__sflush_r+0xb2>
 8007052:	4a2a      	ldr	r2, [pc, #168]	@ (80070fc <__sflush_r+0x104>)
 8007054:	40ca      	lsrs	r2, r1
 8007056:	07d6      	lsls	r6, r2, #31
 8007058:	d527      	bpl.n	80070aa <__sflush_r+0xb2>
 800705a:	2200      	movs	r2, #0
 800705c:	6062      	str	r2, [r4, #4]
 800705e:	04d9      	lsls	r1, r3, #19
 8007060:	6922      	ldr	r2, [r4, #16]
 8007062:	6022      	str	r2, [r4, #0]
 8007064:	d504      	bpl.n	8007070 <__sflush_r+0x78>
 8007066:	1c42      	adds	r2, r0, #1
 8007068:	d101      	bne.n	800706e <__sflush_r+0x76>
 800706a:	682b      	ldr	r3, [r5, #0]
 800706c:	b903      	cbnz	r3, 8007070 <__sflush_r+0x78>
 800706e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007072:	602f      	str	r7, [r5, #0]
 8007074:	b1b9      	cbz	r1, 80070a6 <__sflush_r+0xae>
 8007076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800707a:	4299      	cmp	r1, r3
 800707c:	d002      	beq.n	8007084 <__sflush_r+0x8c>
 800707e:	4628      	mov	r0, r5
 8007080:	f7ff fbf4 	bl	800686c <_free_r>
 8007084:	2300      	movs	r3, #0
 8007086:	6363      	str	r3, [r4, #52]	@ 0x34
 8007088:	e00d      	b.n	80070a6 <__sflush_r+0xae>
 800708a:	2301      	movs	r3, #1
 800708c:	4628      	mov	r0, r5
 800708e:	47b0      	blx	r6
 8007090:	4602      	mov	r2, r0
 8007092:	1c50      	adds	r0, r2, #1
 8007094:	d1c9      	bne.n	800702a <__sflush_r+0x32>
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0c6      	beq.n	800702a <__sflush_r+0x32>
 800709c:	2b1d      	cmp	r3, #29
 800709e:	d001      	beq.n	80070a4 <__sflush_r+0xac>
 80070a0:	2b16      	cmp	r3, #22
 80070a2:	d11e      	bne.n	80070e2 <__sflush_r+0xea>
 80070a4:	602f      	str	r7, [r5, #0]
 80070a6:	2000      	movs	r0, #0
 80070a8:	e022      	b.n	80070f0 <__sflush_r+0xf8>
 80070aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ae:	b21b      	sxth	r3, r3
 80070b0:	e01b      	b.n	80070ea <__sflush_r+0xf2>
 80070b2:	690f      	ldr	r7, [r1, #16]
 80070b4:	2f00      	cmp	r7, #0
 80070b6:	d0f6      	beq.n	80070a6 <__sflush_r+0xae>
 80070b8:	0793      	lsls	r3, r2, #30
 80070ba:	680e      	ldr	r6, [r1, #0]
 80070bc:	bf08      	it	eq
 80070be:	694b      	ldreq	r3, [r1, #20]
 80070c0:	600f      	str	r7, [r1, #0]
 80070c2:	bf18      	it	ne
 80070c4:	2300      	movne	r3, #0
 80070c6:	eba6 0807 	sub.w	r8, r6, r7
 80070ca:	608b      	str	r3, [r1, #8]
 80070cc:	f1b8 0f00 	cmp.w	r8, #0
 80070d0:	dde9      	ble.n	80070a6 <__sflush_r+0xae>
 80070d2:	6a21      	ldr	r1, [r4, #32]
 80070d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070d6:	4643      	mov	r3, r8
 80070d8:	463a      	mov	r2, r7
 80070da:	4628      	mov	r0, r5
 80070dc:	47b0      	blx	r6
 80070de:	2800      	cmp	r0, #0
 80070e0:	dc08      	bgt.n	80070f4 <__sflush_r+0xfc>
 80070e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f4:	4407      	add	r7, r0
 80070f6:	eba8 0800 	sub.w	r8, r8, r0
 80070fa:	e7e7      	b.n	80070cc <__sflush_r+0xd4>
 80070fc:	20400001 	.word	0x20400001

08007100 <_fflush_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	690b      	ldr	r3, [r1, #16]
 8007104:	4605      	mov	r5, r0
 8007106:	460c      	mov	r4, r1
 8007108:	b913      	cbnz	r3, 8007110 <_fflush_r+0x10>
 800710a:	2500      	movs	r5, #0
 800710c:	4628      	mov	r0, r5
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	b118      	cbz	r0, 800711a <_fflush_r+0x1a>
 8007112:	6a03      	ldr	r3, [r0, #32]
 8007114:	b90b      	cbnz	r3, 800711a <_fflush_r+0x1a>
 8007116:	f7ff f943 	bl	80063a0 <__sinit>
 800711a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f3      	beq.n	800710a <_fflush_r+0xa>
 8007122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007124:	07d0      	lsls	r0, r2, #31
 8007126:	d404      	bmi.n	8007132 <_fflush_r+0x32>
 8007128:	0599      	lsls	r1, r3, #22
 800712a:	d402      	bmi.n	8007132 <_fflush_r+0x32>
 800712c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800712e:	f7ff fb8c 	bl	800684a <__retarget_lock_acquire_recursive>
 8007132:	4628      	mov	r0, r5
 8007134:	4621      	mov	r1, r4
 8007136:	f7ff ff5f 	bl	8006ff8 <__sflush_r>
 800713a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800713c:	07da      	lsls	r2, r3, #31
 800713e:	4605      	mov	r5, r0
 8007140:	d4e4      	bmi.n	800710c <_fflush_r+0xc>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	059b      	lsls	r3, r3, #22
 8007146:	d4e1      	bmi.n	800710c <_fflush_r+0xc>
 8007148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800714a:	f7ff fb7f 	bl	800684c <__retarget_lock_release_recursive>
 800714e:	e7dd      	b.n	800710c <_fflush_r+0xc>

08007150 <__swhatbuf_r>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	460c      	mov	r4, r1
 8007154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007158:	2900      	cmp	r1, #0
 800715a:	b096      	sub	sp, #88	@ 0x58
 800715c:	4615      	mov	r5, r2
 800715e:	461e      	mov	r6, r3
 8007160:	da0d      	bge.n	800717e <__swhatbuf_r+0x2e>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007168:	f04f 0100 	mov.w	r1, #0
 800716c:	bf14      	ite	ne
 800716e:	2340      	movne	r3, #64	@ 0x40
 8007170:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007174:	2000      	movs	r0, #0
 8007176:	6031      	str	r1, [r6, #0]
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	b016      	add	sp, #88	@ 0x58
 800717c:	bd70      	pop	{r4, r5, r6, pc}
 800717e:	466a      	mov	r2, sp
 8007180:	f000 f848 	bl	8007214 <_fstat_r>
 8007184:	2800      	cmp	r0, #0
 8007186:	dbec      	blt.n	8007162 <__swhatbuf_r+0x12>
 8007188:	9901      	ldr	r1, [sp, #4]
 800718a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800718e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007192:	4259      	negs	r1, r3
 8007194:	4159      	adcs	r1, r3
 8007196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800719a:	e7eb      	b.n	8007174 <__swhatbuf_r+0x24>

0800719c <__smakebuf_r>:
 800719c:	898b      	ldrh	r3, [r1, #12]
 800719e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071a0:	079d      	lsls	r5, r3, #30
 80071a2:	4606      	mov	r6, r0
 80071a4:	460c      	mov	r4, r1
 80071a6:	d507      	bpl.n	80071b8 <__smakebuf_r+0x1c>
 80071a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	6123      	str	r3, [r4, #16]
 80071b0:	2301      	movs	r3, #1
 80071b2:	6163      	str	r3, [r4, #20]
 80071b4:	b003      	add	sp, #12
 80071b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b8:	ab01      	add	r3, sp, #4
 80071ba:	466a      	mov	r2, sp
 80071bc:	f7ff ffc8 	bl	8007150 <__swhatbuf_r>
 80071c0:	9f00      	ldr	r7, [sp, #0]
 80071c2:	4605      	mov	r5, r0
 80071c4:	4639      	mov	r1, r7
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff fbbc 	bl	8006944 <_malloc_r>
 80071cc:	b948      	cbnz	r0, 80071e2 <__smakebuf_r+0x46>
 80071ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d2:	059a      	lsls	r2, r3, #22
 80071d4:	d4ee      	bmi.n	80071b4 <__smakebuf_r+0x18>
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	f043 0302 	orr.w	r3, r3, #2
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	e7e2      	b.n	80071a8 <__smakebuf_r+0xc>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	6020      	str	r0, [r4, #0]
 80071e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ea:	81a3      	strh	r3, [r4, #12]
 80071ec:	9b01      	ldr	r3, [sp, #4]
 80071ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071f2:	b15b      	cbz	r3, 800720c <__smakebuf_r+0x70>
 80071f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071f8:	4630      	mov	r0, r6
 80071fa:	f000 f81d 	bl	8007238 <_isatty_r>
 80071fe:	b128      	cbz	r0, 800720c <__smakebuf_r+0x70>
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	f023 0303 	bic.w	r3, r3, #3
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	431d      	orrs	r5, r3
 8007210:	81a5      	strh	r5, [r4, #12]
 8007212:	e7cf      	b.n	80071b4 <__smakebuf_r+0x18>

08007214 <_fstat_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d07      	ldr	r5, [pc, #28]	@ (8007234 <_fstat_r+0x20>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	f7f9 fd6e 	bl	8000d02 <_fstat>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d102      	bne.n	8007230 <_fstat_r+0x1c>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	b103      	cbz	r3, 8007230 <_fstat_r+0x1c>
 800722e:	6023      	str	r3, [r4, #0]
 8007230:	bd38      	pop	{r3, r4, r5, pc}
 8007232:	bf00      	nop
 8007234:	20004c5c 	.word	0x20004c5c

08007238 <_isatty_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d06      	ldr	r5, [pc, #24]	@ (8007254 <_isatty_r+0x1c>)
 800723c:	2300      	movs	r3, #0
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7f9 fd6d 	bl	8000d22 <_isatty>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_isatty_r+0x1a>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_isatty_r+0x1a>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	20004c5c 	.word	0x20004c5c

08007258 <_sbrk_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d06      	ldr	r5, [pc, #24]	@ (8007274 <_sbrk_r+0x1c>)
 800725c:	2300      	movs	r3, #0
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	f7f9 fd76 	bl	8000d54 <_sbrk>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	d102      	bne.n	8007272 <_sbrk_r+0x1a>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	b103      	cbz	r3, 8007272 <_sbrk_r+0x1a>
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	bd38      	pop	{r3, r4, r5, pc}
 8007274:	20004c5c 	.word	0x20004c5c

08007278 <_init>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr

08007284 <_fini>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	bf00      	nop
 8007288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728a:	bc08      	pop	{r3}
 800728c:	469e      	mov	lr, r3
 800728e:	4770      	bx	lr
